[
    {
        "chart_type": "bar_chart",
        "imgname": "bar_87",
        "img": "./bar_chart/png/bar_87.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee salaries and benefits in 2021",
        "csv": "Employee \\t Salary(USD) \\t Benefits(USD) \\n John \\t 5000 \\t 1400 \\n Sarah \\t 4500 \\t 1300 \\n David \\t 4600 \\t 1200 \\n Jane \\t 4200 \\t 1100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the salaries and benefits of four employees in 2021. John earns a salary of $5000 with benefits of $1400. Sarah's salary is $4500, accompanied by $1300 in benefits. David receives a salary of $4600 and benefits totaling $1200. Lastly, Jane has a salary of $4200 with benefits of $1100."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['John',5000,1400],['Sarah',4500,1300],['David',4600,1200],['Jane',4200,1100]]\nEmployee = [i[0] for i in data]\nSalary = [i[1] for i in data]\nBenefits = [i[2] for i in data]\n\nfig = plt.figure(figsize=(10,5))\n\nax = fig.add_subplot(1,1,1) \nax.bar(Employee, Salary, color = 'b', bottom=Benefits, width=0.5, label=\"Salary\")\nax.bar(Employee, Benefits, color = 'r', width=0.5, label=\"Benefits\")\n\nax.set_xticks(Employee)\nplt.xticks(rotation=20, wrap=True)\nax.set_title(\"Employee salaries and benefits in 2021\")\nax.set_xlabel('Employee')\nax.set_ylabel('Amount(USD)')\nax.legend()\n\nplt.tight_layout()\nplt.savefig('bar chart/png/235.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "How much more is John's salary compared to Jane's?",
            "output": "$800"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_395",
        "img": "./bar_chart/png/bar_395.png",
        "topic": "Business and Finance",
        "title": " GDP and Inflation Rate of Four Countries in 2021",
        "csv": "Country \\t GDP(thousand billion) \\t Inflation Rate \\n USA \\t 21 \\t 2.4 \\n UK \\t 3 \\t 1.6 \\n Germany \\t 4.5 \\t 1.1 \\n France \\t 6 \\t 1.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the GDP (in thousand billion) and inflation rate for four countries in 2021. The USA has a GDP of 21 thousand billion with an inflation rate of 2.4%, followed by France with a GDP of 6 thousand billion and an inflation rate of 1.5%. Germany's economy is reflected with a GDP of 4.5 thousand billion and the lowest inflation rate of 1.1%, while the UK has a GDP of 3 thousand billion with an inflation rate of 1.6%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(9,5))\nax = plt.subplot()\nax.bar(['USA', 'UK', 'Germany', 'France'], [21, 3, 4.5, 6], label='GDP(thousand billion)', width=0.6)\nax.bar(['USA', 'UK', 'Germany', 'France'], [2.4, 1.6, 1.1, 1.5], label='Inflation Rate', bottom=[21, 3, 4.5, 6], width=0.6)\nax.legend(loc='upper center')\nplt.title('GDP and Inflation Rate of Four Countries in 2021')\nplt.xticks(rotation=45, wrap=True)\nplt.tight_layout()\nplt.savefig('bar_395.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest GDP among the listed countries in 2021?",
            "output": "USA"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_279",
        "img": "./bar_chart/png/bar_279.png",
        "topic": "Tourism and Hospitality",
        "title": " Number of hotels, restaurants, and tourists in four countries in 2021",
        "csv": "Country \\t Hotels \\t Restaurants \\t Tourists(hundred) \\n USA \\t 1000 \\t 500 \\t 200 \\n UK \\t 800 \\t 600 \\t 180 \\n Germany \\t 900 \\t 700 \\t 190 \\n France \\t 1100 \\t 600 \\t 170 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the number of hotels, restaurants, and tourists (in hundreds) across four countries for the year 2021. The dataset includes the USA with 1000 hotels, 500 restaurants, and 20,000 tourists, the UK with 800 hotels, 600 restaurants, and 18,000 tourists. Germany features 900 hotels, 700 restaurants, and 19,000 tourists, and France leads with 1100 hotels, 600 restaurants, and 17,000 tourists."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm\nplt.figure(figsize=(10,6)) \nax = plt.subplot()\nax.bar(['USA','UK','Germany','France'],[1000,800,900,1100], width=0.3, label='Hotels', color='#60A3BC', bottom=[500,600,700,600])\nax.bar(['USA','UK','Germany','France'],[500,600,700,600], width=0.3, label='Restaurants', color='#F7BB41', bottom=[200,180,190,170])\nax.bar(['USA','UK','Germany','France'],[200,180,190,170], width=0.3, label='Tourists(hundred)', color='#F3715C')\nax.set_title('Number of hotels, restaurants, and tourists in four countries in 2021')\nax.set_xlabel('Country')\nax.set_ylabel('Number')\nax.legend(loc='upper left', fontsize=12)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.savefig('bar_279.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more hotels are there in France compared to the USA?",
            "output": "100"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_185",
        "img": "./bar_chart/png/bar_185.png",
        "topic": "Technology and the Internet",
        "title": " Number of internet and smartphone users in four countries in 2021",
        "csv": "Country \\t Internet Users(million) \\t Smartphone Users(million) \\n USA \\t 350 \\t 280 \\n UK \\t 60 \\t 50 \\n Germany \\t 80 \\t 70 \\n France \\t 70 \\t 60 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of internet and smartphone users in millions across four countries for the year 2021. In the USA, there are 350 million internet users and 280 million smartphone users. The UK has 60 million internet users compared to 50 million smartphone users. Germany shows a count of 80 million internet users and 70 million smartphone users. France has 70 million internet users and 60 million smartphone users."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate data\ncountry = np.array(['USA', 'UK', 'Germany', 'France'])\ninternet_users = np.array([350, 60, 80, 70])\nsmartphone_users = np.array([280, 50, 70, 60])\n\n# Generate figure\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Plot bar chart\nax.bar(country, internet_users, label='Internet Users(million)', width=0.4)\nax.bar(country, smartphone_users, bottom=internet_users, label='Smartphone Users(million)', width=0.4)\n\n# Add title and labels\nax.set_title('Number of internet and smartphone users in four countries in 2021')\nax.set_xlabel('Country')\nax.set_ylabel('Number of users(million)')\n\n# Set xticks and rotate\nax.set_xticks(country)\nax.set_xticklabels(country, rotation=45, ha='right', wrap=True)\n\n# Set legend\nax.legend(loc='upper right')\n\n# Set background grid\nplt.grid(linestyle='--')\n\n# Tight layout\nplt.tight_layout()\n\n# Save figure\nplt.savefig('bar chart/png/83.png')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more internet users are there in the USA compared to Germany?",
            "output": "270 million"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_258",
        "img": "./bar_chart/png/bar_258.png",
        "topic": "Social Media and the Web",
        "title": " Number of websites and social media users in four countries in 2021",
        "csv": "Country \\t Websites \\t Social Media Users \\n USA \\t 200 \\t 450 Million \\n UK \\t 150 \\t 400 Million \\n Germany \\t 180 \\t 320 Million \\n France \\t 170 \\t 250 Million \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of websites and the count of social media users across four countries in 2021. The USA is reflected with 200 websites and 450 million social media users. The UK follows with 150 websites and 400 million social media users. Germany has 180 websites and 320 million users, while France shows 170 websites and 250 million social media users."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20, 10))\nax = plt.subplot()\nax.bar([\"USA\", \"UK\", \"Germany\", \"France\"], [200, 150, 180, 170], width=0.4, label=\"Websites\", color='#0099cc')\nax.bar([\"USA\", \"UK\", \"Germany\", \"France\"], [450, 400, 320, 250], width=0.4, bottom=[200, 150, 180, 170], label=\"Social Media Users\", color='#ff9933')\n\nplt.legend(loc=\"upper left\", fontsize=14)\nplt.title(label=\"Number of websites and social media users in four countries in 2021\", fontsize=20)\nplt.xticks(rotation=45, fontsize=15)\n\nplt.tight_layout()\nplt.savefig(\"bar chart/png/58.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the least number of websites?",
            "output": "France"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_400",
        "img": "./bar_chart/png/bar_400.png",
        "topic": "Retail and E-commerce",
        "title": " Number of Retail and Online Stores in four countries in 2021",
        "csv": "Country \\t Retail Stores \\t Online Stores \\n USA \\t 500 \\t 1500 \\n UK \\t 400 \\t 1200 \\n Germany \\t 300 \\t 1000 \\n France \\t 400 \\t 1300 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the number of retail and online stores in four countries for the year 2021. The data shows that the USA has 500 retail stores and 1500 online stores, the UK has 400 retail stores and 1200 online stores, Germany with 300 retail stores and 1000 online stores, and France has 400 retail stores and 1300 online stores."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data\ncountry = ['USA', 'UK', 'Germany', 'France']\nretail_stores = [500, 400, 300, 400]\nonline_stores = [1500, 1200, 1000, 1300]\n\n# create figure\nfig = plt.figure(figsize=(7,5))\nax = fig.add_subplot()\n\n# draw bar chart\nx = np.arange(len(country))\nax.bar(x - 0.3/2, retail_stores, 0.3, label='Retail Stores')\nax.bar(x + 0.3/2, online_stores, 0.3, label='Online Stores')\n\n# set ticks\nax.set_xticks(x)\nax.set_xticklabels(country, rotation=45, fontsize=12, wrap=True)\n\n# add title and legend\nax.set_title('Number of Retail and Online Stores in four countries in 2021')\nax.legend()\n\n# save img\nplt.tight_layout()\nplt.savefig('bar chart/png/289.png')\n\n# clear figure\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the least number of retail stores?",
            "output": "Germany"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_254",
        "img": "./bar_chart/png/bar_254.png",
        "topic": "Science and Engineering",
        "title": " Number of inventions and research papers from 2020 to 2023",
        "csv": "Year \\t Inventions \\t Research papers \\n 2020 \\t 180 \\t 2500 \\n 2021 \\t 220 \\t 3000 \\n 2022 \\t 240 \\t 3500 \\n 2023 \\t 280 \\t 4000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the annual increase in the number of inventions and research papers from 2020 to 2023. In 2020, there were 180 inventions and 2500 research papers. The following year saw an increase to 220 inventions and 3000 research papers. The trend continued upward in 2022, with 240 inventions and 3500 research papers. A further increase is observed in 2023, with 280 inventions and 4000 research papers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [[2020,180,2500],\n        [2021,220,3000],\n        [2022,240,3500],\n        [2023,280,4000]]\n\nyears= [row[0] for row in data]\ninventions = [row[1] for row in data]\npapers = [row[2] for row in data]\n\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot(111)\n\nax.bar(years, inventions, width=0.4, label='Inventions', color='#D0E8CF', edgecolor='black')\nax.bar(years, papers, width=0.4, label='Research papers', color='#08BDBD', bottom=inventions, edgecolor='black')\n\nax.set_xticks(years)\nax.set_title('Number of inventions and research papers from 2020 to 2023')\nax.legend(loc='upper left')\nplt.tight_layout()\n\nplt.savefig('bar chart/png/94.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many research papers were there in 2022?",
            "output": "3500"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_230",
        "img": "./bar_chart/png/bar_230.png",
        "topic": "Human Resources and Employee Management",
        "title": " Average salary and hours of four employee roles in 2021",
        "csv": "Employee \\t Average Salary(USD) \\t Average Hours \\n Sales \\t 4000 \\t 40 \\n Production \\t 5000 \\t 45 \\n Administration \\t 3000 \\t 35 \\n Support \\t 2000 \\t 30 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the average salary and hours for four employee roles in 2021. Sales employees earn an average of $4000 and work 40 hours weekly. Production workers have an average salary of $5000 and work 45 hours. Administration staff earns $3000 on average and works 35 hours, while Support personnel receive an average salary of $2000 for 30 hours of work per week."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111)\n\nx_data = ['Sales', 'Production', 'Administration', 'Support']\ny_data1 = [4000, 5000, 3000, 2000]\ny_data2 = [40, 45, 35, 30]\n\nax.bar(x_data, y_data1, color='#ff9999', label='Average Salary(USD)')\nax.bar(x_data, y_data2, bottom=y_data1, color='#99ccff', label='Average Hours')\n\nplt.xticks(np.arange(len(x_data)), x_data, rotation=45, fontsize=10)\nplt.title('Average salary and hours of four employee roles in 2021')\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig('bar chart/png/496.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which employee role works the least number of average hours?",
            "output": "Support"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_315",
        "img": "./bar_chart/png/bar_315.png",
        "topic": "Human Resources and Employee Management",
        "title": " Number of Employees and Average Salary by Department in 2021",
        "csv": "Department \\t Employees \\t Average Salary \\n IT \\t 150 \\t 6000 \\n HR \\t 50 \\t 5500 \\n Accounting \\t 200 \\t 4500 \\n Marketing \\t 100 \\t 5000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of employees and the average salary in various departments for the year 2021. The IT department has 150 employees with an average salary of $6000. HR has a smaller workforce of 50 employees, earning an average of $5500. Accounting has the largest number of employees at 200, with an average salary of $4500. Marketing's headcount stands at 100 employees with an average salary reported at $5000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['IT',150,6000],\n        ['HR',50,5500],\n        ['Accounting',200,4500],\n        ['Marketing',100,5000]]\n\nDepartments, Employees, Salaries = [], [], []\nfor row in data:\n    Departments.append(row[0])\n    Employees.append(row[1])\n    Salaries.append(row[2])\n\nfig, ax = plt.subplots(figsize=(12,7))\nax.bar(Departments, Employees, width=0.4, label='Employees', color='b')\nax.bar(Departments, Salaries, width=0.4, label='Average Salary', color='r', bottom=Employees)\n\nax.set_ylabel('Numbers')\nax.set_title(\"Number of Employees and Average Salary by Department in 2021\")\nax.legend(loc='upper left')\nplt.xticks(rotation=90, wrap=True)\nplt.tight_layout()\nplt.savefig('bar chart/png/89.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which department has the least number of employees?",
            "output": "HR"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_212",
        "img": "./bar_chart/png/bar_212.png",
        "topic": "Energy and Utilities",
        "title": " Energy production from solar, wind and hydro sources in four countries in 2021",
        "csv": "Country \\t Solar Energy(KWh) \\t Wind Energy(KWh) \\t Hydro Energy(KWh) \\n USA \\t 15000 \\t 20000 \\t 12000 \\n UK \\t 18000 \\t 17000 \\t 14000 \\n Germany \\t 14000 \\t 19000 \\t 18000 \\n France \\t 16000 \\t 18000 \\t 15000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates energy production from solar, wind, and hydro sources in the USA, UK, Germany, and France for the year 2021. The USA produced 15,000 KWh from solar, 20,000 KWh from wind, and 12,000 KWh from hydro. The UK's figures were 18,000 KWh for solar, 17,000 KWh for wind, and 14,000 KWh for hydro. Germany generated 14,000 KWh solar energy, 19,000 KWh wind energy, and the highest hydro energy at 18,000 KWh. France's production was 16,000 KWh from solar, 18,000 KWh from wind, and 15,000 KWh from hydro."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\n# set the figure size\nplt.figure(figsize=(15,8))\n\n# create subplot\nax = plt.subplot()\n\n# set the data\ncountries = [\"USA\",\"UK\",\"Germany\",\"France\"]\nsolar = [15000,18000,14000,16000]\nwind = [20000,17000,19000,18000]\nhydro = [12000,14000,18000,15000]\n\n# plot the data\nax.bar(countries, solar, label=\"Solar Energy(KWh)\")\nax.bar(countries, wind, bottom=solar, label=\"Wind Energy(KWh)\")\nax.bar(countries, hydro, bottom=[i+j for i,j in zip(solar, wind)], label=\"Hydro Energy(KWh)\")\n\n# set the title of the figure\nax.set_title(\"Energy production from solar, wind and hydro sources in four countries in 2021\")\n\n# set the xticks\nax.set_xticks(countries)\n\n# add legend\nax.legend(bbox_to_anchor=(1.2, 1))\n\n# add grids\nax.grid(axis=\"y\", alpha=0.5)\n\n# adjust the figure\nplt.tight_layout()\n\n# save the figure as png\nplt.savefig(\"bar chart/png/554.png\")\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest production of solar energy?",
            "output": "UK"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_238",
        "img": "./bar_chart/png/bar_238.png",
        "topic": "Arts and Culture",
        "title": " Number of Arts and Culture Events in Different Regions in 2021",
        "csv": "Region \\t Music Events \\t Theatre Events \\t Dance Events \\n Europe \\t 300 \\t 500 \\t 350 \\n North America \\t 250 \\t 450 \\t 300 \\n South America \\t 200 \\t 400 \\t 250 \\n Asia \\t 150 \\t 350 \\t 200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart presents the number of arts and culture events across different regions in 2021, encompassing music, theatre, and dance events. Europe leads with 300 music, 500 theatre, and 350 dance events. North America follows with 250 music, 450 theatre, and 300 dance events. South America holds 200 music, 400 theatre, and 250 dance events, while Asia has 150 music, 350 theatre, and 200 dance events."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['Music Events', 'Theatre Events', 'Dance Events']\ndata = np.array([[300, 500, 350], [250, 450, 300], [200, 400, 250], [150, 350, 200]])\nregion = ['Europe', 'North America', 'South America', 'Asia']\n\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Number of Arts and Culture Events in Different Regions in 2021')\nax.set_xticks(np.arange(len(region)))\nax.set_xticklabels(region, rotation=45, ha=\"right\", wrap=True)\nax.set_ylabel('Number of Events')\n\nfor i in range(len(labels)):\n    ax.bar(region, data[:,i], bottom=data[:,:i].sum(axis=1), label=labels[i])\n    \nax.legend()\nfig.tight_layout()\nplt.savefig('bar_238.png')\nplt.cla()"
        },
        "QA": {
            "input": "How many more Theatre Events are there in Europe compared to South America?",
            "output": "100 events"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_329",
        "img": "./bar_chart/png/bar_329.png",
        "topic": "Law and Legal Affairs",
        "title": " Number of civil and criminal cases in four countries in 2021",
        "csv": "Country \\t Civil Cases \\t Criminal Cases \\n USA \\t 10000 \\t 15000 \\n UK \\t 9000 \\t 14000 \\n Germany \\t 8000 \\t 13000 \\n France \\t 9000 \\t 12000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of civil and criminal cases in four countries for the year 2021. The USA recorded 10,000 civil cases and 15,000 criminal cases. In comparison, the UK had 9,000 civil cases and 14,000 criminal cases, whereas Germany showed 8,000 civil cases and 13,000 criminal cases. France also reported 9,000 civil cases but had fewer criminal cases at 12,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['USA', 10000, 15000], \n        ['UK', 9000, 14000], \n        ['Germany', 8000, 13000], \n        ['France', 9000, 12000]]\n\narr_data = np.array(data)\n\nfig = plt.figure(figsize = (10, 5))\nax = fig.add_subplot(111)\n\nwidth = 0.4\nind = np.arange(arr_data.shape[0])\n\nax.bar(ind, arr_data[:, 1], width, color = 'green', label = 'Civil Cases')\nax.bar(ind + width, arr_data[:, 2], width, color = 'yellow', label = 'Criminal Cases')\nax.legend(loc = 'best')\nax.set_xticks(ind + width / 2)\nax.set_xticklabels(arr_data[:, 0], rotation = 'vertical', wrap = True)\nax.set_title('Number of civil and criminal cases in four countries in 2021')\nplt.tight_layout()\nplt.savefig('bar chart/png/495.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest number of civil cases?",
            "output": "USA"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_345",
        "img": "./bar_chart/png/bar_345.png",
        "topic": "Transportation and Logistics",
        "title": " Mode of transportation used in four regions in 2021",
        "csv": "Region \\t Air Travel \\t Rail Travel \\t Road Travel \\n North America \\t 450 \\t 300 \\t 850 \\n Europe \\t 510 \\t 350 \\t 950 \\n Asia \\t 400 \\t 400 \\t 900 \\n Africa \\t 430 \\t 310 \\t 820 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the usage of different modes of transportation\u2014air, rail, and road\u2014in four regions during the year 2021. North America shows 450 instances of air travel, 300 of rail, and 850 of road travel. Europe's figures are slightly higher for air and rail travel, at 510 and 350 respectively, while road travel stands at 950. Asia reports equal use of air and rail travel, both at 400, with road travel at 900. Africa has 430 air travel instances, 310 for rail, and 820 for road travel."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.array([[450, 300, 850],\n                 [510, 350, 950],\n                 [400, 400, 900],\n                 [430, 310, 820]])\nregion = np.array(['North America', 'Europe', 'Asia', 'Africa'])\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\n\nwidth = 0.2\nx = np.arange(4)\nax.bar(x, data[:, 0], label='Air Travel', width=width)\nax.bar(x + width, data[:, 1], label='Rail Travel', width=width)\nax.bar(x + 2 * width, data[:, 2], label='Road Travel', width=width)\n\nax.set_title('Mode of transportation used in four regions in 2021')\nax.set_xticks(x + width)\nax.set_xticklabels(region, rotation=45, ha='right', wrap=True)\n\nax.legend()\nplt.tight_layout()\nplt.savefig('bar chart/png/24.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the total expenditure on road travel for Europe and Asia combined?",
            "output": "1850"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_64",
        "img": "./bar_chart/png/bar_64.png",
        "topic": "Manufacturing and Production",
        "title": " Percentage of Agriculture, Manufacturing, and Services industries in four countries in 2021",
        "csv": "Country \\t Agriculture(%) \\t Manufacturing(%) \\t Services(%) \\n USA \\t 50 \\t 25 \\t 25 \\n UK \\t 45 \\t 30 \\t 25 \\n Germany \\t 35 \\t 40 \\t 25 \\n France \\t 40 \\t 35 \\t 25 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart reflects the percentage distribution of Agriculture, Manufacturing, and Services industries across four countries in 2021. In the USA, the Agriculture sector comprises 50%, Manufacturing 25%, and Services 25%. The UK reports Agriculture at 45%, Manufacturing at 30%, and Services at 25%. Germany shows a different distribution with 35% in Agriculture, 40% Manufacturing, and 25% in Services. Lastly, France presents 40% for Agriculture, 35% for Manufacturing, and 25% for the Services sector."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(9, 6))\nax = fig.add_subplot()\ncountry = [\"USA\", \"UK\", \"Germany\", \"France\"]\nAgriculture = [50, 45, 35, 40]\nManufacturing = [25, 30, 40, 35]\nServices = [25, 25, 25, 25]\nbottom = [0, 0, 0, 0]\nax.bar(country, Agriculture, label=\"Agriculture\", bottom=bottom, width=0.3, color=\"g\")\nax.bar(country, Manufacturing, label=\"Manufacturing\", bottom=Agriculture, width=0.3, color=\"b\")\nax.bar(country, Services, label=\"Services\", bottom=[Agriculture[i] + Manufacturing[i] for i in range(len(country))], width=0.3, color=\"y\")\nplt.xticks(country)\nplt.legend(loc=\"upper right\")\nplt.title(\"Percentage of Agriculture, Manufacturing, and Services industries in four countries in 2021\")\nplt.tight_layout()\nplt.savefig(\"bar chart/png/408.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest percentage in the Agricultural sector?",
            "output": "USA"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_7",
        "img": "./bar_chart/png/bar_7.png",
        "topic": "Manufacturing and Production",
        "title": " Number of Employees and Working Hours in a Manufacturing Company from January to April 2021",
        "csv": "Month \\t Number of Employees \\t Working Hours \\n January \\t 5000 \\t 160 \\n February \\t 4800 \\t 170 \\n March \\t 5200 \\t 180 \\n April \\t 5500 \\t 190 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of employees and their corresponding working hours in a manufacturing company from January to April 2021. In January, there were 5000 employees working 160 hours. February saw a slight decrease to 4800 employees with an increase to 170 working hours. In March, the number of employees rose to 5200, with working hours also increasing to 180. April continued the upward trend with a workforce of 5500 employees and the highest working hours at 190."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nmonth = ['January', 'February', 'March', 'April']\nemployees = [5000, 4800, 5200, 5500]\nworking_hours = [160, 170, 180, 190]\n\nfig = plt.figure(figsize=(15, 8))\nax = fig.add_subplot()\nax.bar(month, employees, color='b', bottom=0, label='Number of Employees')\nax.bar(month, working_hours, color='r', bottom=employees, label='Working Hours')\n\nplt.xticks(month, fontsize=14)\nplt.title(\"Number of Employees and Working Hours in a Manufacturing Company from January to April 2021\", fontsize=18)\nplt.legend(fontsize=14)\nplt.tight_layout()\n\nplt.savefig('bar chart/png/394.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many working hours were recorded in March?",
            "output": "180"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_76",
        "img": "./bar_chart/png/bar_76.png",
        "topic": "Law and Legal Affairs",
        "title": " Number of legal cases opened and closed in four countries in 2021",
        "csv": "Country \\t Cases Opened \\t Cases Closed \\n USA \\t 500 \\t 400 \\n UK \\t 450 \\t 350 \\n Germany \\t 360 \\t 320 \\n France \\t 400 \\t 380 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of legal cases opened and closed in the USA, UK, Germany, and France during 2021. The USA opened 500 cases and closed 400. In the UK, 450 cases were opened and 350 were closed. Germany saw 360 cases opened and 320 closed. Finally, France had 400 cases opened with 380 closed."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nCountry=['USA','UK','Germany','France']\nCases_Opened=[500,450,360,400]\nCases_Closed=[400,350,320,380]\n\nfig=plt.figure(figsize=(10,6))\nax=fig.add_subplot(111)\nax.bar(Country,Cases_Opened,width=0.4,label='Cases Opened')\nax.bar(Country,Cases_Closed,width=0.4,bottom=Cases_Opened,label='Cases Closed')\nax.set_title('Number of legal cases opened and closed in four countries in 2021')\nax.legend(loc='best')\nplt.xticks(Country,rotation=45)\nplt.tight_layout()\nplt.savefig('bar chart/png/462.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the lowest closure rate of cases in 2021?",
            "output": "Germany"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_264",
        "img": "./bar_chart/png/bar_264.png",
        "topic": "Transportation and Logistics",
        "title": " Transportation and Logistics in four cities in 2021",
        "csv": "City \\t Air Transport(million) \\t Rail Transport(million) \\t Road Transport(million) \\n Beijing \\t 10 \\t 8 \\t 12 \\n Shanghai \\t 9 \\t 9 \\t 13 \\n Guangzhou \\t 12 \\t 7 \\t 14 \\n Shenzhen \\t 11 \\t 10 \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart illustrates the transportation metrics for air, rail, and road transport, marked in millions, across four major cities in 2021. Beijing is shown with 10 million for air transport, 8 million for rail, and 12 million for road. Shanghai registers 9 million in air, 9 million in rail, and 13 million via road. Guangzhou is highlighted with 12 million air transports, 7 million by rail, and 14 million using roads. Shenzhen features 11 million in air transport, 10 million for rail, and tops road usage with 15 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib\nmatplotlib.rcParams['font.family'] = 'SimHei'\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111)\nx_data = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen']\ny_data1 = [10, 9, 12, 11]\ny_data2 = [8, 9, 7, 10]\ny_data3 = [12, 13, 14, 15]\nax.bar(x_data, y_data1, width=0.25, color='b', label='Air Transport(million)')\nax.bar(x_data, y_data2, width=0.25, bottom=y_data1, color='r', label='Rail Transport(million)')\nax.bar(x_data, y_data3, width=0.25, bottom=[i+j for i, j in zip(y_data1, y_data2)], color='g', label='Road Transport(million)')\nax.set_title('Transportation and Logistics in four cities in 2021', fontsize=16)\nax.set_xlabel('City')\nax.set_ylabel('Transport(million)')\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=3, fancybox=True, shadow=True)\nplt.xticks(x_data, rotation=45)\nplt.tight_layout()\nplt.savefig('bar chart/png/411.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many millions does road transport account for in Guangzhou?",
            "output": "14"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_376",
        "img": "./bar_chart/png/bar_376.png",
        "topic": "Energy and Utilities",
        "title": " Energy production from wind, solar and geothermal sources in four countries in 2021",
        "csv": "Country \\t Wind Energy(TWh) \\t Solar Energy(TWh) \\t Geothermal Energy(TWh) \\n USA \\t 20 \\t 30 \\t 5 \\n UK \\t 25 \\t 35 \\t 10 \\n Germany \\t 15 \\t 40 \\t 15 \\n France \\t 18 \\t 38 \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates energy production from wind, solar, and geothermal sources in four countries during 2021. The USA generated 20 TWh from wind, 30 TWh from solar, and 5 TWh from geothermal energy. The UK produced 25 TWh of wind energy, 35 TWh of solar energy, and 10 TWh from geothermal. Germany's production was 15 TWh from wind, 40 TWh from solar, and 15 TWh from geothermal sources. France generated 18 TWh of wind energy, 38 TWh of solar energy, and 20 TWh from geothermal sources."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# set data\nCountry = ['USA', 'UK', 'Germany', 'France']\nWind_Energy = [20, 25, 15, 18]\nSolar_Energy = [30, 35, 40, 38]\nGeothermal_Energy = [5, 10, 15, 20]\n\n# Create figure and set figure size\nfig=plt.figure(figsize=(10,6))\n\n# Plot bar chart\nx=np.arange(len(Country))\nrect1=plt.bar(x,Wind_Energy,width=0.3,label='Wind Energy',align='center')\nrect2=plt.bar(x+0.3,Solar_Energy,width=0.3,label='Solar Energy',align='center')\nrect3=plt.bar(x+0.6,Geothermal_Energy,width=0.3,label='Geothermal Energy',align='center')\n\n# Set x-axis\nplt.xticks(x+0.3,Country,rotation=45,wrap=True)\n\n# Set legend\nplt.legend(bbox_to_anchor=(1, 1))\n\n# Set title\nplt.title('Energy production from wind, solar and geothermal sources in four countries in 2021')\n\n# Automatically resize the image by tight_layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('bar chart/png/196.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest production of geothermal energy?",
            "output": "France"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_218",
        "img": "./bar_chart/png/bar_218.png",
        "topic": "Manufacturing and Production",
        "title": " Raw material usage in three categories from January to April 2021",
        "csv": "Month \\t Raw Material A(KG) \\t Raw Material B(KG) \\t Raw Material C(KG) \\n January \\t 100000 \\t 130000 \\t 80000 \\n February \\t 90000 \\t 140000 \\t 110000 \\n March \\t 110000 \\t 150000 \\t 120000 \\n April \\t 80000 \\t 160000 \\t 140000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the usage of three raw materials across four months in 2021. In January, Raw Material A usage was 100,000 KG, B was 130,000 KG, and C was 80,000 KG. February saw a decrease in A to 90,000 KG, but an increase in B to 140,000 KG and C to 110,000 KG. March witnessed further increases across all materials: 110,000 KG for A, 150,000 KG for B, and 120,000 KG for C. April's data shows a decrease in Raw Material A usage to 80,000 KG, whereas B and C increased to 160,000 KG and 140,000 KG, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(12, 8))#set size\nax=plt.subplot() #create figure\nplt.title(\"Raw material usage in three categories from January to April 2021\") \nmonth=['January','February','March','April']\nRaw_Material_A=[100000,90000,110000,80000]\nRaw_Material_B=[130000,140000,150000,160000]\nRaw_Material_C=[80000,110000,120000,140000]\nx=range(len(month))\nax.bar(x,Raw_Material_A,label='Raw Material A(KG)',bottom=0,width=0.3)\nax.bar(x,Raw_Material_B,label='Raw Material B(KG)',bottom=Raw_Material_A,width=0.3)\nax.bar(x,Raw_Material_C,label='Raw Material C(KG)',bottom=[i+j for i,j in zip(Raw_Material_A,Raw_Material_B)],width=0.3)\nax.set_xticks(x)\nax.set_xticklabels(month, rotation=45, ha='right', wrap=True)\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.25),\n          fancybox=True, shadow=True, ncol=5)\nplt.tight_layout()\nplt.savefig(\"bar chart/png/31.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How much more of Raw Material C was used in March compared to January?",
            "output": "40000 KG"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_265",
        "img": "./bar_chart/png/bar_265.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing Cost and Output in four countries in 2021",
        "csv": "Country \\t Manufacturing Cost \\t Manufacturing Output \\n USA \\t 500 \\t 750 \\n UK \\t 550 \\t 800 \\n Germany \\t 600 \\t 850 \\n France \\t 650 \\t 900 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the manufacturing cost and output in four countries for the year 2021. The USA's figures stand at a manufacturing cost of 500 and an output of 750. The UK, with a slightly higher manufacturing cost of 550, achieves an output of 800. Germany's data shows a cost of 600 and an output of 850, whereas France has the highest cost at 650 and the highest output at 900. Each country's manufacturing efficiency can be interpreted by comparing these two sets of numbers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\ncountry = [\"USA\",\"UK\",\"Germany\",\"France\"]\nmanufacturing_cost = [500,550,600,650]\nmanufacturing_output = [750,800,850,900]\n\nplt.figure(figsize=(10, 8))\nax = plt.subplot()\nplt.bar(country, manufacturing_cost, label=\"Manufacturing Cost\", bottom=0)\nplt.bar(country, manufacturing_output, label=\"Manufacturing Output\", bottom=manufacturing_cost)\nplt.xticks(rotation=45)\nax.set_title(\"Manufacturing Cost and Output in four countries in 2021\")\nax.set_xlabel(\"Country\")\nax.set_ylabel(\"Unit Number\")\nax.legend(loc=\"upper center\")\nplt.tight_layout()\nplt.savefig(\"bar chart/png/252.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest ratio of manufacturing output to cost?",
            "output": "USA"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_333",
        "img": "./bar_chart/png/bar_333.png",
        "topic": "Retail and E-commerce",
        "title": " Comparison of Retail and E-commerce Sales in 2021",
        "csv": "Month \\t Retail Sales(billion) \\t E-commerce Sales(billion)  \\n January \\t 100 \\t 200  \\n February \\t 110 \\t 220  \\n March \\t 120 \\t 240  \\n April \\t 130 \\t 260 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates a comparison of retail and e-commerce sales, in billions, for the first four months of 2021. January shows retail sales at 100 billion and e-commerce sales at 200 billion. February's figures rise to 110 billion for retail and 220 billion for e-commerce. March sees a further increase with retail sales at 120 billion and e-commerce at 240 billion. April continues the upward trend with 130 billion in retail sales and 260 billion in e-commerce sales."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(12,6))\nax = plt.subplot()\nax.bar(x=['January','February', 'March', 'April'], height=[100,110,120,130], label='Retail Sales', color='b')\nax.bar(x=['January','February', 'March', 'April'], height=[200,220,240,260], bottom=[100,110,120,130], label='E-commerce Sales', color='r', alpha=0.5)\nax.set_title('Comparison of Retail and E-commerce Sales in 2021')\nax.set_ylabel('Sales (billion)')\nax.legend()\nplt.xticks(['January','February', 'March', 'April'], rotation=45, wrap=True)\nplt.tight_layout()\nplt.savefig('bar chart/png/492.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in billion between retail sales and e-commerce sales in February?",
            "output": "110"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_206",
        "img": "./bar_chart/png/bar_206.png",
        "topic": "Tourism and Hospitality",
        "title": " Number of Hotels, Restaurants and Tourists in four regions in 2021",
        "csv": "Region \\t Hotels \\t Restaurants \\t Tourists \\n North America \\t 300 \\t 200 \\t 500 \\n South America \\t 400 \\t 300 \\t 450 \\n Europe \\t 200 \\t 500 \\t 350 \\n Asia \\t 350 \\t 400 \\t 400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the count of hotels, restaurants, and tourists across four regions in 2021. North America is shown with 300 hotels, 200 restaurants, and 500 tourists. South America has 400 hotels, 300 restaurants, and 450 tourists. Europe presents 200 hotels, 500 restaurants, and 350 tourists. Lastly, Asia features 350 hotels, 400 restaurants, and 400 tourists."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(8,5))\nax = plt.subplot()\n\nRegions = [\"North America\", \"South America\", \"Europe\", \"Asia\"]\nHotels = [300, 400, 200, 350]\nRestaurants = [200, 300, 500, 400]\nTourists = [500, 450, 350, 400]\n\nax.bar(Regions, Hotels, label=\"Hotels\", width=0.2, bottom=0)\nax.bar(Regions, Restaurants, label=\"Restaurants\", width=0.2, bottom=Hotels)\nax.bar(Regions, Tourists, label=\"Tourists\", width=0.2, bottom=[x + y for x, y in zip(Hotels, Restaurants)])\n\nax.set_title(\"Number of Hotels, Restaurants and Tourists in four regions in 2021\")\nax.set_xticklabels(Regions, rotation=45, ha=\"right\", wrap=True)\nax.legend()\n\nplt.tight_layout()\nplt.savefig('bar chart/png/113.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "How many tourists visited Asia in 2021?",
            "output": "400"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_454",
        "img": "./bar_chart/png/bar_454.png",
        "topic": "Environment and Sustainability",
        "title": " Number of Trees Planted and Polluting Vehicles Removed in Four Regions in 2021",
        "csv": "Region \\t Number of Trees Planted(thousand) \\t Number of Polluting Vehicles Removed(thousand) \\n North America \\t 100 \\t 50 \\n South America \\t 120 \\t 60 \\n Europe \\t 150 \\t 70 \\n Asia \\t 130 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates two environmental initiatives in 2021: the number of trees planted and polluting vehicles removed, across four regions. North America planted 100 thousand trees and removed 50 thousand polluting vehicles. South America saw 120 thousand trees planted and 60 thousand vehicles removed. Europe leads with 150 thousand trees planted and 70 thousand vehicles removed. Asia contributed by planting 130 thousand trees and removing 80 thousand vehicles."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig=plt.figure(figsize=(10,6))\nax=fig.add_subplot()\nregion=['North America','South America','Europe','Asia']\ntrees=[100,120,150,130]\npollutant=[50,60,70,80]\nwidth=0.35\nax.bar(region,trees,width,label='Number of Trees Planted(thousand)')\nax.bar(region,pollutant,width,bottom=trees,label='Number of Polluting Vehicles Removed(thousand)')\nax.set_title('Number of Trees Planted and Polluting Vehicles Removed in Four Regions in 2021')\nax.set_xticks(region)\nax.set_xticklabels(region, rotation=45, ha='right', rotation_mode=\"anchor\")\nax.legend(loc='upper left')\nplt.tight_layout()\nplt.savefig('bar chart/png/368.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which region has seen the largest number of trees planted in 2021?",
            "output": "Europe"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_248",
        "img": "./bar_chart/png/bar_248.png",
        "topic": "Energy and Utilities",
        "title": " Energy production from wind, solar and hydro sources in four regions in 2021",
        "csv": "Region \\t Wind Energy(GWh) \\t Solar Energy(GWh) \\t Hydro Energy(GWh) \\n East \\t 20 \\t 30 \\t 25 \\n West \\t 25 \\t 35 \\t 30 \\n North \\t 30 \\t 40 \\t 35 \\n South \\t 35 \\t 45 \\t 40 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the energy production from wind, solar, and hydro sources across four regions in 2021. The East region generated 20 GWh of wind energy, 30 GWh of solar energy, and 25 GWh of hydro energy. The West region produced 25 GWh, 35 GWh, and 30 GWh from wind, solar, and hydro respectively. North region's energy generation included 30 GWh from wind, 40 GWh from solar, and 35 GWh from hydro. The South topped the chart with 35 GWh of wind energy, 45 GWh from solar, and 40 GWh of hydro energy."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \nx=np.arange(4) \nxlabels=['East','West','North','South'] \ny1=[20,25,30,35] \ny2=[30,35,40,45] \ny3=[25,30,35,40] \n\nplt.figure(figsize=(10,6)) \nax=plt.subplot() \nax.bar(x-0.2,y1,width=0.2,label='Wind Energy(GWh)') \nax.bar(x,y2,width=0.2,label='Solar Energy(GWh)') \nax.bar(x+0.2,y3,width=0.2,label='Hydro Energy(GWh)') \n\nplt.xticks(x,xlabels,rotation=60) \nax.set_title('Energy production from wind, solar and hydro sources in four regions in 2021') \nax.legend(loc='upper center') \nplt.tight_layout() \nplt.savefig('bar chart/png/485.png') \nplt.clf()"
        },
        "QA": {
            "input": "Which region has the lowest solar energy production in 2021?",
            "output": "East"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_495",
        "img": "./bar_chart/png/bar_495.png",
        "topic": "Real Estate and Housing Market",
        "title": " Average House Price and Rent in four regions in 2021",
        "csv": "Region \\t Average House Price \\t Average Rent \\n North \\t 500 \\t 750 \\n South \\t 600 \\t 900 \\n East \\t 550 \\t 800 \\n West \\t 650 \\t 850 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the average house prices and average rent in four regions during the year 2021. In the North, the average house price is marked at 500 units, with the average rent being slightly higher at 750 units. The South shows an average house price of 600 units coupled with an average rent of 900 units. The East region's data indicates an average house price of 550 units and rent at 800 units, while the West leads with an average house price of 650 units and a rent of 850 units."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nRegion = ['North','South','East','West']\nAverage_House_Price = [500,600,550,650]\nAverage_Rent = [750,900,800,850]\n\nfig = plt.figure(figsize=(12,8))\nax = fig.add_subplot(111)\n\nax.bar(Region, Average_House_Price, label=\"Average House Price\", width=0.3, bottom=0)\nax.bar(Region, Average_Rent, label=\"Average Rent\", width=0.3, bottom=Average_House_Price)\n\nplt.title('Average House Price and Rent in four regions in 2021', fontsize=20)\n\nax.set_xticks(np.arange(len(Region)))\nax.set_xticklabels(Region, fontsize=15, rotation=45, ha='right')\nax.set_xlabel('Regions', fontsize=15)\nax.set_ylabel('Money($)', fontsize=15)\n\nplt.legend(fontsize=15, bbox_to_anchor=(1, 0.9), loc='upper left')\nplt.tight_layout()\nplt.savefig('bar_495.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which region has the lowest average house price?",
            "output": "North"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_91",
        "img": "./bar_chart/png/bar_91.png",
        "topic": "Education and Academics",
        "title": " High school and university enrollment in four countries in 2021",
        "csv": "Country \\t High School Enrollment(million) \\t University Enrollment(million) \\n USA \\t 25 \\t 10 \\n UK \\t 20 \\t 12 \\n Germany \\t 15 \\t 15 \\n France \\t 18 \\t 14 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates high school and university enrollment in millions across four countries for 2021. In the USA, 25 million are enrolled in high school and 10 million in university. The UK shows an enrollment of 20 million in high schools and 12 million in universities. Germany has 15 million enrolled in both high schools and universities. Lastly, France has 18 million high school students and 14 million university students.\n"
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\ndata = [['USA', 25, 10], ['UK', 20, 12], ['Germany', 15, 15], ['France', 18, 14]]\n\nCountry = [item[0] for item in data]\nHigh_School_Enrollment = [item[1] for item in data]\nUniversity_Enrollment = [item[2] for item in data]\n\nax.bar(Country, High_School_Enrollment, label='High School Enrollment (million)', bottom=University_Enrollment)\nax.bar(Country, University_Enrollment, label='University Enrollment (million)')\n\nplt.legend(loc='upper left')\nplt.title('High school and university enrollment in four countries in 2021')\nplt.xticks(rotation=45, ha='right', wrap=True)\nplt.tight_layout()\n\nplt.savefig('bar chart/png/22.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the lowest high school enrollment?",
            "output": "Germany"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_317",
        "img": "./bar_chart/png/bar_317.png",
        "topic": "Science and Engineering",
        "title": " Patents filed and research projects completed in science and engineering from 2020 to 2023",
        "csv": "Year \\t Patents Filed \\t Research Projects Completed \\n 2020 \\t 1200 \\t 250 \\n 2021 \\t 1000 \\t 350 \\n 2022 \\t 1300 \\t 500 \\n 2023 \\t 900 \\t 400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the annual count of patents filed and research projects completed in the fields of science and engineering over four years, from 2020 to 2023. In 2020, 1200 patents were filed and 250 research projects were completed. The subsequent year, 2021, saw a decrease in patents to 1000 but an increase in completed projects to 350. In 2022, filings rose to 1300, alongside a significant jump in project completions to 500. However, in 2023 there was a decline, with 900 patents filed and 400 research projects completed."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot()\n\nYear = np.array([\"2020\",\"2021\",\"2022\",\"2023\"])\nPatents_Filed = np.array([1200,1000,1300,900])\nResearch_Projects_Completed = np.array([250,350,500,400])\n\nax.bar(Year,Patents_Filed, label = 'Patents Filed', bottom=Research_Projects_Completed)\nax.bar(Year,Research_Projects_Completed, label = 'Research Projects Completed')\n\nax.set_title(\"Patents filed and research projects completed in science and engineering from 2020 to 2023\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Number\")\nax.legend(loc=\"upper left\")\nax.grid(axis=\"y\", alpha=0.3)\nplt.xticks(Year)\nplt.tight_layout()\nplt.savefig(\"bar chart/png/388.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How many more patents were filed in 2022 compared to 2021?",
            "output": "300"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_330",
        "img": "./bar_chart/png/bar_330.png",
        "topic": "Sports and Entertainment",
        "title": " Fanbase of Football and Cricket in four countries in 2021",
        "csv": "Location \\t Football Fanbase \\t Cricket Fanbase \\n USA \\t 25000 \\t 10000 \\n UK \\t 30000 \\t 12000 \\n Germany \\t 28000 \\t 11000 \\n France \\t 27000 \\t 15000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the fanbase of football and cricket across four countries in 2021. In the USA, there are 25,000 football fans compared to 10,000 cricket fans. The UK shows a larger fanbase for both sports with 30,000 football fans and 12,000 cricket fans. Germany has a slightly smaller football fanbase of 28,000 and 11,000 cricket fans. France's numbers are 27,000 for football and the highest cricket fanbase of the group at 15,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {'Location':['USA','UK','Germany','France'],\n        'Football Fanbase':[25000,30000,28000,27000],\n        'Cricket Fanbase':[10000,12000,11000,15000]}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\nax.bar(df['Location'], df['Football Fanbase'], width=0.3, label='Football Fanbase')\nax.bar(df['Location'], df['Cricket Fanbase'], width=0.3, bottom=df['Football Fanbase'], label='Cricket Fanbase')\n\nax.set_title('Fanbase of Football and Cricket in four countries in 2021')\nax.set_xlabel('Location')\nax.set_ylabel('Number of Fans')\n\nax.set_xticks(df['Location'])\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\nplt.tight_layout()\n\nplt.savefig('bar chart/png/539.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the smallest difference between its football and cricket fanbase?",
            "output": "France"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_355",
        "img": "./bar_chart/png/bar_355.png",
        "topic": "Law and Legal Affairs",
        "title": " Number of cases and average case duration in four countries in 2021",
        "csv": "Country \\t Number of Cases(hundred) \\t Average Case Duration (days) \\n USA \\t 30 \\t 14 \\n UK \\t 20 \\t 11 \\n Germany \\t 18 \\t 12 \\n France \\t 25 \\t 13 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the number of COVID-19 cases in hundreds and the average duration of those cases in days across four countries during 2021. The USA had 30 hundred cases with an average duration of 14 days. The UK had 20 hundred cases with the duration averaging 11 days. Germany's data shows 18 hundred cases with an average of 12 days. Finally, France had 25 hundred cases with an average case duration of 13 days."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,6))\nax = plt.subplot()\n\ncountry = ['USA', 'UK', 'Germany', 'France']\nnumber_of_cases = [30, 20, 18, 25]\navg_duration = [14, 11, 12, 13]\n\nplt.bar(country, number_of_cases, width=0.3, label='Number of Cases(hundred)')\nplt.bar(country, avg_duration, width=0.3, bottom=number_of_cases, label='Average Case Duration (days)')\n\nax.set_xticklabels(country, rotation=45, ha='right')\nax.set_title('Number of cases and average case duration in four countries in 2021')\nax.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig('bar_355.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the longest average case duration?",
            "output": "USA"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_455",
        "img": "./bar_chart/png/bar_455.png",
        "topic": "Energy and Utilities",
        "title": " Energy production from Wind, Solar and Hydro sources from January to April 2021",
        "csv": "Month \\t Wind Energy(MW) \\t Solar Energy(MW) \\t Hydro Energy(MW) \\n January \\t 500 \\t 800 \\t 300 \\n February \\t 550 \\t 850 \\t 400 \\n March \\t 600 \\t 900 \\t 450 \\n April \\t 650 \\t 950 \\t 500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the energy production from wind, solar, and hydro sources over four months in 2021. In January, production was 500 MW for wind, 800 MW for solar, and 300 MW for hydro. Energy generation increased each month, with wind reaching 650 MW, solar 950 MW, and hydro 500 MW by April."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot()\n\nmonth = ['January', 'February', 'March', 'April']\nwind_energy = [500, 550, 600, 650]\nsolar_energy = [800, 850, 900, 950]\nhydro_energy = [300, 400, 450, 500]\n\nax.bar(month, wind_energy, width=0.2,  label='Wind', color='b', bottom=solar_energy)\nax.bar(month, solar_energy, width=0.2, label='Solar', color='g', bottom=hydro_energy)\nax.bar(month, hydro_energy, width=0.2, label='Hydro', color='r')\n\nplt.xticks(rotation=45)\nplt.title('Energy production from Wind, Solar and Hydro sources from January to April 2021')\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig('bar chart/png/302.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the total production of Wind Energy in the four months from January to April 2021?",
            "output": "2300 MW"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_404",
        "img": "./bar_chart/png/bar_404.png",
        "topic": "Sports and Entertainment",
        "title": " Number of football matches and cinema viewers in four regions in 2021",
        "csv": "Region \\t Football Matches \\t Cinema Viewers \\n North America \\t 160 \\t 200 \\n South America \\t 180 \\t 220 \\n Europe \\t 140 \\t 190 \\n Asia \\t 200 \\t 250 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of football matches and cinema viewers across four different regions in 2021. North America is shown to have hosted 160 football matches and attracted 200 cinema viewers. South America had a slightly higher number with 180 football matches and 220 cinema viewers. Europe records 140 football matches and 190 cinema viewers, making it the region with the lowest numbers in the dataset. Asia leads in both categories with 200 football matches and 250 cinema viewers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(10, 6))\nax = plt.subplot()\nregion = ['North America', 'South America', 'Europe', 'Asia']\nfootball_matches = np.array([160, 180, 140, 200])\ncinema_viewers = np.array([200, 220, 190, 250])\n\nwidth = 0.35\nax.bar(region, football_matches, width, label='Football Matches')\nax.bar(region, cinema_viewers, width, bottom=football_matches, label='Cinema Viewers')\n\nax.set_title('Number of football matches and cinema viewers in four regions in 2021')\nax.set_ylabel('Number of Events')\nax.set_xticks(region)\nax.legend()\n\nplt.tight_layout()\nplt.savefig('bar chart/png/35.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which region has the highest number of cinema viewers in 2021?",
            "output": "Asia"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_195",
        "img": "./bar_chart/png/bar_195.png",
        "topic": "Sports and Entertainment",
        "title": " Number of sports and entertainment events in four countries in 2021",
        "csv": "Country \\t Sports Events \\t Entertainment Events \\n USA \\t 20 \\t 30 \\n UK \\t 25 \\t 35 \\n Germany \\t 18 \\t 32 \\n France \\t 23 \\t 37 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the number of sports and entertainment events in the USA, UK, Germany, and France for the year 2021. In this period, the USA hosted 20 sports events and 30 entertainment events. The UK had slightly more, with 25 sports events and 35 entertainment events. Germany organized 18 sports events and 32 entertainment events, while France had 23 sports events and the highest number of entertainment events at 37."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot()\ncountry = np.array(['USA','UK','Germany','France'])\nsports_events = np.array([20,25,18,23])\nentertainment_events = np.array([30,35,32,37])\n\nx = np.arange(len(country))\nwidth = 0.35\n\nax.bar(x - width/2, sports_events, width, color='#FF9800', label=\"Sports Events\")\nax.bar(x + width/2, entertainment_events, width, color='#2196F3', label=\"Entertainment Events\")\nax.set_xticks(x)\nax.set_xticklabels(country, rotation=45, va=\"top\", ha=\"right\", wrap=True)\nax.set_title('Number of sports and entertainment events in four countries in 2021')\nax.legend()\n\nplt.tight_layout()\nplt.savefig('bar chart/png/47.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many sports events took place in the UK in 2021?",
            "output": "25"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_405",
        "img": "./bar_chart/png/bar_405.png",
        "topic": "Sports and Entertainment",
        "title": " Attendance and expected revenue of four stadiums in 2021",
        "csv": "Stadium \\t Attendance \\t Expected Revenue \\n Wembley Stadium \\t 80000 \\t $1000000 \\n Emirates Stadium \\t 60000 \\t $750000 \\n Old Trafford \\t 70000 \\t $850000 \\n Anfield \\t 90000 \\t $1100000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the attendance and expected revenue for four stadiums in 2021. Wembley Stadium shows an attendance of 80,000 with expected revenue of $1,000,000. Emirates Stadium has a lower attendance of 60,000 and expected revenue of $750,000. Old Trafford records an attendance of 70,000 and an expected revenue of $850,000. Finally, Anfield tops the chart with the highest attendance of 90,000 and an expected revenue of $1,100,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Setting figure size\nplt.figure(figsize=(10,6))\n\n# Data\nStadium = [\"Wembley Stadium\", \"Emirates Stadium\", \"Old Trafford\", \"Anfield\"]\nAttendance = [80000, 60000, 70000, 90000]\nExpected_Revenue = [1000000, 750000, 850000, 1100000]\n\n# Plotting bar chart\nax = plt.subplot()\nax.bar(Stadium, Attendance, bottom=Expected_Revenue, color='#FF9F33', label='Attendance')  \nax.bar(Stadium, Expected_Revenue, color='#3F51B5', label='Expected Revenue')\n\n# Adding labels, title and legend\nax.set_title('Attendance and expected revenue of four stadiums in 2021')\nax.set_xlabel('Stadiums')\nax.set_ylabel('Amount(USD)')\nplt.legend()\n\n# Preventing x-axis values from overlapping\nplt.xticks(rotation=45, ha='right')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('bar chart/png/97.png')\n\n# Clear the current image state \nplt.clf()"
        },
        "QA": {
            "input": "What is the attendance at Anfield?",
            "output": "90000"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_134",
        "img": "./bar_chart/png/bar_134.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee leaves and bonuses in 2021",
        "csv": "Employee \\t Leave Days \\t Bonus \\n John \\t 14 \\t 800 \\n Mary \\t 10 \\t 700 \\n Mark \\t 12 \\t 500 \\n Lisa \\t 11 \\t 600 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates leave days and bonuses for four employees in 2021. John took 14 leave days and received an $800 bonus, Mary had 10 leave days with a $700 bonus, Mark was away for 12 days with a $500 bonus, and Lisa took 11 leave days and got a $600 bonus."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nfig = plt.figure(figsize=(10, 6))\n# Add subplot\nax = fig.add_subplot(111)\n\n# Define data\nEmployee = ['John', 'Mary', 'Mark', 'Lisa']\nLeave_Days = [14, 10, 12, 11]\nBonus = [800, 700, 500, 600]\n\n# Create bar chart\nax.bar(Employee, Leave_Days, bottom=0, label='Leave Days')\nax.bar(Employee, Bonus, bottom=Leave_Days, label='Bonus')\nax.set_title('Employee leaves and bonuses in 2021')\n\n# Set xticks, legend and add grids\nax.set_xticks(np.arange(len(Employee)))\nax.set_xticklabels(Employee, rotation=45, wrap=True)\nax.legend(loc='upper left')\nax.grid(axis='y', linestyle='--')\n\n# Resize image\nplt.tight_layout()\n\n# Save image\nplt.savefig(\"bar chart/png/160.png\")\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more leave days did John take compared to Mary?",
            "output": "4 days"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_18",
        "img": "./bar_chart/png/bar_18.png",
        "topic": "Business and Finance",
        "title": " GDP, exports and imports from 2020 to 2023",
        "csv": "Year \\t GDP(trillion) \\t Exports(trillion) \\t Imports(trillion) \\n 2020 \\t 34.5 \\t 2.4 \\t 2.7 \\n 2021 \\t 36.2 \\t 2.8 \\t 3.1 \\n 2022 \\t 38.1 \\t 3.2 \\t 3.4 \\n 2023 \\t 40.0 \\t 3.6 \\t 3.8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart illustrates the GDP, exports, and imports of a country over four years, from 2020 to 2023. In 2020, the GDP is recorded at $34.5 trillion, with exports at $2.4 trillion and imports at $2.7 trillion. The following year, 2021, shows an increase with a GDP of $36.2 trillion, exports at $2.8 trillion, and imports at $3.1 trillion. By 2022, the GDP grows to $38.1 trillion, exports to $3.2 trillion, and imports to $3.4 trillion. The chart concludes with the year 2023, presenting a GDP of $40.0 trillion, exports at $3.6 trillion, and imports at $3.8 trillion."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = {'Year': [2020, 2021, 2022, 2023], \n        'GDP(trillion)': [34.5, 36.2, 38.1, 40.0], \n        'Exports(trillion)': [2.4, 2.8, 3.2, 3.6], \n        'Imports(trillion)': [2.7, 3.1, 3.4, 3.8]}\n\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot()\nax.bar(data['Year'], data['GDP(trillion)'], label='GDP')\nax.bar(data['Year'], data['Exports(trillion)'], label='Exports', bottom=data['GDP(trillion)'])\nax.bar(data['Year'], data['Imports(trillion)'], label='Imports', bottom=np.array(data['GDP(trillion)'])+np.array(data['Exports(trillion)']))\nax.set_title('GDP, exports and imports from 2020 to 2023')\nax.set_xticks(data['Year'])\nax.legend(bbox_to_anchor=(1,1), loc='upper right')\n\nfig.tight_layout()\nplt.savefig('bar chart/png/164.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference between exports and imports in 2023?",
            "output": "-0.2 trillion"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_292",
        "img": "./bar_chart/png/bar_292.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing, Agricultural, and Service Output of four countries in 2021",
        "csv": "Country \\t Manufacturing Output(billion) \\t Agricultural Output(billion) \\t Service Output(billion) \\n USA \\t 2.5 \\t 1.2 \\t 3.4 \\n UK \\t 1.8 \\t 1.3 \\t 2.7 \\n Germany \\t 2.2 \\t 1.4 \\t 3.1 \\n France \\t 2.1 \\t 1.5 \\t 2.9 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the outputs of manufacturing, agriculture, and services in billions for four countries in 2021. The USA shows a manufacturing output of 2.5 billion, an agricultural output of 1.2 billion, and a service output of 3.4 billion. The UK has 1.8 billion in manufacturing, 1.3 billion in agriculture, and 2.7 billion in services. Germany records 2.2 billion from manufacturing, 1.4 billion in agriculture, and 3.1 billion in services. Lastly, France has a 2.1 billion manufacturing output, 1.5 billion agricultural output, and 2.9 billion service output."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\n#Set labels and titles\nlabels = ['Manufacturing','Agricultural','Service'] \ncountries = ['USA','UK','Germany','France'] \ntitle = 'Manufacturing, Agricultural, and Service Output of four countries in 2021'\n\n#Set the figure size\nplt.figure(figsize=(10,6))\n\n#Create a subplot\nax = plt.subplot()\n\n#Set the data\nx_pos = [i for i, _ in enumerate(countries)]\nmanufacturing_data = [2.5,1.8,2.2,2.1]\nagricultural_data = [1.2,1.3,1.4,1.5]\nservice_data = [3.4,2.7,3.1,2.9]\n\n#Draw bar chart\nax.bar(x_pos,manufacturing_data,width=0.2,label=labels[0])\nax.bar([x + 0.2 for x in x_pos],agricultural_data,width=0.2,label=labels[1])\nax.bar([x + 0.4 for x in x_pos],service_data,width=0.2,label=labels[2])\n\n#Set x axis\nax.set_xticks([x + 0.2 for x in x_pos])\nax.set_xticklabels(countries)\n\n#Set y axis\nax.set_ylabel('Output(billion)')\n\n#Set title\nax.set_title(title)\n\n#Add legend\nax.legend(loc='upper right')\n\n#Automatically resize the image\nplt.tight_layout()\n\n#Save the image\nplt.savefig('bar chart/png/345.png')\n\n#Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the lowest manufacturing output?",
            "output": "UK"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_199",
        "img": "./bar_chart/png/bar_199.png",
        "topic": "Tourism and Hospitality",
        "title": " Tourism-related services in four cities in 2021",
        "csv": "Destination \\t Hotels \\t Restaurants \\t Public Transport \\n New York \\t 120 \\t 300 \\t 80 \\n Los Angeles \\t 150 \\t 400 \\t 100 \\n Miami \\t 100 \\t 350 \\t 90 \\n Las Vegas \\t 140 \\t 320 \\t 110 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the availability of tourism-related services in four cities during 2021. It shows data for the number of hotels, restaurants, and public transport options. New York has 120 hotels, 300 restaurants, and 80 public transport facilities, followed by Los Angeles with 150 hotels, 400 restaurants, and 100 public transport facilities. Miami features 100 hotels, 350 restaurants, and 90 public transport options. Lastly, Las Vegas offers 140 hotels, 320 restaurants, and 110 public transport facilities."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata=np.array([[120,300,80],[150,400,100],[100,350,90],[140,320,110]])\nlabels=['New York','Los Angeles','Miami','Las Vegas']\n\nplt.figure(figsize=(10,6))\nax=plt.subplot(111)\n\nbottom=np.zeros(4)\nwidth=0.2\n\nax.bar(x=np.arange(4)-width,height=data[:,0],width=width,label='Hotels',bottom=bottom,align='edge')\nax.bar(x=np.arange(4),height=data[:,1],width=width,label='Restaurants',bottom=bottom,align='edge')\nax.bar(x=np.arange(4)+width,height=data[:,2],width=width,label='Public Transport',bottom=bottom,align='edge')\n\nax.set_title('Tourism-related services in four cities in 2021')\nax.set_xticks(np.arange(4))\nax.set_xticklabels(labels,rotation=90,wrap=True)\nax.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig('bar chart/png/181.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which city has the highest expenditure on hotels?",
            "output": "Los Angeles"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_95",
        "img": "./bar_chart/png/bar_95.png",
        "topic": "Social Media and the Web",
        "title": " Number of social media and web users in four countries in 2021",
        "csv": "Country \\t Social Media Users(million) \\t Web Users(million) \\n USA \\t 200 \\t 400 \\n UK \\t 250 \\t 420 \\n Germany \\t 180 \\t 390 \\n France \\t 220 \\t 410 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the count of social media and web users (in millions) across four countries in 2021. The USA reports 200 million social media users and 400 million web users. The UK has a higher social media user count at 250 million but slightly more web users at 420 million. Germany shows 180 million social media users and 390 million web users, whereas France has 220 million users engaged in social media and 410 million web users."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nCountry = ['USA', 'UK', 'Germany', 'France']\nSocial_Media_Users = [200, 250, 180, 220]\nWeb_Users = [400, 420, 390, 410]\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot()\nax.bar(Country, Social_Media_Users, width=0.3, label='Social Media Users', align='center', bottom=Web_Users)\nax.bar(Country, Web_Users, width=0.3, label='Web Users', align='center')\n\nax.set_title('Number of social media and web users in four countries in 2021')\nax.legend(loc='upper left')\nplt.xticks(rotation=45, wrap=True)\n\nplt.tight_layout()\nplt.savefig('bar chart/png/68.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest number of web users?",
            "output": "UK"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_297",
        "img": "./bar_chart/png/bar_297.png",
        "topic": "Agriculture and Food Production",
        "title": " Food production in four countries in 2021",
        "csv": "Country \\t Wheat(tons) \\t Rice(tons) \\t Corn(tons) \\n USA \\t 1000 \\t 1200 \\t 1400 \\n UK \\t 1100 \\t 1300 \\t 900 \\n Canada \\t 850 \\t 1400 \\t 1100 \\n Australia \\t 900 \\t 1500 \\t 1200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the production of wheat, rice, and corn across four different countries in the year 2021. The United States produced 1000 tons of wheat, 1200 tons of rice, and 1400 tons of corn. The United Kingdom's production figures show 1100 tons of wheat, 1300 tons of rice, and 900 tons of corn. Canada produced 850 tons of wheat, 1400 tons of rice, and 1100 tons of corn. Australia's production was recorded at 900 tons of wheat, 1500 tons of rice, and 1200 tons of corn."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(10,5))\nax = plt.subplot(111)\n\nCountry = ['USA','UK','Canada','Australia']\nWheat = [1000,1100,850,900]\nRice = [1200,1300,1400,1500]\nCorn = [1400,900,1100,1200]\n\nx = np.arange(len(Country))\n\nax.bar(x-0.2, Wheat, width=0.2, label='Wheat')\nax.bar(x, Rice, width=0.2, label='Rice')\nax.bar(x+0.2, Corn,width=0.2, label='Corn')\nax.set_xticks(x)\nax.set_xticklabels(Country, rotation=30,ha='right', wrap=True)\nax.legend(loc='upper left')\nax.set_title('Food production in four countries in 2021')\n\nplt.tight_layout()\nplt.savefig('bar chart/png/183.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country produced the least amount of corn in 2021?",
            "output": "UK"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_426",
        "img": "./bar_chart/png/bar_426.png",
        "topic": "Social Media and the Web",
        "title": " Number of users and usage time on four popular social media platforms in 2021",
        "csv": "Platform \\t Users(million) \\t Usage Time(hours) \\n Facebook \\t 2.3 \\t 10 \\n YouTube \\t 1.9 \\t 8 \\n Instagram \\t 1.2 \\t 6 \\n Twitter \\t 0.9 \\t 4 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the user base in millions alongside the average usage time in hours for four popular social media platforms in 2021. Facebook leads with 2.3 million users spending an average of 10 hours, followed by YouTube with 1.9 million users and 8 hours of usage time. Instagram users are 1.2 million with an average of 6 hours on the platform, and finally, Twitter has 0.9 million users spending about 4 hours on average."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplatforms = ['Facebook', 'YouTube', 'Instagram', 'Twitter']\nusers = [2.3, 1.9, 1.2, 0.9]\nusage_time = [10, 8, 6, 4]\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(111)\n\nax.bar(platforms, users, label='Users(million)', width=0.4, bottom=0)\nax.bar(platforms, usage_time, label='Usage Time(hours)', width=0.4, bottom=users)\n\nax.set_title('Number of users and usage time on four popular social media platforms in 2021')\nax.set_ylabel('Quantity')\nax.set_xlabel('Platform')\nax.set_xticks(platforms)\nax.legend(loc='upper right')\nplt.tight_layout()\nplt.savefig('bar chart/png/316.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which platform had the highest number of users to usage time ratio in 2021?",
            "output": "Facebook"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_291",
        "img": "./bar_chart/png/bar_291.png",
        "topic": "Government and Public Policy",
        "title": " Public funding in three categories across four countries in 2021",
        "csv": "Country \\t Education Funding(billion) \\t Healthcare Funding(billion) \\t Environmental Funding(billion) \\n USA \\t 200 \\t 250 \\t 80 \\n UK \\t 250 \\t 300 \\t 90 \\n Germany \\t 180 \\t 270 \\t 75 \\n France \\t 230 \\t 290 \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart reflects public funding across three categories in four countries for the year 2021. The categories include education, healthcare, and environmental funding, all measured in billions. The USA allocated $200 billion to education, $250 billion to healthcare, and $80 billion to environmental efforts. The UK's funding reached $250 billion for education, $300 billion for healthcare, and $90 billion for the environment. Germany provided $180 billion for education, $270 billion for healthcare, and $75 billion for environmental funding, while France designated $230 billion for education, $290 billion for healthcare, and topped environmental funding at $100 billion."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nfig = plt.figure(figsize=(12, 6)) \n\n# Data\ncountries = ['USA', 'UK', 'Germany', 'France']\neducation = [200, 250, 180, 230]\nhealthcare = [250, 300, 270, 290]\nenvironment = [80, 90, 75, 100]\n\n# Plot\nax = fig.add_subplot(111)\nax.bar(countries, education, label='Education Funding', bottom=0, color='#0f8dc7')\nax.bar(countries, healthcare, label='Healthcare Funding', bottom=education, color='#ec0f82')\nax.bar(countries, environment, label='Environmental Funding', bottom=[education[i]+healthcare[i] for i in range(len(countries))], color='#4ab24c')\n\n# Title, labels and legend\nax.set_title('Public funding in three categories across four countries in 2021', fontsize=14)\nax.set_xlabel('Country', fontsize=14)\nax.set_ylabel('Funding (billion)', fontsize=14)\nax.legend(loc='upper left')\n\n# Modify x-axis\nplt.xticks(rotation=90)\n\n# Adjust figure size\nplt.tight_layout()\n\n# Save figure\nplt.savefig('bar chart/png/123.png')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much more is the total public funding in the USA than in Germany?",
            "output": "$25 billion"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_67",
        "img": "./bar_chart/png/bar_67.png",
        "topic": "Manufacturing and Production",
        "title": " Total manufactured goods and exports in four countries in 2021",
        "csv": "Country \\t Manufactured Goods(million) \\t Exports(million) \\n USA \\t 500 \\t 450 \\n UK \\t 400 \\t 430 \\n Germany \\t 350 \\t 400 \\n France \\t 300 \\t 370 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the quantity of manufactured goods and exports in millions for four different countries in 2021. The USA produced 500 million units of manufactured goods and exported 450 million. The UK's figures show 400 million in manufactured goods with 430 million units exported. Germany had a production of 350 million units and exports reaching 400 million. Lastly, France produced 300 million units of manufactured goods and exported 370 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nfig= plt.figure(figsize=(10, 6))\nax= fig.add_subplot()\n\n# Get data\ndata = [['USA', 500, 450],\n        ['UK', 400, 430],\n        ['Germany', 350, 400],\n        ['France', 300, 370]]\ncountries,manufactured_goods,exports = zip(*data)\n\n# Set bar width\nwidth = 0.35\n\n# Plot bars\nax.bar(countries, manufactured_goods, width, label='Manufactured Goods')\nax.bar(np.arange(len(countries))+width, exports, width, label='Exports')\n\n# Add xticks on the middle of the group bars\nax.set_xticks(np.arange(len(countries)) + width / 2)\nax.set_xticklabels(countries, fontsize=10, rotation=0, wrap=True)\n\n# Set title\nplt.title('Total manufactured goods and exports in four countries in 2021', fontsize=15)\n\n# Create legend\nax.legend(loc='best')\n\n# Set grid\nax.grid(axis='y')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('bar chart/png/249.png')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the total of manufactured goods for UK and Germany combined?",
            "output": "750 million"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_241",
        "img": "./bar_chart/png/bar_241.png",
        "topic": "Retail and E-commerce",
        "title": " Number of online and retail sales for four products in 2021",
        "csv": "Product \\t Online sales(million) \\t Retail sales(million) \\n Shoes \\t 42 \\t 50 \\n Clothes \\t 65 \\t 80 \\n Bags \\t 35 \\t 45 \\n Accessories \\t 21 \\t 30 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart illustrates the online and retail sales in millions for four different products in 2021. Shoes saw online sales of 42 million and retail sales of 50 million, clothes had online sales of 65 million compared to retail's 80 million, bags experienced online sales of 35 million against 45 million in retail sales, and accessories recorded 21 million in online sales while achieving 30 million in retail sales."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nproduct = ['Shoes','Clothes','Bags','Accessories']\nonline = [42, 65, 35, 21]\nretail = [50, 80, 45, 30]\n\nfig = plt.figure(figsize=(8,5))\nax = fig.add_subplot()\n\nx = np.arange(len(product))\nax.bar(x-0.2, online, width=0.4, color='#00FFFF', label='Online sales')\nax.bar(x+0.2, retail, width=0.4, color='#FF6347', label='Retail sales')\n\nax.set_xticks(x)\nax.set_xticklabels(product, rotation=45, wrap=True)\nax.set_title('Number of online and retail sales for four products in 2021')\nax.legend(loc='best')\nplt.tight_layout()\n\nplt.savefig('bar chart/png/203.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which product had the smallest difference between online and retail sales?",
            "output": "Bags"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_170",
        "img": "./bar_chart/png/bar_170.png",
        "topic": "Real Estate and Housing Market",
        "title": " Number of Houses sold and Average Sale Price in four cities in 2021",
        "csv": "City \\t Houses Sold \\t Average Sale Price(thousand) \\n New York \\t 400 \\t 400 \\n Los Angeles \\t 500 \\t 500 \\n Chicago \\t 600 \\t 350 \\n Dallas \\t 700 \\t 450 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates housing market data for four cities in 2021. The data include the number of houses sold and their average sale price in thousands. New York saw 400 houses sold at an average price of $400,000. Los Angeles had 500 houses sold with an average price of $500,000. Chicago's figures reached 600 houses sold at a lower average price of $350,000. Dallas had the highest number of houses sold at 700, with an average sale price of $450,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nfig = plt.figure(figsize=(15,7))\nax = fig.add_subplot(111)\n\n# Define data\ncities = ['New York', 'Los Angeles', 'Chicago', 'Dallas']\nhouses_sold = [400, 500, 600, 700]\navg_sale_price = [400, 500, 350, 450]\n\n# Plot data\nax.bar(cities, houses_sold, width=0.2, label='Houses Sold')\nax.bar(cities, avg_sale_price, width=-0.2, label='Average Sale Price(thousand)', bottom=houses_sold)\n\n# Set axes ticks\nax.set_xticks(cities)\n\n# Add title and legend\nax.set_title('Number of Houses sold and Average Sale Price in four cities in 2021')\nax.legend(loc='upper right')\n\n# Automatically resize image\nplt.tight_layout()\n\n# Save image\nplt.savefig('bar_170.png')\n\n# Clear image\nplt.clf()"
        },
        "QA": {
            "input": "What is the average sale price of houses in Dallas?",
            "output": "450"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_215",
        "img": "./bar_chart/png/bar_215.png",
        "topic": "Arts and Culture",
        "title": " Number of arts and culture venues in four countries in 2021",
        "csv": "Country \\t Museums \\t Theaters \\t Galleries \\n USA \\t 200 \\t 150 \\t 120 \\n UK \\t 220 \\t 170 \\t 100 \\n Germany \\t 150 \\t 130 \\t 90 \\n France \\t 180 \\t 160 \\t 110 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the quantity of museums, theaters, and galleries in the USA, UK, Germany, and France in 2021. The USA hosts 200 museums, 150 theaters, and 120 galleries. The UK surpasses this with 220 museums and 170 theaters but has fewer galleries at 100. Germany features 150 museums, 130 theaters, and 90 galleries. France places between these with 180 museums, 160 theaters, and 110 galleries."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 6))\nax = plt.subplot()\n\nCountry = ['USA', 'UK', 'Germany', 'France']\nMuseums = [200, 220, 150, 180]\nTheaters = [150, 170, 130, 160]\nGalleries = [120, 100, 90, 110]\n\nax.bar(Country, Museums, label='Museums')\nax.bar(Country, Theaters, bottom=Museums, label='Theaters')\nax.bar(Country, Galleries, bottom=[x + y for x, y in zip(Museums, Theaters)], label='Galleries')\n\nax.set_xlabel('Country')\nax.set_ylabel('Number of venues')\nax.set_title('Number of arts and culture venues in four countries in 2021')\nax.legend(loc='upper right')\n\nplt.xticks(Country, rotation=45, ha='right', wrap=True)\nplt.tight_layout()\nplt.savefig('bar chart/png/439.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many museums are there in Germany?",
            "output": "150"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_418",
        "img": "./bar_chart/png/bar_418.png",
        "topic": "Sports and Entertainment",
        "title": " Average Attendance and Viewers for Four Sports in 2021",
        "csv": "Sport \\t Average Attendance(thousand) \\t Average Viewers(million) \\n Football \\t 75 \\t 7.5  \\n Basketball \\t 20 \\t 2.5  \\n Hockey \\t 12 \\t 1  \\n Baseball \\t 30 \\t 3 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart illustrates the average attendance in thousands and average viewers in millions for four different sports in 2021. Football leads with an average attendance of 75 thousand and viewership of 7.5 million. Basketball follows with 20 thousand average attendance and 2.5 million viewers. Hockey has an attendance of 12 thousand and 1 million viewers, while baseball shows 30 thousand average attendees and 3 million viewers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nfig = plt.figure(figsize=(10,6)) \nax = fig.add_subplot() \nax.bar([\"Football\",\"Basketball\",\"Hockey\",\"Baseball\"], \n       [75,20,12,30], width=0.6,bottom=0, color=\"green\") \nax.bar([\"Football\",\"Basketball\",\"Hockey\",\"Baseball\"], \n       [7.5,2.5,1,3], width=0.6,bottom=0, color=\"red\") \nplt.title(\"Average Attendance and Viewers for Four Sports in 2021\", fontsize=14) \nax.set_ylabel(\"Number\", fontsize=14) \nax.set_xticklabels([\"Football\",\"Basketball\",\"Hockey\",\"Baseball\"], rotation=45, fontsize=14, wrap=True) \nax.legend([\"Average Attendance(thousand)\", \"Average Viewers(million)\"], fontsize=12, loc=\"upper left\") \nplt.tight_layout() \nfig.savefig(\"bar_418.png\") \nplt.clf()"
        },
        "QA": {
            "input": "How many million average viewers does football have?",
            "output": "7.5 million"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_30",
        "img": "./bar_chart/png/bar_30.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing output and export volume of four countries in 2021",
        "csv": "Country \\t Manufacturing Output \\t Export Volume \\n USA \\t 20000 \\t 18000 \\n UK \\t 25000 \\t 22000 \\n Germany \\t 18000 \\t 16000 \\n France \\t 23000 \\t 21000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the manufacturing output and export volume for four countries in 2021. The USA shows a manufacturing output of 20,000 units and an export volume of 18,000 units. The UK's manufacturing output stands at 25,000 units with an export volume of 22,000 units. Germany has a lower manufacturing output of 18,000 units and an export volume of 16,000 units. France has a manufacturing output of 23,000 units and an export volume of 21,000 units."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nCountry = [\"USA\", \"UK\", \"Germany\", \"France\"]\nManufacturing_Output = [20000, 25000, 18000, 23000]\nExport_Volume = [18000, 22000, 16000, 21000]\n\nfig, ax = plt.subplots(figsize=(10, 6))\nax.bar(Country, Manufacturing_Output, bottom=Export_Volume, label='Manufacturing Output', color='blue')\nax.bar(Country, Export_Volume, label='Export Volume', color='orange')\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2)\nplt.title(\"Manufacturing output and export volume of four countries in 2021\")\nplt.xticks(rotation=45, wrap=True)\nplt.ylabel('Value')\nplt.tight_layout()\nplt.savefig('bar chart/png/57.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is Germany's manufacturing output compared to its export volume?",
            "output": "2000 units"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_288",
        "img": "./bar_chart/png/bar_288.png",
        "topic": "Tourism and Hospitality",
        "title": " Number of Hotels, Restaurants and Tourist Sites in four major cities in 2021",
        "csv": "City \\t Hotels \\t Restaurants \\t Tourist Sites \\n Tokyo \\t 25 \\t 90 \\t 100 \\n Bangkok \\t 20 \\t 85 \\t 80 \\n Istanbul \\t 30 \\t 95 \\t 110 \\n Rome \\t 35 \\t 100 \\t 120 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of Hotels, Restaurants, and Tourist Sites in four major cities in 2021\" illustrates the quantities of these amenities and attractions across different cities. Tokyo is represented with 25 hotels, 90 restaurants, and 100 tourist sites. Bangkok has 20 hotels, 85 restaurants, and 80 tourist sites. Istanbul features 30 hotels, 95 restaurants, and 110 tourist sites. Lastly, Rome has 35 hotels, 100 restaurants, and 120 tourist sites."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# set figure size\nplt.figure(figsize=(7.5,5))\n\n# define data\ncity = np.array(['Tokyo', 'Bangkok', 'Istanbul', 'Rome'])\nhotel = np.array([25, 20, 30, 35])\nrestaurant = np.array([90, 85, 95, 100])\ntourist = np.array([100, 80, 110, 120])\n\n# plot data\nx = np.arange(len(city))\nwidth = 0.2\n\nax = plt.subplot()\nax.bar(x, hotel, width, label='Hotel')\nax.bar(x+width, restaurant, width, label='Restaurant')\nax.bar(x+width*2, tourist, width, label='Tourist Sites')\n\n# set xticks and legend\nax.set_xticks(x+width)\nax.set_xticklabels(city, rotation=45, ha=\"right\", wrap=True)\nax.legend(loc='upper left', bbox_to_anchor=(1,1))\n\n# set title and labels\nplt.title('Number of Hotels, Restaurants and Tourist Sites in four major cities in 2021')\nplt.xlabel('City')\nplt.ylabel('Number')\n\n# set grid\nplt.grid(linestyle='--', alpha=0.3)\n\n# adjust the figure\nplt.tight_layout()\n\n# save figure\nplt.savefig('bar chart/png/295.png')\n\n# clear state\nplt.clf()"
        },
        "QA": {
            "input": "How many hotels are there in Istanbul?",
            "output": "30"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_120",
        "img": "./bar_chart/png/bar_120.png",
        "topic": "Healthcare and Health",
        "title": " Number of healthcare facilities, doctors, and nurses in four countries in 2021",
        "csv": "Country \\t Hospitals \\t Doctors \\t Nurses \\n USA \\t 450 \\t 7000 \\t 10000 \\n UK \\t 500 \\t 6500 \\t 11000 \\n Germany \\t 400 \\t 6000 \\t 9000 \\n France \\t 470 \\t 7200 \\t 12000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of healthcare facilities and medical staff in the USA, UK, Germany, and France for the year 2021. The USA reports 450 hospitals, 7000 doctors, and 10000 nurses. The UK shows a slightly higher number of hospitals at 500, with 6500 doctors and 11000 nurses. Germany has 400 hospitals, 6000 doctors, and 9000 nurses. France has 470 hospitals, 7200 doctors, and the highest number of nurses at 12000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['USA', 450, 7000, 10000],\n        ['UK', 500, 6500, 11000], \n        ['Germany', 400, 6000, 9000], \n        ['France', 470, 7200, 12000]] \n\nx = np.arange(len(data))\nwidth = 0.2\n\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(111)\n\nax.bar(x, [i[1] for i in data], width, label='Hospitals')\nax.bar(x + width, [i[2] for i in data], width, label='Doctors')\nax.bar(x + (2 * width), [i[3] for i in data], width, label='Nurses')\n\nax.set_xticks(x + (width/2))\nax.set_xticklabels([i[0] for i in data], rotation=90, wrap=True)\nax.legend()\n\nax.set_title(\"Number of healthcare facilities, doctors, and nurses in four countries in 2021\")\n\nplt.tight_layout()\nplt.savefig('bar chart/png/547.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more doctors are there in the USA than in Germany?",
            "output": "1000"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_113",
        "img": "./bar_chart/png/bar_113.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare resources and patient numbers in four countries in 2021",
        "csv": "Country \\t Hospitals \\t Medical Staff \\t Patients \\n USA \\t 500 \\t 7500 \\t 50000 \\n UK \\t 400 \\t 6500 \\t 40000 \\n Germany \\t 450 \\t 7000 \\t 45000 \\n France \\t 550 \\t 8000 \\t 50000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart presents the number of hospitals, medical staff, and patients in the USA, UK, Germany, and France for the year 2021. The USA is depicted with 500 hospitals, 7500 medical staff members, and 50,000 patients. The UK follows with 400 hospitals, 6500 medical staff, and 40,000 patients. Germany has 450 hospitals, 7000 medical staff, and 45,000 patients, while France shows 550 hospitals, 8000 medical staff, and also 50,000 patients."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(9,5))\nax = fig.add_subplot()\n\ndata = [['USA', 500, 7500, 50000],\n        ['UK', 400, 6500, 40000],\n        ['Germany', 450, 7000, 45000],\n        ['France', 550, 8000, 50000]]\n\nx = np.arange(4)\nhospital = [i[1] for i in data]\nmedical = [i[2] for i in data]\npatients = [i[3] for i in data]\n\nbar_width = 0.25\nplt.bar(x, hospital, width=bar_width, label=\"Hospitals\")\nplt.bar(x + bar_width, medical, width=bar_width, label=\"Medical Staff\")\nplt.bar(x + bar_width * 2, patients, width=bar_width, label=\"Patients\")\n\nplt.xticks(x + bar_width, [i[0] for i in data], rotation=45, wrap=True)\nplt.title(\"Healthcare resources and patient numbers in four countries in 2021\")\nplt.legend(bbox_to_anchor=(1,1))\n\nplt.tight_layout()\nplt.savefig('bar_113.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many medical staff are there in the USA?",
            "output": "7500"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_309",
        "img": "./bar_chart/png/bar_309.png",
        "topic": "Science and Engineering",
        "title": " Science and engineering progress from 2020 to 2023",
        "csv": "Year \\t Space Exploration(hundred km) \\t Engineering Advances(percentage) \\t Scientific Discoveries(count) \\n 2020 \\t 10 \\t 10 \\t 100 \\n 2021 \\t 13 \\t 12 \\t 110 \\n 2022 \\t 15 \\t 15 \\t 120 \\n 2023 \\t 18 \\t 20 \\t 130 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart outlines the progression in science and engineering from 2020 to 2023. It catalogs space exploration in hundred kilometers, percentage increase in engineering advances, and count of scientific discoveries yearly. In 2020, space exploration reached 10 hundred kilometers, engineering advances accounted for 10%, and there were 100 scientific discoveries. This trend shows an annual increase with space exploration extending to 18 hundred kilometers, engineering advances growing to 20%, and 130 scientific discoveries by 2023."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(10, 5)) \nax = fig.add_subplot(111) \n\nx = [\"2020\",\"2021\",\"2022\",\"2023\"] \ny1 = [10,13,15,18]\ny2 = [10,12,15,20]\ny3 = [100,110,120,130]\n\nax.bar(x,y1,label=\"Space Exploration(hundred km)\", bottom=0, color=\"green\") \nax.bar(x,y2,label=\"Engineering Advances(percentage)\", bottom=y1, color=\"red\") \nax.bar(x,y3,label=\"Scientific Discoveries(count)\", bottom= [i+j for i,j in zip(y1,y2)], color=\"blue\") \n\nplt.title(\"Science and engineering progress from 2020 to 2023\") \nax.legend(loc='upper left', bbox_to_anchor=(1,1)) \nax.set_xticks(x)\nax.set_xticklabels(x,rotation=45,wrap=True) \nplt.tight_layout() \nplt.savefig(\"bar_309.png\") \nplt.clf()"
        },
        "QA": {
            "input": "By what percentage did Engineering Advances grow from 2020 to 2023?",
            "output": "100%"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_246",
        "img": "./bar_chart/png/bar_246.png",
        "topic": "Healthcare and Health",
        "title": " Number of doctors and nurses in four countries in 2021",
        "csv": "Country \\t Doctors(1000s) \\t Nurses(1000s) \\n USA \\t 7 \\t 23 \\n UK \\t 4 \\t 17 \\n Germany \\t 6 \\t 20 \\n France \\t 5 \\t 19 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart depicts the number of doctors and nurses in the thousands for four countries in 2021. In the USA, there are 7 thousand doctors and 23 thousand nurses. The UK is shown with 4 thousand doctors and 17 thousand nurses. Germany has 6 thousand doctors and 20 thousand nurses. France reports 5 thousand doctors and 19 thousand nurses."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nCountry = [\"USA\",\"UK\",\"Germany\",\"France\"]\nDoctors = [7,4,6,5]\nNurses = [23,17,20,19]\n\n# Create figure\nfig = plt.figure(figsize=(8,6))\n\n# Plot\nax = fig.add_subplot(1, 1, 1)\nax.bar(Country, Doctors, bottom=Nurses, label=\"Doctors\")\nax.bar(Country, Nurses, label=\"Nurses\")\n\n# Label\nax.set_title(\"Number of doctors and nurses in four countries in 2021\")\nax.legend()\nax.set_xticks(Country)\n\n# Display\nplt.tight_layout()\nplt.savefig(\"bar chart/png/422.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How many more nurses does the USA have compared to the UK?",
            "output": "6"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_52",
        "img": "./bar_chart/png/bar_52.png",
        "topic": "Food and Beverage Industry",
        "title": " Number of restaurants, cafes and takeaways in four countries in 2021",
        "csv": "Country \\t Restaurants \\t Cafes \\t Takeaways \\n USA \\t 20 \\t 30 \\t 10 \\n UK \\t 15 \\t 25 \\t 12 \\n Germany \\t 18 \\t 32 \\t 14 \\n France \\t 17 \\t 27 \\t 13 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of restaurants, cafes, and takeaways in four countries during 2021. In the USA, there are 20 restaurants, 30 cafes, and 10 takeaways. The UK features 15 restaurants, 25 cafes, and 12 takeaways. Germany is home to 18 restaurants, 32 cafes, and 14 takeaways, whereas France comprises 17 restaurants, 27 cafes, and 13 takeaways."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure before plotting\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot()\n\n# Plot the data with the type of bar chart\nCountry = ['USA', 'UK', 'Germany', 'France']\nRestaurants = [20, 15, 18, 17]\nCafes = [30, 25, 32, 27]\nTakeaways = [10, 12, 14, 13]\n\n# Set the bottom parameter in the bar command\nx = np.arange(len(Country))\nwidth = 0.2\n\nrects1 = ax.bar(x-width, Restaurants, width, label='Restaurants')\nrects2 = ax.bar(x, Cafes, width, label='Cafes')\nrects3 = ax.bar(x+width, Takeaways, width, label='Takeaways')\n\n# xticks to prevent interpolation\nax.set_xticks(x)\nax.set_xticklabels(Country, rotation=45, wrap=True)\n\n# Set the title of the figure\nplt.title('Number of restaurants, cafes and takeaways in four countries in 2021')\n\n# Set the legend location without interfering the chart\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the image as bar chart/png/410.png\nplt.savefig('bar chart/png/410.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "How many more cafes are there than restaurants in France?",
            "output": "10"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_26",
        "img": "./bar_chart/png/bar_26.png",
        "topic": "Arts and Culture",
        "title": " Number of movie theaters, cinemas and concerts in four countries in 2021",
        "csv": "Country \\t Movie Theaters \\t Cinemas \\t Concerts \\n USA \\t 150 \\t 200 \\t 300 \\n UK \\t 180 \\t 230 \\t 280 \\n Germany \\t 170 \\t 210 \\t 250 \\n France \\t 140 \\t 190 \\t 240 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the number of movie theaters, cinemas, and concerts across four countries in 2021. In the USA, there are 150 movie theaters, 200 cinemas, and 300 concerts. The UK has slightly more, with 180 movie theaters, 230 cinemas, and 280 concerts. Germany's numbers are a bit lower, with 170 movie theaters, 210 cinemas, and 250 concerts. France has the fewest in each category, with 140 movie theaters, 190 cinemas, and 240 concerts."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nx = ['USA', 'UK', 'Germany', 'France']\nwidth = 0.2\nax.bar(x, [150, 180, 170, 140], width=width, label='Movie Theaters')\nax.bar(x, [200, 230, 210, 190], width=width, bottom=[150, 180, 170, 140], label='Cinemas')\nax.bar(x, [300, 280, 250, 240], width=width, bottom=[350, 410, 380, 330], label='Concerts')\nax.set_title('Number of movie theaters, cinemas and concerts in four countries in 2021')\nax.set_xticks(x)\nplt.xticks(rotation=30)\nax.legend(loc=\"best\")\nplt.tight_layout()\nplt.savefig('bar chart/png/93.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest number of cinemas?",
            "output": "UK"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_107",
        "img": "./bar_chart/png/bar_107.png",
        "topic": "Government and Public Policy",
        "title": " Tax rate and public spending in four countries in 2021",
        "csv": "Country \\t Tax Rate(%) \\t Public Spending(billion) \\n USA \\t 25% \\t 500 \\n UK \\t 30% \\t 550 \\n Germany \\t 28% \\t 600 \\n France \\t 35% \\t 650 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the tax rate and public spending in billions for four countries in 2021. The USA has a 25% tax rate with public spending at 500 billion, while the UK exhibits a 30% tax rate and spends 550 billion. Germany shows a 28% tax rate and public spending of 600 billion. France, on the other hand, has the highest tax rate at 35% with public spending reaching 650 billion."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# set data\ncountry = ['USA','UK','Germany','France']\ntax_rate = [25,30,28,35]\npublic_spending = [500,550,600,650]\n\n# create figure\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\n\n# plotting\nax.bar(country, tax_rate, width=0.4, label='Tax Rate(%)', color='#539caf',align='center')\nax.bar(country, public_spending, width=0.4, label='Public Spending(billion)', color='#7663b0',align='center', bottom=tax_rate)\n\n# label\nax.set_xlabel('Country')\nax.set_ylabel('Tax Rate & Public Spending')\nax.set_title('Tax rate and public spending in four countries in 2021')\nax.set_xticks(country)\nax.legend(loc='upper left')\n\n# add grid\nax.grid(axis='y', linestyle='--')\n\n# figure layout\nfig.tight_layout()\n\n# save\nfig.savefig('bar_107.png')\n\n# clear current image state\nplt.cla()"
        },
        "QA": {
            "input": "How much public spending does France have?",
            "output": "650 billion"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_216",
        "img": "./bar_chart/png/bar_216.png",
        "topic": "Government and Public Policy",
        "title": " Government and public spending in four countries in 2021",
        "csv": "Country \\t Government Spending(billion) \\t Public Expenditure(billion) \\n USA \\t 4.5 \\t 5.2 \\n UK \\t 3.4 \\t 4.1 \\n Germany \\t 3.8 \\t 4.5 \\n France \\t 2.9 \\t 3.2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart presents the government and public spending in billions for four different countries in 2021. The United States shows government spending at 4.5 billion and public expenditure at 5.2 billion. For the UK, the figures are 3.4 billion for government spending and 4.1 billion for public expenditure. Germany's data reveals 3.8 billion spent by the government and 4.5 billion by the public. France shows a government spending of 2.9 billion and public expenditure of 3.2 billion."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,5))\nax = plt.gca()\nax.bar([\"USA\",\"UK\",\"Germany\",\"France\"],[4.5,3.4,3.8,2.9],label=\"Government Spending (billion)\",bottom=[5.2,4.1,4.5,3.2],width=0.4)\nax.bar([\"USA\",\"UK\",\"Germany\",\"France\"],[5.2,4.1,4.5,3.2],label=\"Public Expenditure (billion)\",width=0.4)\nplt.title(\"Government and public spending in four countries in 2021\")\nplt.xticks([\"USA\",\"UK\",\"Germany\",\"France\"])\nplt.legend(bbox_to_anchor=(1, 1), loc='upper left', ncol=1)\nplt.tight_layout()\nplt.savefig('bar chart/png/80.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the smallest difference between government spending and public expenditure?",
            "output": "France"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_59",
        "img": "./bar_chart/png/bar_59.png",
        "topic": "Technology and the Internet",
        "title": " Number of Internet and Smartphone Users in four countries in 2021",
        "csv": "Country \\t Internet Users(million) \\t Smartphone Users(million) \\n USA \\t 450 \\t 400 \\n UK \\t 300 \\t 250 \\n Germany \\t 250 \\t 200 \\n France \\t 200 \\t 150 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of internet and smartphone users, in millions, across four countries in 2021. The USA leads with 450 million internet users and 400 million smartphone users. The UK has 300 million internet users and 250 million smartphone users. Germany follows with 250 million internet users and 200 million smartphone users. France has the fewest among the listed, with 200 million internet users and 150 million smartphone users."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(4)\ninternet_users = [450, 300, 250, 200]\nsmartphone_users = [400, 250, 200, 150]\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot()\nax.bar(x-0.2, internet_users, width=0.4, label='Internet Users')\nax.bar(x+0.2, smartphone_users, width=0.4, label='Smartphone Users')\nax.set_xticks(x)\nax.set_xticklabels(('USA', 'UK', 'Germany', 'France'), rotation=45, wrap=True)\nax.set_title('Number of Internet and Smartphone Users in four countries in 2021')\nax.legend()\nplt.tight_layout()\nplt.savefig('bar chart/png/301.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many internet users are there in the UK?",
            "output": "300 million"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_384",
        "img": "./bar_chart/png/bar_384.png",
        "topic": "Agriculture and Food Production",
        "title": " Number of crops and livestock in four regions in 2021",
        "csv": "Region \\t Crops \\t Livestock \\n North America \\t 350 \\t 200 \\n Europe \\t 400 \\t 220 \\n Asia \\t 450 \\t 240 \\n Africa \\t 320 \\t 210 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the quantities of crops and livestock in four different regions during the year 2021. North America is represented with 350 crop units and 200 livestock units. Europe shows slightly higher numbers with 400 crop units and 220 livestock units. Asia leads the chart with 450 crop units and 240 livestock units. Africa, however, has lesser quantities with 320 crop units and 210 livestock units. Each region's agricultural composition is delineated by two vertical bars representing their respective quantities of crops and livestock."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.array([[350,200], [400,220], [450,240], [320,210]])\n\nregion = np.array(['North America', 'Europe', 'Asia', 'Africa'])\n\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot(111)\n\nplt.bar(region, data[:,0], label='Crops', width=0.4, bottom=data[:,1])\nplt.bar(region, data[:,1], label='Livestock', width=0.4)\nax.set_title(\"Number of crops and livestock in four regions in 2021\")\n\nax.legend(loc='upper right', bbox_to_anchor=(1.15, 1.0))\nplt.xticks(rotation=90, wrap=True)\n\nplt.tight_layout()\nplt.savefig(\"bar chart/png/190.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How much greater is the crop production in Europe compared to Africa?",
            "output": "80"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_137",
        "img": "./bar_chart/png/bar_137.png",
        "topic": "Education and Academics",
        "title": " Student enrollment and graduation rates in four countries in 2021",
        "csv": "Country \\t Students Enrolled \\t Graduates \\n USA \\t 2.5million \\t 0.5million \\n UK \\t 1.8million \\t 0.4million \\n Germany \\t 1.2million \\t 0.3million \\n France \\t 1.9million \\t 0.7million \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart presents the number of students enrolled and graduates in four countries for the year 2021. The USA had 2.5 million enrollments and 0.5 million graduates. The UK's figures show 1.8 million students enrolled and 0.4 million graduates. In Germany, there were 1.2 million enrollments with 0.3 million graduates, while France reported 1.9 million students enrolled and 0.7 million graduating."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\n\ncountry = ['USA','UK','Germany','France']\nenrolled = [2.5,1.8,1.2,1.9]\ngraduates = [0.5,0.4,0.3,0.7]\n\nax.bar(country, enrolled, width=0.4, label='Students Enrolled', color='blue')\nax.bar(country, graduates, width=0.4, bottom=enrolled, label='Graduates', color='orange')\nax.set_title('Student enrollment and graduation rates in four countries in 2021', fontsize=18)\nax.set_xlabel('Country', fontsize=14)\nax.set_ylabel('Students', fontsize=14)\nax.set_xticklabels(country, rotation=45, ha='right', fontsize=12)\nax.legend(loc='upper right', fontsize=12)\n\nplt.tight_layout()\nplt.savefig('bar chart/png/267.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest number of graduates in 2021?",
            "output": "France"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_9",
        "img": "./bar_chart/png/bar_9.png",
        "topic": "Law and Legal Affairs",
        "title": " Number of Laws and Provisions in four countries in 2021",
        "csv": "Country \\t Laws \\t Provisions \\n USA \\t 200 \\t 350 \\n UK \\t 250 \\t 400 \\n Germany \\t 280 \\t 420 \\n France \\t 270 \\t 390 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart presents data on the number of laws and provisions in the USA, UK, Germany, and France in 2021. The USA is shown to have 200 laws and 350 provisions, while the UK has 250 laws and 400 provisions. Germany has 280 laws and 420 provisions, and France follows with 270 laws and 390 provisions."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nCountry = ['USA', 'UK', 'Germany', 'France']\nLaws = [200, 250, 280, 270]\nProvisions = [350, 400, 420, 390]\n\nfig, ax = plt.subplots(figsize=(8,6))\nax.bar(Country, Laws, label='Laws', bottom=Provisions)\nax.bar(Country, Provisions, label='Provisions', bottom=0)\nax.set_title('Number of Laws and Provisions in four countries in 2021')\nax.set_xlabel('Country')\nax.set_ylabel('Amount')\nax.legend(loc='upper right')\nplt.xticks(Country)\nplt.tight_layout()\nplt.savefig('bar chart/png/222.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest number of provisions?",
            "output": "Germany"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_428",
        "img": "./bar_chart/png/bar_428.png",
        "topic": "Transportation and Logistics",
        "title": " Average cost and time for four transportation modes in 2021",
        "csv": "Mode \\t Average cost(USD) \\t Average time(min) \\n Train \\t 50 \\t 90 \\n Bus \\t 30 \\t 100 \\n Car \\t 60 \\t 60 \\n Bike \\t 20 \\t 30 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the average cost in USD and average travel time in minutes for four different modes of transportation in 2021. The average cost of a train ride is $50, taking 90 minutes, while a bus trip averages $30 and 100 minutes. The cost for traveling by car is $60, with an average travel time of 60 minutes. Lastly, biking costs $20 on average and takes about 30 minutes. Each transportation mode's cost and time are independently plotted on the bar chart."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['Train',50,90],['Bus',30,100],['Car',60,60],['Bike',20,30]]\n\nx_pos = np.arange(len(data))\ncosts = [cost[1] for cost in data]\ntimes = [time[2] for time in data]\n\nfig = plt.figure(figsize=(12,8))\nax = fig.add_subplot(111)\nax.bar(x_pos, costs, label='Average Cost', alpha=0.5, width=0.3)\nax.bar(x_pos + 0.3, times, label='Average Time', alpha=0.5, width=0.3)\n\nax.set_title('Average Cost and Time for Four Transportation Modes in 2021')\nax.set_xticks(x_pos)\nax.set_xticklabels([mode[0] for mode in data], rotation=45, ha='right')\nax.legend(bbox_to_anchor=(1,1), loc='upper left')\n\nfor i, v in enumerate(costs):\n    ax.text(i-0.1, v+2, str(v), color='black', fontsize=12)\nfor i, v in enumerate(times):\n    ax.text(i+0.2, v+2, str(v), color='black', fontsize=12)\n\nplt.tight_layout()\nplt.savefig('bar chart/png/157.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in average travel time between the car and the train?",
            "output": "30 minutes"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_284",
        "img": "./bar_chart/png/bar_284.png",
        "topic": "Business and Finance",
        "title": " GDP and growth rate of four countries in 2021",
        "csv": "Country \\t GDP(trillion) \\t Growth Rate \\n USA \\t 21 \\t 3.7 \\n UK \\t 3 \\t 2.1 \\n Germany \\t 4 \\t 2.2 \\n France \\t 3.4 \\t 2.3 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the Gross Domestic Product (GDP) in trillions and Growth Rate percentages for four countries in 2021. The USA shows a GDP of 21 trillion and a growth rate of 3.7%. The UK follows with a GDP of 3 trillion and a growth rate of 2.1%. Germany has a 4 trillion GDP with a 2.2% growth rate, and France presents a 3.4 trillion GDP paired with a 2.3% growth rate."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot()\n\ncountry = ['USA', 'UK', 'Germany', 'France']\nGDP = [21, 3, 4, 3.4]\ngrowth_rate = [3.7, 2.1, 2.2, 2.3]\n\nax.bar(country, GDP, width = 0.6, bottom = 0, align = 'center', color = '#F08080', label = 'GDP (trillion)')\nax.bar(country, growth_rate, width = 0.3, bottom = 0, align = 'edge', color = '#87CEFA', label = 'Growth Rate')\n\nax.set_xticklabels(country, rotation = 0, ha = 'center', wrap = True)\nax.set_title('GDP and growth rate of four countries in 2021')\nax.legend(loc = 'best')\n\nplt.tight_layout()\nplt.savefig('bar chart/png/507.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the growth rate of France?",
            "output": "2.3"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_194",
        "img": "./bar_chart/png/bar_194.png",
        "topic": "Education and Academics",
        "title": " Number of students and average score of education levels in 2021",
        "csv": "Level \\t Students(thousands) \\t AverageScore \\n Primary \\t 200 \\t 85 \\n Secondary \\t 160 \\t 90 \\n College \\t 110 \\t 95 \\n University \\t 80 \\t 97 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart represents the number of students in thousands and the average score for different education levels in 2021. Primary education has 200,000 students with an average score of 85, secondary education reports 160,000 students scoring an average of 90, college level comprises 110,000 students with an average score of 95, and university level includes 80,000 students with an average score of 97."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nLevel = [\"Primary\", \"Secondary\", \"College\", \"University\"]\nStudents = [200, 160, 110, 80]\nAverageScore = [85, 90, 95, 97]\n\nfig = plt.figure(figsize=(8, 5))\nax = fig.add_subplot(1, 1, 1)\nax.bar(Level, Students, 0.5, label=\"Students\", color=\"lightblue\")\nax.bar(Level, AverageScore, 0.5, label=\"AverageScore\", color=\"orange\", bottom=Students)\n\nax.set_title('Number of students and average score of education levels in 2021')\nax.set_xlabel(\"Level\")\nax.set_ylabel(\"Number\")\nax.legend(loc=\"upper center\")\nax.set_xticks(np.arange(len(Level)) + 0.25)\nax.set_xticklabels(Level, rotation=45, ha=\"right\", wrap=True)\n\nfig.tight_layout()\nfig.savefig(\"bar chart/png/14.png\", dpi=100)\n\nplt.clf()"
        },
        "QA": {
            "input": "What is the average score of college students?",
            "output": "95"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_276",
        "img": "./bar_chart/png/bar_276.png",
        "topic": "Business and Finance",
        "title": " Revenue and Profit of four countries in 2021",
        "csv": "Country \\t Revenue(million) \\t Profit(million) \\n USA \\t 9000 \\t 1200 \\n UK \\t 8000 \\t 1400 \\n Germany \\t 7000 \\t 1300 \\n France \\t 6000 \\t 1500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the revenue and profit in millions for four countries in 2021. It shows the USA with a revenue of 9000 million and a profit of 1200 million, the UK with 8000 million revenue and 1400 million profit, Germany with 7000 million revenue and 1300 million profit, and France with 6000 million revenue and the highest profit of 1500 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ncountry = [\"USA\", \"UK\", \"Germany\", \"France\"]\nRevenue = [9000, 8000, 7000, 6000]\nProfit = [1200, 1400, 1300, 1500]\n\nfig, ax = plt.subplots(figsize=(10, 6))\nax.bar(country, Revenue, label=\"Revenue\", bottom=Profit)\nax.bar(country, Profit, label=\"Profit\")\nax.set_title(\"Revenue and Profit of four countries in 2021\")\nax.set_xlabel(\"Country\")\nax.set_ylabel(\"Amount (million)\")\nax.legend(loc=\"best\")\nplt.xticks(rotation=45, ha=\"right\")\nplt.tight_layout()\nplt.savefig(\"bar chart/png/62.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How much revenue did Germany generate in 2021?",
            "output": "7000 million"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_225",
        "img": "./bar_chart/png/bar_225.png",
        "topic": "Social Sciences and Humanities",
        "title": " Number of publications in Social Sciences and Humanities in four countries in 2021",
        "csv": "Country \\t Economics \\t Education \\t Philosophy \\n USA \\t 200 \\t 250 \\t 50 \\n UK \\t 180 \\t 220 \\t 60 \\n Germany \\t 140 \\t 200 \\t 70 \\n France \\t 160 \\t 230 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the number of publications across three academic fields\u2014Economics, Education, and Philosophy\u2014in four different countries for the year 2021. According to the data, the USA published 200 works in Economics, 250 in Education, and 50 in Philosophy. The UK had 180 publications in Economics, 220 in Education, and 60 in Philosophy. Germany's counts were 140 in Economics, 200 in Education, and 70 in Philosophy, while France had 160, 230, and 80 publications in those respective fields."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111)\nax.bar(['USA','UK','Germany','France'], [200,180,140,160], label='Economics', width=0.3, color='b', bottom=0)\nax.bar(['USA','UK','Germany','France'], [250,220,200,230], label='Education', width=0.3, color='r', bottom=[200,180,140,160])\nax.bar(['USA','UK','Germany','France'], [50,60,70,80], label='Philosophy', width=0.3, color='g', bottom=[450,400,340,390])\nax.set_xticks(['USA','UK','Germany','France'])\nax.set_ylabel('Number of Publications')\nax.set_title('Number of publications in Social Sciences and Humanities in four countries in 2021')\nax.legend(loc='upper right')\nax.tick_params(axis='x', rotation=60, labelsize=9)\nplt.tight_layout()\nplt.savefig('bar chart/png/77.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest number of publications in Philosophy?",
            "output": "France"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_275",
        "img": "./bar_chart/png/bar_275.png",
        "topic": "Social Media and the Web",
        "title": " Social media and web user count in four countries in 2021",
        "csv": "Country \\t Social Media Users(million) \\t Web Users(million) \\n USA \\t 220 \\t 350 \\n UK \\t 130 \\t 240 \\n Germany \\t 190 \\t 290 \\n France \\t 150 \\t 210 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the count of social media and web users in millions across four countries for the year 2021. In the USA, there are 220 million social media users compared to 350 million web users. The UK has 130 million users on social media and 240 million web users. Germany accounts for 190 million social media users and 290 million web users, whereas France reports 150 million social media users and 210 million web users."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nCountry = [\"USA\",\"UK\",\"Germany\",\"France\"]\nSocial_Media_Users = [220,130,190,150]\nWeb_Users = [350,240,290,210]\n\nfig = plt.figure(figsize=(14,7))\nax = fig.add_subplot(111)\nax.bar(Country, Social_Media_Users, width=0.4, color='b', label='Social Media Users')\nax.bar(Country, Web_Users, width=0.4, bottom=Social_Media_Users, color='g', label='Web Users')\nplt.xticks(np.arange(len(Country)), Country,rotation=30)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)\nax.set_title('Social media and web user count in four countries in 2021', fontsize=18)\nplt.tight_layout()\nplt.savefig('bar chart/png/194.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more web users are there in the UK than in France?",
            "output": "30 million"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_393",
        "img": "./bar_chart/png/bar_393.png",
        "topic": "Tourism and Hospitality",
        "title": " Number of hotels and tourists in four countries in 2021",
        "csv": "Destination \\t Hotels \\t Tourists(hundred) \\n USA \\t 30 \\t 45 \\n UK \\t 20 \\t 40 \\n Germany \\t 40 \\t 47 \\n France \\t 35 \\t 44 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the number of hotels and tourists (in hundreds) in four countries during 2021. It compares these two categories across the USA, UK, Germany, and France. Specifically, the USA has 30 hotels and 45 hundred tourists, the UK has 20 hotels and 40 hundred tourists, Germany leads with 40 hotels and 47 hundred tourists, and France features 35 hotels with 44 hundred tourists."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10, 5))\n\nDestination = ['USA','UK','Germany','France']\nHotels = [30,20,40,35]\nTourists = [45,40,47,44]\n\nax = plt.subplot()\nax.bar(Destination, Hotels, width=0.2, bottom=0, label='Hotels')\nax.bar(Destination, Tourists, width=0.2, bottom=Hotels, label='Tourists(hundred)')\nax.set_title('Number of hotels and tourists in four countries in 2021')\nax.set_ylabel('Number of hotels/tourists')\nax.set_xlabel('Destination')\nax.legend(loc='upper center')\nplt.xticks(Destination, rotation=45, wrap=True)\nplt.tight_layout()\nplt.savefig('bar_393.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many hundred tourists visited France?",
            "output": "44"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_108",
        "img": "./bar_chart/png/bar_108.png",
        "topic": "Sports and Entertainment",
        "title": " Number of sports fans and TV viewers in four countries in 2021",
        "csv": "Country \\t Sports Fans \\t TV Viewers \\n USA \\t 20000 \\t 50000 \\n UK \\t 25000 \\t 45000 \\n Germany \\t 18000 \\t 40000 \\n France \\t 23000 \\t 47000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the number of sports fans and TV viewers in the USA, UK, Germany, and France during 2021. In the USA, there are 20,000 sports fans and 50,000 TV viewers. The UK has a slightly higher number of sports fans at 25,000 and slightly fewer TV viewers at 45,000. Germany features 18,000 sports fans and 40,000 TV viewers. France shows 23,000 sports fans, with TV viewers totaling 47,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np\n\ndata = np.array([[20000, 50000],\n                 [25000, 45000],\n                 [18000, 40000],\n                 [23000, 47000]])\n\nlabels = ['USA', 'UK', 'Germany', 'France']\n\nsport_fans = data[:, 0]\ntv_viewers = data[:, 1]\n\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\nax.bar(labels, sport_fans, bottom=0, label='Sports Fans', width=0.4)\nax.bar(labels, tv_viewers, bottom=sport_fans, label='TV Viewers', width=0.4)\n\nax.set_title('Number of Sports Fans and TV Viewers in Four Countries in 2021')\nax.set_ylabel('Number of People')\nax.legend(loc='upper left')\nax.grid(True, linestyle='--', color='grey', linewidth=1)\nplt.xticks(rotation=45) \nplt.tight_layout() \nplt.savefig('bar chart/png/396.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more sports fans does the UK have compared to Germany?",
            "output": "7000"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_118",
        "img": "./bar_chart/png/bar_118.png",
        "topic": "Energy and Utilities",
        "title": " Energy production from renewable and non-renewable sources in four regions in 2021",
        "csv": "Region \\t Renewable Energy(million KW) \\t Non-Renewable Energy(million KW) \\n North America \\t 1000 \\t 3000 \\n Europe \\t 2000 \\t 4000 \\n Asia \\t 3000 \\t 5000 \\n South America \\t 1500 \\t 3500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates energy production in million kilowatts from renewable and non-renewable sources across four regions in 2021. North America's renewable energy production is 1000 million kW, with non-renewable at 3000 million kW. Europe shows 2000 million kW renewable and 4000 million kW non-renewable. Asia leads with 3000 million kW from renewables and 5000 million kW from non-renewables. South America has 1500 million kW renewable and 3500 million kW of non-renewable energy production."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['North America',1000,3000],['Europe',2000,4000],['Asia',3000,5000],['South America',1500,3500]]\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot()\n\nx = np.arange(len(data))\nwidth = 0.3\n\nrenewable = [i[1] for i in data]\nnon_renewable = [i[2] for i in data]\n\nax.bar(x, renewable, width=width, label='Renewable Energy (million KW)', color='green')\nax.bar(x + width, non_renewable, width=width, label='Non-Renewable Energy (million KW)', color='red')\n\nax.set_xticks(x + width/2)\nax.set_xticklabels([i[0] for i in data], rotation=45, ha='right', wrap=True)\n\nax.set_title('Energy production from renewable and non-renewable sources in four regions in 2021')\nax.legend()\nfig.tight_layout()\nplt.savefig('bar chart/png/72.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much renewable energy does Europe produce?",
            "output": "2000 million KW"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_94",
        "img": "./bar_chart/png/bar_94.png",
        "topic": "Energy and Utilities",
        "title": " Electricity consumption and Solar Energy Production in four regions in 2021",
        "csv": "Region \\t Electricity Consumption(KWh) \\t Solar Energy Production(KWh) \\n North \\t 3000 \\t 1000 \\n South \\t 4000 \\t 2000 \\n East \\t 5000 \\t 3000 \\n West \\t 6000 \\t 4000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents electricity consumption and solar energy production across four regions in 2021. The North shows 3000 KWh consumed and 1000 KWh produced via solar energy. The South region indicates 4000 KWh of electricity consumption and 2000 KWh of solar energy production. In the East, 5000 KWh were consumed, with solar production at 3000 KWh. Lastly, the West consumed 6000 KWh and produced 4000 KWh of solar energy."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nRegion = [\"North\", \"South\", \"East\", \"West\"]\nElectricity_Consumption = [3000, 4000, 5000, 6000]\nSolar_Energy_Production = [1000, 2000, 3000, 4000]\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot()\nax.bar(Region, Electricity_Consumption, width=0.8, color='#87CEEB', label=\"Electricity Consumption\")\nax.bar(Region, Solar_Energy_Production, width=0.8, color='#FFA500', bottom=Electricity_Consumption, label=\"Solar Energy Production\")\nax.set_xticks(Region)\nax.set_title(\"Electricity consumption and Solar Energy Production in four regions in 2021\")\nax.set_xlabel(\"Region\")\nax.set_ylabel(\"KWh\")\nax.legend(loc='upper left')\nfig.tight_layout()\nplt.savefig(\"bar chart/png/232.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How much more electricity does the East region consume compared to its solar energy production?",
            "output": "2000 KWh"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_12",
        "img": "./bar_chart/png/bar_12.png",
        "topic": "Food and Beverage Industry",
        "title": " Number of food and beverage outlets in four regions in 2021",
        "csv": "Region \\t Restaurants \\t Groceries \\t Cafes \\n North America \\t 1000 \\t 1500 \\t 500 \\n South America \\t 1200 \\t 1200 \\t 450 \\n Europe \\t 900 \\t 1400 \\t 400 \\n Asia \\t 1100 \\t 1000 \\t 600 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the number of food and beverage outlets across four different regions in 2021. In North America, there are 1000 restaurants, 1500 grocery stores, and 500 cafes. South America reports 1200 restaurants, 1200 grocery stores, and 450 cafes. Europe has 900 restaurants, 1400 grocery stores, and 400 cafes. Asia shows 1100 restaurants, 1000 grocery stores, and 600 cafes."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(4)  # the label locations\nwidth = 0.2  # the width of the bars\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width, [1000, 1200, 900, 1100], width, label='Restaurants', color = '#F08080')\nrects2 = ax.bar(x, [1500, 1200, 1400, 1000], width, label='Groceries', color = '#FFC0CB')\nrects3 = ax.bar(x + width, [500, 450, 400, 600], width, label='Cafes', color = '#BC8F8F')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Number of outlets')\nax.set_title('Number of food and beverage outlets in four regions in 2021')\nax.set_xticks(x)\nax.set_xticklabels(['North America', 'South America', 'Europe', 'Asia'],  rotation=0, wrap=True)\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1),\n          fancybox=True, shadow=True, ncol=3)\n\nplt.tight_layout()\nplt.savefig('bar chart/png/329.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many groceries are there in Asia?",
            "output": "1000"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_463",
        "img": "./bar_chart/png/bar_463.png",
        "topic": "Sports and Entertainment",
        "title": " Participation in sports activities by age group in 2021",
        "csv": "Activity \\t Youth(%) \\t Adults(%) \\t Seniors(%) \\n Basketball \\t 30 \\t 45 \\t 20 \\n Soccer \\t 40 \\t 50 \\t 25 \\n Swimming \\t 50 \\t 35 \\t 30 \\n Running \\t 25 \\t 35 \\t 40 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart illustrates the participation percentages in sports activities across three age groups in 2021. For basketball, youths participate at 30%, adults at 45%, and seniors at 20%. In soccer, the participation is 40% for youth, 50% for adults, and 25% for seniors. Swimming sees youth at 50%, adults at 35%, and seniors at 30%. Running has 25% participation amongst youth, 35% for adults, and the highest senior participation at 40%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\n# Create figure\nfig = plt.figure(figsize=(10, 6))\n\n# Create subplot\nax = fig.add_subplot(111)\n\n# Define data and labels\nactivities = ['Basketball', 'Soccer', 'Swimming', 'Running']\nyouth = [30, 40, 50, 25]\nadults = [45, 50, 35, 35]\nseniors = [20, 25, 30, 40]\n\n# Create bars\nax.bar(activities, youth, label='Youth', width=0.3, bottom=0)\nax.bar(activities, adults, label='Adults', width=0.3, bottom=youth)\nax.bar(activities, seniors, label='Seniors', width=0.3, bottom=[i+j for i,j in zip(youth, adults)])\n\n# Set title and labels\nax.set_title('Participation in sports activities by age group in 2021')\nax.set_xlabel('Activity')\nax.set_ylabel('Participation (%)')\n\n# Set legend\nax.legend(loc='upper left', bbox_to_anchor=(1,1))\n\n# Set ticks\nplt.xticks(rotation=45, ha='right', wrap=True)\n\n# Resize image\nplt.tight_layout()\n\n# Save image\nplt.savefig('bar chart/png/82.png', dpi=300)\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which sport has the lowest participation percentage among seniors?",
            "output": "Basketball"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_347",
        "img": "./bar_chart/png/bar_347.png",
        "topic": "Environment and Sustainability",
        "title": " CO2 Emission and Renewable Energy Sources Usage in four regions in 2021",
        "csv": "Region \\t CO2 Emission(kg/capita) \\t Renewable Energy Sources(%) \\n North America \\t 10 \\t 30 \\n Europe \\t 5 \\t 50 \\n Asia \\t 20 \\t 15 \\n Africa \\t 15 \\t 25 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates CO2 emissions in kg per capita and the percentage use of renewable energy sources across four regions in 2021. North America shows 10 kg/capita of CO2 emissions and 30% renewable energy usage. Europe has lower emissions at 5 kg/capita and a higher renewable energy percentage at 50%. Asia has the highest CO2 emissions, recorded at 20 kg per capita, with 15% reliance on renewable energy. Africa's figures stand at 15 kg/capita for CO2 emissions and 25% for renewable energy sources usage."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nRegion = ['North America','Europe','Asia','Africa']\nCO2_Emission = [10,5,20,15]\nRenewable_Energy = [30,50,15,25]\n\n# Create figure\nfig = plt.figure(figsize=(12,6))\nax = fig.add_subplot(111)\n\n# Plot bar chart\nwidth = 0.4\nax.bar(np.arange(len(CO2_Emission)),CO2_Emission,width,label='CO2 Emission(kg/capita)',color='blue')\nax.bar(np.arange(len(Renewable_Energy))+width,Renewable_Energy,width,label='Renewable Energy Sources(%)',color='orange')\n\n# Set title\nax.set_title('CO2 Emission and Renewable Energy Sources Usage in four regions in 2021',fontsize=14)\n\n# Set xticks\nax.set_xticks(np.arange(len(Region))+width/2)\nax.set_xticklabels(Region, rotation=45, wrap=True)\n\n# Add legend\nax.legend(loc='best')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('bar chart/png/421.png', dpi=500)\n\n# Clear current figure\nplt.clf()"
        },
        "QA": {
            "input": "Which region has the highest percentage of renewable energy sources?",
            "output": "Europe"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_97",
        "img": "./bar_chart/png/bar_97.png",
        "topic": "Law and Legal Affairs",
        "title": " Law cases filed and closed in four countries in 2021",
        "csv": "Country \\t Cases Filed(thousands) \\t Cases Closed(thousands) \\n USA \\t 250 \\t 230 \\n UK \\t 220 \\t 210 \\n Germany \\t 280 \\t 250 \\n France \\t 210 \\t 190 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the number of law cases filed and closed in thousands across four countries for the year 2021. In the USA, 250 thousand cases were filed and 230 thousand cases were closed. The UK saw 220 thousand cases filed and 210 thousand closed. Germany had a higher number, with 280 thousand cases filed and 250 thousand closed. France reported 210 thousand cases filed and 190 thousand cases closed."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,6))\nax = plt.subplot()\nax.bar(x= ['USA','UK','Germany','France'], height = [250,220,280,210], label='Cases Filed(thousands)', width=0.3, color='b')\nax.bar(x= ['USA','UK','Germany','France'], height = [230,210,250,190], label='Cases Closed(thousands)', width=0.3, color='r', bottom=[250,220,280,210])\nax.set_title('Law cases filed and closed in four countries in 2021')\nax.set_xlabel('Country')\nax.set_ylabel('Number')\nax.legend()\nax.grid(axis='y', color='gray', linestyle='--', linewidth=1)\nax.set_xticks(['USA','UK','Germany','France'])\nplt.tight_layout()\nplt.savefig('bar chart/png/339.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more cases were filed than closed in Germany?",
            "output": "30 thousand"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_429",
        "img": "./bar_chart/png/bar_429.png",
        "topic": "Energy and Utilities",
        "title": " Fossil Fuels and Renewables Energy Consumption from 2020 to 2023",
        "csv": "Year \\t Fossil Fuels(TWh) \\t Renewables(TWh) \\n 2020 \\t 1000 \\t 1100 \\n 2021 \\t 1100 \\t 1300 \\n 2022 \\t 1200 \\t 1400 \\n 2023 \\t 1300 \\t 1500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents energy consumption from fossil fuels and renewables over four years. In 2020, fossil fuels accounted for 1000 TWh while renewables surpassed that with 1100 TWh. The gap widened in subsequent years; 2021 saw fossil fuels at 1100 TWh and renewables at 1300 TWh. The trend continued with fossil fuels reaching 1200 TWh in 2022 and renewables at 1400 TWh. By 2023, fossil fuel consumption increased to 1300 TWh and renewable sources to 1500 TWh."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(15,8))\nax = plt.subplot()\nplt.bar(x=['2020', '2021', '2022', '2023'], height=[1000, 1100, 1200, 1300], width=0.5, label='Fossil Fuels(TWh)', tick_label=['2020', '2021', '2022', '2023'], bottom=[1100, 1300, 1400, 1500])\nplt.bar(x=['2020', '2021', '2022', '2023'], height=[1100, 1300, 1400, 1500], width=0.5, label='Renewables(TWh)', tick_label=['2020', '2021', '2022', '2023'], bottom=0)\nplt.title('Fossil Fuels and Renewables Energy Consumption from 2020 to 2023')\nplt.legend()\nplt.xticks(rotation=45, fontsize=10, wrap=True)\nax.grid(axis='y')\nplt.tight_layout()\nplt.savefig('bar chart/png/379.png')\nplt.clf()"
        },
        "QA": {
            "input": "What was the increase in the consumption of renewables from 2020 to 2023?",
            "output": "400 TWh"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_344",
        "img": "./bar_chart/png/bar_344.png",
        "topic": "Real Estate and Housing Market",
        "title": " Housing prices and number of houses in four major US cities in 2021",
        "csv": "City \\t Housing Price (million) \\t Number of Houses \\n New York \\t 2.5 \\t 100 \\n Los Angeles \\t 3.6 \\t 200 \\n Chicago \\t 2.3 \\t 150 \\n Houston \\t 2.1 \\t 180 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates housing prices, in millions, and the number of houses in four major US cities for 2021. New York shows a housing price of 2.5 million with 100 houses, while Los Angeles reports a higher price at 3.6 million and a larger number of houses at 200. Chicago's data indicates a price of 2.3 million for 150 houses, and Houston presents a price of 2.1 million for 180 houses."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig=plt.figure(figsize=(10,6))\nax=fig.add_subplot(111)\n\n#Set x ticks\nx_labels=['New York','Los Angeles','Chicago','Houston']\nx_ticks=np.arange(len(x_labels))\nax.set_xticks(x_ticks)\nax.set_xticklabels(x_labels, rotation=0, wrap=True, fontsize=10)\n\n#Plot data\nax.bar(x_ticks-0.2, [2.5, 3.6, 2.3, 2.1], width=0.4, label='Housing Price (million)', color='#878787')\nax.bar(x_ticks+0.2, [100, 200, 150, 180], width=0.4, label='Number of Houses', color='#FF8282')\n\n#Set legend\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05), ncol=2, fontsize=10)\n\n#Set title\nax.set_title('Housing prices and number of houses in four major US cities in 2021',fontsize=14)\n\n#Adjust layout\nplt.tight_layout()\n\n#Save figure\nplt.savefig('bar chart/png/371.png')\n\n#Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in housing prices between Los Angeles and Chicago?",
            "output": "$1.3 million"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_469",
        "img": "./bar_chart/png/bar_469.png",
        "topic": "Agriculture and Food Production",
        "title": " Crop and Vegetable Production in Four Regions in 2021",
        "csv": "Region \\t Crops(tons) \\t Vegetables(tons) \\n East \\t 2000 \\t 2500 \\n West \\t 3000 \\t 3000 \\n North \\t 3500 \\t 4000 \\n South \\t 2800 \\t 3500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart illustrates the production of crops and vegetables in tons across four regions during the year 2021. Specifically, the East region produced 2000 tons of crops and 2500 tons of vegetables. The West region's production was 3000 tons for both crops and vegetables. The North region led with 3500 tons of crops and 4000 tons of vegetables. Lastly, the South region produced 2800 tons of crops and 3500 tons of vegetables."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.array([[2000,2500],[3000,3000],[3500,4000],[2800,3500]])\nx = np.arange(4)\nfig, ax = plt.subplots(figsize=(8,5))\nbar1 = ax.bar(x-0.2, data[:,0], width=0.4, label=\"Crops(tons)\")\nbar2 = ax.bar(x+0.2, data[:,1], width=0.4, label=\"Vegetables(tons)\")\nax.set_xticks(x)\nax.set_xticklabels([\"East\", \"West\", \"North\", \"South\"])\nax.legend()\nax.set_title(\"Crop and Vegetable Production in Four Regions in 2021\")\nplt.xticks(rotation=90, wrap=True)\nplt.tight_layout()\nplt.savefig(\"bar chart/png/13.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which region has the lowest crop production?",
            "output": "East"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_335",
        "img": "./bar_chart/png/bar_335.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Contributions to nonprofit organizations in four regions in 2021",
        "csv": "Region \\t Fundraising(million) \\t Donations(million) \\t Volunteer Hours \\n North America \\t 150 \\t 100 \\t 3000 \\n Europe \\t 200 \\t 200 \\t 2500 \\n Asia \\t 180 \\t 300 \\t 2000 \\n South America \\t 120 \\t 400 \\t 1500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates contributions to nonprofit organizations across four regions in 2021. It measures fundraising in millions, donations in millions, and volunteer hours. North America shows 150 million in fundraising, 100 million in donations, and 3000 volunteer hours. Europe's contributions are 200 million in both fundraising and donations, with 2500 volunteer hours. Asia has 180 million in fundraising, the highest donations at 300 million, and 2000 volunteer hours. Lastly, South America presents 120 million in fundraising, 400 million in donations, and the least volunteer hours at 1500."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#Create figure before plotting\nfig=plt.figure(figsize=(8,5))\nax=fig.add_subplot()\n\n#Plot the data with the type of bar chart\nregion=[\"North America\",\"Europe\",\"Asia\",\"South America\"]\nfundraising=[150,200,180,120]\ndonations=[100,200,300,400]\nvolunteer_hours=[3000,2500,2000,1500]\n\nx=np.arange(len(region))\nwidth=0.2\n\nax.bar(x-width,fundraising,width=width,label=\"fundraising(million)\")\nax.bar(x,donations,width=width,label=\"donations(million)\")\nax.bar(x+width,volunteer_hours,width=width,label=\"Volunteer Hours\")\n\nax.set_title(\"Contributions to nonprofit organizations in four regions in 2021\")\nax.set_xticks(x)\nax.set_xticklabels(region,rotation=45,ha=\"right\",va=\"top\",wrap=True)\n\nax.legend(loc=\"best\")\n\nplt.tight_layout()\nplt.savefig(\"bar chart/png/377.png\")\n\nplt.clf()"
        },
        "QA": {
            "input": "How many volunteer hours were contributed in Europe?",
            "output": "2500"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_403",
        "img": "./bar_chart/png/bar_403.png",
        "topic": "Human Resources and Employee Management",
        "title": " Number of Employees and Average Salaries in four departments in 2021",
        "csv": "Department \\t Employees \\t Average Salary(hundred USD) \\n HR \\t 30 \\t 50 \\n IT \\t 45 \\t 60 \\n Sales \\t 50 \\t 55 \\n Finance \\t 35 \\t 45 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of employees and average salaries across four departments in 2021. The HR department comprises 30 employees with an average salary of 50 hundred USD. IT follows with 45 employees earning an average of 60 hundred USD. The Sales department has the highest headcount, with 50 employees at an average salary of 55 hundred USD, whereas the Finance department employs 35 individuals with an average salary of 45 hundred USD."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nDepartment = ['HR','IT','Sales','Finance']\nEmployees = [30, 45, 50, 35]\nAverage_Salary = [50, 60, 55, 45]\n\n# Set figure size\nplt.figure(figsize=(8,6))\n\n# Create subplot\nax = plt.subplot()\n\n# Plot bar chart\nax.bar(Department, Employees, color='#539caf', label='Employees')\nax.bar(Department, Average_Salary, bottom=Employees,color='#7663b0', label='Average Salary(thousand USD)')\n\n# Add title and labels\nax.set_title('Number of Employees and Average Salaries in four departments in 2021')\nax.set_xlabel('Department')\nax.set_ylabel('Number of Employees / Average Salaries')\n\n# Rotate x axis labels \nax.set_xticklabels(Department, rotation=45)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Tight layout\nplt.tight_layout()\n\n# Save figure\nplt.savefig('bar_403.png')\n\n# Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "Which department has the highest average salary?",
            "output": "IT"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_433",
        "img": "./bar_chart/png/bar_433.png",
        "topic": "Agriculture and Food Production",
        "title": " Food crops and Livestock production in four regions in 2021",
        "csv": "Region \\t Food Crops(tons) \\t Livestock(tons) \\n East \\t 3000 \\t 2500 \\n West \\t 4000 \\t 3500 \\n North \\t 3500 \\t 3000 \\n South \\t 3800 \\t 2700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart presents the amounts of food crops and livestock production in four different regions during the year 2021. The East region produced 3,000 tons of food crops and 2,500 tons of livestock. In the West region, 4,000 tons of food crops and 3,500 tons of livestock were produced. The North region saw 3,500 tons of food crops and 3,000 tons of livestock production, while the South region contributed 3,800 tons of food crops and 2,700 tons of livestock to the totals for 2021."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(7, 4))\nax = fig.add_subplot()\nregion = ['East', 'West', 'North', 'South']\nfood_crops = [3000, 4000, 3500, 3800]\nlivestock = [2500, 3500, 3000, 2700]\n\nax.bar(region, food_crops, width=0.4, label='Food Crops')\nax.bar(region, livestock, width=0.4, bottom=food_crops, label='Livestock')\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.2), ncol=2)\nplt.title('Food crops and Livestock production in four regions in 2021')\nplt.xticks(rotation=45)\nfig.tight_layout()\nplt.savefig('bar chart/png/65.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much more tons of food crops were produced in the South than the Livestock?",
            "output": "1100 tons"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_127",
        "img": "./bar_chart/png/bar_127.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing and retail output in four countries in 2021",
        "csv": "Country \\t Manufacturing Output(million) \\t Retail Output(million) \\n USA \\t 1200 \\t 1000 \\n UK \\t 1400 \\t 900 \\n Germany \\t 1100 \\t 1100 \\n France \\t 1300 \\t 1200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the manufacturing and retail output, in millions, for four countries in 2021. The USA's manufacturing output is at 1200 million and its retail at 1000 million. The UK shows a higher manufacturing output of 1400 million compared to its 900 million in retail. Germany has equal outputs in both sectors with 1100 million. France's manufacturing output is recorded at 1300 million and its retail output is slightly lower at 1200 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot()\n\nCountry = ['USA','UK','Germany','France']\nManufacturing = [1200, 1400, 1100, 1300]\nRetail = [1000, 900, 1100, 1200]\n\nax.bar(Country, Manufacturing, label = 'Manufacturing Output (million)', color = 'b', bottom = Retail)\nax.bar(Country, Retail, label = 'Retail Output (million)', color = 'r')\n\nplt.xticks(Country)\nplt.grid(linestyle = '--', alpha = 0.5)\nplt.title('Manufacturing and retail output in four countries in 2021')\nplt.legend()\nplt.tight_layout()\nplt.savefig('bar chart/png/491.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest retail output according to the data?",
            "output": "France"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_106",
        "img": "./bar_chart/png/bar_106.png",
        "topic": "Agriculture and Food Production",
        "title": " Crop and Livestock Production from 2020 to 2023",
        "csv": "Year \\t Crop Production(billion tons) \\t Livestock Production(billion tons) \\n 2020 \\t 3.2 \\t 2.5 \\n 2021 \\t 3.5 \\t 2.7 \\n 2022 \\t 3.8 \\t 3.0 \\n 2023 \\t 4.2 \\t 3.2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the annual production of crops and livestock, in billion tons, from 2020 to 2023. In 2020, crop production was 3.2 billion tons, and livestock production was at 2.5 billion tons. The following year saw an increase with crops at 3.5 and livestock at 2.7 billion tons. The upward trend continued in 2022, with crop yields reaching 3.8 and livestock 3.0 billion tons. By 2023, crop production surged to 4.2 billion tons, and livestock production climbed to 3.2 billion tons."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,6)) \nax = plt.subplot() \nax.bar(['2020', '2021', '2022', '2023'], [3.2, 3.5, 3.8, 4.2], width=0.3, color='b', label='Crop Production(billion tons)') \nax.bar(['2020', '2021', '2022', '2023'], [2.5, 2.7, 3.0, 3.2], width=0.3, color='y', label='Livestock Production(billion tons)', bottom=[3.2, 3.5, 3.8, 4.2]) \nax.legend(loc='upper center') \nplt.xticks(['2020', '2021', '2022', '2023']) \nplt.title('Crop and Livestock Production from 2020 to 2023') \nplt.tight_layout() \nplt.savefig('bar chart/png/555.png') \nplt.clf()"
        },
        "QA": {
            "input": "By how much did crop production increase from 2020 to 2023?",
            "output": "1 billion tons"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_10",
        "img": "./bar_chart/png/bar_10.png",
        "topic": "Human Resources and Employee Management",
        "title": " Number of employees and their average salaries in four departments in 2021",
        "csv": "Department \\t Employees \\t Average Salary(k USD) \\n HR \\t 100 \\t 40 \\n Accounting \\t 80 \\t 30 \\n IT \\t 60 \\t 55 \\n Sales \\t 120 \\t 45 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of employees and their average salaries in four different departments for the year 2021. It compares the HR department with 100 employees and an average salary of 40k USD, Accounting with 80 employees and an average salary of 30k USD, IT with 60 employees at a higher average salary of 55k USD, and Sales with the largest workforce of 120 employees and an average salary of 45k USD."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nfig = plt.figure(figsize=(16, 10))\n\n# Data\ndepartment = ['HR', 'Accounting', 'IT', 'Sales']\nemployees = [100, 80, 60, 120]\naverage_salary = [40, 30, 55, 45]\n\n# Plot\nax = fig.add_subplot(111)\nax.bar(department, employees, bottom=0, width=0.5, label='Employees')\nax.bar(department, average_salary, bottom=employees, width=0.5, label='Average Salary(k USD)')\nax.set_title('Number of employees and their average salaries in four departments in 2021')\nax.legend(loc='upper left')\nax.set_xticks(department)\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('bar_10.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which department has the highest number of employees?",
            "output": "Sales"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_169",
        "img": "./bar_chart/png/bar_169.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing and export output in four countries in 2021",
        "csv": "Country \\t Manufacturing Output(million) \\t Export(million) \\n USA \\t 6000 \\t 900 \\n UK \\t 4000 \\t 700 \\n Germany \\t 3500 \\t 1000 \\n France \\t 3000 \\t 800 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the manufacturing and export output of four countries in 2021. The USA shows a manufacturing output of 6000 million and an export figure of 900 million. The UK follows with a manufacturing output of 4000 million and exports worth 700 million. Germany's manufacturing output stands at 3500 million with the highest export value of 1000 million among the four. Lastly, France has a manufacturing output of 3000 million and exports amounting to 800 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nCountry = ['USA', 'UK', 'Germany', 'France']\nManufacturing_Output = np.array([6000, 4000, 3500, 3000])\nExport = np.array([900, 700, 1000, 800])\n\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot()\nax.bar(Country, Manufacturing_Output, width=0.5, label='Manufacturing Output(million)')\nax.bar(Country, Export, width=0.5, bottom=Manufacturing_Output, label='Export(million)')\n\nax.set_title('Manufacturing and export output in four countries in 2021')\nax.set_xticks(Country)\nax.legend(loc='upper left')\nplt.tight_layout()\n\nplt.savefig('bar chart/png/407.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country had the highest manufacturing output in 2021?",
            "output": "USA"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_24",
        "img": "./bar_chart/png/bar_24.png",
        "topic": "Sports and Entertainment",
        "title": " Number of sports and entertainment events in four countries in 2021",
        "csv": "Country \\t Sports \\t Entertainment \\n USA \\t 400 \\t 500 \\n UK \\t 350 \\t 450 \\n Germany \\t 380 \\t 420 \\n France \\t 370 \\t 480 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of sports and entertainment events that occurred in four different countries in 2021. The USA hosted 400 sports and 500 entertainment events. The UK had 350 sports events and 450 entertainment events. In Germany, there were 380 sports events and 420 in the entertainment category. France provided the setting for 370 sports events and 480 entertainment-related gatherings."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['USA', 400, 500],\n        ['UK', 350, 450],\n        ['Germany', 380, 420],\n        ['France', 370, 480]]\n\nfig = plt.figure(figsize=(8, 5))\nax = fig.add_subplot(111)\nx = np.arange(len(data))\nwidth = 0.2\nax.bar(x, [i[1] for i in data], width, label='Sports')\nax.bar(x + width, [i[2] for i in data], width, label='Entertainment')\nax.set_title('Number of sports and entertainment events in four countries in 2021')\nax.set_xticks(x + width/2)\nax.set_xticklabels([i[0] for i in data], rotation=45, ha='right', wrap=True)\nax.legend()\nplt.tight_layout()\nplt.savefig('bar chart/png/383.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many entertainment events are there in Germany?",
            "output": "420"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_177",
        "img": "./bar_chart/png/bar_177.png",
        "topic": "Business and Finance",
        "title": " GDP and unemployment rate of four countries in 2021",
        "csv": "Country \\t GDP(billion) \\t Unemployment Rate(%) \\n USA \\t 20.7 \\t 7.9 \\n UK \\t 2.8 \\t 4.7 \\n Germany \\t 3.9 \\t 6.3 \\n France \\t 2.2 \\t 8.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the GDP in billions and the unemployment rates as a percentage for four countries in 2021. The USA shows a GDP of 20.7 billion with a 7.9% unemployment rate. The UK's GDP stands at 2.8 billion with a 4.7% unemployment rate. Germany has a GDP of 3.9 billion and an unemployment rate of 6.3%. Lastly, France is reported to have a GDP of 2.2 billion and the highest unemployment rate among the four at 8.5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot()\n\ncountry = ['USA', 'UK', 'Germany', 'France']\ngdp_billion = [20.7, 2.8, 3.9, 2.2]\nunemployment_rate = [7.9, 4.7, 6.3, 8.5]\n\nax.bar(country, gdp_billion, width=0.4, label='GDP (billion)')\nax.bar(country, unemployment_rate, bottom=gdp_billion, width=0.4, label='Unemployment Rate(%)')\n\nax.set_title('GDP and unemployment rate of four countries in 2021')\nax.set_xlabel('Country')\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), fancybox=True, shadow=True, ncol=2)\nplt.xticks(rotation=45, fontsize=8)\nplt.tight_layout()\nplt.savefig('bar_177.png', bbox_inches='tight')\nplt.clf()"
        },
        "QA": {
            "input": "What was the unemployment rate in the UK in 2021?",
            "output": "4.7%"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_285",
        "img": "./bar_chart/png/bar_285.png",
        "topic": "Education and Academics",
        "title": " Number of schools and students in four countries in 2021",
        "csv": "Country \\t Number of Schools \\t Number of Students(hundred) \\n USA \\t 120 \\t 250 \\n UK \\t 90 \\t 200 \\n Germany \\t 95 \\t 190 \\n France \\t 85 \\t 180 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the total number of schools and the corresponding number of students (in hundreds) across four different countries for the year 2021. In the USA, there are 120 schools with 25,000 students. The UK has 90 schools accommodating 20,000 students. Germany is shown to have 95 schools with 19,000 students. Lastly, France is depicted with 85 schools and a student population of 18,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\n# Data\nCountry = [\"USA\", \"UK\", \"Germany\", \"France\"]\nNumber_of_Schools = [120, 90, 95, 85]\nNumber_of_Students = [250, 200, 190, 180]\n\n# Create figure\nfig = plt.figure(figsize=(10, 5))\nax = fig.add_subplot()\n\n# Plotting\nax.bar(Country, Number_of_Schools, bottom=0, label=\"Number of Schools\")\nax.bar(Country, Number_of_Students, bottom=Number_of_Schools, label=\"Number of Students(hundred)\")\n\n# Labels\nax.set_title(\"Number of schools and students in four countries in 2021\")\nax.set_xlabel(\"Country\")\nax.set_ylabel(\"Number of Schools and Students\")\n\n# Legend\nax.legend(loc=\"upper right\")\n\n# Ticks\nplt.xticks(Country, rotation=45, wrap=True)\n\n# Tight layout\nplt.tight_layout()\n\n# Save\nplt.savefig(\"bar_285.png\")\n\n# Clear\nplt.clf()"
        },
        "QA": {
            "input": "How many students are there in Germany in hundreds?",
            "output": "190"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_171",
        "img": "./bar_chart/png/bar_171.png",
        "topic": "Sports and Entertainment",
        "title": " Number of sports teams and fans in four countries in 2021",
        "csv": "Country \\t Sports Teams \\t Fans(thousand) \\n USA \\t 50 \\t 400 \\n UK \\t 60 \\t 350 \\n Germany \\t 45 \\t 450 \\n France \\t 40 \\t 400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of sports teams and their corresponding fans in the thousands for four countries in 2021. The USA has 50 sports teams with 400,000 fans, the UK has 60 sports teams with 350,000 fans, Germany is represented by 45 sports teams and 450,000 fans, and France features 40 sports teams with 400,000 fans."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,8))\nax = plt.subplot()\nax.bar([\"USA\",\"UK\",\"Germany\",\"France\"],[50,60,45,40],color=\"red\",width=0.5,label=\"Sports Teams\")\nax.bar([\"USA\",\"UK\",\"Germany\",\"France\"],[400,350,450,400],color=\"yellow\",bottom=[50,60,45,40],width=0.5,label=\"Fans(thousand)\")\nplt.title(\"Number of sports teams and fans in four countries in 2021\")\nplt.xlabel(\"Country\")\nplt.ylabel(\"Number\")\nax.legend(loc=\"upper right\")\nplt.xticks([\"USA\",\"UK\",\"Germany\",\"France\"])\nplt.tight_layout()\nplt.savefig('bar_171.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest number of fans per sports team?",
            "output": "Germany"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_342",
        "img": "./bar_chart/png/bar_342.png",
        "topic": "Transportation and Logistics",
        "title": " Cost and distance of transportation modes in 2021",
        "csv": "Mode \\t Distance(km) \\t Cost \\n Ship \\t 3000 \\t 20000 \\n Train \\t 2000 \\t 15000 \\n Bus \\t 1000 \\t 10000 \\n Plane \\t 4000 \\t 25000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the cost and distance covered by different transportation modes in 2021. Shipping involves traveling 3000 km at a cost of $20,000. Train travel covers 2000 km and costs $15,000. Bus journeys, at a distance of 1000 km, have a cost of $10,000. Lastly, air travel reaches the farthest, at 4000 km, with the highest cost of $25,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# create figure\nfig = plt.figure(figsize=(10, 8))\n\n# create data\nmode = ['Ship', 'Train', 'Bus', 'Plane']\ndistance = [3000, 2000, 1000, 4000]\ncost = [20000, 15000, 10000, 25000]\n\n# create bar chart\nax = fig.add_subplot(111)\nax.bar(mode, distance, label='Distance(km)', width=0.4, bottom=0, color='orange')\nax.bar(mode, cost, label='Cost', width=0.4, bottom=distance, color='royalblue')\n\n# set title\nplt.title(\"Cost and distance of transportation modes in 2021\")\n\n# set x-axis label\nplt.xlabel(\"Mode\")\n\n# set y-axis label\nplt.ylabel(\"Distance(km)/Cost\")\n\n# set xticks\nplt.xticks(mode, mode, rotation=45)\n\n# add legend\nplt.legend(loc='upper right', bbox_to_anchor=(1.0, 1.0))\n\n# adjust layout\nplt.tight_layout()\n\n# save figure\nplt.savefig('bar_342.png')\n\n# clear current figure\nplt.clf()"
        },
        "QA": {
            "input": "What is the cost per kilometer for the train mode of transportation?",
            "output": "$7.5"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_25",
        "img": "./bar_chart/png/bar_25.png",
        "topic": "Energy and Utilities",
        "title": " Renewable energy sources in four countries in 2021",
        "csv": "Country \\t Wind Energy(TWh) \\t Solar Energy(TWh) \\t Hydro Energy(TWh) \\n USA \\t 200 \\t 210 \\t 220 \\n UK \\t 120 \\t 130 \\t 140 \\n Germany \\t 150 \\t 160 \\t 170 \\n France \\t 110 \\t 120 \\t 130 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the output of renewable energy from wind, solar, and hydro sources in four countries during 2021. The USA produced 200 TWh from wind, 210 TWh from solar, and 220 TWh from hydro energy. The UK's production was 120 TWh from wind, 130 TWh from solar, and 140 TWh from hydro. Germany generated 150 TWh, 160 TWh, and 170 TWh from wind, solar, and hydro energy respectively. France's figures were 110 TWh for wind, 120 TWh for solar, and 130 TWh for hydro energy."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure \nfig = plt.figure(figsize=(8,5))\nax = fig.add_subplot()\n\n# Set data\nCountry = np.arange(4)\nWind_Energy = [200,120,150,110]\nSolar_Energy = [210,130,160,120]\nHydro_Energy = [220,140,170,130]\n\n# Plot bar chart\nax.bar(Country, Wind_Energy, width=0.2, label='Wind Energy')\nax.bar(Country+0.2, Solar_Energy, width=0.2, label='Solar Energy')\nax.bar(Country+0.4, Hydro_Energy, width=0.2, label='Hydro Energy')\n\n# Set x axis label\nax.set_xticks(Country+0.3)\nax.set_xticklabels(['USA','UK','Germany','France'])\n\n# Set title\nax.set_title('Renewable energy sources in four countries in 2021')\n\n# Add legend\nax.legend()\n\n# Resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('bar chart/png/60.png')\n\n# Clear the current image state\nplt.cla()"
        },
        "QA": {
            "input": "How much solar energy did the UK produce in 2021?",
            "output": "130 TWh"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_262",
        "img": "./bar_chart/png/bar_262.png",
        "topic": "Environment and Sustainability",
        "title": " Carbon emission and renewable energy usage in four countries in 2021",
        "csv": "Country \\t Carbon Emission(thousand kg/yr) \\t Renewable Energy(%) \\n USA \\t 50 \\t 20 \\n UK \\t 45 \\t 25 \\n Germany \\t 35 \\t 30 \\n France \\t 40 \\t 35 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart presents the data on carbon emissions and renewable energy usage in four countries for the year 2021. The USA registers carbon emissions of 50 thousand kilograms per year with 20% renewable energy usage. The UK follows with 45 thousand kilograms of carbon emissions and a higher renewable energy usage at 25%. Germany reports lower emissions at 35 thousand kilograms and 30% renewable energy usage. France shows 40 thousand kilograms in carbon emissions coupled with the highest renewable energy usage among the four at 35%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot(111)\nlabels=['USA','UK','Germany','France']\nx=np.arange(len(labels))\nwidth=0.35\nrects1 = ax.bar(x-width/2, [50,45,35,40], width, label='Carbon Emission(thousand Kg/yr)')\nrects2 = ax.bar(x+width/2, [20,25,30,35], width, label='Renewable Energy(%)')\nax.set_title('Carbon emission and renewable energy usage in four countries in 2021', fontsize=14)\nax.set_xticks(x)\nax.set_xticklabels(labels, fontsize=12, rotation=30, ha='right', wrap=True)\nax.set_ylabel('Values', fontsize=12)\nax.legend(loc='best')\nfig.tight_layout()\nplt.savefig('bar_262.png')\nplt.clf()"
        },
        "QA": {
            "input": "By what percentage does France's renewable energy usage exceed that of the USA?",
            "output": "15%"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_465",
        "img": "./bar_chart/png/bar_465.png",
        "topic": "Arts and Culture",
        "title": " Number of cultural venues in four countries in 2021",
        "csv": "Country \\t Museums \\t Galleries \\t Theaters \\n USA \\t 50 \\t 100 \\t 150 \\n UK \\t 60 \\t 110 \\t 160 \\n Germany \\t 80 \\t 120 \\t 140 \\n France \\t 70 \\t 130 \\t 170 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of cultural venues across four countries in 2021. The USA is shown with 50 museums, 100 galleries, and 150 theaters. The UK features 60 museums, 110 galleries, and 160 theaters. In comparison, Germany has 80 museums, 120 galleries, and 140 theaters, and France totals 70 museums, 130 galleries, and 170 theaters."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(9,6))\nax = fig.add_subplot()\n\nCountry = [\"USA\",\"UK\",\"Germany\",\"France\"]\nMuseums = [50,60,80,70]\nGalleries = [100,110,120,130]\nTheaters = [150,160,140,170]\n\nax.bar(Country, Museums, label=\"Museums\", color=\"C0\")\nax.bar(Country, Galleries, bottom=Museums, label=\"Galleries\", color=\"C1\")\nax.bar(Country, Theaters, bottom=[m+g for m,g in zip(Museums, Galleries)], label=\"Theaters\", color=\"C2\")\n\nax.set_xticks(Country)\nax.set_title(\"Number of cultural venues in four countries in 2021\")\nax.set_xlabel(\"Country\")\nax.set_ylabel(\"Number of venues\")\nax.legend()\n\nfig.tight_layout()\nfig.savefig(\"bar chart/png/247.png\")\n\nplt.clf()"
        },
        "QA": {
            "input": "How many more galleries does France have compared to the UK?",
            "output": "20"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_427",
        "img": "./bar_chart/png/bar_427.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Number of charities and donations in four states in 2021",
        "csv": "State \\t Charities \\t Donations(million) \\n California \\t 150 \\t 100 \\n Texas \\t 200 \\t 120 \\n New York \\t 250 \\t 110 \\n Florida \\t 180 \\t 90 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart shows the number of charities and the amount of donations (in millions) in four different states for the year 2021. California is represented with 150 charities and donations totaling 100 million, Texas with 200 charities and 120 million in donations, New York with 250 charities and 110 million in donations, and Florida with 180 charities and donations amounting to 90 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nState=['California','Texas','New York','Florida']\nCharities=[150,200,250,180]\nDonations=[100,120,110,90]\n\nfig=plt.figure(figsize=(10,6))\nax = plt.subplot()\nwidth=0.3\nx=np.arange(len(State))\nax.bar(x-width/2, Charities, width, label='Charities')\nax.bar(x+width/2, Donations, width, label='Donations(million)')\nax.set_title('Number of charities and donations in four states in 2021')\nax.set_xlabel('State')\nax.set_ylabel('Number')\nax.set_xticks(x)\nax.set_xticklabels(State,rotation=45)\nplt.legend(bbox_to_anchor=(1, 1))\nplt.tight_layout()\nplt.savefig('bar chart/png/538.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which state has the highest donations to charities ratio?",
            "output": "New York"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_192",
        "img": "./bar_chart/png/bar_192.png",
        "topic": "Education and Academics",
        "title": " Number of high school and college graduates from 2020 to 2023",
        "csv": "Year \\t High School Graduates \\t College Graduates \\n 2020 \\t 150 \\t 250 \\n 2021 \\t 200 \\t 300 \\n 2022 \\t 220 \\t 320 \\n 2023 \\t 250 \\t 350 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart illustrates the number of high school and college graduates from 2020 to 2023. In 2020, there were 150 high school graduates and 250 college graduates. The following year, the number increased to 200 high school graduates and 300 college graduates. In 2022, the figures rose to 220 for high school graduates and 320 for college graduates. Lastly, in 2023, the number reached 250 high school graduates and 350 college graduates."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\n#create figure\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111)\n\n#set title\nax.set_title(\"Number of high school and college graduates from 2020 to 2023\")\n\n#set data\nyear = [2020, 2021, 2022, 2023]\nhigh_school_graduates = [150, 200, 220, 250]\ncollege_graduates = [250, 300, 320, 350]\n\n#plot chart\nax.bar(year, high_school_graduates, width=0.3, label='High School Graduates', color='#6ea8bc', bottom=0)\nax.bar(year, college_graduates, width=0.3, label='College Graduates', color='#fdc966', bottom=high_school_graduates)\n\n#set grid\nax.grid(linestyle=':')\n\n#set axis ticks\nplt.xticks(year)\n\n#add legend\nax.legend(loc='upper center')\n\n#tight layout\nplt.tight_layout()\n\n#save the figure\nplt.savefig(r'bar_192.png')\n\n#clear figure\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in the number of graduates between high school and college in 2023?",
            "output": "100"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_318",
        "img": "./bar_chart/png/bar_318.png",
        "topic": "Transportation and Logistics",
        "title": " Cost and Time of Transportation by Different Modes in 2021",
        "csv": "Mode \\t Cost(thousand USD) \\t Time(days) \\n Air \\t 10 \\t 3 \\n Sea \\t 3 \\t 15 \\n Ground \\t 2 \\t 7 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the cost in thousand USD and transit time in days for different transportation modes in 2021. Air transport costs 10 thousand USD and takes 3 days, sea transport has a cost of 3 thousand USD and takes 15 days, while ground transport is the cheapest at 2 thousand USD but takes 7 days for transit."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 8))\nax = plt.subplot(111)\n\nx_labels = [\"Air\", \"Sea\", \"Ground\"]\ncost = [10, 3, 2]\ntime = [3, 15, 7]\n\nx = range(len(x_labels))\nax.bar(x, cost, label=\"Cost(thousand USD)\", width=0.4, bottom=0)\nax.bar(x, time, label=\"Time(days)\", width=0.4, bottom=cost, alpha=0.3)\n\nax.set_title(\"Cost and Time of Transportation by Different Modes in 2021\")\nax.set_xticks(x)\nax.set_xticklabels(x_labels, rotation=90)\nax.legend(loc=\"best\")\nplt.tight_layout()\nplt.savefig(\"bar_318.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which mode of transportation has the shortest transit time?",
            "output": "Air"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_293",
        "img": "./bar_chart/png/bar_293.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing output in three categories in four countries in 2021",
        "csv": "Country \\t Manufacturing A(million) \\t Manufacturing B(million) \\t Manufacturing C(million) \\n USA \\t 50 \\t 60 \\t 40 \\n UK \\t 60 \\t 70 \\t 50 \\n Germany \\t 40 \\t 80 \\t 60 \\n France \\t 50 \\t 90 \\t 70 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the 2021 manufacturing output, in millions, for three categories across four countries. The USA has outputs of 50, 60, and 40 million for Manufacturing A, B, and C, respectively. In the UK, Manufacturing A, B, and C outputs are 60, 70, and 50 million, accordingly. Germany's figures show 40 million for A, but higher for B and C at 80 and 60 million. France reports outputs of 50 million for Manufacturing A, with a notable increase to 90 million for B and 70 million for C."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['USA', 50, 60, 40],\n        ['UK', 60, 70, 50],\n        ['Germany', 40, 80, 60],\n        ['France', 50, 90, 70]]\n\nfig = plt.figure(figsize=(10, 5))\nax = fig.add_subplot()\nx_pos = np.arange(len(data))\n\n# Set title and labels\nplt.title('Manufacturing output in three categories in four countries in 2021')\nplt.ylabel('Quantity (million)')\nplt.xticks(x_pos, [country[0] for country in data])\n\n# Set bars\nbars = plt.bar(x_pos, [country[1] for country in data], label='Manufacturing A', width=0.25)\nplt.bar(x_pos + 0.25, [country[2] for country in data], label='Manufacturing B', width=0.25)\nplt.bar(x_pos + 0.5, [country[3] for country in data], label='Manufacturing C', width=0.25)\n\n# Draw legend\nplt.legend(loc='upper right')\n\n# Adjust margins and display\nplt.tight_layout()\nplt.savefig('bar chart/png/292.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest manufacturing output for Manufacturing C?",
            "output": "France"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_263",
        "img": "./bar_chart/png/bar_263.png",
        "topic": "Social Sciences and Humanities",
        "title": " Enrollment and student/teacher ratio of four renowned universities in 2021",
        "csv": "School \\t Enrollment \\t Student(hundred)/Teacher Ratio(%) \\n Harvard \\t 5 \\t 10 \\n Stanford \\t 7 \\t 12 \\n Cambridge \\t 4 \\t 9 \\n Oxford \\t 10 \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the enrollment in thousands and student-to-teacher ratio percentages at four renowned universities in 2021. Harvard shows an enrollment of 5,000 with a 10% student-to-teacher ratio. Stanford has a larger enrollment of 7,000 and a 12% ratio. Cambridge comes in with 4,000 enrolled students and a 9% ratio. Finally, Oxford has the largest enrollment at 10,000 and the highest student-to-teacher ratio of 15%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['Harvard',5,10],['Stanford',7,12],['Cambridge',4,9],['Oxford',1,15]]\n\nschool, enrollment, student_teacher_ratio = zip(*data)\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(111)\n\nax.bar(school, enrollment, width=0.5, label='Enrollment(hundred)')\nax.bar(school, student_teacher_ratio, width=0.2, bottom=enrollment, label='Student/Teacher Ratio(%)')\n\nax.set_title('Enrollment and student/teacher ratio of four renowned universities in 2021')\nax.set_ylabel('Number')\nax.set_xticklabels(school, rotation=45, ha='right')\n\nax.legend()\nplt.tight_layout()\nplt.savefig('bar_263.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the enrollment number for Stanford?",
            "output": "7"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_232",
        "img": "./bar_chart/png/bar_232.png",
        "topic": "Retail and E-commerce",
        "title": " Comparison of online and offline retail transactions in four countries in 2021",
        "csv": "Country \\t Online Retail Transaction(million) \\t Offline Retail Transaction(million) \\n USA \\t 3000 \\t 2000 \\n UK \\t 2500 \\t 1750 \\n Germany \\t 2000 \\t 1500 \\n France \\t 2250 \\t 1700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the comparison of online and offline retail transactions in four countries during 2021. The USA recorded 3000 million online transactions and 2000 million offline transactions. The UK had 2500 million online and 1750 million offline transactions. Germany showed 2000 million online and 1500 million offline transactions, while France had 2250 million online and 1700 million offline retail transactions."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nCountry = [\"USA\", \"UK\", \"Germany\", \"France\"]\nOnline_Retail_Transaction = np.array([3000, 2500, 2000, 2250])\nOffline_Retail_Transaction = np.array([2000, 1750, 1500, 1700])\n\n\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111)\nwidth = 0.35\nax.bar(Country, Online_Retail_Transaction, width, color=\"b\", label=\"Online Retail Transaction\")\nax.bar(Country, Offline_Retail_Transaction, width, bottom=Online_Retail_Transaction, color=\"g\", label=\"Offline Retail Transaction\")\nax.set_title(\"Comparison of online and offline retail transactions in four countries in 2021\")\nax.set_xlabel(\"Country\")\nax.set_ylabel(\"Retail Transaction (million)\")\nax.legend(loc=\"best\", ncol=2, fontsize=\"large\")\nax.set_xticklabels(Country, rotation = 45, ha=\"right\")\nplt.tight_layout()\nplt.savefig(\"bar chart/png/430.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which country had the smallest difference between online and offline retail transactions?",
            "output": "France"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_65",
        "img": "./bar_chart/png/bar_65.png",
        "topic": "Government and Public Policy",
        "title": " Voter turnout and economic growth in four countries in 2021",
        "csv": "Country \\t Voter Turnout \\t Economic Growth \\n USA \\t 60% \\t 3.5% \\n UK \\t 65% \\t 2.7% \\n Germany \\t 70% \\t 4.0% \\n France \\t 75% \\t 2.4% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the voter turnout and economic growth percentages for four countries in 2021. The United States has a 60% voter turnout and an economic growth rate of 3.5%. The United Kingdom follows with a 65% voter turnout and a 2.7% economic growth. Germany leads in voter participation with a 70% turnout, coupled with a 4.0% economic growth. France tops the chart with a 75% voter turnout but has the lowest economic growth at 2.4%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot(1,1,1)\n\nax.set_title('Voter turnout and economic growth in four countries in 2021')\nax.set_xlabel('Country')\nax.set_ylabel('Voter Turnout and Economic Growth (%)')\n\nCountry = ['USA', 'UK', 'Germany', 'France']\nVoter_Turnout = [60, 65, 70, 75]\nEconomic_Growth = [3.5, 2.7, 4.0, 2.4]\n\nbar1 = ax.bar(Country, Voter_Turnout, bottom=0)\nbar2 = ax.bar(Country, Economic_Growth, bottom=Voter_Turnout)\n\nax.legend((bar1[0], bar2[0]), ('Voter Turnout', 'Economic Growth'), bbox_to_anchor=(1.2, 0.8))\n\n\nplt.xticks(Country, rotation=45, wrap=True)\n\nplt.tight_layout()\nplt.savefig('bar_65.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country had the highest economic growth rate in 2021?",
            "output": "Germany"
        }
    },
    {
        "chart_type": "bar_chart",
        "imgname": "bar_173",
        "img": "./bar_chart/png/bar_173.png",
        "topic": "Education and Academics",
        "title": " Academic performance in Math, Science and English for 5th to 8th grade",
        "csv": "Grade \\t Math(%) \\t Science(%) \\t English(%) \\n 5th \\t 85 \\t 90 \\t 80 \\n 6th \\t 90 \\t 95 \\t 85 \\n 7th \\t 95 \\t 98 \\t 90 \\n 8th \\t 98 \\t 99 \\t 95 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates academic performance in Math, Science, and English from 5th to 8th grade. In the 5th grade, students scored 85% in Math, 90% in Science, and 80% in English. For the 6th grade, the percentages increased to 90% in Math, 95% in Science, and 85% in English. The 7th-grade performance shows 95% in Math, 98% in Science, and 90% in English. The 8th grade achieved the highest scores with 98% in Math, 99% in Science, and 95% in English."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(8,6))\ngrade = ['5th', '6th', '7th', '8th']\nmath = [85, 90, 95, 98]\nscience = [90, 95, 98, 99]\nenglish = [80, 85, 90, 95]\nx = range(len(grade))\nax = plt.subplot()\nax.bar(x, math, width = 0.2, label = 'Math', color = 'b', bottom = english)\nax.bar(x, science, width = 0.2, label = 'Science', color = 'r', bottom = [i+j for i,j in zip(english,math)])\nax.bar(x, english, width = 0.2, label = 'English', color = 'g')\nax.set_xticks(x)\nax.set_xticklabels(grade, fontsize='large')\nplt.title('Academic performance in Math, Science and English for 5th to 8th grade')\nplt.xlabel('Grade', fontsize='large')\nplt.ylabel('Score (%)', fontsize='large')\nplt.legend(loc='lower right', fontsize='large')\nplt.tight_layout()\nplt.savefig('bar chart/png/510.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in percentage points between Science and Math for the 5th grade?",
            "output": "5%"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_225",
        "img": "./line_chart/png/line_225.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Increase of donations to three nonprofit organizations from 2018 to 2023",
        "csv": "Year \\t Donation A(million dollars) \\t Donation B(million dollars) \\t Donation C(million dollars) \\n 2018 \\t 400 \\t 300 \\t 200 \\n 2019 \\t 500 \\t 400 \\t 250 \\n 2020 \\t 600 \\t 500 \\t 300 \\n 2021 \\t 700 \\t 600 \\t 400 \\n 2022 \\t 800 \\t 700 \\t 500 \\n 2023 \\t 900 \\t 800 \\t 600 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the upward trend of donations to three different nonprofit organizations, A, B, and C, over the span from 2018 to 2023. Donations to organization A grew from 400 million dollars in 2018 to 900 million dollars in 2023. Contributions to organization B increased from 300 million dollars in 2018 to 800 million dollars in 2023, while donations to organization C rose from 200 million dollars in 2018 to 600 million dollars in 2023, indicating a consistent rise in philanthropic support over the years."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nfig = plt.figure(figsize=(8,6))\nax=fig.add_subplot(1,1,1)\nax.plot([2018,2019,2020,2021,2022,2023], [400,500,600,700,800,900], label='Donation A(million dollars)')\nax.plot([2018,2019,2020,2021,2022,2023], [300,400,500,600,700,800], label='Donation B(million dollars)')\nax.plot([2018,2019,2020,2021,2022,2023], [200,250,300,400,500,600], label='Donation C(million dollars)')\nplt.xticks([2018,2019,2020,2021,2022,2023])\nax.legend(loc='upper left', bbox_to_anchor=(1,1))\nplt.title('Increase of donations to three nonprofit organizations from 2018 to 2023')\nplt.tight_layout()\nplt.savefig('line chart/png/274.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much did Donation C increase by from 2018 to 2023?",
            "output": "400 million dollars"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_353",
        "img": "./line_chart/png/line_353.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing production changes in the first eight months of 2021",
        "csv": "Month \\t Production A \\t Production B \\t Production C \\t Production D \\n January \\t 500 \\t 400 \\t 600 \\t 800 \\n February \\t 600 \\t 450 \\t 550 \\t 900 \\n March \\t 550 \\t 400 \\t 650 \\t 900 \\n April \\t 650 \\t 500 \\t 700 \\t 800 \\n May \\t 750 \\t 550 \\t 850 \\t 900 \\n June \\t 650 \\t 450 \\t 700 \\t 1000 \\n July \\t 800 \\t 550 \\t 900 \\t 1100 \\n August \\t 900 \\t 600 \\t 1000 \\t 1200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates manufacturing production changes for four products\u2014A, B, C, and D\u2014over the first eight months of 2021. Production levels are tracked from January through August. Starting in January, Production A begins at 500 units, progressively increasing, peaking at 900 units in August. Production B opens at 400 units, fluctuates slightly, and climbs to 600 units by August. Production C starts higher at 600 units and also sees an increase, reaching 1000 units in the same period. Lastly, Production D commences at 800 units and displays a consistent upward trend, culminating at 1200 units in August."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Read data\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August']\nproduction_A = [500, 600, 550, 650, 750, 650, 800, 900]\nproduction_B = [400, 450, 400, 500, 550, 450, 550, 600]\nproduction_C = [600, 550, 650, 700, 850, 700, 900, 1000]\nproduction_D = [800, 900, 900, 800, 900, 1000, 1100, 1200]\n\n# Create figure\nfig = plt.figure(figsize=(12,8))\nax = fig.add_subplot(111)\n\n# Plot line chart\nax.plot(months, production_A, '-o', color='red', label='Production A')\nax.plot(months, production_B, '-o', color='green', label='Production B')\nax.plot(months, production_C, '-o', color='blue', label='Production C')\nax.plot(months, production_D, '-o', color='violet', label='Production D')\n\n# Set x ticks\nax.set_xticks(np.arange(len(months)))\nax.set_xticklabels(months, rotation=45, wrap=True)\n\n# Add title\nplt.title('Manufacturing production changes in the first eight months of 2021', fontsize=18)\n\n# Add legend\nplt.legend(loc='upper right')\n\n# Adjust figure size\nplt.tight_layout()\n\n# Save image\nplt.savefig('line chart/png/37.png')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the total production for Production A in the first eight months of 2021?",
            "output": "5400"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_430",
        "img": "./line_chart/png/line_430.png",
        "topic": "Social Sciences and Humanities",
        "title": " Average Salary Earned by Age in the US in 2021",
        "csv": "Age \\t Average Salary(thousands of dollars) \\n 25 \\t 50 \\n 30 \\t 60 \\n 35 \\t 65 \\n 40 \\t 75 \\n 45 \\t 85 \\n 50 \\t 90 \\n 55 \\t 80 \\n 60 \\t 70 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the average salary in thousands of dollars according to age groups in the US for the year 2021. At age 25, the average salary is $50k; it increases to $60k by age 30. At 35, the figure is $65k, rising to $75k by age 40. The peak average salary is seen at age 45, with $85k, before gradually declining to $90k at age 50, $80k at age 55, and $70k at age 60."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\nfig = plt.figure(figsize = (15, 8))\nax = fig.add_subplot(1,1,1)\n\nages = [25,30,35,40,45,50,55,60]\nsalary = [50,60,65,75,85,90,80,70]\n\nax.plot(ages,salary, marker='o', color='blue', label='Average Salary')\n\nax.set_title('Average Salary Earned by Age in the US in 2021')\nax.set_xlabel('Age')\nax.set_ylabel('Average Salary (thousands of dollars)')\nax.xaxis.set_major_locator(ticker.MultipleLocator(5))\nax.yaxis.set_major_locator(ticker.MultipleLocator(5))\nax.legend()\n\nplt.tight_layout()\nplt.savefig('line chart/png/538.png')\n\nplt.cla()"
        },
        "QA": {
            "input": "What is the average salary for the age of 50?",
            "output": "90"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_241",
        "img": "./line_chart/png/line_241.png",
        "topic": "Agriculture and Food Production",
        "title": " Annual Cereal Production in the United States, 2001-2004",
        "csv": "Year \\t Wheat Production(tonnes) \\t Rice Production(tonnes) \\t Corn Production(tonnes) \\n 2001 \\t 20000 \\t 18000 \\t 15000 \\n 2002 \\t 21000 \\t 17000 \\t 14500 \\n 2003 \\t 22000 \\t 16000 \\t 14000 \\n 2004 \\t 23000 \\t 15000 \\t 13500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates annual cereal production in the United States from 2001 to 2004, measured in tonnes. For wheat production, there's an upward trend starting from 20,000 tonnes in 2001 to 23,000 tonnes in 2004. Rice production decreases year by year from 18,000 tonnes in 2001 to 15,000 tonnes in 2004. Similarly, corn production also shows a decline over the years, beginning at 15,000 tonnes in 2001 and dropping to 13,500 tonnes in 2004."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,6))\nax = plt.subplot()\nax.set_title('Annual Cereal Production in the United States, 2001-2004')\n\nax.plot([2001,2002,2003,2004], [20000,21000,22000,23000],label=\"Wheat Production(tonnes)\", color='orange')\nax.plot([2001,2002,2003,2004], [18000,17000,16000,15000],label=\"Rice Production(tonnes)\", color='pink')\nax.plot([2001,2002,2003,2004], [15000,14500,14000,13500],label=\"Corn Production(tonnes)\", color='green')\n\nax.set_xlabel('Year')\nax.set_ylabel('Production(tonnes)')\n\nax.set_xticks([2001,2002,2003,2004])\nax.set_xticklabels(['2001','2002','2003','2004'], rotation = 45, ha = 'right')\n\nax.legend(loc = 'upper left')\nplt.tight_layout()\nplt.savefig('line chart/png/263.png',dpi = 600)\nplt.clf()"
        },
        "QA": {
            "input": "By how many tonnes did wheat production increase from 2001 to 2004?",
            "output": "3000 tonnes"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_33",
        "img": "./line_chart/png/line_33.png",
        "topic": "Arts and Culture",
        "title": " Music Albums Sales in the US from 2001 to 2005",
        "csv": "Year \\t Classical Music \\t Rock Music \\t Country Music \\n 2001 \\t 100 \\t 90 \\t 80 \\n 2002 \\t 90 \\t 80 \\t 75 \\n 2003 \\t 85 \\t 75 \\t 60 \\n 2004 \\t 75 \\t 65 \\t 50 \\n 2005 \\t 70 \\t 55 \\t 45 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the sales of music albums in the US across three genres: Classical Music, Rock Music, and Country Music from the year 2001 to 2005. For each genre, the chart portrays a line that tracks the number of albums sold each year. In 2001, the sales figures start at 100 for Classical, 90 for Rock, and 80 for Country. Each year, the graph shows a decline in album sales across all genres, with the lowest figures in 2005: Classical at 70, Rock at 55, and Country at 45."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(12,8))\nax = fig.add_subplot()\n\nx = np.arange(5)\nax.plot(x, [100,90,85,75,70], label='Classical Music', marker='o')\nax.plot(x, [90,80,75,65,55], label='Rock Music', marker='o')\nax.plot(x, [80,75,60,50,45], label='Country Music', marker='o')\n\nax.set_xticks(x)\nax.set_xticklabels(('2001', '2002', '2003', '2004', '2005'))\nax.set_title('Music Albums Sales in the US from 2001 to 2005')\nax.legend(loc='best')\nplt.tight_layout()\nplt.savefig('line chart/png/315.png')\nplt.clf()"
        },
        "QA": {
            "input": "In what year did Classical Music album sales drop below 80 for the first time?",
            "output": "2003"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_72",
        "img": "./line_chart/png/line_72.png",
        "topic": "Food and Beverage Industry",
        "title": " Price of food items in the food and beverage industry from 2001 to 2004",
        "csv": "Year \\t Vegetable Price(dollars/kg) \\t Fruit Price(dollars/kg) \\t Grains Price(dollars/kg) \\n 2001 \\t 1.50 \\t 2.00 \\t 2.50 \\n 2002 \\t 1.80 \\t 2.20 \\t 3.00 \\n 2003 \\t 1.50 \\t 2.50 \\t 3.00 \\n 2004 \\t 1.60 \\t 2.20 \\t 2.80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the price trends of vegetables, fruits, and grains per kilogram from 2001 to 2004 in the food and beverage industry. In 2001, vegetables were priced at $1.50, fruits at $2.00, and grains at $2.50 per kilogram. By 2002, the prices increased to $1.80 for vegetables, $2.20 for fruits, and $3.00 for grains. The year 2003 saw vegetables at the constant price of $1.50, while fruits rose to $2.50, and grains maintained at $3.00 per kilogram. In 2004, vegetables were at $1.60, fruits returned to $2.20, and grains slightly decreased to $2.80 per kilogram."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(12, 6))\nax = plt.subplot() \nplt.plot([2001, 2002, 2003, 2004], [1.50, 1.80, 1.50, 1.60], color=\"red\", label=\"Vegetable Price(dollars/kg)\")\nplt.plot([2001, 2002, 2003, 2004], [2.00, 2.20, 2.50, 2.20], color=\"green\", label=\"Fruit Price(dollars/kg)\")\nplt.plot([2001, 2002, 2003, 2004], [2.50, 3.00, 3.00, 2.80], color=\"blue\", label=\"Grains Price(dollars/kg)\")\n\nplt.title(\"Price of food items in the food and beverage industry from 2001 to 2004\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Price\")\nplt.xticks([2001, 2002, 2003, 2004])\nplt.legend(loc=\"best\")\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['bottom'].set_visible(False)\n\nplt.tight_layout()\nplt.savefig('./line chart/png/468.png')\nplt.close()"
        },
        "QA": {
            "input": "Which food item had the highest increase in price from 2001 to 2004?",
            "output": "Fruit"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_268",
        "img": "./line_chart/png/line_268.png",
        "topic": "Technology and the Internet",
        "title": " Evolution of device sales in the US from 2010 to 2014",
        "csv": "Year \\t Desktop Computer Sales(million units) \\t Tablet Sales(million units) \\t Smartphone Sales(million units) \\n 2010 \\t 500 \\t 10 \\t 300 \\n 2011 \\t 550 \\t 50 \\t 600 \\n 2012 \\t 650 \\t 100 \\t 1000 \\n 2013 \\t 700 \\t 150 \\t 1200 \\n 2014 \\t 800 \\t 200 \\t 1400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the evolution of device sales in the US between 2010 and 2014, showcasing Desktop Computer, Tablet, and Smartphone sales in million units. In 2010, desktop computer sales stood at 500 million units, tablet sales at 10 million units, and smartphone sales at 300 million units. By 2014, desktop computers saw an increase to 800 million units sold, tablets surged to 200 million units, while smartphones exhibited a significant rise to 1400 million units."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nx = [2010,2011,2012,2013,2014]\ny1 = [500,550,650,700,800]\ny2 = [10,50,100,150,200]\ny3 = [300,600,1000,1200,1400]\n\nfig = plt.figure(figsize=(8,8))\nax = fig.add_subplot()\n\nax.plot(x, y1, label=\"Desktop Computer Sales(million units)\", color=\"b\")\nax.plot(x, y2, label=\"Tablet Sales(million units)\", color=\"r\")\nax.plot(x, y3, label=\"Smartphone Sales(million units)\", color=\"g\")\n\nax.set_title(\"Evolution of device sales in the US from 2010 to 2014\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Sales\")\nax.legend(loc=\"best\")\nax.grid()\n\nplt.xticks(x)\nplt.tight_layout()\nplt.savefig(\"line_268.png\")\nplt.clf()"
        },
        "QA": {
            "input": "By how many million units did tablet sales increase from 2010 to 2014?",
            "output": "190 million units"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_273",
        "img": "./line_chart/png/line_273.png",
        "topic": "Agriculture and Food Production",
        "title": " Crops Production in the UK from 2015-2019",
        "csv": "Year \\t Wheat(metric tons) \\t Rice(metric tons) \\t Maize(metric tons) \\n 2015 \\t 1000 \\t 800 \\t 1200 \\n 2016 \\t 1200 \\t 900 \\t 1100 \\n 2017 \\t 800 \\t 1100 \\t 1300 \\n 2018 \\t 1500 \\t 1200 \\t 1400 \\n 2019 \\t 1100 \\t 1400 \\t 1600 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the annual production of wheat, rice, and maize in metric tons in the UK from 2015 to 2019. In 2015, wheat production was at 1000 metric tons, rice at 800, and maize at 1200. By 2016, wheat increased to 1200, rice to 900, and maize dipped to 1100 metric tons. In 2017, wheat dropped to 800, rice rose to 1100, and maize grew to 1300 metric tons. The upward trend continued in 2018, with wheat reaching 1500, rice 1200, and maize 1400 metric tons. The chart peaks in 2019 with wheat at 1100, rice at 1400, and maize at 1600 metric tons."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(12, 8))\nax = plt.subplot()\n\nx = np.arange(2015, 2020)\ny1 = np.array([1000, 1200, 800, 1500, 1100])\ny2 = np.array([800, 900, 1100, 1200, 1400])\ny3 = np.array([1200, 1100, 1300, 1400, 1600])\n\nplt.plot(x, y1, label=\"Wheat (metric tons)\")\nplt.plot(x, y2, label=\"Rice (metric tons)\")\nplt.plot(x, y3, label=\"Maize (metric tons)\")\n\nplt.title(\"Crops Production in the UK from 2015-2019\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Metric Tons\")\n\nax.set_xticks(x)\n\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)\n\nplt.tight_layout()\nplt.savefig('line chart/png/191.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "What is the production of maize in the year 2017?",
            "output": "1300 metric tons"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_256",
        "img": "./line_chart/png/line_256.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Global Donations to Charitable Causes in 2021",
        "csv": "Country \\t Donations in Dollars \\t Number of Donors \\n US \\t 500 \\t 34 \\n Canada \\t 100 \\t 20 \\n UK \\t 750 \\t 48 \\n Australia \\t 200 \\t 16 \\n India \\t 300 \\t 25 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart represents global donations to charitable causes in 2021 for five countries, displaying donations in dollars alongside the number of donors. The US recorded $500 from 34 donors, Canada had $100 from 20 donors, the UK showed $750 from 48 donors, Australia contributed $200 from 16 donors, and India provided $300 from 25 donors."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['US', 500, 34], ['Canada', 100, 20], ['UK', 750, 48], ['Australia', 200, 16], ['India', 300, 25]]\n\ncountry = [x[0] for x in data]\ndonations = [x[1] for x in data]\ndonors = [x[2] for x in data]\n\nfig = plt.figure(figsize=(14, 8))\nax1 = fig.add_subplot(111)\nax1.plot(country, donations, 'b-', label='Donations in Dollars')\nax1.plot(country, donors, 'g-', label='Number of Donors')\n\nax1.set_title('Global Donations to Charitable Causes in 2021')\nax1.set_xticks(country)\nax1.set_xticklabels(country, rotation=45, wrap=True)\n\nax1.legend(loc='best')\n\nplt.tight_layout()\nplt.savefig('line chart/png/520.png')\nplt.close()"
        },
        "QA": {
            "input": "How many more donors contributed to the UK than to Australia?",
            "output": "32 donors"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_380",
        "img": "./line_chart/png/line_380.png",
        "topic": "Law and Legal Affairs",
        "title": " U.S. Court Cases in 2021",
        "csv": "Month \\t Number of Cases Opened \\t Number of Cases Closed \\n January \\t 100 \\t 80 \\n February \\t 120 \\t 90 \\n March \\t 140 \\t 100 \\n April \\t 180 \\t 150 \\n May \\t 160 \\t 140 \\n June \\t 200 \\t 170 \\n July \\t 220 \\t 190 \\n August \\t 190 \\t 160 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart outlines the monthly activity of U.S. court cases in 2021, detailing both the number of cases opened and closed. It starts with January, where 100 cases were opened and 80 closed, and progresses through August, showing a gradual increase with June peaking at 200 cases opened and 170 closed. July follows closely with 220 cases opened and 190 closed. The chart concludes with August, displaying 190 opened cases and 160 closed cases."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111)\n\nx = np.array(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August'])\ny1 = np.array([100, 120, 140, 180, 160, 200, 220, 190])\ny2 = np.array([80, 90, 100, 150, 140, 170, 190, 160])\n\nax.plot(x, y1, label='Number of Cases Opened', linewidth=2, color='r')\nax.plot(x, y2, label='Number of Cases Closed', linewidth=2, color='b')\n\nplt.title('U.S. Court Cases in 2021', fontsize=18)\nax.set_xlabel('Month', fontsize=16)\nax.set_ylabel('Number of Cases', fontsize=16)\n\nax.set_xticks(x)\nax.set_xticklabels(x, rotation=45, fontsize=14)\n\nplt.legend(loc='upper left', fontsize=14)\nplt.grid(linestyle='--')\n\nplt.tight_layout()\nplt.savefig('line chart/png/355.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more cases were opened than closed in the month of July?",
            "output": "30"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_43",
        "img": "./line_chart/png/line_43.png",
        "topic": "Science and Engineering",
        "title": " Average Weather Conditions in June in San Francisco, California",
        "csv": "Month \\t Wind Speed(km/h) \\t Air Pressure(hPa) \\t Humidity(%) \\t Rainfall(mm) \\n 01 \\t 13 \\t 1020 \\t 50 \\t 3.5 \\n 02 \\t 17 \\t 1022 \\t 45 \\t 2.4 \\n 03 \\t 11 \\t 1018 \\t 60 \\t 4.4 \\n 04 \\t 13 \\t 1025 \\t 55 \\t 3.2 \\n 05 \\t 15 \\t 1022 \\t 52 \\t 1.8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart presents the average weather conditions for the month of June in San Francisco, California, detailing wind speed in km/h, air pressure in hPa, humidity in percentage, and rainfall in mm. The data spans from January to May, with wind speeds ranging from 11 to 17 km/h and air pressure between 1018 and 1025 hPa. Humidity varies from 45% to 60%, while rainfall fluctuates between 1.8 mm and 4.4 mm."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([1,2,3,4,5])\ny1 = np.array([13,17,11,13,15])\ny2 = np.array([1020,1022,1018,1025,1022])\ny3 = np.array([50,45,60,55,52])\ny4 = np.array([3.5,2.4,4.4,3.2,1.8])\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot()\nax.plot(x,y1,color='b',label='Wind Speed(km/h)')\nax.plot(x,y2,color='r',label='Air Pressure(hPa)')\nax.plot(x,y3,color='g',label='Humidity(%)')\nax.plot(x,y4,color='y',label='Rainfall(mm)')\nax.set_title('Average Weather Conditions in June in San Francisco, California',fontsize=14)\nax.set_xlabel('Month')\nax.set_xticks(x)\nax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nplt.tight_layout()\nplt.savefig('line chart/png/419.png')\nplt.cla()"
        },
        "QA": {
            "input": "What is the average humidity (%) across the months listed?",
            "output": "52.4%"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_192",
        "img": "./line_chart/png/line_192.png",
        "topic": "Energy and Utilities",
        "title": " Renewable Energy Production in 2020",
        "csv": "Month \\t Solar Energy \\t Wind Energy \\n Jan \\t 200 \\t 400 \\n Feb \\t 250 \\t 450 \\n Mar \\t 300 \\t 500 \\n Apr \\t 350 \\t 550 \\n May \\t 400 \\t 600 \\n Jun \\t 450 \\t 650 \\n Jul \\t 500 \\t 700 \\n Aug \\t 550 \\t 750 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the renewable energy production from solar and wind sources for each month in 2020. Solar energy production starts at 200 in January and steadily increases to 550 by August. Wind energy begins at 400 in January and also experiences a consistent rise, reaching 750 by August. The data suggests a continuous growth trend in the production of both solar and wind energy over these months."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(8)\nsolar_energy = [200,250,300,350,400,450,500,550]\nwind_energy = [400,450,500,550,600,650,700,750]\n\nplt.figure(figsize=(8, 6))\nplt.plot(x, solar_energy, 's-', label='Solar Energy')\nplt.plot(x, wind_energy, 'o-', label='Wind Energy')\nplt.xticks(x, ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'))\nplt.title('Renewable Energy Production in 2020')\nplt.xlabel('Month')\nplt.ylabel('Energy Production')\nplt.legend(loc='lower right')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig('line chart/png/14.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much solar energy was produced in August?",
            "output": "550"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_405",
        "img": "./line_chart/png/line_405.png",
        "topic": "Environment and Sustainability",
        "title": " Global CO2 Emission and Ozone Levels from 2019 to 2024",
        "csv": "Year \\t CO2 Emission \\t Ozone Levels \\n 2019 \\t 400 \\t 50 \\n 2020 \\t 420 \\t 48 \\n 2021 \\t 430 \\t 45 \\n 2022 \\t 440 \\t 43 \\n 2023 \\t 460 \\t 40 \\n 2024 \\t 480 \\t 38 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the trends in global CO2 emissions and ozone levels from 2019 to 2024. In 2019, CO2 emissions were at 400 units paired with ozone levels at 50 units. A gradual increase in CO2 emissions is observed over the years, reaching 480 units in 2024, while ozone levels consistently decrease, starting at 50 units in 2019 and dropping to 38 units by 2024. The data shows a progressive rise in emissions alongside a reduction in ozone levels year after year."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.ticker import MaxNLocator\n\ndata = [[2019,400,50],[2020,420,48],[2021,430,45],[2022,440,43],[2023,460,40],[2024,480,38]]\n\nx, y1, y2 = np.array(data).T\n\nfig, ax = plt.subplots(figsize=(10,5))\n\nax.plot(x, y1, color = 'red', marker='o', label='CO2 Emission')\nax.plot(x, y2, color = 'blue', marker='o', label='Ozone Levels')\n\nax.set_title('Global CO2 Emission and Ozone Levels from 2019 to 2024')\nax.set_xlabel('Year')\nax.set_ylabel('Levels')\nax.legend(loc=\"lower right\")\nax.xaxis.set_major_locator(MaxNLocator(integer=True))\nax.set_xticks(x)\nax.grid(True)\nplt.tight_layout()\n\nplt.savefig('line chart/png/84.png')\nplt.clf()"
        },
        "QA": {
            "input": "What were the ozone levels in the year 2021?",
            "output": "45"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_245",
        "img": "./line_chart/png/line_245.png",
        "topic": "Arts and Culture",
        "title": " Artwork prices in the 2000s",
        "csv": "Year \\t Painting A \\t Painting B \\t Painting C \\t Sculpture A \\n 2000 \\t 30000 \\t 25000 \\t 27000 \\t 15000 \\n 2001 \\t 25000 \\t 28000 \\t 29000 \\t 14000 \\n 2002 \\t 22000 \\t 31000 \\t 32000 \\t 16000 \\n 2003 \\t 27000 \\t 33000 \\t 35000 \\t 18000 \\n 2004 \\t 23000 \\t 36000 \\t 38000 \\t 20000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart depicts the price trends of three paintings and one sculpture over a five-year period in the 2000s. The data shows the year-on-year price fluctuations for Painting A, Painting B, Painting C, and Sculpture A. In 2000, Painting A was priced at $30,000, Painting B at $25,000, Painting C at $27,000, and Sculpture A at $15,000. By 2004, the prices had changed, with Painting A at $23,000, Painting B at $36,000, Painting C at $38,000, and Sculpture A at $20,000, revealing a varied appreciation in the value of these artworks over time."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nplt.figure(figsize=(20,10))\n\ndata = {'Year':[2000,2001,2002,2003,2004],\n        'Painting A':[30000,25000,22000,27000,23000],\n        'Painting B':[25000,28000,31000,33000,36000],\n        'Painting C':[27000,29000,32000,35000,38000],\n        'Sculpture A':[15000,14000,16000,18000,20000]}\n\ndf = pd.DataFrame(data)\n\nplt.plot(df['Year'], df['Painting A'], label='Painting A')\nplt.plot(df['Year'], df['Painting B'], label='Painting B')\nplt.plot(df['Year'], df['Painting C'], label='Painting C')\nplt.plot(df['Year'], df['Sculpture A'], label='Sculpture A')\n\nplt.title('Artwork prices in the 2000s')\nplt.xlabel('Year')\nplt.ylabel('Price')\nplt.xticks(df['Year'])\nplt.legend(loc=2, ncol=2, framealpha=0.5, fontsize='large')\n\nplt.tight_layout()\nplt.savefig('line chart/png/260.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "In which year did Painting C have the lowest price according to the data?",
            "output": "2000"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_83",
        "img": "./line_chart/png/line_83.png",
        "topic": "Environment and Sustainability",
        "title": " Environmental changes in the US between 2010 and 2016",
        "csv": "Year \\t Greenhouse Gas Emissions (million tons) \\t Renewable Energy Usage (GW) \\t Air Quality Index \\n 2010 \\t 1000 \\t 5 \\t 60 \\n 2011 \\t 1100 \\t 7 \\t 55 \\n 2012 \\t 1200 \\t 10 \\t 50 \\n 2013 \\t 1300 \\t 12 \\t 45 \\n 2014 \\t 1400 \\t 15 \\t 40 \\n 2015 \\t 1500 \\t 18 \\t 35 \\n 2016 \\t 1600 \\t 20 \\t 30 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart represents environmental changes in the US from 2010 to 2016, tracking greenhouse gas emissions in million tons, renewable energy usage in gigawatts (GW), and air quality index (AQI). In 2010, emissions were at 1000 million tons, renewable energy usage was 5 GW, and the AQI was 60. By 2016, emissions increased to 1600 million tons, renewable energy usage rose to 20 GW, and the AQI improved to 30. Each year shows a consistent rise in greenhouse gas emissions and renewable energy usage, while the AQI indicates improving air quality over the period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate data.\ndata = np.array([[2010, 1000, 5, 60], \n                 [2011, 1100, 7, 55],\n                 [2012, 1200, 10, 50],\n                 [2013, 1300, 12, 45],\n                 [2014, 1400, 15, 40],\n                 [2015, 1500, 18, 35],\n                 [2016, 1600, 20, 30]])\n\n# Create figure.\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(1, 1, 1)\n\n# Get x, y data.\nx_data = data[:, 0]\ny1_data = data[:, 1]\ny2_data = data[:, 2]\ny3_data = data[:, 3]\n\n# Plot data.\nax.plot(x_data, y1_data, label='Greenhouse Gas Emissions (million tons)', color='#8B008B', linestyle='-', marker='o', linewidth=2)\nax.plot(x_data, y2_data, label='Renewable Energy Usage (GW)', color='#FFA500', linestyle='-', marker='^', linewidth=2)\nax.plot(x_data, y3_data, label='Air Quality Index', color='#20B2AA', linestyle='-', marker='s', linewidth=2)\n\n# Set title and legend.\nax.set_title('Environmental changes in the US between 2010 and 2016')\nax.set_xlabel('Year')\nax.set_ylabel('Value')\nax.legend(loc='best', fontsize=12, ncol=2)\n\n# Set xticks.\nplt.xticks(x_data, rotation=0)\n\n# Resize.\nplt.tight_layout()\n\n# Save figure.\nplt.savefig('line chart/png/185.png', dpi=300)\n\n# Clear figure.\nplt.clf()"
        },
        "QA": {
            "input": "What was the increase in renewable energy usage from 2010 to 2013?",
            "output": "7 GW"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_214",
        "img": "./line_chart/png/line_214.png",
        "topic": "Food and Beverage Industry",
        "title": " Food Production in the US from 2001 to 2004",
        "csv": "Year \\t Fruits \\t Vegetables \\t Grain \\t Meat \\n 2001 \\t 200 \\t 300 \\t 500 \\t 400 \\n 2002 \\t 250 \\t 450 \\t 400 \\t 500 \\n 2003 \\t 300 \\t 400 \\t 600 \\t 450 \\n 2004 \\t 400 \\t 500 \\t 500 \\t 350 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the progression of food production in various categories in the US from 2001 to 2004. For each year, data points represent quantities produced across four categories: fruits, vegetables, grain, and meat. In 2001, fruits total 200 units, vegetables 300, grain 500, and meat 400. By 2002, these categories shifted to fruits 250, vegetables 450, grain 400, and meat 500. The year 2003 showed further changes with fruits at 300, vegetables 400, grain 600, and meat 450. The dataset concludes with 2004, displaying increases in fruit and vegetable production to 400 and 500, respectively, while grain stabilized at 500 and meat production decreased to 350."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nfig = plt.figure(figsize=(10, 7))\nax = fig.add_subplot(111)\n\n# Set data\nyear = [2001, 2002, 2003, 2004]\nfruits = [200, 250, 300, 400]\nvegetables = [300, 450, 400, 500]\ngrain = [500, 400, 600, 500]\nmeat = [400, 500, 450, 350]\n\n# Plot line chart\nax.plot(year, fruits, label=\"Fruits\", color=\"red\", lw=2, marker=\"o\")\nax.plot(year, vegetables, label=\"Vegetables\", color=\"green\", lw=2, marker=\"o\")\nax.plot(year, grain, label=\"Grain\", color=\"blue\", lw=2, marker=\"o\")\nax.plot(year, meat, label=\"Meat\", color=\"magenta\", lw=2, marker=\"o\")\n\n# Set xy-axis label\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Production\")\n\n# Set xy-axis limit\nax.set_xlim(2000, 2005)\nax.set_ylim(0, 600)\n\n# Set xticks\nax.set_xticks(year)\n\n# Set legend\nax.legend(loc=\"best\")\n\n# Set title\nax.set_title(\"Food Production in the US from 2001 to 2004\")\n\n# Adjust layout\nplt.tight_layout()\n\n# Save figure\nplt.savefig(\"line chart/png/80.png\")\n\n# Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "Which food category saw the maximum increase in production from 2001 to 2004?",
            "output": "Fruits"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_488",
        "img": "./line_chart/png/line_488.png",
        "topic": "Sports and Entertainment",
        "title": " Sports Attendance in the United States in the Early 2000s",
        "csv": "Year \\t Football Attendance(millions) \\t Baseball Attendance(millions) \\t Basketball Attendance(millions) \\n 2001 \\t 20 \\t 16 \\t 14 \\n 2002 \\t 22 \\t 18 \\t 15 \\n 2003 \\t 19 \\t 17 \\t 16 \\n 2004 \\t 23 \\t 20 \\t 17 \\n 2005 \\t 21 \\t 19 \\t 18 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart represents sports attendance in millions across three major games in the United States during the early 2000s. It shows attendance trends from 2001 to 2005 for football, baseball, and basketball. Specifically, football attendance increased from 20 million in 2001 to 21 million in 2005, with a peak at 23 million in 2004. Baseball attendance started at 16 million in 2001, rising to 20 million in 2004 and slightly dipping to 19 million in 2005. Basketball attendance demonstrates a steady increase from 14 million in 2001 to 18 million by 2005."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np\n\n#Create figure\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\n\n#Data\nYear = np.array([2001, 2002, 2003, 2004, 2005])\nFootball_Attendance = np.array([20, 22, 19, 23, 21])\nBaseball_Attendance = np.array([16, 18, 17, 20, 19])\nBasketball_Attendance = np.array([14, 15, 16, 17, 18])\n\n#Plot line chart\nax.plot(Year, Football_Attendance, color = 'blue', label = 'Football Attendance')\nax.plot(Year, Baseball_Attendance, color = 'red', label = 'Baseball Attendance')\nax.plot(Year, Basketball_Attendance, color = 'green', label = 'Basketball Attendance')\nplt.xticks(Year)\n\n#Label\nax.set_title('Sports Attendance in the United States in the Early 2000s')\nax.set_xlabel('Year')\nax.set_ylabel('Attendance (millions)')\nax.legend()\n\n#Adjust figure\nplt.tight_layout()\n\n#Save figure\nfig.savefig('line chart/png/230.png')\n\n#Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "What was the total attendance for all three sports in 2005?",
            "output": "58 million"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_120",
        "img": "./line_chart/png/line_120.png",
        "topic": "Technology and the Internet",
        "title": " Internet connection speed changes in a sample city over 6 hours on March 20, 2021",
        "csv": "Time \\t Speed A(Mbps) \\t Speed B(Mbps) \\t Speed C(Mbps) \\n 00:00 \\t 100 \\t 80 \\t 120 \\n 01:00 \\t 90 \\t 70 \\t 130 \\n 02:00 \\t 95 \\t 75 \\t 125 \\n 03:00 \\t 105 \\t 85 \\t 115 \\n 04:00 \\t 110 \\t 75 \\t 105 \\n 05:00 \\t 95 \\t 80 \\t 110 \\n 06:00 \\t 100 \\t 85 \\t 115 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the changes in internet connection speeds measured in Mbps for three different service providers (Speed A, Speed B, and Speed C) over a six-hour period starting at 00:00 and ending at 06:00 on March 20, 2021. Speed A fluctuates between 90 and 110 Mbps, Speed B varies from 70 to 85 Mbps, and Speed C moves between 105 and 130 Mbps during the observed timeframe. Each hour marks a data point for the connection speeds of the respective services."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([0,1,2,3,4,5,6])\ny1 = np.array([100,90,95,105,110,95,100])\ny2 = np.array([80,70,75,85,75,80,85])\ny3 = np.array([120,130,125,115,105,110,115])\n\nfig = plt.figure( figsize=(12, 6))\nax = fig.add_subplot(111)\nax.plot(x, y1, '-s', label='Speed A(Mbps)')\nax.plot(x, y2, '-o', label='Speed B(Mbps)')\nax.plot(x, y3, '-^', label='Speed C(Mbps)')\nax.set_xticks(x)\nplt.title('Internet connection speed changes in a sample city over 6 hours on March 20, 2021')\nplt.xlabel('Time')\nplt.ylabel('Speed')\nplt.grid(True)\nplt.legend(loc='upper left')\nplt.tight_layout()\nplt.savefig('line chart/png/547.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which connection speed, A or B, shows greater fluctuation over the 6-hour period?",
            "output": "A"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_304",
        "img": "./line_chart/png/line_304.png",
        "topic": "Retail and E-commerce",
        "title": " Global Retail Sales from 2009-2019",
        "csv": "Year \\t Online Sales(billion dollars) \\t Offline Sales(billion dollars) \\n 2009 \\t 500 \\t 4000 \\n 2010 \\t 600 \\t 4500 \\n 2011 \\t 700 \\t 5000 \\n 2012 \\t 800 \\t 5500 \\n 2013 \\t 900 \\t 6000 \\n 2014 \\t 1000 \\t 6500 \\n 2015 \\t 1200 \\t 7000 \\n 2016 \\t 1400 \\t 7500 \\n 2017 \\t 1600 \\t 8000 \\n 2018 \\t 1800 \\t 8500 \\n 2019 \\t 2000 \\t 9000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates global retail sales from 2009 to 2019, denoting both online and offline sales in billion dollars. In 2009, online sales were at 500 billion dollars, with offline sales at 4000 billion dollars. By 2019, online sales reached 2000 billion dollars, and offline sales climbed to 9000 billion dollars. Yearly, online sales steadily increased by about 100-200 billion dollars, while offline sales grew by approximately 500 billion dollars each year."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\ndata = [[2009, 500, 4000], [2010, 600, 4500], [2011, 700, 5000],\n        [2012, 800, 5500], [2013, 900, 6000], [2014, 1000, 6500],\n        [2015, 1200, 7000], [2016, 1400, 7500], [2017, 1600, 8000],\n        [2018, 1800, 8500], [2019, 2000, 9000]]\n\nyears, online, offline = zip(*data)\n\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(1, 1, 1)\nax.plot(years, online, label='Online Sales(billion dollars)')\nax.plot(years, offline, label='Offline Sales(billion dollars)')\n\nax.grid(True, linestyle='-.')\nax.tick_params(labelcolor='r', labelsize='medium', width=3)\nax.set_title('Global Retail Sales from 2009-2019')\nax.set_xlabel('Year')\nax.set_ylabel('Sales(billion dollars)')\nax.set_xticks(years)\nax.legend(loc='best')\n\nplt.tight_layout()\nplt.savefig('line chart/png/221.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much did offline sales increase from 2009 to 2019?",
            "output": "$5000 billion"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_170",
        "img": "./line_chart/png/line_170.png",
        "topic": "Energy and Utilities",
        "title": " Renewable energy production in the United States from 2020 to 2023",
        "csv": "Year \\t Wind Energy Production (MWh) \\t Solar Energy Production (MWh) \\t Hydroelectric Production (MWh) \\n 2020 \\t 4000 \\t 6000 \\t 8000 \\n 2021 \\t 5000 \\t 7000 \\t 9000 \\n 2022 \\t 6000 \\t 8000 \\t 10000 \\n 2023 \\t 7000 \\t 9000 \\t 11000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart presents the renewable energy production in the United States from 2020 to 2023. It tracks the production of wind, solar, and hydroelectric energy over four years. In 2020, wind energy production was 4000 MWh, solar was 6000 MWh, and hydroelectric was 8000 MWh. By 2023, wind energy production increased to 7000 MWh, solar to 9000 MWh, and hydroelectric to 11000 MWh, indicating a growth in renewable energy outputs each year."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(13, 8))\nax = plt.subplot()\n\nyear = [2020, 2021, 2022, 2023]\nwind = [4000, 5000, 6000, 7000]\nsolar = [6000, 7000, 8000, 9000]\nhydro = [8000, 9000, 10000, 11000]\n\nax.plot(year, wind, color='orange', label='Wind Energy Production (MWh)')\nax.plot(year, solar, color='green', label='Solar Energy Production (MWh)')\nax.plot(year, hydro, color='blue', label='Hydroelectric Production (MWh)')\n\nax.set_title('Renewable energy production in the United States from 2020 to 2023')\nax.set_xlabel('Year')\nax.set_ylabel('Energy Production (MWh)')\nax.set_xticks(year)\nax.set_xticklabels(year)\nax.legend(loc='upper left', bbox_to_anchor=(0, 1))\n\nplt.tight_layout()\nplt.savefig('line chart/png/248.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year did hydroelectric production reach 10000 MWh?",
            "output": "2022"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_470",
        "img": "./line_chart/png/line_470.png",
        "topic": "Environment and Sustainability",
        "title": " Carbon Emission and Renewable Energy Production Trends in 2025",
        "csv": "Year \\t Carbon Emission(metric tons) \\t Renewable Energy Production(billion watts) \\n 2020 \\t 5000 \\t 800 \\n 2021 \\t 4800 \\t 900 \\n 2022 \\t 4900 \\t 1000 \\n 2023 \\t 5100 \\t 1100 \\n 2024 \\t 5300 \\t 1200 \\n 2025 \\t 5400 \\t 1400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart presents trends in carbon emissions and renewable energy production over six years, from 2020 to 2025. It shows carbon emissions in metric tons, starting at 5000 in 2020, with slight fluctuations, reaching 5400 by 2025. Concurrently, renewable energy production in billion watts is depicted, starting at 800 in 2020 and consistently increasing annually to 1400 by 2025."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport numpy as np\n\nx = np.array(['2020','2021','2022','2023','2024','2025'])\ny1 = np.array([5000,4800,4900,5100,5300,5400])\ny2 = np.array([800,900,1000,1100,1200,1400])\n\nfig, ax = plt.subplots(figsize=(10,8))\nax.plot(x,y1,label='Carbon Emission',color='y',linewidth=2)\nax.plot(x,y2,label='Renewable Energy Production',color='b',linewidth=2)\nax.set_title('Carbon Emission and Renewable Energy Production Trends in 2025', fontsize=14, fontweight='bold')\nax.set_xlabel('Year', fontsize=14, fontweight='bold')\nax.set_ylabel('Metric Tons and Billion Watts', fontsize=14, fontweight='bold')\nax.xaxis.set_major_locator(ticker.MultipleLocator(1))\nax.grid(which='major', axis='both', linestyle='-')\nax.legend(loc='best')\nplt.tight_layout()\nplt.savefig('line chart/png/403.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much Renewable Energy Production is projected for 2025?",
            "output": "1400 billion watts"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_11",
        "img": "./line_chart/png/line_11.png",
        "topic": "Sports and Entertainment",
        "title": " Growth of Box Office Gross and Ticket Sales for the NBA from 2016-2020",
        "csv": "Year \\t Gross earnings (million dollars) \\t Tickets Sold (millions) \\n 2016 \\t 2.2 \\t 90 \\n 2017 \\t 2.3 \\t 95 \\n 2018 \\t 2.5 \\t 100 \\n 2019 \\t 2.7 \\t 105 \\n 2020 \\t 2.9 \\t 110 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the growth of box office gross and ticket sales for the NBA from 2016 to 2020. In 2016, the gross earnings were 2.2 million dollars with 90 million tickets sold. There was a steady increase over the years: 2017 saw a slight increase to 2.3 million dollars and 95 million tickets, 2018 with 2.5 million dollars and 100 million tickets, followed by 2019 with 2.7 million dollars and 105 million tickets, and finally, 2020 peaked at 2.9 million dollars with 110 million tickets sold."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot()\n\n# Create data\nyear = np.array([2016,2017,2018,2019,2020])\ngross_earnings = np.array([2.2,2.3,2.5,2.7,2.9])\ntickets_sold = np.array([90,95,100,105,110])\n\n# Plot the line chart\nax.plot(year, gross_earnings, color='blue', label='Gross Earnings')\nax.plot(year, tickets_sold, color='red', label='Tickets Sold')\n\n# Set title and labels\nax.set_title('Growth of Box Office Gross and Ticket Sales for the NBA from 2016-2020')\nax.set_xlabel('Year', fontsize=12)\nax.set_ylabel('Sales (million dollars)', fontsize=12)\n\n# Set limits\n#ax.set_ylim(2.0, 3.0)\n\n# Set xticks\nax.set_xticks(year)\n\n# Add grid\nax.grid()\n\n# Add legend\nax.legend(loc='upper right')\n\n# Save the figure\nplt.savefig('line_11.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more millions of tickets were sold in 2020 compared to 2016?",
            "output": "20 million"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_167",
        "img": "./line_chart/png/line_167.png",
        "topic": "Tourism and Hospitality",
        "title": " Number of Tourists and Average Price for Tourism Industry in the US from 2019 to 2023",
        "csv": "Year \\t Number of Tourists (in millions) \\t Average Price \\n 2019 \\t 25 \\t 150 \\n 2020 \\t 30 \\t 200 \\n 2021 \\t 35 \\t 250 \\n 2022 \\t 40 \\t 300 \\n 2023 \\t 45 \\t 400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the annual trend in the number of tourists (in millions) and the average price in the US tourism industry from 2019 to 2023. In 2019, there were 25 million tourists at an average price of $150. Each subsequent year saw an increase, with 30 million tourists at $200 in 2020, 35 million at $250 in 2021, 40 million at $300 in 2022, and a further rise to 45 million tourists at an average price of $400 in 2023."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(12, 8))\nplt.title(\"Number of Tourists and Average Price for Tourism Industry in the US from 2019 to 2023\")\nx_data = [\"2019\", \"2020\", \"2021\", \"2022\", \"2023\"]\nnum_tourists = [25, 30, 35, 40, 45]\navg_price = [150, 200, 250, 300, 400]\nplt.plot(x_data, num_tourists, color='red', label='Number of Tourists (in millions)')\nplt.plot(x_data, avg_price, color='green', label='Average Price')\nplt.xticks(np.arange(5), x_data, rotation=45)\nplt.legend(loc=\"upper left\")\nplt.grid(True)\nplt.tight_layout()\nplt.savefig('line chart/png/513.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much did the average price for the tourism industry in the US increase from 2019 to 2023?",
            "output": "250"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_57",
        "img": "./line_chart/png/line_57.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Satisfaction, Retention, and Performance in 2020-2023",
        "csv": "Year \\t Employee Satisfaction \\t Employee Retention \\t Employee Performance \\n 2020 \\t 4.3 \\t 90% \\t 92% \\n 2021 \\t 4.5 \\t 92% \\t 94% \\n 2022 \\t 4.7 \\t 94% \\t 96% \\n 2023 \\t 4.9 \\t 96% \\t 98% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart outlines trends in employee satisfaction, retention, and performance over the four-year period from 2020 to 2023. In 2020, satisfaction is rated at 4.3, with retention at 90% and performance at 92%. By 2021, satisfaction increases to 4.5, retention to 92%, and performance to 94%. The chart shows a continued upward trajectory, with satisfaction reaching 4.7 in 2022, alongside 94% retention and 96% performance. It culminates in 2023 with satisfaction at 4.9, retention at 96%, and performance at 98%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [[2020, 4.3, 0.9, 0.92], \n        [2021, 4.5, 0.92, 0.94], \n        [2022, 4.7, 0.94, 0.96], \n        [2023, 4.9, 0.96, 0.98]]\n\nfig = plt.figure(figsize=(12,6))\n\nax = fig.add_subplot(111)\n\nyear = [x[0] for x in data]\nemployee_satisfaction = [x[1] for x in data]\nemployee_retention = [x[2] for x in data]\nemployee_performance = [x[3] for x in data]\n\nax.plot(year, employee_satisfaction, label='Employee Satisfaction', linestyle='-', marker='o')\nax.plot(year, employee_retention, label='Employee Retention', linestyle='--', marker='s')\nax.plot(year, employee_performance, label='Employee Performance', linestyle=':', marker='^')\n\nax.set_title('Employee Satisfaction, Retention, and Performance in 2020-2023')\n\nplt.xticks(year) \nplt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),\n          fancybox=True, shadow=True, ncol=3)\n\nplt.tight_layout()\nplt.savefig('line chart/png/473.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage difference in Employee Retention between the years 2020 and 2023?",
            "output": "6%"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_251",
        "img": "./line_chart/png/line_251.png",
        "topic": "Arts and Culture",
        "title": " Attendance to Theater and Art Museums from 2010 to 2017",
        "csv": "Year \\t Number of Theater Attendees(million people) \\t Number of Art Museum Attendees(million people) \\n 2010 \\t 20 \\t 15 \\n 2011 \\t 18 \\t 17 \\n 2012 \\t 16 \\t 19 \\n 2013 \\t 20 \\t 21 \\n 2014 \\t 21 \\t 20 \\n 2015 \\t 22 \\t 18 \\n 2016 \\t 24 \\t 19 \\n 2017 \\t 23 \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates attendance trends at theaters and art museums from 2010 to 2017, measured in millions of people. In 2010, theater attendance was at 20 million, surpassing art museum attendance at 15 million. Over the years, theater attendance fluctuates, reaching a peak of 24 million in 2016. Conversely, art museum attendance gradually increases from 15 million in 2010 to a high of 21 million in 2013, followed by slight variations in the subsequent years."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(15, 6))\nplt.title('Attendance to Theater and Art Museums from 2010 to 2017')\nYears = [2010,2011,2012,2013,2014,2015,2016,2017]\nTheater_attendees = [20,18,16,20,21,22,24,23]\nArt_museum_attendees = [15,17,19,21,20,18,19,20]\nplt.plot(Years, Theater_attendees, label = 'Theater Attendees', color = 'b', marker = 'o', markerfacecolor = 'blue', markersize = 5)\nplt.plot(Years, Art_museum_attendees, label = 'Art Museum Attendees', color = 'r', marker = 'o', markerfacecolor = 'red', markersize = 5)\nplt.xlabel('Years')\nplt.ylabel('Attendees(million people)')\nplt.xticks(Years, rotation=45, wrap=True)\nplt.legend(loc='upper left')\nplt.grid()\nplt.tight_layout()\nplt.savefig('line chart/png/523.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year did art museum attendees first surpass theater attendees?",
            "output": "2012"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_292",
        "img": "./line_chart/png/line_292.png",
        "topic": "Technology and the Internet",
        "title": " Technology usage trend in the United States from 2012 to 2016",
        "csv": "Year \\t Mobile Phone Use(%) \\t Computer Use(%) \\t Tablet Use(%) \\n 2012 \\t 35 \\t 25 \\t 5 \\n 2013 \\t 50 \\t 30 \\t 15 \\n 2014 \\t 65 \\t 45 \\t 20 \\n 2015 \\t 80 \\t 60 \\t 30 \\n 2016 \\t 90 \\t 80 \\t 45 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the technology usage trend in the United States from 2012 to 2016, focusing on the usage percentages of mobile phones, computers, and tablets per year. In 2012, mobile phone use was at 35%, computer use at 25%, and tablet use at 5%. By 2016, these numbers increased significantly, with mobile phone use at 90%, computer use at 80%, and tablet use at 45%. The data shows a consistent upward trend in the use of all three technologies over the five-year period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {'Year': [2012, 2013, 2014, 2015, 2016],\n        'Mobile Phone Use(%)': [35, 50, 65, 80, 90],\n        'Computer Use(%)': [25, 30, 45, 60, 80],\n        'Tablet Use(%)': [5, 15, 20, 30, 45]}\n\ndf = pd.DataFrame(data, index=data['Year'])\n\nplt.figure(figsize=(10, 5))\nplt.plot(df.index, df['Mobile Phone Use(%)'], '-o', color='orange', label='Mobile Phone Use(%)')\nplt.plot(df.index, df['Computer Use(%)'], '-o', color='red', label='Computer Use(%)')\nplt.plot(df.index, df['Tablet Use(%)'], '-o', color='blue', label='Tablet Use(%)')\n\nplt.title('Technology usage trend in the United States from 2012 to 2016')\nplt.xlabel('Year')\nplt.ylabel('Usage(%)')\nplt.xticks(df.index)\nplt.legend(loc='best')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig('line chart/png/186.png')\nplt.clf()"
        },
        "QA": {
            "input": "By how much did tablet use(%) increase from 2013 to 2015?",
            "output": "15%"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_22",
        "img": "./line_chart/png/line_22.png",
        "topic": "Social Sciences and Humanities",
        "title": " Population of Five Major Countries in 2020",
        "csv": "Country \\t Population \\n USA \\t 300 million \\n Canada \\t 40 million \\n Mexico \\t 130 million \\n India \\t 1300 million \\n China \\t 1400 million \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart presents the population statistics for five major countries in 2020. The USA has a population of 300 million, Canada 40 million, Mexico 130 million, India 1,300 million, and China tops the chart with a population of 1,400 million. The graphical representation highlights the population differences among these countries.\n"
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 8))\n\nx = ['USA', 'Canada', 'Mexico', 'India', 'China']\ny = [300, 40, 130, 1300, 1400]\n\nplt.plot(x, y, color='teal', marker='o', linestyle='dashed', linewidth=2, markersize=8)\n\nplt.xticks(rotation=30, wrap=True)\nplt.title('Population of Five Major Countries in 2020')\nplt.xlabel('Country')\nplt.ylabel('Population (Millions)')\n\nplt.tight_layout()\nplt.savefig('line chart/png/161.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the smallest population according to the data?",
            "output": "Canada"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_111",
        "img": "./line_chart/png/line_111.png",
        "topic": "Human Resources and Employee Management",
        "title": " Salaries of Employees Across Different Countries",
        "csv": "Country \\t Salary A \\t Salary B \\t Salary C \\n USA \\t 2000 \\t 3000 \\t 4000 \\n UK \\t 3000 \\t 4000 \\t 5000 \\n India \\t 1000 \\t 2000 \\t 3000 \\n China \\t 2000 \\t 3000 \\t 4000 \\n Japan \\t 3000 \\t 4000 \\t 5000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates salaries across different job designations, labeled as Salary A, Salary B, and Salary C, in five countries. The USA shows salaries of 2000, 3000, and 4000 units respectively; the UK has salaries of 3000, 4000, and 5000 units; India presents lower figures with 1000, 2000, and 3000 units; China's salaries match those of the USA; and Japan mirrors the UK's salary distribution."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(15,8))\nax = plt.subplot()\nax.set_title('Salaries of Employees Across Different Countries')\nax.set_xlabel('Country')\nax.set_ylabel('Salary')\nax.set_xticklabels([\"USA\", \"UK\", \"India\", \"China\", \"Japan\"], rotation=45, ha=\"right\")\nax.plot(np.arange(5), [2000, 3000, 1000, 2000, 3000], label='Salary A')\nax.plot(np.arange(5), [3000, 4000, 2000, 3000, 4000], label='Salary B')\nax.plot(np.arange(5), [4000, 5000, 3000, 4000, 5000], label='Salary C')\nax.legend(loc='best', fontsize='large', fancybox=True, shadow=True)\nplt.tight_layout()\nplt.savefig('line chart/png/109.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much is Salary C for the UK?",
            "output": "5000"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_248",
        "img": "./line_chart/png/line_248.png",
        "topic": "Manufacturing and Production",
        "title": " Monthly Productivity and Efficiency of a Manufacturing Plant in 2020",
        "csv": "Month \\t Productivity(units per hour) \\t Efficiency(%) \\n January \\t 500 \\t 70 \\n February \\t 550 \\t 75 \\n March \\t 650 \\t 80 \\n April \\t 700 \\t 85 \\n May \\t 600 \\t 90 \\n June \\t 650 \\t 95 \\n July \\t 700 \\t 80 \\n August \\t 750 \\t 85 \\n September \\t 650 \\t 90 \\n October \\t 700 \\t 95 \\n November \\t 650 \\t 80 \\n December \\t 700 \\t 75 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart represents monthly productivity in units per hour and efficiency percentages at a manufacturing plant in 2020. January starts with a productivity of 500 units per hour and 70% efficiency. Productivity and efficiency increase, with February at 550 units and 75% efficiency, and further peaks with April at 700 units and 85% efficiency. While there are fluctuations, a pattern of increasing efficiency up to 95% by June is evident, despite varying productivity levels, which range from 600 to 750 units per hour throughout the year. The year concludes with December showcasing 700 units per hour at 75% efficiency."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nmonth = np.array(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])\nprod = np.array([500, 550, 650, 700, 600, 650, 700, 750, 650, 700, 650, 700])\neff = np.array([70, 75, 80, 85, 90, 95, 80, 85, 90, 95, 80, 75])\n\nfig, ax = plt.subplots(figsize=(10, 6)) \n\nax.plot(month, prod, label='Productivity (units per hour)')\nax.plot(month, eff, label='Efficiency (%)')\n\nax.set_title('Monthly Productivity and Efficiency of a Manufacturing Plant in 2020', fontsize=18)\nax.set_xlabel('Month', fontsize=14)\n\nax.legend(loc='best', fontsize=14, framealpha=.9)\nax.tick_params(axis='both', which='major', labelsize=14)\n\nfig.tight_layout()\nplt.xticks(month)\n\nplt.savefig('line chart/png/526.png', dpi=300)\nplt.clf()"
        },
        "QA": {
            "input": "What is the efficiency percentage in August?",
            "output": "85%"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_373",
        "img": "./line_chart/png/line_373.png",
        "topic": "Arts and Culture",
        "title": " Number of Paintings Produced by Artistic Movement",
        "csv": "Period \\t Painting A \\t Painting B \\t Painting C \\t Painting D \\n Renaissance \\t 100 \\t 80 \\t 120 \\t 150 \\n Baroque \\t 120 \\t 90 \\t 110 \\t 160 \\n Rococo \\t 90 \\t 110 \\t 130 \\t 120 \\n Impressionism \\t 150 \\t 120 \\t 140 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart outlines the number of paintings produced corresponding to four different artistic movements. During the Renaissance, \"Painting A\" had 100 pieces, \"Painting B\" 80, \"Painting C\" 120, and \"Painting D\" 150. In the Baroque period, the numbers shifted to 120, 90, 110, and 160 respectively. For the Rococo era, the quantities read 90 for \"Painting A,\" 110 for \"Painting B,\" 130 for \"Painting C,\" and 120 for \"Painting D.\" In the Impressionism movement, production ranged with \"Painting A\" at 150, \"Painting B\" at 120, \"Painting C\" at 140, and \"Painting D\" decreasing to 80."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,7))\nplt.plot(['Renaissance','Baroque','Rococo','Impressionism'],[100,120,90,150],label='Painting A')\nplt.plot(['Renaissance','Baroque','Rococo','Impressionism'],[80,90,110,120],label='Painting B')\nplt.plot(['Renaissance','Baroque','Rococo','Impressionism'],[120,110,130,140],label='Painting C')\nplt.plot(['Renaissance','Baroque','Rococo','Impressionism'],[150,160,120,80],label='Painting D')\nplt.legend(loc='upper center',bbox_to_anchor=(0.5, -0.05),ncol=4)\nplt.xticks(['Renaissance','Baroque','Rococo','Impressionism'])\nplt.title('Number of Paintings Produced by Artistic Movement')\nplt.tight_layout()\nplt.savefig('line chart/png/358.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which art movement saw the highest number of paintings produced for Painting D?",
            "output": "Baroque"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_360",
        "img": "./line_chart/png/line_360.png",
        "topic": "Government and Public Policy",
        "title": " Impact of Government Policies on Voter Turnout, Tax Rate, and Unemployment Rate in the US from 2017 to 2020",
        "csv": "Year \\t Voter Turnout(%) \\t Tax Rate(%) \\t Unemployment Rate(%) \\n 2017 \\t 50 \\t 20 \\t 5 \\n 2018 \\t 60 \\t 25 \\t 3 \\n 2019 \\t 70 \\t 30 \\t 2 \\n 2020 \\t 80 \\t 35 \\t 1 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the changes in voter turnout, tax rate, and unemployment rate in the US across four years, from 2017 to 2020. In 2017, voter turnout was 50%, the tax rate stood at 20%, and the unemployment rate was 5%. The following year, voter turnout increased to 60%, the tax rate rose to 25%, and unemployment dropped to 3%. In 2019, there was a further increase in voter turnout to 70%, a tax rate of 30%, and a decrease in unemployment to 2%. The trend continued in 2020 with voter turnout reaching 80%, the tax rate at 35%, and unemployment at 1%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure and subplot\nfig, ax = plt.subplots(figsize=(16, 9))\n\n# Set x-axis\nx = np.array([2017, 2018, 2019, 2020])\n\n# Set y-axis\ny1 = np.array([50, 60, 70, 80])\ny2 = np.array([20, 25, 30, 35])\ny3 = np.array([5, 3, 2, 1])\n\n# Plot the data\nax.plot(x, y1, label=\"Voter Turnout(%)\", marker=\"o\", linewidth=3,\n        markersize=12, linestyle=\"--\")\nax.plot(x, y2, label=\"Tax Rate(%)\", marker=\"^\", linewidth=3,\n        markersize=12, linestyle=\"-.\")\nax.plot(x, y3, label=\"Unemployment Rate(%)\", marker=\"s\", linewidth=3,\n        markersize=12, linestyle=\":\")\n\n# Set the title and labels\nax.set_title(\"Impact of Government Policies on Voter Turnout, Tax Rate, and Unemployment Rate in the US from 2017 to 2020\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Percentage (%)\")\n\n# Set the position and style of the legend\nax.legend(loc=\"upper left\", fontsize=12, ncol=3, framealpha=0.5)\n\n# Set x-axis ticker\nax.set_xticks(x)\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"line chart/png/144.png\", format=\"png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What was the tax rate when the voter turnout was 70%?",
            "output": "30%"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_414",
        "img": "./line_chart/png/line_414.png",
        "topic": "Education and Academics",
        "title": " Average score of students in grades 5-12",
        "csv": "Grade \\t Average Score \\n 5th \\t 70 \\n 6th \\t 80 \\n 7th \\t 90 \\n 8th \\t 95 \\n 9th \\t 92 \\n 10th \\t 90 \\n 11th \\t 88 \\n 12th \\t 85 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the average scores of students across different grade levels, from 5th to 12th grade. The average score for 5th graders is 70, which steadily increases with each subsequent grade level, peaking at 95 in the 8th grade. Following this peak, there is a slight decrease, with 9th graders averaging 92, 10th graders at 90, 11th graders dropping to 88, and 12th graders at 85."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(12,6))\nax = fig.add_subplot(111)\nax.set_title('Average score of students in grades 5-12')\n\ngrade = ['5th', '6th', '7th', '8th', '9th', '10th', '11th', '12th']\nscore = [70, 80, 90, 95, 92, 90, 88, 85]\n\nax.plot(grade, score, color='#4169E1', marker='o', lw=2.5)\nax.set_xlabel('Grade')\nax.set_ylabel('Average Score')\n\nplt.xticks(grade, rotation=45, fontsize=10, ha='right')\nax.tick_params(axis='both', which='major', labelsize=10)\n\nax.grid(color='#CDCDCD', linestyle='--', linewidth=1)\n\nax.text(7.2, 92, '92', fontsize=10, bbox=dict(facecolor='#4169E1', alpha=0.2))\nax.text(7.2, 88, '88', fontsize=10, bbox=dict(facecolor='#4169E1', alpha=0.2))\nax.text(7.2, 85, '85', fontsize=10, bbox=dict(facecolor='#4169E1', alpha=0.2))\n\nplt.tight_layout()\n\nplt.savefig('line chart/png/48.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in average score between the 8th grade and the 12th grade?",
            "output": "10"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_106",
        "img": "./line_chart/png/line_106.png",
        "topic": "Environment and Sustainability",
        "title": " Average Carbon Emissions in the US from 2015 to 2020",
        "csv": "Year \\t Average Carbon Emissions (tons) \\n 2015 \\t 600 \\n 2016 \\t 500 \\n 2017 \\t 450 \\n 2018 \\t 550 \\n 2019 \\t 650 \\n 2020 \\t 700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the trend of average carbon emissions in the US from 2015 to 2020, measured in tons. In 2015, the emissions stood at 600 tons and decreased to 500 tons in 2016. They further decreased to 450 tons in 2017. However, there was an increase to 550 tons in 2018 and a spike to 650 tons in 2019, before reaching the highest point of 700 tons in 2020."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = [[2015, 600], [2016, 500], [2017, 450], [2018, 550], [2019, 650], [2020, 700]]\ndf = pd.DataFrame(data, columns=['Year', 'Average Carbon Emissions (tons)'])\n\nplt.figure(figsize=(9, 6))\nplt.plot('Year', 'Average Carbon Emissions (tons)', data=df, marker='o', color='red', linestyle='dashed', linewidth=2)\nplt.title('Average Carbon Emissions in the US from 2015 to 2020')\nplt.xlabel('Year')\nplt.ylabel('Average Carbon Emissions (tons)')\nplt.xticks(df['Year'])\nplt.tight_layout()\nplt.savefig('line chart/png/174.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year did the US hit the peak of its average carbon emissions according to the data?",
            "output": "2020"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_84",
        "img": "./line_chart/png/line_84.png",
        "topic": "Manufacturing and Production",
        "title": " Monthly Production Output for Four Types of Products",
        "csv": "Month \\t Production A(units) \\t Production B(units) \\t Production C(units) \\t Production D(units) \\n January \\t 1000 \\t 800 \\t 1200 \\t 1500 \\n February \\t 1200 \\t 900 \\t 1100 \\t 1600 \\n March \\t 800 \\t 1100 \\t 1300 \\t 1200 \\n April \\t 1500 \\t 1200 \\t 1400 \\t 800 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart outlines the monthly production output for four products, A, B, C, and D, over four months. In January, production for A is 1000 units, B is 800 units, C is 1200 units, and D is 1500 units. February sees an increase in production, with A at 1200 units, B at 900 units, C at 1100 units, and D peaking at 1600 units. March's production varies as A decreases to 800 units, B jumps to 1100 units, C to 1300 units, and D drops to 1200 units. April's figures show A at 1500 units, B at 1200 units, C at 1400 units, and D at 800 units."
        },
        "summarization": {
            "input": "Create a brief summarization or extract key insights based on the chart image.",
            "ouput_put": "Within the first quarter of 2021, four diverse products exhibited distinct production trends, each denoted as A, B, C, and D. Product D's production began strong in January at 1500 units, peaking in February at 1600 units, despite a notable dip in March to 1200 units and a sharp decline to 800 units in April. Meanwhile, Product A saw a rise from 1000 to 1200 units in the initial two months, followed by a drop to 800 units in March and a resurgence to 1500 units in April. Products B and C displayed gradual increases and a mix of fluctuations throughout the period, indicating variability in production dynamics."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nMonth = ['January', 'February', 'March', 'April']\nProduction_A = [1000, 1200, 800, 1500]\nProduction_B = [800, 900, 1100, 1200]\nProduction_C = [1200, 1100, 1300, 1400]\nProduction_D = [1500, 1600, 1200, 800]\n\nplt.figure(figsize=(10,6))\nax = plt.subplot()\nax.plot(Month, Production_A, color='red', marker='o', label='Production A')\nax.plot(Month, Production_B, color='green', marker='o', label='Production B')\nax.plot(Month, Production_C, color='blue', marker='o', label='Production C')\nax.plot(Month, Production_D, color='black', marker='o', label='Production D')\n\nax.set(title='Monthly Production Output for Four Types of Products',\n       xlabel='Month',\n       ylabel='Units')\n\nax.legend(loc=2)\nax.grid(True)\n\nplt.xticks(np.arange(4), Month, rotation=45)\nplt.tight_layout()\nplt.savefig('line chart/png/500.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which product had the lowest production output in April?",
            "output": "Production D"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_93",
        "img": "./line_chart/png/line_93.png",
        "topic": "Sports and Entertainment",
        "title": " Comparison of Attendance of Major Sports Leagues in the United States from 2001 to 2004",
        "csv": "Year \\t Football \\t Baseball \\t Basketball \\n 2001 \\t 1000 \\t 800 \\t 1200 \\n 2002 \\t 1200 \\t 1100 \\t 1600 \\n 2003 \\t 800 \\t 900 \\t 1300 \\n 2004 \\t 1500 \\t 1200 \\t 1400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart presents attendance figures for major sports leagues in the United States over a span from 2001 to 2004. The sports included are football, baseball, and basketball. In 2001, attendance was recorded at 1000 for football, 800 for baseball, and 1200 for basketball. The following year, these numbers increased to 1200 for football, 1100 for baseball, and 1600 for basketball. In 2003, numbers dip slightly to 800, 900, and 1300 for football, baseball, and basketball, respectively. By 2004, attendance rose again with football having the highest at 1500, baseball at 1200, and basketball at 1400."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(10,6))\nattendance = np.array([[1000, 800, 1200],\n                     [1200, 1100, 1600],\n                     [800, 900, 1300],\n                     [1500, 1200, 1400]])\n\nlabels = np.array(['Football', 'Baseball', 'Basketball'])\nx_pos = np.arange(len(labels))\n\nyears = np.array(['2001','2002','2003','2004'])\ny_pos = np.arange(len(years))\n\nfor i, c in enumerate(attendance.T):\n    plt.plot(y_pos, c, label=labels[i])\n\nplt.xticks(y_pos, years, rotation=45)\nplt.title(\"Comparison of Attendance of Major Sports Leagues in the United States from 2001 to 2004\")\nplt.xlabel('Year')\nplt.ylabel('Attendance')\nplt.legend(loc='best')\nplt.tight_layout()\nplt.savefig('line chart/png/68.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many people attended Basketball events in 2003?",
            "output": "1300"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_435",
        "img": "./line_chart/png/line_435.png",
        "topic": "Arts and Culture",
        "title": " Visitor numbers to arts and culture venues in January 2021",
        "csv": "Date \\t Museum Visitors \\t Theatre Visitors \\t Cinema Visitors \\n 01/01/2021 \\t 1000 \\t 1200 \\t 1400 \\n 01/02/2021 \\t 1300 \\t 900 \\t 1100 \\n 01/03/2021 \\t 1100 \\t 1300 \\t 900 \\n 01/04/2021 \\t 1400 \\t 1100 \\t 1000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates visitor numbers to museums, theatres, and cinemas over four dates in January 2021. On January 1st, there were 1000 museum visitors, 1200 theatre visitors, and 1400 cinema visitors. Visitor numbers on February 1st were 1300 for museums, 900 for theatres, and 1100 for cinemas. March 1st showed 1100 museum visitors, 1300 theatre visitors, and 900 cinema visitors. Finally, on April 1st, there were 1400 museum visitors, 1100 theatre visitors, and 1000 cinema visitors."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate Data\ndate = [\"01/01/2021\",\"01/02/2021\",\"01/03/2021\",\"01/04/2021\"]\nmuseum_visitors = [1000,1300,1100,1400]\ntheatre_visitors = [1200,900,1300,1100]\ncinema_visitors = [1400,1100,900,1000]\n\n# Set figure parameters\nplt.figure(figsize=(10,7))\n\n# Plot the data\nplt.plot(date,museum_visitors,label=\"Museum Visitors\", linewidth=2.0, marker='o',markerfacecolor='blue', markersize=8)\nplt.plot(date,theatre_visitors,label=\"Theatre Visitors\", linewidth=2.0, marker='s',markerfacecolor='orange', markersize=8)\nplt.plot(date,cinema_visitors,label=\"Cinema Visitors\", linewidth=2.0, marker='v',markerfacecolor='green', markersize=8)\n\n# Add Axis Labels\nplt.xlabel('Date', fontsize=14)\nplt.ylabel('Number of Visitors', fontsize=14)\n\n# Set xticks\nplt.xticks(date, rotation=45, fontsize=11)\n\n# Add Title\nplt.title('Visitor numbers to arts and culture venues in January 2021', fontsize=18)\n\n# Add Legend\nplt.legend(loc='best', fontsize=13)\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('line chart/png/535.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more visitors did museums have compared to cinemas in January 2021?",
            "output": "600 visitors"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_68",
        "img": "./line_chart/png/line_68.png",
        "topic": "Business and Finance",
        "title": " Financial Performance of XYZ Company, Year 2020-2023",
        "csv": "Year \\t Revenue \\t Profit \\t Expense \\n 2020 \\t 10000 \\t 4000 \\t 6000 \\n 2021 \\t 12000 \\t 5000 \\t 7000 \\n 2022 \\t 14000 \\t 6000 \\t 8000 \\n 2023 \\t 16000 \\t 7000 \\t 9000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates XYZ Company's financial performance from 2020 to 2023. It tracks yearly revenue, profit, and expense over four years. In 2020, revenue was $10,000, with a profit of $4,000 and expenses of $6,000. By 2021, revenue rose to $12,000, profit to $5,000, and expenses to $7,000. The upward trend continued through 2022, with revenue at $14,000, profit at $6,000, and expenses at $8,000. In 2023, the figures further increased, showing revenue at $16,000, profit at $7,000, and expenses at $9,000.\n"
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot(111)\nx = ['2020','2021','2022','2023']\ny1 = [10000,12000,14000,16000]\ny2 = [4000,5000,6000,7000]\ny3 = [6000,7000,8000,9000]\nax.plot(x, y1, label='Revenue', marker='s', color='#2196F3')\nax.plot(x, y2, label='Profit', marker='o', color='#F44336')\nax.plot(x, y3, label='Expense', marker='*', color='#FF9800')\nax.set_title('Financial Performance of XYZ Company, Year 2020-2023')\nax.set_xlabel('Year')\nax.set_ylabel('Amount')\nax.legend(loc='best', ncol=3, fontsize='medium', columnspacing=1, labelspacing=1, frameon=True)\nplt.xticks(x)\nplt.tight_layout()\nplt.savefig('line chart/png/38.png')\nplt.clf()"
        },
        "QA": {
            "input": "What was the profit of the XYZ Company in 2021?",
            "output": "$5000"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_244",
        "img": "./line_chart/png/line_244.png",
        "topic": "Social Media and the Web",
        "title": " Global Social Media User Growth from 2011 to 2017",
        "csv": "Year \\t Facebook Users(millions) \\t Twitter Users(millions) \\t Instagram Users(millions) \\t LinkedIn Users(millions) \\n 2011 \\t 100 \\t 5 \\t 0 \\t 10 \\n 2012 \\t 150 \\t 10 \\t 5 \\t 20 \\n 2013 \\t 200 \\t 25 \\t 15 \\t 30 \\n 2014 \\t 250 \\t 50 \\t 30 \\t 40 \\n 2015 \\t 350 \\t 75 \\t 50 \\t 50 \\n 2016 \\t 450 \\t 100 \\t 75 \\t 60 \\n 2017 \\t 550 \\t 125 \\t 100 \\t 70 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the growth of global social media users from 2011 to 2017 across four platforms: Facebook, Twitter, Instagram, and LinkedIn in millions. In 2011, Facebook had 100 million users, Twitter had 5 million, Instagram users were not yet recorded, and LinkedIn had 10 million. By 2017, Facebook users grew to 550 million, Twitter to 125 million, Instagram reached 100 million, and LinkedIn users increased to 70 million. Each year shows a steady increase in users for all platforms, with Facebook maintaining a lead. Instagram shows remarkable growth starting from 2012."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nplt.figure(figsize=(15,6))\n\n# Plot data\ndata = np.array([[2011,100,5,0,10],\n                 [2012,150,10,5,20],\n                 [2013,200,25,15,30],\n                 [2014,250,50,30,40],\n                 [2015,350,75,50,50],\n                 [2016,450,100,75,60],\n                 [2017,550,125,100,70]])\n\nyears = data[:,0]\nfb_users = data[:,1]\ntw_users = data[:,2]\nig_users = data[:,3]\nli_users = data[:,4]\n\nplt.plot(years, fb_users, label='Facebook')\nplt.plot(years, tw_users, label='Twitter')\nplt.plot(years, ig_users, label='Instagram')\nplt.plot(years, li_users, label='LinkedIn')\n\n# Set ticks\nplt.xticks(years, rotation=45)\n\n# Legend\nplt.legend(loc='upper left', bbox_to_anchor=(0,1.02,1,0.2),\n           ncol=4, mode='expand', borderaxespad=0)\n\n# Title\nplt.title('Global Social Media User Growth from 2011 to 2017')\n\n# Resize\nplt.tight_layout()\n\n# Save\nplt.savefig('line chart/png/529.png')\n\n# Clear\nplt.clf()"
        },
        "QA": {
            "input": "How many millions of Instagram users were there in 2015?",
            "output": "50 million"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_434",
        "img": "./line_chart/png/line_434.png",
        "topic": "Manufacturing and Production",
        "title": " Production output of four products in 2020",
        "csv": "Month \\t Product A \\t Product B \\t Product C \\t Product D \\n January \\t 200 \\t 400 \\t 600 \\t 800 \\n February \\t 300 \\t 500 \\t 700 \\t 900 \\n March \\t 400 \\t 500 \\t 800 \\t 1000 \\n April \\t 500 \\t 600 \\t 900 \\t 1100 \\n May \\t 400 \\t 500 \\t 700 \\t 1000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the monthly production output of four different products from January to May in 2020. Product A shows a production increase from 200 units in January to 500 in April, before slightly declining to 400 in May. Product B consistently produces 500 units each month, except for 400 units in January and a peak at 600 in April. Product C starts at 600 units in January and steadily increases to 900 by April, then decreases to 700 in May. Lastly, Product D begins at 800 units, climbing each month to reach 1100 in April, and levels to 1000 in May."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np\n\n# Set up the data\nmonth = [\"January\", \"February\", \"March\", \"April\", \"May\"]\nproduct_A = [200, 300, 400, 500, 400]\nproduct_B = [400, 500, 500, 600, 500]\nproduct_C = [600, 700, 800, 900, 700]\nproduct_D = [800, 900, 1000, 1100, 1000]\n\n# Set up figure\nplt.figure(figsize=(10, 6))\nax = plt.subplot()\n\n# Plot data\nax.plot(month, product_A, label=\"Product A\")\nax.plot(month, product_B, label=\"Product B\")\nax.plot(month, product_C, label=\"Product C\")\nax.plot(month, product_D, label=\"Product D\")\n\n# Set up the grid\nax.grid(axis=\"y\", color=\"lightgrey\")\n\n# Set up the x-axis ticks\nplt.xticks(np.arange(5), month, rotation=45)\n\n# Add legend\nax.legend(loc=\"upper right\")\n\n# Add title\nax.set_title(\"Production output of four products in 2020\")\n\n# Resize image\nplt.tight_layout()\n\n# Save image\nplt.savefig(\"line chart/png/313.png\")\n\n# Clear current image\nplt.clf()"
        },
        "QA": {
            "input": "What is the production output of Product D in April?",
            "output": "1100"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_59",
        "img": "./line_chart/png/line_59.png",
        "topic": "Government and Public Policy",
        "title": " Changes in Tax Rate and Unemployment Rate in the US, 2008-2012",
        "csv": "Year \\t Tax Rate \\t Unemployment Rate \\n 2008 \\t 7% \\t 8.1% \\n 2009 \\t 7.5% \\t 9.2% \\n 2010 \\t 7.9% \\t 9.3% \\n 2011 \\t 8.2% \\t 8.7% \\n 2012 \\t 8.7% \\t 7.8% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart presents the changes in tax rate and unemployment rate in the US from 2008 to 2012. In 2008, the tax rate was at 7% with unemployment at 8.1%. The following years show a gradual increase in the tax rate, culminating at 8.7% in 2012, while the unemployment rate peaked in 2010 at 9.3% before decreasing to 7.8% in 2012."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#set figure size\nfig = plt.figure(figsize=(12, 6))\n\n#create  axis\nax = fig.add_subplot(111)\n\n#set label\nax.set_xlabel('Year', fontsize=14)\nax.set_ylabel('Tax Rate / Unemployment Rate', fontsize=14)\n\n#set title\nax.set_title('Changes in Tax Rate and Unemployment Rate in the US, 2008-2012', fontsize=14)\n\n#set data\nYear = [2008, 2009,2010, 2011, 2012]\nTax_Rate = [7,7.5,7.9,8.2,8.7]\nUnemployment_Rate = [8.1,9.2,9.3,8.7,7.8]\n\n#plot data\nax.plot(Year,Tax_Rate, label='Tax Rate', color='#3e719f', linewidth=3)\nax.plot(Year,Unemployment_Rate, label='Unemployment Rate', color='#3cba54', linewidth=3)\n\n#set legend\nlegend = ax.legend(loc='upper center', shadow=True)\n\n#set xticks\nplt.xticks(Year)\n\n#save figure\nplt.savefig('line chart/png/41.png')\n\n#clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What was the tax rate in the US in 2011?",
            "output": "8.2%"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_143",
        "img": "./line_chart/png/line_143.png",
        "topic": "Energy and Utilities",
        "title": " Renewable energy sources in Australia in 2021",
        "csv": "Month \\t Wind Power(GW) \\t Solar Power(GW) \\n January \\t 5.8 \\t 6.2 \\n February \\t 6.3 \\t 5.8 \\n March \\t 6.1 \\t 7.3 \\n April \\t 7.2 \\t 6.5 \\n May \\t 7.4 \\t 7.8 \\n June \\t 7.8 \\t 6.9 \\n July \\t 6.7 \\t 8.2 \\n August \\t 8.1 \\t 7.3 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart presents monthly data for wind and solar power generation in gigawatts (GW) in Australia throughout 2021. Starting in January, wind power was at 5.8 GW and solar power at 6.2 GW. February saw a slight increase in wind power to 6.3 GW, with solar power dropping to 5.8 GW. March brought wind power to 6.1 GW and a rise in solar to 7.3 GW. In subsequent months, both wind and solar power fluctuated, with solar power peaking at 8.2 GW in July and wind power reaching its highest at 8.1 GW in August."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,6))\n\nmonth = ['January','February','March','April','May','June','July','August']\nwind_power = [5.8, 6.3, 6.1, 7.2, 7.4, 7.8, 6.7, 8.1]\nsolar_power = [6.2, 5.8, 7.3, 6.5, 7.8, 6.9, 8.2, 7.3]\n\nplt.plot(month, wind_power, color='blue', marker='o', linestyle='dashed', label='Wind Power (GW)')\nplt.plot(month, solar_power, color='red', marker='o', linestyle='dashed', label='Solar Power (GW)')\n\nplt.xticks(month, rotation=45)\nplt.xlabel('Month')\nplt.title('Renewable energy sources in Australia in 2021')\nplt.legend()\nplt.tight_layout()\nplt.savefig('line chart/png/314.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which month has the highest solar power generation?",
            "output": "July"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_163",
        "img": "./line_chart/png/line_163.png",
        "topic": "Manufacturing and Production",
        "title": " Cost of Manufacturing Products over Years",
        "csv": "Year \\t Raw Material Price(dollars per ton) \\t Production Cost(dollars per ton) \\t Unit Cost(dollars per unit) \\n 2001 \\t 1000 \\t 3000 \\t 3 \\n 2002 \\t 1100 \\t 2500 \\t 2.5 \\n 2003 \\t 1200 \\t 2700 \\t 2.75 \\n 2004 \\t 1300 \\t 2900 \\t 3.2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the changes in the cost of manufacturing products over the period from 2001 to 2004. It shows the year-on-year raw material price, production cost per ton, and the unit cost in dollars. Raw material price per ton increased from $1000 in 2001 to $1300 in 2004, while the production cost per ton varied, with a decrease in 2002 and an ultimate increase to $2900 by 2004. Unit cost fluctuated, starting at $3 in 2001, dropping to $2.5 in 2002, and rising to $3.2 by 2004."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#clearing the current image state\nplt.clf()\n\n#setting data\nyear=[2001,2002,2003,2004]\nraw_material_price=[1000,1100,1200,1300]\nproduction_cost=[3000,2500,2700,2900]\nunit_cost=[3,2.5,2.75,3.2]\n\n#creating figure\nfig = plt.figure(figsize=(20,10))\n\n#add subplot\nax = fig.add_subplot(111)\n\n#plot the data\nax.plot(year,raw_material_price, label=\"Raw Material Price (dollars per ton)\", color='b')\nax.plot(year,production_cost, label=\"Production Cost (dollars per ton)\", color='g')\nax.plot(year,unit_cost, label=\"Unit Cost (dollars per unit)\", color='r')\n\n#set xticks\nplt.xticks(year, rotation=0)\n\n#set title\nax.set_title(\"Cost of Manufacturing Products over Years\")\n\n#set legend\nax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.1),\n          ncol=3, fancybox=True, shadow=True, fontsize=20)\n\n#tight_layout\nplt.tight_layout()\n\n#saving the figure\nplt.savefig('line chart/png/472.png')"
        },
        "QA": {
            "input": "What is the difference in the unit cost between the years 2001 and 2004?",
            "output": "$0.2"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_38",
        "img": "./line_chart/png/line_38.png",
        "topic": "Manufacturing and Production",
        "title": " Production of four types of products in the manufacturing industry",
        "csv": "Year \\t Production A(million items) \\t Production B(million items) \\t Production C(million items) \\t Production D(million items) \\n 2001 \\t 500 \\t 900 \\t 1100 \\t 1300 \\n 2002 \\t 600 \\t 1000 \\t 1200 \\t 1400 \\n 2003 \\t 400 \\t 800 \\t 1000 \\t 1200 \\n 2004 \\t 700 \\t 1100 \\t 1300 \\t 1500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the annual production of four different types of products (A, B, C, and D) in the manufacturing industry over four years. In 2001, Product A's production was at 500 million items, B at 900, C at 1100, and D at 1300 million items. There's a general increasing trend with 2002 seeing a rise in all products\u2014A at 600, B at 1000, C at 1200, and D at 1400 million items. However, 2003 shows a dip in production across all types\u2014A at 400, B at 800, C at 1000, and D at 1200 million items\u2014before recovering in 2004, with A at 700, B at 1100, C at 1300, and D at 1500 million items."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nyear = np.array([2001,2002,2003,2004])\nproduction_a=np.array([500,600,400,700])\nproduction_b=np.array([900,1000,800,1100])\nproduction_c=np.array([1100,1200,1000,1300])\nproduction_d=np.array([1300,1400,1200,1500])\n\nplt.figure(figsize=(10,6))\nplt.plot(year, production_a,label='Production A')\nplt.plot(year, production_b,label='Production B')\nplt.plot(year, production_c,label='Production C')\nplt.plot(year, production_d,label='Production D')\nplt.xticks(year)\nplt.title('Production of four types of products in the manufacturing industry')\nplt.legend(loc='best')\nplt.tight_layout()\nplt.savefig('line chart/png/534.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which product had the highest production in the year 2002?",
            "output": "Production D"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_160",
        "img": "./line_chart/png/line_160.png",
        "topic": "Healthcare and Health",
        "title": " Average BMI of Different Age Groups in the United States",
        "csv": "Age \\t Average BMI \\n 18-24 \\t 21.5 \\n 25-34 \\t 23.7 \\n 35-44 \\t 26.2 \\n 45-54 \\t 27.3 \\n 55-64 \\t 27.8 \\n 65-74 \\t 27.9 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the average Body Mass Index (BMI) across different age groups in the United States. For the age group of 18-24, the average BMI recorded is 21.5. It increases progressively with age, as the 25-34 age group shows an average BMI of 23.7, 35-44 age group at 26.2, followed by 27.3 for the 45-54 group, 27.8 for the 55-64 group, and peaks with the 65-74 age group at an average of 27.9."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\n\nax.set_title(\"Average BMI of Different Age Groups in the United States\")\n\nplt.plot(['18-24', '25-34', '35-44', '45-54', '55-64', '65-74'], \n         [21.5, 23.7, 26.2, 27.3, 27.8, 27.9], marker='o', \n         color='b', label='Average BMI')\nax.set_xticklabels(['18-24', '25-34', '35-44', '45-54', '55-64', '65-74'], rotation=45, wrap=True)\nax.set_xlabel('Age')\nax.set_ylabel('Average BMI')\nax.legend(loc='lower right')\nfig.tight_layout()\n\nplt.savefig('line chart/png/17.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the Average BMI for the age group 65-74?",
            "output": "27.9"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_482",
        "img": "./line_chart/png/line_482.png",
        "topic": "Arts and Culture",
        "title": " Changes in Popular Arts & Culture Consumption from 2001 to 2005",
        "csv": "Year \\t Music Album Sales(million copies) \\t Movie Ticket Sales(million tickets) \\t Book Sales(million copies) \\n 2001 \\t 5 \\t 15 \\t 10 \\n 2002 \\t 6 \\t 16 \\t 12 \\n 2003 \\t 7 \\t 18 \\t 14 \\n 2004 \\t 4 \\t 20 \\t 9 \\n 2005 \\t 8 \\t 17 \\t 11 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart plots the changes in the consumption of popular arts and culture from 2001 to 2005. It shows yearly data for music album sales in millions of copies, movie ticket sales in millions of tickets, and book sales also in millions of copies. In 2001, sales were recorded at 5 million music albums, 15 million movie tickets, and 10 million books. The data points for subsequent years follow a varied trajectory, with music album sales peaking at 8 million in 2005, movie ticket sales reaching a maximum of 20 million in 2004, and book sales hitting 14 million in 2003."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10, 5))\nax = plt.subplot()\nplt.plot(['2001', '2002', '2003', '2004', '2005'], [5, 6, 7, 4, 8], color='blue', label='Music Album Sales(million copies)')\nplt.plot(['2001', '2002', '2003', '2004', '2005'], [15, 16, 18, 20, 17], color='red', label='Movie Ticket Sales(million tickets)')\nplt.plot(['2001', '2002', '2003', '2004', '2005'], [10, 12, 14, 9, 11], color='green', label='Book Sales(million copies)')\nplt.title('Changes in Popular Arts & Culture Consumption from 2001 to 2005')\nax.set_xticks(['2001', '2002', '2003', '2004', '2005'])\nax.set_xlabel('Year')\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)\nplt.tight_layout()\nplt.savefig('line chart/png/132.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year were movie ticket sales the highest?",
            "output": "2004"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_205",
        "img": "./line_chart/png/line_205.png",
        "topic": "Social Media and the Web",
        "title": " Increase in Social Media Usage and Time Spent Over Five Years",
        "csv": "Year \\t Users(million) \\t Time spent(hours) \\n 2017 \\t 1 \\t 50 \\n 2018 \\t 2 \\t 75 \\n 2019 \\t 3 \\t 100 \\n 2020 \\t 4 \\t 125 \\n 2021 \\t 5 \\t 150 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart depicts the growth in social media usage and the average time spent by users over five years. In 2017, there were 1 million users spending 50 hours. In 2018, users doubled to 2 million with an average of 75 hours spent. The upward trend continues with 3 million users and 100 hours in 2019, 4 million users and 125 hours in 2020, finally reaching 5 million users spending 150 hours in 2021."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot(111)\n\nyear = [2017, 2018, 2019, 2020, 2021]\nusers = [1, 2, 3, 4, 5]\ntime_spent = [50, 75, 100, 125, 150]\n\nax.plot(year, users,label='Users(million)', color='green')\nax.plot(year, time_spent, label='Time spent(hours)', color='red')\n\nax.set_title('Increase in Social Media Usage and Time Spent Over Five Years')\nax.set_xlabel('Year')\nax.set_xticks(year)\n\nax.legend(loc='upper left', bbox_to_anchor=(0.0, 1.02, 1., 0.102), ncol=2, mode=\"expand\", borderaxespad=0., fontsize='large')\nplt.tight_layout()\nplt.savefig('line chart/png/557.png')\nplt.clf()"
        },
        "QA": {
            "input": "By how many hours did the time spent increase from 2019 to 2021?",
            "output": "50 hours"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_15",
        "img": "./line_chart/png/line_15.png",
        "topic": "Business and Finance",
        "title": " Economic indicators of a country in the 2000s",
        "csv": "Year \\t Tax Revenues(million dollars) \\t GDP(million dollars) \\t Government Expenditures(million dollars) \\n 2001 \\t 20000 \\t 500000 \\t 500200 \\n 2002 \\t 21000 \\t 550000 \\t 520000 \\n 2003 \\t 22000 \\t 600000 \\t 540000 \\n 2004 \\t 25000 \\t 650000 \\t 560000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates three economic indicators of an unspecified country over a four-year period, from 2001 to 2004. Each year presents figures for tax revenues, GDP, and government expenditures in million dollars. In 2001, tax revenues were at 20,000 with a GDP of 500,000 and government expenditures slightly higher at 500,200. The following years show an increase in all areas, with tax revenues growing to 25,000 by 2004, GDP reaching 650,000, and government expenditures rising to 560,000 million dollars. The data indicate a growth trend in these economic indicators during the early 2000s."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(15,5))\nax = plt.subplot()\nax.plot(['2001','2002','2003','2004'], [20000,21000,22000,25000], label='Tax Revenues')\nax.plot(['2001','2002','2003','2004'], [500000,550000,600000,650000], label='GDP')\nax.plot(['2001','2002','2003','2004'], [500200,520000,540000,560000], label='Government Expenditures')\nax.set_title('Economic indicators of a country in the 2000s')\nax.set_xlabel('Year')\nax.set_ylabel('Value in million dollars')\nax.legend(loc='upper left')\nplt.xticks(['2001','2002','2003','2004'])\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.savefig('line chart/png/167.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year did the Tax Revenues reach 25% of the Government Expenditures?",
            "output": "2004"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_195",
        "img": "./line_chart/png/line_195.png",
        "topic": "Social Media and the Web",
        "title": " Monthly user growth of three social media platforms in 2021",
        "csv": "Month \\t Users A \\t Users B \\t Users C \\n Jan \\t 1000 \\t 800 \\t 1200 \\n Feb \\t 1200 \\t 900 \\t 1100 \\n Mar \\t 800 \\t 1100 \\t 1300 \\n Apr \\t 1500 \\t 1200 \\t 1400 \\n May \\t 1000 \\t 1400 \\t 1600 \\n Jun \\t 1200 \\t 1500 \\t 1800 \\n Jul \\t 1300 \\t 1400 \\t 1700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart outlines the monthly user growth of three social media platforms over seven months in 2021. In January, Users A, B, and C are at 1000, 800, and 1200 respectively. The chart progresses with varying user counts each month, peaking in June for Users A and C at 1200 and 1800, and in June for User B at 1500. User growth for each platform shows fluctuations, with Users C generally leading in growth, followed by User B, and User A consistently showing the lowest numbers among the three."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#Prepare data\nmonth = ['Jan','Feb','Mar','Apr','May','Jun','Jul']\nusersA = [1000, 1200, 800, 1500, 1000, 1200, 1300]\nusersB = [800, 900, 1100, 1200, 1400, 1500, 1400]\nusersC = [1200, 1100, 1300, 1400, 1600, 1800, 1700]\n\n#Create figure\nfig = plt.figure(figsize=(12,6))\nax = fig.add_subplot(1,1,1)\n\n#Plot\nax.plot(month, usersA, 'r-', label = 'Users A')\nax.plot(month, usersB, 'b-', label = 'Users B')\nax.plot(month, usersC, 'g-', label = 'Users C')\n\n#Title\nplt.title('Monthly user growth of three social media platforms in 2021')\n\n#Set xticks\nax.set_xticks(np.arange(7))\nax.set_xticklabels(month, rotation = 45, ha='right')\n\n#Legend\nax.legend(loc = 'best')\nplt.tight_layout()\nplt.savefig('line chart/png/340.png')\n\n#Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "In which month did Users B see its highest number of users?",
            "output": "June"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_125",
        "img": "./line_chart/png/line_125.png",
        "topic": "Agriculture and Food Production",
        "title": " Prices of corn and wheat in relation to average farm price, 1996-2000",
        "csv": "Year \\t Average Farm Price(cents/pound) \\t Price of Corn(cents/pound) \\t Price of Wheat(cents/pound) \\n 1996 \\t 63.4 \\t 50.9 \\t 75.3 \\n 1997 \\t 59.2 \\t 64.7 \\t 53.6 \\n 1998 \\t 62.8 \\t 68.6 \\t 51.2 \\n 1999 \\t 56.5 \\t 64.2 \\t 45.9 \\n 2000 \\t 63.7 \\t 58.2 \\t 67.7 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the prices of corn and wheat in relation to the average farm price per pound over the period from 1996 to 2000. In 1996, the average farm price was 63.4 cents, with corn at 50.9 cents and wheat at 75.3 cents. 1997 saw a decrease in average farm price to 59.2 cents, corn increased to 64.7 cents, while wheat dropped to 53.6 cents. In 1998, the average price slightly rose to 62.8 cents, corn further increased to 68.6 cents, and wheat was at 51.2 cents. Prices dipped in 1999, with the average at 56.5 cents, corn at 64.2 cents, and wheat at 45.9 cents. The year 2000 showed an increase across the board, with the average farm price at 63.7 cents, corn at 58.2 cents, and wheat significantly higher at 67.7 cents."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nYear = [1996,1997,1998,1999,2000]\nAverage_Farm_Price = [63.4,59.2,62.8,56.5,63.7]\nPrice_of_Corn = [50.9,64.7,68.6,64.2,58.2]\nPrice_of_Wheat = [75.3,53.6,51.2,45.9,67.7]\n\nfig = plt.figure(figsize=(10, 5))\nax = fig.add_subplot(111)\nax.plot(Year, Average_Farm_Price, label='Average Farm Price',linewidth=2, color='red')\nax.plot(Year, Price_of_Corn, label='Price of Corn',linewidth=2, color='green')\nax.plot(Year, Price_of_Wheat, label='Price of Wheat',linewidth=2, color='purple')\n\nplt.xticks(np.arange(min(Year), max(Year)+1, 1.0))\nax.set_title('Prices of corn and wheat in relation to average farm price,1996-2000')\nax.legend(loc='best', fontsize='medium')\nplt.tight_layout()\nplt.savefig('line chart/png/322.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year was the Average Farm Price closest to the Price of Corn?",
            "output": "1998"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_219",
        "img": "./line_chart/png/line_219.png",
        "topic": "Sports and Entertainment",
        "title": " Monthly changes in viewers and subscribers for a video streaming service",
        "csv": "Month \\t Viewers(in millions) \\t Subscribers(in millions) \\n January \\t 150 \\t 4 \\n February \\t 170 \\t 3.5 \\n March \\t 180 \\t 3 \\n April \\t 200 \\t 2.5 \\n May \\t 220 \\t 2 \\n June \\t 240 \\t 1.5 \\n July \\t 260 \\t 1 \\n August \\t 280 \\t 0.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart outlines the monthly changes in viewers and subscribers for a video streaming service. It shows data from January to August, with viewers (in millions) starting at 150 in January and rising to 280 by August. Subscribers (in millions) begin at 4 in January but demonstrate a decreasing trend, concluding at 0.5 in August."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August'])\ny1 = np.array([150, 170, 180, 200, 220, 240, 260, 280])\ny2 = np.array([4, 3.5, 3, 2.5, 2, 1.5, 1, 0.5])\n\nfig = plt.figure(figsize=(11, 8), dpi=80)\nax = fig.add_subplot(111)\nax.plot(x, y1, color='b', linestyle='-', marker='o', markersize=8, label='Viewers (in millions)')\nax.plot(x, y2, color='r', linestyle='-', marker='o', markersize=8, label='Subscribers (in millions)')\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05), fancybox=True, shadow=True, ncol=2)\nax.set_title(\"Monthly changes in viewers and subscribers for a video streaming service\")\nax.set_xlabel('Month')\nax.set_xticks(x)\nax.set_xticklabels(x, rotation='vertical', fontsize=10)\nax.grid(True, linestyle='--', color='#F4F3F3', linewidth=1)\nplt.tight_layout()\nplt.savefig('line chart/png/277.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many viewers were there in the month of June?",
            "output": "240 million"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_287",
        "img": "./line_chart/png/line_287.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing Output of Four Product Types from 2001-2004",
        "csv": "Year \\t Production A (units) \\t Production B (units) \\t Production C (units) \\t Production D (units) \\n 2001 \\t 100 \\t 200 \\t 300 \\t 400 \\n 2002 \\t 150 \\t 250 \\t 350 \\t 450 \\n 2003 \\t 200 \\t 300 \\t 400 \\t 500 \\n 2004 \\t 250 \\t 350 \\t 450 \\t 550 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the manufacturing output of four different product types (A, B, C, and D) over the span of four years from 2001 to 2004. Product A's production grew from 100 units in 2001 to 250 units in 2004. Similarly, production for Product B started at 200 units and reached 350 units by 2004. Production C's figures show an increase from 300 units in 2001 to 450 units in 2004, while Product D's output ascended from 400 units to 550 units during the same timeframe."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nyear = [2001, 2002, 2003, 2004]\nproduction_A = [100, 150, 200, 250]\nproduction_B = [200, 250, 300, 350]\nproduction_C = [300, 350, 400, 450]\nproduction_D = [400, 450, 500, 550]\n\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\n\nax.plot(year, production_A, color='blue', label=\"Production A\")\nax.plot(year, production_B, color='green', label=\"Production B\")\nax.plot(year, production_C, color='red', label=\"Production C\")\nax.plot(year, production_D, color='black', label=\"Production D\")\n\nax.set_xticks(np.arange(2001, 2005, 1))\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Units\")\nax.set_title(\"Manufacturing Output of Four Product Types from 2001-2004\")\n\nax.legend(loc=\"best\")\n\nplt.tight_layout()\n\nplt.savefig(\"line chart/png/504.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the increase in production units for Product C from 2001 to 2004?",
            "output": "150 units"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_279",
        "img": "./line_chart/png/line_279.png",
        "topic": "Social Media and the Web",
        "title": " Social Media User Growth From 2010 to 2016",
        "csv": "Year \\t Facebook users (million) \\t Twitter users (million) \\t Instagram users (million) \\t Snapchat users (million) \\n 2010 \\t 50 \\t 10 \\t 0 \\t 0 \\n 2011 \\t 100 \\t 20 \\t 0 \\t 0 \\n 2012 \\t 200 \\t 50 \\t 10 \\t 0 \\n 2013 \\t 400 \\t 100 \\t 50 \\t 10 \\n 2014 \\t 700 \\t 200 \\t 100 \\t 50 \\n 2015 \\t 1200 \\t 400 \\t 200 \\t 100 \\n 2016 \\t 1800 \\t 600 \\t 400 \\t 200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the growth of social media users across four platforms\u2014Facebook, Twitter, Instagram, and Snapchat\u2014from 2010 to 2016. In 2010, Facebook had 50 million users and Twitter had 10 million, while Instagram and Snapchat had not yet reported users. By 2016, Facebook users skyrocketed to 1800 million. Twitter users also grew significantly to 600 million. Instagram, introduced in the timeframe shown, reached 400 million users, and Snapchat reached 200 million users after being unreported in the initial years. The chart depicts a steep upward trend in user numbers for all platforms over the seven-year period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# set figure size\nplt.figure(figsize=(10, 6))\n\n# create subplot\nax = plt.subplot()\n\n# set up data\nyear = [2010, 2011, 2012, 2013, 2014, 2015, 2016]\ndata1 = [50, 100, 200, 400, 700, 1200, 1800]\ndata2 = [10, 20, 50, 100, 200, 400, 600]\ndata3 = [0, 0, 10, 50, 100, 200, 400]\ndata4 = [0, 0, 0, 10, 50, 100, 200]\n\n# plot data\nax.plot(year, data1, label='Facebook users (million)')\nax.plot(year, data2, label='Twitter users (million)')\nax.plot(year, data3, label='Instagram users (million)')\nax.plot(year, data4, label='Snapchat users (million)')\n\n# add x-axis label\nax.set_xlabel('Year')\n\n# add y-axis label\nax.set_ylabel('Users (million)')\n\n# add title\nax.set_title('Social Media User Growth From 2010 to 2016')\n\n# add legend\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\n# set ticks\nax.set_xticks(year)\n\n# set grid\nax.grid(ls='--', lw=0.5, c='lightgray')\n\n# adjust figure\nplt.tight_layout()\n\n# save figure\nplt.savefig('line chart/png/298.png', dpi=300)\n\n# clear state\nplt.cla()"
        },
        "QA": {
            "input": "How many more million users did Facebook gain from 2010 to 2011?",
            "output": "50 million"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_102",
        "img": "./line_chart/png/line_102.png",
        "topic": "Environment and Sustainability",
        "title": " Air Pollution Levels in the United States from 2000 to 2006",
        "csv": "Year \\t Carbon Dioxide Level \\t Nitrous Oxide Level \\n 2000 \\t 400 \\t 200 \\n 2001 \\t 425 \\t 225 \\n 2002 \\t 450 \\t 250 \\n 2003 \\t 475 \\t 275 \\n 2004 \\t 500 \\t 300 \\n 2005 \\t 525 \\t 325 \\n 2006 \\t 550 \\t 350 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart titled \"Air Pollution Levels in the United States from 2000 to 2006\" illustrates the levels of two pollutants over a seven-year period. It shows the Carbon Dioxide level starting at 400 in the year 2000 and increasing steadily each year to reach 550 by 2006. The Nitrous Oxide level begins at 200 in 2000 and also rises every year, ending at 350 in 2006."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\n#set font size\nmpl.rcParams['font.size'] = 12\n\n# Create figure\nfig = plt.figure(figsize=(10, 5))\nax = fig.add_subplot(1,1,1)\n\n#get the data\nyear = [2000, 2001, 2002, 2003, 2004, 2005, 2006]\ncarbon_dioxide_level = [400, 425, 450, 475, 500, 525, 550]\nnitrous_oxide_level = [200, 225, 250, 275, 300, 325, 350]\n\n#plot the data\nax.plot(year, carbon_dioxide_level, label='Carbon Dioxide Level')\nax.plot(year, nitrous_oxide_level, label='Nitrous Oxide Level')\n\n#set x axis\nax.set_xticks(year)\n\n#add label\nax.set_title('Air Pollution Levels in the United States from 2000 to 2006')\nax.set_xlabel('Year')\nax.set_ylabel('Level')\n\n#add legend\nax.legend(loc='best', fontsize='medium')\n\n#resize\nplt.tight_layout()\n\n#save the figure\nplt.savefig('line chart/png/3.png')\n\n#clear\nplt.clf()"
        },
        "QA": {
            "input": "What was the increase in Carbon Dioxide Level from 2000 to 2006?",
            "output": "150 ppm"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_5",
        "img": "./line_chart/png/line_5.png",
        "topic": "Environment and Sustainability",
        "title": " Pollution Levels in the US from 2018 to 2022",
        "csv": "Year \\t Air Pollution Level(ppm) \\t Water Pollution Level(ppm) \\t Noise Pollution Level(db) \\n 2018 \\t 50 \\t 25 \\t 65 \\n 2019 \\t 45 \\t 20 \\t 60 \\n 2020 \\t 40 \\t 25 \\t 55 \\n 2021 \\t 35 \\t 15 \\t 50 \\n 2022 \\t 30 \\t 20 \\t 45 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the trends of air, water, and noise pollution levels in the United States over five years from 2018 to 2022. In 2018, air pollution was at 50 ppm, water pollution at 25 ppm, and noise pollution at 65 dB. By 2022, air pollution levels dropped to 30 ppm, water pollution saw a slight decrease to 20 ppm after a dip to 15 ppm in 2021, and noise pollution decreased steadily to 45 dB. The data suggests a general decrease in pollution levels across all three categories over the period shown."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(12,6))\nplt.plot([2018,2019,2020,2021,2022],[50,45,40,35,30],label='Air Pollution Level(ppm)')\nplt.plot([2018,2019,2020,2021,2022],[25,20,25,15,20],label='Water Pollution Level(ppm)')\nplt.plot([2018,2019,2020,2021,2022],[65,60,55,50,45],label='Noise Pollution Level(db)')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.2),  shadow=True, ncol=3,prop={'size':14})\nplt.title('Pollution Levels in the US from 2018 to 2022',fontsize=14)\nplt.xticks([2018,2019,2020,2021,2022])\nplt.tight_layout()\nplt.savefig('line chart/png/331.png')\nplt.clf()"
        },
        "QA": {
            "input": "By how many decibels did the Noise Pollution Level decrease from 2018 to 2020?",
            "output": "10 dB"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_191",
        "img": "./line_chart/png/line_191.png",
        "topic": "Energy and Utilities",
        "title": " Energy productions from renewable and non-renewable sources in the US, 2010-2015",
        "csv": "Year \\t Solar Energy (MWh) \\t Wind Energy (MWh) \\t Hydroelectric Energy (MWh) \\t Nuclear Energy (MWh) \\n 2010 \\t 500 \\t 1000 \\t 2000 \\t 3000 \\n 2011 \\t 600 \\t 1100 \\t 2500 \\t 2900 \\n 2012 \\t 700 \\t 1200 \\t 2700 \\t 3200 \\n 2013 \\t 800 \\t 1300 \\t 3000 \\t 3500 \\n 2014 \\t 900 \\t 1500 \\t 3200 \\t 3800 \\n 2015 \\t 1000 \\t 1700 \\t 3500 \\t 4200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart presents the energy production data from various sources in the US between 2010 and 2015. Solar energy production increased from 500 MWh in 2010 to 1000 MWh in 2015. Wind energy went up from 1000 MWh to 1700 MWh, hydroelectric energy production rose from 2000 MWh to 3500 MWh, and nuclear energy generation grew from 3000 MWh in 2010 to 4200 MWh by 2015. Each energy source shows a distinct upward trajectory over the six-year period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nfig = plt.figure(figsize=(15,7))\n\n#Data\nYear = [2010, 2011, 2012, 2013, 2014, 2015]\nSolar_Energy = [500, 600, 700, 800, 900, 1000]\nWind_Energy = [1000, 1100, 1200, 1300, 1500, 1700]\nHydroelectric_Energy = [2000, 2500, 2700, 3000, 3200, 3500]\nNuclear_Energy = [3000, 2900, 3200, 3500, 3800, 4200]\n\n#Plot\nplt.plot(Year, Solar_Energy, label='Solar Energy (MWh)', linewidth=2.5, color='g')\nplt.plot(Year, Wind_Energy, label='Wind Energy (MWh)', linewidth=2.5, color='b')\nplt.plot(Year, Hydroelectric_Energy, label='Hydroelectric Energy (MWh)', linewidth=2.5, color='y')\nplt.plot(Year, Nuclear_Energy, label='Nuclear Energy (MWh)', linewidth=2.5, color='r')\n\nplt.title('Energy productions from renewable and non-renewable sources in the US, 2010-2015', fontsize=15, fontweight='bold', ha='center')\nplt.xlabel('Year', fontsize=15)\nplt.ylabel('Energy Production (MWh)', fontsize=15)\nplt.xticks(np.arange(min(Year), max(Year)+1, 1.0))\nplt.legend(loc='best', fontsize='large')\n\nplt.tight_layout()\nplt.savefig('line chart/png/121.png')\nplt.clf()"
        },
        "QA": {
            "input": "In what year did solar energy production reach 800 MWh according to the data?",
            "output": "2013"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_485",
        "img": "./line_chart/png/line_485.png",
        "topic": "Healthcare and Health",
        "title": " Average body temperature and heart rate of different age groups",
        "csv": "Age \\t Average body temperature(degrees Celcius) \\t Average heart rate(beats/min) \\n 0-5 \\t 37.2 \\t 110 \\n 6-15 \\t 36.7 \\t 97 \\n 16-25 \\t 36.6 \\t 75 \\n 26-40 \\t 36.5 \\t 75 \\n 41-60 \\t 36.4 \\t 77 \\n 61-80 \\t 36.3 \\t 85 \\n 81-99 \\t 36.2 \\t 95 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart plots average body temperature in degrees Celsius and average heart rate in beats per minute across different age groups. For ages 0-5, the average body temperature is 37.2\u00b0C with a heart rate of 110 bpm. Ages 6-15 show a temperature of 36.7\u00b0C and a heart rate of 97 bpm. The 16-25 and 26-40 age groups both have an average body temperature of 36.6\u00b0C and 36.5\u00b0C, respectively, with a consistent heart rate of 75 bpm. Those 41-60 average 36.4\u00b0C and 77 bpm, ages 61-80 at 36.3\u00b0C and 85 bpm, and finally 81-99 with 36.2\u00b0C and 95 bpm."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Data\nAge = [0, 6, 16, 26, 41, 61, 81]\nAvgTemp = [37.2, 36.7, 36.6, 36.5, 36.4, 36.3, 36.2]\nAvgHeartRate = [110, 97, 75, 75, 77, 85, 95]\n\n# Plot line\nax.plot(Age, AvgTemp, color='red', label='Average body temperature(degrees Celcius)')\nax.plot(Age, AvgHeartRate, color='blue', label='Average heart rate(beats/min)')\n\n# Grid\nplt.grid(True, color='black', linestyle='dashed')\n\n# Ticks\nplt.xticks(Age)\n\n# Legend\nax.legend(loc='best', frameon=False)\n\n# Title\nplt.title('Average body temperature and heart rate of different age groups', fontsize=14)\n\n# Tight Layout\nplt.tight_layout()\n\n# Save figure\nplt.savefig('line chart/png/233.png')\n\n# Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "What is the average body temperature for the age group 16-25?",
            "output": "36.6 degrees Celsius"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_146",
        "img": "./line_chart/png/line_146.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Total donations received by three charities from 2019 to 2023",
        "csv": "Year \\t Donations A(million dollars) \\t Donations B(million dollars) \\t Donations C(million dollars) \\n 2019 \\t 200 \\t 150 \\t 50 \\n 2020 \\t 210 \\t 180 \\t 45 \\n 2021 \\t 220 \\t 160 \\t 67 \\n 2022 \\t 230 \\t 170 \\t 70 \\n 2023 \\t 240 \\t 185 \\t 75 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the total donations received by three different charities (A, B, and C) over a period of five years, from 2019 to 2023. In 2019, Charity A received 200 million dollars, Charity B received 150 million dollars, and Charity C got 50 million dollars. The donations for Charity A increased annually, reaching 240 million dollars in 2023. Charity B showed a similar upward trend with a slight decrease in 2021, achieving a peak at 185 million dollars in 2023. Charity C's donations fluctuated but also followed an overall increase, concluding at 75 million dollars in 2023."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# set figure size\nplt.figure(figsize=(15, 8))\n\n# set data\ndata = np.array([[2019, 200, 150, 50], [2020, 210, 180, 45], [2021, 220, 160, 67], [2022, 230, 170, 70], [2023, 240, 185, 75]])\nyear = data[:, 0]\ndonations_A = data[:, 1]\ndonations_B = data[:, 2]\ndonations_C = data[:, 3]\n\n# plotting\nplt.plot(year, donations_A, label='Donations A(million dollars)', color='red')\nplt.plot(year, donations_B, label='Donations B(million dollars)', color='green')\nplt.plot(year, donations_C, label='Donations C(million dollars)', color='blue')\n\n# setting x, y-label and title\nplt.xlabel('Year')\nplt.ylabel('Total donations received (million dollars)')\nplt.title('Total donations received by three charities from 2019 to 2023')\n\n# setting legend\nplt.legend(loc='upper left')\n\n# setting x-axis ticks\nplt.xticks(year)\n\n# setting grid\nplt.grid()\n\n# tight layout\nplt.tight_layout()\n\n# save image\nplt.savefig('line chart/png/155.png')\n\n# clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which charity saw the smallest increase in donations from 2019 to 2023?",
            "output": "Donations C"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_465",
        "img": "./line_chart/png/line_465.png",
        "topic": "Arts and Culture",
        "title": " Visitors to the Art Museum from January to August 2021",
        "csv": "Month \\t Number of Visitors \\n January \\t 3000 \\n February \\t 2000 \\n March \\t 2500 \\n April \\t 2200 \\n May \\t 3000 \\n June \\t 3200 \\n July \\t 3500 \\n August \\t 3700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the number of visitors to the Art Museum from January to August 2021. In January, there were 3000 visitors, followed by a dip in February with 2000 visitors. March showed an increase to 2500, while April had a slight decrease to 2200 visitors. May matched January\u2019s figure with 3000 visitors. There was a steady increase from June, with 3200 visitors, to July with 3500, and August saw the peak at 3700 visitors."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nmonths = ['January','February','March','April','May','June','July','August']\nvisitors = [3000,2000,2500,2200,3000,3200,3500,3700]\n\nfig = plt.figure(figsize=(10, 5))\nax = fig.add_subplot(1, 1, 1)\nax.plot(months, visitors, color='#2F4F4F', marker='o')\nax.set_xticklabels(months, rotation=45, fontsize='large')\nax.set_title('Visitors to the Art Museum from January to August 2021')\nax.set_xlabel('Month')\nax.set_ylabel('Number of Visitors')\nax.grid(True, color='white')\nplt.tight_layout()\nplt.savefig('line chart/png/82.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more visitors did the museum receive in July compared to February?",
            "output": "1500 visitors"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_250",
        "img": "./line_chart/png/line_250.png",
        "topic": "Environment and Sustainability",
        "title": " Global temperature and CO2 emission trend from 2015 to 2022",
        "csv": "Year \\t Temperature(degrees) \\t CO2 Emission(kilotonnes) \\n 2015 \\t 15 \\t 3600 \\n 2016 \\t 14 \\t 4000 \\n 2017 \\t 13 \\t 4200 \\n 2018 \\t 12 \\t 4400 \\n 2019 \\t 12 \\t 4600 \\n 2020 \\t 13 \\t 4800 \\n 2021 \\t 15 \\t 5000 \\n 2022 \\t 18 \\t 5200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart represents the global temperature and CO2 emission trend from 2015 to 2022. Throughout the years, temperatures fluctuate between 12 degrees to 18 degrees, with the lowest in 2018 and 2019, and the highest in 2022. CO2 emissions increase steadily from 3600 kilotonnes in 2015 to 5200 kilotonnes in 2022, showing a clear upward trajectory."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(12,8))\nplt.xticks(np.arange(2015,2023,1))\n\nplt.title('Global temperature and CO2 emission trend from 2015 to 2022')\nplt.xlabel('Year')\nplt.ylabel('Temperature(degrees) / CO2 Emission(kilotonnes)')\nplt.grid(linestyle='--')\n\nplt.plot(np.arange(2015,2023,1), [15,14,13,12,12,13,15,18], label='Temperature(degrees)')\nplt.plot(np.arange(2015,2023,1), [3600,4000,4200,4400,4600,4800,5000,5200], label='CO2 Emission(kilotonnes)')\nplt.legend(loc='upper left', bbox_to_anchor=(1,1), ncol=1, fancybox=True, shadow=True)\n\nplt.tight_layout()\nplt.savefig('line chart/png/367.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year did the CO2 Emission reach 5000 kilotonnes?",
            "output": "2021"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_362",
        "img": "./line_chart/png/line_362.png",
        "topic": "Energy and Utilities",
        "title": " Renewable Energy Production in the US in 2023",
        "csv": "Month \\t Solar Energy(kWh) \\t Wind Energy(kWh) \\n January \\t 1200 \\t 1400 \\n February \\t 1300 \\t 1100 \\n March \\t 1400 \\t 1000 \\n April \\t 1500 \\t 1300 \\n May \\t 1600 \\t 1400 \\n June \\t 1700 \\t 1200 \\n July \\t 1800 \\t 1000 \\n August \\t 2000 \\t 1300 \\n September \\t 2200 \\t 1200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the monthly production of renewable energy in the US for the year 2023. Solar energy output rises from January's 1200 kWh to September's 2200 kWh. Wind energy starts at 1400 kWh in January, varying across months, dipping to 1000 kWh in March and July, and returning to 1300 kWh in April and August, and reaching 1200 kWh in September."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September']\nsolar_energy = [1200, 1300, 1400, 1500, 1600, 1700, 1800, 2000, 2200]\nwind_energy = [1400, 1100, 1000, 1300, 1400, 1200, 1000, 1300, 1200]\n\n# Create figure before plotting\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(111)\n\n# Plot the data\nax.plot(months, solar_energy, color='red', linewidth=2, label='Solar Energy', marker=\"o\")\nax.plot(months, wind_energy, color='blue', linewidth=2, label='Wind Energy', marker=\"o\")\n\n# Add grid\nax.grid(linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper right', fontsize=14)\n\n# Add title\nax.set_title('Renewable Energy Production in the US in 2023', fontsize=16)\n\n# Set xticks\nplt.xticks(rotation = 90)\n\n# Automatically resize the image by tight_layout\nplt.tight_layout()\n\n# Save image\nplt.savefig('line chart/png/300.png', bbox_inches='tight')\n\n# Clear the image state\nplt.cla()"
        },
        "QA": {
            "input": "How much higher was solar energy production than wind energy in September?",
            "output": "1000 kWh"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_186",
        "img": "./line_chart/png/line_186.png",
        "topic": "Social Sciences and Humanities",
        "title": " Global Population and Birth Rate from 2020 to 2024",
        "csv": "Year \\t Population(million) \\t Birth Rate \\n 2020 \\t 7.79 \\t 17.8 \\n 2021 \\t 7.88 \\t 18.2 \\n 2022 \\t 7.97 \\t 18.5 \\n 2023 \\t 8.07 \\t 18.9 \\n 2024 \\t 8.16 \\t 19.4 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart represents the global population in millions and birth rates per thousand individuals from 2020 to 2024. In 2020, the population is at 7.79 million with a birth rate of 17.8, increasing to 7.88 million and 18.2 birth rate in 2021. The trend continues upwards with population reaching 7.97 million and birth rate at 18.5 in 2022, 8.07 million population and 18.9 birth rate in 2023, and further to 8.16 million population with a 19.4 birth rate in 2024."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \n\nplt.figure(figsize=(10,8))\n\nax = plt.subplot(111)\n\nx=[2020,2021,2022,2023,2024]\ny1=[7.79,7.88,7.97,8.07,8.16]\ny2=[17.8,18.2,18.5,18.9,19.4]\n\nax.plot(x,y1,color='skyblue',marker='o',label='Population(million)')\nax.plot(x,y2,color='orange',marker='o',label='Birth Rate')\n\nax.set_xticks(x)\nax.set_xlabel('Year')\nax.set_title('Global Population and Birth Rate from 2020 to 2024')\n\nax.legend(loc='upper right', bbox_to_anchor=(1.2, 1.0))\n\nplt.tight_layout()\nplt.savefig('line chart/png/124.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in birth rate between the years 2020 and 2024?",
            "output": "1.6"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_236",
        "img": "./line_chart/png/line_236.png",
        "topic": "Law and Legal Affairs",
        "title": " Changes in Types of Cases Handled by the Legal System in the Past Decade",
        "csv": "Year \\t Civil Cases \\t Criminal Cases \\t Family Cases \\t Employment Cases \\n 2010 \\t 25 \\t 45 \\t 20 \\t 10 \\n 2011 \\t 30 \\t 50 \\t 15 \\t 12 \\n 2012 \\t 28 \\t 48 \\t 18 \\t 14 \\n 2013 \\t 32 \\t 51 \\t 17 \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the changes in the number of various case types handled by the legal system over four years. Data is given for Civil, Criminal, Family, and Employment cases from 2010 to 2013. In 2010, there were 25 civil, 45 criminal, 20 family, and 10 employment cases. The number of Civil and Criminal cases rises over the years, reaching 32 and 51 respectively by 2013. Family cases peak at 20 in 2010 and dip to 15 in 2011 before stabilizing. Employment cases gradually increase from 10 in 2010 to 15 in 2013."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nyear = np.array([2010, 2011, 2012, 2013])\ncivil_cases = np.array([25, 30, 28, 32])\ncriminal_cases = np.array([45, 50, 48, 51])\nfamily_cases = np.array([20, 15, 18, 17])\nemployment_cases = np.array([10, 12, 14, 15])\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot()\n\nax.plot(year, civil_cases, color='b', marker='o',label=\"Civil Cases\")\nax.plot(year, criminal_cases, color='y', marker='*',label=\"Criminal Cases\")\nax.plot(year, family_cases, color='m', marker='s',label=\"Family Cases\")\nax.plot(year, employment_cases, color='g', marker='^',label=\"Employment Cases\")\n\nax.set_title(\"Changes in Types of Cases Handled by the Legal System in the Past Decade\")\nax.set_xlabel('Year')\nax.set_ylabel('Number of Cases')\n\nax.set_xticks(year)\n\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\nplt.tight_layout()\nplt.savefig('line chart/png/203.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more employment cases were there in 2013 compared to 2010?",
            "output": "5 cases"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_210",
        "img": "./line_chart/png/line_210.png",
        "topic": "Tourism and Hospitality",
        "title": " Change in Tourist Numbers and Hotel Occupancy Rate in USA, 2016-2020",
        "csv": "Year \\t Foreign Tourists(million) \\t Domestic Tourists(million) \\t Hotel Occupancy Rate \\n 2016 \\t 50 \\t 100 \\t 80 \\n 2017 \\t 60 \\t 110 \\t 85 \\n 2018 \\t 70 \\t 120 \\t 90 \\n 2019 \\t 80 \\t 130 \\t 95 \\n 2020 \\t 90 \\t 140 \\t 98 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart depicts the trend in tourist numbers and hotel occupancy rates in the USA from 2016 to 2020. It shows a steady increase in foreign tourists from 50 million in 2016 to 90 million in 2020. Domestic tourists also rose from 100 million to 140 million over the same period. Concurrently, the hotel occupancy rate escalated from 80% in 2016 to 98% in 2020, indicating growing accommodation demand."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,5))\nax = plt.subplot()\nax.set_xlabel('Year')\nax.set_ylabel('Number of Tourists (million)')\nax.set_title('Change in Tourist Numbers and Hotel Occupancy Rate in USA, 2016-2020')\nax.plot([2016,2017,2018,2019,2020], [50,60,70,80,90], label='Foreign Tourists')\nax.plot([2016,2017,2018,2019,2020], [100,110,120,130,140], label='Domestic Tourists')\nax.plot([2016,2017,2018,2019,2020], [80,85,90,95,98], label='Hotel Occupancy Rate', linestyle='dashed')\nplt.xticks([2016,2017,2018,2019,2020])\nax.legend(loc='upper left', bbox_to_anchor=(1.0, 1.0))\nplt.tight_layout()\nplt.savefig('line chart/png/554.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year did the USA have 80 million foreign tourists?",
            "output": "2019"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_124",
        "img": "./line_chart/png/line_124.png",
        "topic": "Retail and E-commerce",
        "title": " Comparison of Online Sales and Store Sales in the Retail Industry from January to July 2021",
        "csv": "Month \\t Online Sales \\t Store Sales \\n January \\t 30 \\t 40 \\n February \\t 35 \\t 45 \\n March \\t 40 \\t 50 \\n April \\t 45 \\t 55 \\n May \\t 50 \\t 60 \\n June \\t 55 \\t 65 \\n July \\t 60 \\t 70 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart compares monthly online sales to store sales within the retail industry from January to July 2021. Sales are shown with an upward trend over these months. January shows online sales at 30 and store sales at 40, with each subsequent month exhibiting an increase. By July, online sales reach 60, whereas store sales climb to 70. The chart suggests a consistent growth for both sales channels across the surveyed period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10, 8))\nax = plt.subplot()\n\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July']\nonline_sales = [30, 35, 40, 45, 50, 55, 60]\nstore_sales = [40, 45, 50, 55, 60, 65, 70]\n\nax.plot(months, online_sales, label=\"Online Sales\")\nax.plot(months, store_sales, label=\"Store Sales\")\n\nax.set_title(\"Comparison of Online Sales and Store Sales in the Retail Industry from January to July 2021\")\nax.set_xlabel(\"Month\")\nax.set_ylabel(\"Sales (in thousands)\")\nax.set_xticks(months)\nax.legend(loc=\"upper left\", bbox_to_anchor=(1,1), fontsize='small')\n\nplt.tight_layout()\nplt.savefig(r'line chart/png/100.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the increase in store sales from January to July?",
            "output": "$30 million"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_352",
        "img": "./line_chart/png/line_352.png",
        "topic": "Real Estate and Housing Market",
        "title": " Average Home and Rental Price in the US from 2020 to 2024",
        "csv": "Year \\t Average Home Price(thousands of dollars) \\t Average Rental Price(thousands of dollars) \\n 2020 \\t 310 \\t 45 \\n 2021 \\t 320 \\t 48 \\n 2022 \\t 335 \\t 50 \\n 2023 \\t 350 \\t 53 \\n 2024 \\t 370 \\t 60 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the trend in average home and rental prices in the US from 2020 to 2024. In 2020, the average home price was 310 thousand dollars, with rentals at 45 thousand dollars. Prices increased each year, with homes at 320 thousand in 2021, 335 thousand in 2022, 350 thousand in 2023, and projected at 370 thousand in 2024. Rental prices followed a similar trajectory, starting at 48 thousand in 2021 and rising to 60 thousand in 2024."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata=np.array([[2020, 310, 45], [2021, 320, 48], [2022, 335, 50], [2023, 350, 53], [2024, 370, 60]])\n\nfig=plt.figure(figsize=(8, 6), dpi=80)\nax = fig.add_subplot(111)\nax.plot(data[:,0], data[:,1], linewidth=4, color='b', label='Average Home Price')\nax.plot(data[:,0], data[:,2], linewidth=4, color='g', label='Average Rental Price')\nax.set_title(\"Average Home and Rental Price in the US from 2020 to 2024\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Price (thousands of dollars)\")\nax.set_xticks(data[:,0])\nax.legend(loc='best')\nplt.tight_layout()\nplt.savefig('line chart/png/309.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much did the average home price increase from 2020 to 2023?",
            "output": "$40,000"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_227",
        "img": "./line_chart/png/line_227.png",
        "topic": "Retail and E-commerce",
        "title": " Comparison of online and store sales from January to August 2020",
        "csv": "Month \\t Online Sales \\t Store Sales \\n January \\t 1000 \\t 900 \\n February \\t 1200 \\t 1100 \\n March \\t 1400 \\t 1300 \\n April \\t 1800 \\t 1500 \\n May \\t 2000 \\t 1600 \\n June \\t 2200 \\t 1700 \\n July \\t 2800 \\t 2000 \\n August \\t 3200 \\t 2500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the comparison between online and store sales from January to August 2020. Monthly sales data show that online sales start at 1000 in January and progressively increase to 3200 by August. Correspondingly, store sales commence at 900 in January and rise to 2500 by August. Each month consistently shows higher figures for online sales compared to store sales."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nmonth = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\"]\nonline_sales = [1000, 1200, 1400, 1800, 2000, 2200, 2800, 3200]\nstore_sales = [900, 1100, 1300, 1500, 1600, 1700, 2000, 2500]\n\nfig = plt.figure(figsize=[10, 6])\nax = fig.add_subplot(111)\n\nax.plot(month, online_sales, label=\"Online Sales\", color=\"blue\", linewidth=2)\nax.plot(month, store_sales, label=\"Store Sales\", color=\"green\", linewidth=2)\n\nax.set_title(\"Comparison of online and store sales from January to August 2020\")\nax.set_xlabel(\"Month\")\nax.set_ylabel(\"Sales\")\n\nax.legend(loc=\"best\", ncol=2, frameon=True, fontsize=10)\n\nax.set_xticks(np.arange(0, 8, 1))\nax.set_xticklabels(month, rotation=45, ha='right')\n\nplt.tight_layout()\nplt.savefig(\"line chart/png/102.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in sales between online and store sales in the month of August 2020?",
            "output": "700"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_386",
        "img": "./line_chart/png/line_386.png",
        "topic": "Technology and the Internet",
        "title": " Growth of Internet and Smartphone Users in the United States from 2014 to 2020",
        "csv": "Year \\t Internet Users \\t Smartphone Users \\n 2014 \\t 3000 \\t 2500 \\n 2015 \\t 4000 \\t 3000 \\n 2016 \\t 5000 \\t 3500 \\n 2017 \\t 6000 \\t 4000 \\n 2018 \\t 7000 \\t 4500 \\n 2019 \\t 8000 \\t 5000 \\n 2020 \\t 9000 \\t 5500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the growth of internet and smartphone users in the United States from 2014 to 2020. In 2014, there were 3000 internet users and 2500 smartphone users. Each year, the number of users increased, with internet users reaching 9000 and smartphone users hitting 5500 by 2020. The chart depicts a consistent upward trend for both categories over the seven years."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.array([[2014, 3000, 2500], \n                 [2015, 4000, 3000], \n                 [2016, 5000, 3500], \n                 [2017, 6000, 4000], \n                 [2018, 7000, 4500],\n                 [2019, 8000, 5000], \n                 [2020, 9000, 5500]])\n\nyears = data[:, 0]\ninternet_users = data[:, 1]\nsmartphone_users = data[:, 2]\n\nfig = plt.figure(figsize=(10, 5))\nax = fig.add_subplot(111)\n\nax.plot(years, internet_users, label='Internet Users', marker='o')\nax.plot(years, smartphone_users, label='Smartphone Users', marker='o')\n\nax.set_xlabel('Year')\nax.set_ylabel('Number of Users')\nax.set_title('Growth of Internet and Smartphone Users in the United States from 2014 to 2020')\n\nax.legend(loc='upper left')\n\nplt.xticks(years, rotation=45, ha='right')\n\nplt.tight_layout()\nplt.savefig('line chart/png/18.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many internet users were there in the United States in the year 2017?",
            "output": "6000"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_484",
        "img": "./line_chart/png/line_484.png",
        "topic": "Technology and the Internet",
        "title": " Increase in usage of Smartphones and Computers from 2011-2018",
        "csv": "Year \\t Smartphone Usage \\t Computer Usage \\n 2011 \\t 50 \\t 40 \\n 2012 \\t 60 \\t 45 \\n 2013 \\t 70 \\t 55 \\n 2014 \\t 80 \\t 60 \\n 2015 \\t 90 \\t 65 \\n 2016 \\t 95 \\t 70 \\n 2017 \\t 98 \\t 75 \\n 2018 \\t 100 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the increase in usage of smartphones and computers between 2011 and 2018. In 2011, smartphone usage was at 50, with computer usage slightly lower at 40. There is a consistent upward trend over the years. By 2018, smartphone usage reached 100, whereas computer usage climbed to 80. Each consecutive year shows an increase, with smartphone usage growing at a slightly faster pace compared to computer usage."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\ndata = [[2011,50,40],\n        [2012,60,45],\n        [2013,70,55],\n        [2014,80,60],\n        [2015,90,65],\n        [2016,95,70],\n        [2017,98,75],\n        [2018,100,80]]\n\nfig = plt.figure(figsize=(10,7))\nax = fig.add_subplot(111)\n\nyears = [d[0] for d in data]\nsmartphone_usage = [d[1] for d in data]\ncomputer_usage = [d[2] for d in data]\n\nax.plot(years, smartphone_usage, label=\"Smartphone Usage\")\nax.plot(years, computer_usage, label=\"Computer Usage\")\n\nax.set_title('Increase in usage of Smartphones and Computers from 2011-2018')\nax.set_xlabel('Year')\nax.set_ylabel('Usage %')\n\nax.legend(loc='lower right')\nax.set_xticks(years)\n\nplt.tight_layout()\nplt.savefig('line chart/png/5.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "By how much did smartphone usage increase from 2011 to 2018?",
            "output": "50"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_308",
        "img": "./line_chart/png/line_308.png",
        "topic": "Human Resources and Employee Management",
        "title": " Changes in Employee Numbers in a Company between January and June 2021",
        "csv": "Month \\t Full Time Employees \\t Part Time Employees \\t Contractual Employees \\n January \\t 1000 \\t 150 \\t 200 \\n February \\t 1100 \\t 200 \\t 250 \\n March \\t 1050 \\t 175 \\t 225 \\n April \\t 1025 \\t 175 \\t 250 \\n May \\t 1050 \\t 200 \\t 225 \\n June \\t 1075 \\t 175 \\t 250 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the changes in employee numbers in a company from January to June 2021. It indicates three categories: Full Time Employees, Part Time Employees, and Contractual Employees. In January, there were 1000 full-time, 150 part-time, and 200 contractual employees. Numbers for full-time employees peak in February at 1100 and then fluctuate marginally, decreasing to 1025 in April and climbing back to 1075 by June. Part-time employees saw slight increases, starting at 150 and rising periodically to 200. Contractual employees began at 200, peaked at 250 in February and April, then readjusted to 225 in other months."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.array([[1000, 150, 200],\n                 [1100, 200, 250],\n                 [1050, 175, 225],\n                 [1025, 175, 250],\n                 [1050, 200, 225],\n                 [1075, 175, 250]])\n\nMonth = ['January', 'February', 'March', 'April', 'May', 'June']\nFT_Employees = data[:, 0]\nPT_Employees = data[:, 1]\nCT_Employees = data[:, 2]\n\nfig = plt.figure(figsize=(12,6))\nax = fig.add_subplot(111)\n\nax.plot(Month, FT_Employees, label=\"Full Time Employees\", lw=2, color='#539caf', marker='o')\nax.plot(Month, PT_Employees, label=\"Part Time Employees\", lw=2, color='#7663b0', marker='o')\nax.plot(Month, CT_Employees, label=\"Contractual Employees\", lw=2, color='#ff5b77', marker='o')\n\nax.set_title(\"Changes in Employee Numbers in a Company between January and June 2021\")\nax.set_xticks(Month)\nplt.xticks(rotation=45, ha=\"right\")\nax.set_xlabel(\"Month\")\nax.set_ylabel(\"Number of Employees\")\nax.grid(True)\nax.legend(loc='upper left', bbox_to_anchor=(1, 1))\nplt.tight_layout()\n\nplt.savefig('line chart/png/440.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which month did the Part Time Employees reach the highest number between January and June?",
            "output": "February"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_365",
        "img": "./line_chart/png/line_365.png",
        "topic": "Social Media and the Web",
        "title": " Global Social Media User Growth in the First Half of 2021",
        "csv": "Month \\t Facebook Users(million people) \\t Twitter users(million people) \\t Instagram users(million people) \\n January \\t 1000 \\t 500 \\t 100 \\n February \\t 1200 \\t 600 \\t 150 \\n March \\t 1500 \\t 700 \\t 200 \\n April \\t 1800 \\t 800 \\t 250 \\n May \\t 2000 \\t 900 \\t 300 \\n June \\t 2200 \\t 1000 \\t 350 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the growth in the number of users on Facebook, Twitter, and Instagram over the first six months of 2021. In January, there were 1000 million Facebook users, 500 million Twitter users, and 100 million Instagram users. By June, those numbers had risen to 2200 million for Facebook, 1000 million for Twitter, and 350 million for Instagram, indicating a steady increase across all platforms each month."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nMonth = np.array([\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"])\nFacebook_Users = np.array([1000, 1200, 1500, 1800, 2000, 2200])\nTwitter_Users = np.array([500, 600, 700, 800, 900, 1000])\nInstagram_Users = np.array([100, 150, 200, 250, 300, 350])\n\n# Create figure\nfig = plt.figure(figsize=(12, 7))\n\n# Plot line chart\nax = fig.add_subplot()\nax.plot(Month, Facebook_Users, label=\"Facebook Users(million people)\")\nax.plot(Month, Twitter_Users, label=\"Twitter Users(million people)\")\nax.plot(Month, Instagram_Users, label=\"Instagram Users(million people)\")\n\n# Set ticks\nax.set_xticks(np.arange(len(Month)))\nax.set_xticklabels(Month, rotation=20, ha=\"right\")\n\n# Set titles, labels and legend\nax.set_title(\"Global Social Media User Growth in the First Half of 2021\", fontsize=20)\nax.set_xlabel(\"Month\", fontsize=15)\nax.set_ylabel(\"Number of users(million people)\", fontsize=15)\nax.legend(loc=\"upper left\", bbox_to_anchor=(1, 1))\n\n# Resize image\nplt.tight_layout()\n\n# Save figure\nplt.savefig(\"line chart/png/363.png\")\n\n# Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "In what month did Facebook users surpass 1500 million people?",
            "output": "March"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_44",
        "img": "./line_chart/png/line_44.png",
        "topic": "Tourism and Hospitality",
        "title": " Tourist visits and revenue of the hospitality industry in London in 2021",
        "csv": "Month \\t Visitors(thousands) \\t Hotel Revenue(million dollars) \\t Restaurant Revenue(million dollars) \\n January \\t 25 \\t 700 \\t 500 \\n February \\t 27 \\t 800 \\t 550 \\n March \\t 30 \\t 850 \\t 600 \\n April \\t 35 \\t 950 \\t 650 \\n May \\t 40 \\t 1000 \\t 700 \\n June \\t 45 \\t 1100 \\t 800 \\n July \\t 50 \\t 1200 \\t 850 \\n August \\t 55 \\t 1300 \\t 950 \\n September \\t 50 \\t 1200 \\t 850 \\n October \\t 45 \\t 1100 \\t 800 \\n November \\t 40 \\t 1000 \\t 700 \\n December \\t 35 \\t 950 \\t 650 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates monthly data for tourist visits and corresponding revenues for hotels and restaurants in London for the year 2021. The chart plots the number of visitors in thousands alongside hotel and restaurant revenues in million dollars, with a trend from January to December. In January, there were 25,000 visitors, generating hotel revenues of $700 million and restaurant revenues of $500 million. A consistent upward trend is shown through August, peaking at 55,000 visitors with hotel revenues of $1300 million and restaurant revenues of $950 million, before mirroring the initial pattern in reverse towards December."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(1,13)\ny1 = [25,27,30,35,40,45,50,55,50,45,40,35]\ny2 = [700,800,850,950,1000,1100,1200,1300,1200,1100,1000,950]\ny3 = [500,550,600,650,700,800,850,950,850,800,700,650]\n\nplt.figure(figsize=(14,7))\nplt.plot(x, y1, label=\"Visitors (thousands)\")\nplt.plot(x, y2, label=\"Hotel Revenue (million dollars)\")\nplt.plot(x, y3, label=\"Restaurant Revenue (million dollars)\")\nplt.xticks(x)\nplt.title(\"Tourist visits and revenue of the hospitality industry in London in 2021\")\nplt.xlabel(\"Month\")\nplt.ylabel(\"Revenue\")\nplt.legend(loc=2, prop={'size': 10, 'family': 'serif'})\nplt.grid(True)\nplt.tight_layout()\nplt.savefig('line chart/png/150.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in hotel revenue between July and September?",
            "output": "There is no difference"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_421",
        "img": "./line_chart/png/line_421.png",
        "topic": "Food and Beverage Industry",
        "title": " Yearly growth of food and beverage consumption in the US",
        "csv": "Year \\t Produce \\t Meat \\t Dairy \\t Beverages \\n 2020 \\t 200 \\t 150 \\t 100 \\t 250 \\n 2021 \\t 220 \\t 160 \\t 120 \\t 270 \\n 2022 \\t 230 \\t 170 \\t 140 \\t 280 \\n 2023 \\t 240 \\t 180 \\t 160 \\t 290 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the yearly growth of food and beverage consumption in the US from 2020 to 2023. For each year, the chart shows the amount consumed in four categories: Produce, Meat, Dairy, and Beverages. In 2020, consumption was at 200 for Produce, 150 for Meat, 100 for Dairy, and 250 for Beverages. The subsequent years show an increase across all categories, with Produce reaching 240, Meat 180, Dairy 160, and Beverages 290 by 2023."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([2020, 2021, 2022, 2023])\ny1 = np.array([200, 220, 230, 240])\ny2 = np.array([150, 160, 170, 180])\ny3 = np.array([100, 120, 140, 160])\ny4 = np.array([250, 270, 280, 290])\n\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(1, 1, 1)\nax.plot(x, y1, label='Produce', c='b', marker='o')\nax.plot(x, y2, label='Meat', c='r', marker='*')\nax.plot(x, y3, label='Dairy', c='g', marker='s')\nax.plot(x, y4, label='Beverages', c='m', marker='^')\nax.grid(True, linestyle='--')\nax.legend(loc='best')\nax.set_xticks(x)\nax.set_title(\"Yearly growth of food and beverage consumption in the US\", fontsize=14)\nplt.tight_layout()\nplt.savefig('line chart/png/165.png')\nplt.cla()"
        },
        "QA": {
            "input": "What is the total consumption increase for dairy from 2020 to 2023?",
            "output": "60"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_46",
        "img": "./line_chart/png/line_46.png",
        "topic": "Science and Engineering",
        "title": " Variation of wind speed, temperature and pressure in the summer of 2021",
        "csv": "Month \\t Wind Speed (m/s) \\t Temperature (degrees Celsius) \\t Pressure (hPa) \\n January \\t 7.5 \\t 15 \\t 1012 \\n February \\t 8 \\t 18 \\t 1015 \\n March \\t 9.2 \\t 20 \\t 1017 \\n April \\t 7.8 \\t 22 \\t 1020 \\n May \\t 6.3 \\t 25 \\t 1022 \\n June \\t 5.5 \\t 28 \\t 1025 \\n July \\t 4.2 \\t 31 \\t 1027 \\n August \\t 3.9 \\t 33 \\t 1030 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the monthly variation of wind speed (measured in meters per second), temperature (in degrees Celsius), and atmospheric pressure (in hectopascals) during the 2021 summer months. In January, the wind speed was 7.5 m/s, temperature 15\u00b0C, and pressure 1012 hPa. The chart shows a decrease in wind speed from February's 8 m/s to August's 3.9 m/s. Temperature increases from 18\u00b0C in February to a peak of 33\u00b0C in August, and pressure rises from 1015 hPa in February to 1030 hPa in August."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['January',7.5,15,1012],\n        ['February',8,18,1015],\n        ['March',9.2,20,1017],\n        ['April',7.8,22,1020],\n        ['May',6.3,25,1022],\n        ['June',5.5,28,1025],\n        ['July',4.2,31,1027],\n        ['August',3.9,33,1030]]\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(111)\nax.set_title('Variation of wind speed, temperature and pressure in the summer of 2021')\nax.set_ylabel('Value (m/s, degrees Celsius, hPa)')\nax.set_xlabel('Month')\nax.grid(axis='y', alpha=0.75)\n\nMonth, Wind_Speed, Temperature, Pressure =[],[],[],[]\nfor row in data:\n    Month.append(row[0])\n    Wind_Speed.append(row[1])\n    Temperature.append(row[2])\n    Pressure.append(row[3])\n\nax.plot(Month, Wind_Speed, label='Wind Speed',color='red', linewidth=2, marker='o', markerfacecolor='blue', markersize=3)\nax.plot(Month, Temperature, label='Temperature',color='green', linewidth=2, marker='o', markerfacecolor='blue', markersize=3)\nax.plot(Month, Pressure, label='Pressure',color='black', linewidth=2, marker='o', markerfacecolor='blue', markersize=3)\n\nax.set_xticklabels(Month, rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.legend(loc='upper right')\n#ax.set_yticks(np.arange(0,36,5))\nplt.tight_layout()\nplt.savefig('line_46.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much does the pressure change from January to June?",
            "output": "13 hPa"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_407",
        "img": "./line_chart/png/line_407.png",
        "topic": "Law and Legal Affairs",
        "title": " Legal Cases in the U.S. from 2001-2004",
        "csv": "Year \\t Number of Cases \\t Number of Trials \\t Number of Judgements \\n 2001 \\t 20000 \\t 10000 \\t 5000 \\n 2002 \\t 25000 \\t 11000 \\t 6000 \\n 2003 \\t 30000 \\t 12000 \\t 7000 \\n 2004 \\t 33000 \\t 14000 \\t 8000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart titled \"Legal Cases in the U.S. from 2001-2004\" depicts the yearly counts of cases, trials, and judgements over a four-year period. In 2001, there were 20,000 cases, 10,000 trials, and 5,000 judgments. The subsequent years show an increase with 25,000 cases, 11,000 trials, and 6,000 judgments in 2002, followed by 30,000 cases, 12,000 trials, and 7,000 judgments in 2003. The upward trend continues in 2004 with 33,000 cases, 14,000 trials, and 8,000 judgments."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx=np.array([2001,2002,2003,2004])\ny1=np.array([20000,25000,30000,33000])\ny2=np.array([10000,11000,12000,14000])\ny3=np.array([5000,6000,7000,8000])\n\n# Create figure\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot line\nax.plot(x, y1, color='b', marker='o',label='Number of Cases')\nax.plot(x, y2, color='r', marker='o',label='Number of Trials')\nax.plot(x, y3, color='g', marker='o',label='Number of Judgements')\n\n# Customize axis\nax.set_xlabel('Year')\nax.set_ylabel('Number')\nax.set_title('Legal Cases in the U.S. from 2001-2004')\nax.legend(loc='upper right')\nax.set_xticks(x)\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('line chart/png/445.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more cases were there than judgements in 2002?",
            "output": "19000"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_466",
        "img": "./line_chart/png/line_466.png",
        "topic": "Retail and E-commerce",
        "title": " Retail and E-commerce Sales Comparison in 2020",
        "csv": "Month \\t Online Sales(billion dollars) \\t Offline Sales(billion dollars) \\n January \\t 100 \\t 120 \\n February \\t 150 \\t 130 \\n March \\t 200 \\t 200 \\n April \\t 220 \\t 210 \\n May \\t 250 \\t 230 \\n June \\t 270 \\t 220 \\n July \\t 320 \\t 240 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart presents a comparison of monthly retail and e-commerce sales in billions of dollars for 2020. It shows sales from January to July, where January begins with online sales at $100 billion and offline sales at $120 billion. A steady increase is observed with online sales peaking at $320 billion in July, whereas offline sales also grow, reaching $240 billion in the same month."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nMonth =['January', 'February', 'March', 'April', 'May', 'June', 'July']\nOnline_Sales=[100, 150, 200, 220, 250, 270, 320]\nOffline_Sales=[120, 130, 200, 210, 230, 220, 240]\n\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(Month, Online_Sales, marker='o', label='Online Sales')\nax.plot(Month, Offline_Sales, marker='*', label='Offline Sales')\nax.legend(loc='upper right', fontsize=12)\nax.set_xlabel('Month', fontsize=12)\nax.set_ylabel('Sales (billion dollars)', fontsize=12)\nax.set_xticks(np.arange(len(Month)))\nax.set_xticklabels(Month, rotation=30, fontsize=12)\nax.set_title('Retail and E-commerce Sales Comparison in 2020', fontsize=14)\nplt.tight_layout()\nplt.savefig('line chart/png/406.png')\nplt.cla()"
        },
        "QA": {
            "input": "By how much did the online sales exceed offline sales in July 2020?",
            "output": "$80 billion"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_91",
        "img": "./line_chart/png/line_91.png",
        "topic": "Arts and Culture",
        "title": " Art pieces created in four art forms from 2001 to 2004",
        "csv": "Year \\t Painting \\t Sculpture \\t Photography \\n 2001 \\t 500 \\t 400 \\t 600 \\n 2002 \\t 700 \\t 600 \\t 800 \\n 2003 \\t 900 \\t 800 \\t 1000 \\n 2004 \\t 1100 \\t 1000 \\t 1200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart outlines the quantity of art pieces created in three categories\u2014painting, sculpture, and photography\u2014from 2001 to 2004. In 2001, there were 500 paintings, 400 sculptures, and 600 photographs. By 2002, the numbers increased to 700 paintings, 600 sculptures, and 800 photographs. The trend continued upward in 2003, with 900 paintings, 800 sculptures, and 1000 photographs. The chart peaks in 2004 with 1100 paintings, 1000 sculptures, and 1200 photographs."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(12,6))\nx = [2001,2002,2003,2004]\ny1 = [500,700,900,1100]\ny2 = [400,600,800,1000]\ny3 = [600,800,1000,1200]\nplt.plot(x, y1, label=\"Painting\")\nplt.plot(x, y2, label=\"Sculpture\")\nplt.plot(x, y3, label=\"Photography\")\nplt.title(\"Art pieces created in four art forms from 2001 to 2004\")\nplt.xticks(x)\nplt.xlabel(\"Year\")\nplt.ylabel(\"Number\")\nplt.legend(loc='best')\nplt.grid(True, linestyle='--', color='gray', alpha=0.5)\nplt.tight_layout()\nplt.savefig(\"line chart/png/88.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How many paintings were created in 2003?",
            "output": "900"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_65",
        "img": "./line_chart/png/line_65.png",
        "topic": "Arts and Culture",
        "title": " Number of Museums and Galleries in Europe in 2021",
        "csv": "Country \\t Number of Museums \\t Number of Galleries \\n Germany \\t 200 \\t 300 \\n France \\t 250 \\t 330 \\n Italy \\t 300 \\t 400 \\n Spain \\t 220 \\t 390 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart shows the number of museums and galleries in four European countries in 2021. Germany is represented with 200 museums and 300 galleries, France with 250 museums and 330 galleries, Italy leads with 300 museums and 400 galleries, and Spain has 220 museums and 390 galleries."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['Germany',200, 300],\n        ['France',250, 330],\n        ['Italy',300, 400],\n        ['Spain',220, 390]]\n\nx_data = np.arange(len(data))\n\nplt.figure(figsize=(10,8))\nax = plt.subplot()\nax.set_title('Number of Museums and Galleries in Europe in 2021')\nax.set_xticks(x_data)\nax.set_xticklabels([country[0] for country in data],rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nax.plot(x_data, [country[1] for country in data], label='Number of Museums')\nax.plot(x_data, [country[2] for country in data], label='Number of Galleries')\nax.legend(loc='upper left')\n\nplt.grid(True, linestyle='--', color='0.75')\nplt.tight_layout()\nplt.savefig('line chart/png/8.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest number of museums?",
            "output": "Italy"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_403",
        "img": "./line_chart/png/line_403.png",
        "topic": "Social Sciences and Humanities",
        "title": " Global population, life expectancy and GDP growth from 2000 to 2005",
        "csv": "Year \\t Population(millions) \\t Life Expectancy(years) \\t GDP(trillion dollars) \\n 2000 \\t 6.1 \\t 67 \\t 1.2 \\n 2001 \\t 6.2 \\t 68 \\t 1.3 \\n 2002 \\t 6.4 \\t 69 \\t 1.4 \\n 2003 \\t 6.6 \\t 70 \\t 1.5 \\n 2004 \\t 6.8 \\t 71 \\t 1.6 \\n 2005 \\t 7.0 \\t 72 \\t 1.7 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the global trends in population, life expectancy, and GDP from the year 2000 to 2005. Population increases progressively from 6.1 to 7.0 millions. A parallel improvement is seen in life expectancy, rising from 67 to 72 years. The GDP also shows a steady growth, starting at 1.2 trillion dollars in 2000 and reaching 1.7 trillion dollars by 2005. Each year marks a consistent rise across all three metrics."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(8, 6), dpi=120)\n\nx = np.arange(6)\ny1 = [6.1, 6.2, 6.4, 6.6, 6.8, 7.0]\ny2 = [67, 68, 69, 70, 71, 72]\ny3 = [1.2, 1.3, 1.4, 1.5, 1.6, 1.7]\n\nplt.plot(x, y1, label=\"Population(millions)\")\nplt.plot(x, y2, label=\"Life Expectancy(years)\")\nplt.plot(x, y3, label=\"GDP(trillion dollars)\")\n\nplt.title(\"Global population, life expectancy and GDP growth from 2000 to 2005\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Number\")\nplt.xticks(x, [\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\"])\nplt.legend()\n\nplt.grid(True, linestyle=\"--\", color=\"gray\", linewidth=\"1\", alpha=0.5)\nplt.tight_layout()\nplt.savefig(\"line chart/png/395.png\")\n\nplt.close()"
        },
        "QA": {
            "input": "What was the life expectancy in 2002?",
            "output": "69 years"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_95",
        "img": "./line_chart/png/line_95.png",
        "topic": "Sports and Entertainment",
        "title": " Win/Loss Record of the Major Sports Teams in 2017-2020",
        "csv": "Year \\t Sports Team A \\t Sports Team B \\t Sports Team C \\t Sports Team D \\n 2017 \\t 500 \\t 450 \\t 400 \\t 350 \\n 2018 \\t 600 \\t 400 \\t 500 \\t 300 \\n 2019 \\t 550 \\t 500 \\t 450 \\t 350 \\n 2020 \\t 650 \\t 400 \\t 500 \\t 400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the win/loss records of four major sports teams from 2017 to 2020. In 2017, Team A had 500 wins, Team B had 450, Team C 400, and Team D 350. By 2018, Team A improved to 600 wins, while Team B decreased to 400, Team C rose to 500, and Team D dropped to 300. In 2019, Team A's wins slightly decreased to 550, Team B's rose to 500, Team C decreased to 450, and Team D remained at 350. In 2020, Team A reached 650 wins, Team B maintained 400, Team C again recorded 500, and Team D improved to 400."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,6))\nax = plt.subplot()\nax.set_title('Win/Loss Record of the Major Sports Teams in 2017-2020')\nax.set_xlabel('Year')\nax.set_ylabel('Wins')\nplt.xticks([2017,2018,2019,2020])\nax.plot([2017,2018,2019,2020],[500,600,550,650], label='Sports Team A', marker='o')\nax.plot([2017,2018,2019,2020],[450,400,500,400], label='Sports Team B', marker='o')\nax.plot([2017,2018,2019,2020],[400,500,450,500], label='Sports Team C', marker='o')\nax.plot([2017,2018,2019,2020],[350,300,350,400], label='Sports Team D', marker='o')\nax.legend(bbox_to_anchor=(1.02,1), borderaxespad=0, loc=\"upper left\", ncol=1, fontsize=\"large\")\nplt.tight_layout()\nplt.savefig('line chart/png/339.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which sports team had the lowest win/loss record in 2018?",
            "output": "Sports Team D"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_451",
        "img": "./line_chart/png/line_451.png",
        "topic": "Agriculture and Food Production",
        "title": " Changes in Agricultural Practices in Europe from 2015-2019",
        "csv": "Year \\t Organic Farming \\t Crop Diversification \\t Animal Husbandry \\t Biodynamic Farming \\n 2015 \\t 3 \\t 5 \\t 1 \\t 2 \\n 2016 \\t 5 \\t 7 \\t 2 \\t 4 \\n 2017 \\t 7 \\t 9 \\t 3 \\t 6 \\n 2018 \\t 9 \\t 11 \\t 4 \\t 8 \\n 2019 \\t 11 \\t 13 \\t 5 \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the changes in agricultural practices in Europe between 2015 and 2019. It records the progression of four different practices: Organic Farming, Crop Diversification, Animal Husbandry, and Biodynamic Farming. In 2015, Organic Farming was at a value of 3, Crop Diversification at 5, Animal Husbandry at 1, and Biodynamic Farming at 2. By 2019, these values increased to 11, 13, 5, and 10, respectively, indicating a growth trend in all listed agricultural practices over the five-year period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot()\nax.plot([2015,2016,2017,2018,2019], [3,5,7,9,11], label=\"Organic Farming\")\nax.plot([2015,2016,2017,2018,2019], [5,7,9,11,13], label=\"Crop Diversification\")\nax.plot([2015,2016,2017,2018,2019], [1,2,3,4,5], label=\"Animal Husbandry\")\nax.plot([2015,2016,2017,2018,2019], [2,4,6,8,10], label=\"Biodynamic Farming\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Rate of Adoption\")\nplt.title(\"Changes in Agricultural Practices in Europe from 2015-2019\")\nax.legend(loc=\"upper left\", bbox_to_anchor=(1,1))\nplt.xticks([2015,2016,2017,2018,2019]) \nplt.tight_layout()\nplt.savefig(\"line chart/png/149.png\")\nplt.clf()"
        },
        "QA": {
            "input": "In which year did Biodynamic Farming reach double digits for the first time according to the data?",
            "output": "2019"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_29",
        "img": "./line_chart/png/line_29.png",
        "topic": "Manufacturing and Production",
        "title": " Production level of three parts in a car manufacturing plant over six months",
        "csv": "Month \\t Part A \\t Part B \\t Part C \\n January \\t 500 \\t 1000 \\t 1500 \\n February \\t 600 \\t 1200 \\t 1400 \\n March \\t 700 \\t 1400 \\t 1600 \\n April \\t 800 \\t 1600 \\t 1800 \\n May \\t 1000 \\t 1400 \\t 2000 \\n June \\t 1200 \\t 1600 \\t 2200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the production levels of three different parts (Part A, Part B, and Part C) in a car manufacturing plant over a six-month period. In January, production numbers were 500 for Part A, 1000 for Part B, and 1500 for Part C. By June, the figures increased significantly, with Part A reaching 1200 units, Part B at 1600 units, and Part C at 2200 units. The production levels for each part show a consistent upward trend from January to June."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nMonth = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\"]\nPart_A = [500,600,700,800,1000,1200]\nPart_B = [1000,1200,1400,1600,1400,1600]\nPart_C = [1500,1400,1600,1800,2000,2200]\n\nfig, ax = plt.subplots(figsize=(15,10))\nax.plot(Month,Part_A,label=\"Part A\",marker=\"o\")\nax.plot(Month,Part_B,label=\"Part B\",marker=\"o\")\nax.plot(Month,Part_C,label=\"Part C\",marker=\"o\")\nax.set_title(\"Production level of three parts in a car manufacturing plant over six months\")\nax.set_xlabel(\"Month\")\nax.set_ylabel(\"Production Level\")\nax.legend(loc=2)\n\n# set x ticks to prevent interpolation\nx = np.arange(0,6,1)\nticks = [Month[i] for i in x]\nplt.xticks(x,ticks)\n\n# adjust figure and save\nplt.tight_layout()\nplt.savefig(\"line chart/png/57.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which month did Part C have the highest production level?",
            "output": "June"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_443",
        "img": "./line_chart/png/line_443.png",
        "topic": "Law and Legal Affairs",
        "title": " Presidential Clemency Actions in the United States from 2000 to 2004",
        "csv": "Year \\t Sentences Commuted \\t Sentences Pardoned \\t Prison Sentences Reduced \\n 2000 \\t 35 \\t 40 \\t 30 \\n 2001 \\t 32 \\t 45 \\t 25 \\n 2002 \\t 45 \\t 50 \\t 40 \\n 2003 \\t 42 \\t 55 \\t 45 \\n 2004 \\t 37 \\t 60 \\t 50 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart outlines the annual count of three presidential clemency actions\u2014sentences commuted, sentences pardoned, and prison sentences reduced\u2014from 2000 to 2004 in the United States. In 2000, there were 35 commutations, 40 pardons, and 30 sentence reductions. The following year saw 32 commuted sentences, 45 pardons, and 25 reduced sentences. Increases are observed in 2002 with 45 commutations, 50 pardons, and 40 sentence reductions, and this upward trend continues in 2003 with 42 commutations, 55 pardons, and 45 reduced sentences. In 2004, there were 37 commuted sentences, 60 pardons, and 50 sentence reductions."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nyear = np.array([2000, 2001, 2002, 2003, 2004])\ncommuted = np.array([35, 32, 45, 42, 37])\npardoned = np.array([40, 45, 50, 55, 60])\nreduced = np.array([30, 25, 40, 45, 50])\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(1, 1, 1)\nax.plot(year, commuted, label=\"Sentences Commuted\")\nax.plot(year, pardoned, label=\"Sentences Pardoned\")\nax.plot(year, reduced, label=\"Prison Sentences Reduced\")\n\nax.set_xlabel('Year')\nax.set_ylabel('Number of Clemency Actions')\nax.set_title('Presidential Clemency Actions in the United States from 2000 to 2004')\nax.set_xticks(year)\nax.grid(linestyle='--')\nax.legend(loc='upper left', bbox_to_anchor=(-0.1, 1.0))\nfig.tight_layout()\n\nfig.savefig('line chart/png/204.png')\nplt.clf()"
        },
        "QA": {
            "input": "What was the total number of presidential clemency actions in the year 2002?",
            "output": "135"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_136",
        "img": "./line_chart/png/line_136.png",
        "topic": "Business and Finance",
        "title": " Profits of three companies in the pharmaceutical industry from 2001 to 2004",
        "csv": "Year \\t Profit A(million dollars) \\t Profit B(million dollars) \\t Profit C(million dollars) \\n 2001 \\t 100 \\t 90 \\t 80 \\n 2002 \\t 120 \\t 70 \\t 60 \\n 2003 \\t 80 \\t 90 \\t 110 \\n 2004 \\t 150 \\t 120 \\t 140 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart shows the profits of three companies in the pharmaceutical industry over four years, from 2001 to 2004. Company A's profits start at 100 million dollars in 2001, rising to 120 million in 2002, decreasing to 80 million in 2003, and jumping to 150 million in 2004. Company B reports 90 million in 2001, then a decline to 70 million in 2002, a rebound to 90 million in 2003, and a peak at 120 million in 2004. Company C begins with 80 million in 2001 and falls to 60 million in 2002, but then rises to 110 million in 2003 and 140 million in 2004."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [[2001,100,90,80],[2002,120,70,60],[2003,80,90,110],[2004,150,120,140]]\nYear, Profit_A, Profit_B, Profit_C = np.array(data).T\n\nfig, ax = plt.subplots(figsize=(20, 10))\nax.plot(Year, Profit_A, label='Profit A(million dollars)', marker='o')\nax.plot(Year, Profit_B, label='Profit B(million dollars)', marker='o')\nax.plot(Year, Profit_C, label='Profit C(million dollars)', marker='o')\nax.set_title('Profits of three companies in the pharmaceutical industry from 2001 to 2004')\nax.set_xlabel('Year')\nax.set_ylabel('Profit (million dollars)')\nax.set_xticks(Year)\nax.grid(True)\nax.legend(loc='best')\nplt.tight_layout()\nplt.savefig('line chart/png/489.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the profit of Company A in 2003?",
            "output": "80 million dollars"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_177",
        "img": "./line_chart/png/line_177.png",
        "topic": "Business and Finance",
        "title": " Profit and Revenue of a Business from 2020 to 2024",
        "csv": "Year \\t Profit (million dollars) \\t Revenue (million dollars) \\n 2020 \\t 1000 \\t 5000 \\n 2021 \\t 1200 \\t 7000 \\n 2022 \\t 1500 \\t 9000 \\n 2023 \\t 1800 \\t 10000 \\n 2024 \\t 2000 \\t 12000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the annual profit and revenue of a business for the years 2020 to 2024. In 2020, the profit was $1000 million against a revenue of $5000 million. The following year, profit rose to $1200 million with revenue increasing to $7000 million. There was a further rise in 2022 with $1500 million profit and $9000 million revenue. In 2023, profit reached $1800 million and revenue $10000 million. Finally, by 2024, profit is projected at $2000 million, alongside a revenue of $12000 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nYear = [2020, 2021, 2022, 2023, 2024]\nProfit = [1000, 1200, 1500, 1800, 2000]\nRevenue = [5000, 7000, 9000, 10000, 12000]\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot()\nax.plot(Year, Profit, color=\"red\", linestyle=\"-\", marker=\"o\", label=\"Profit (million dollars)\")\nax.plot(Year, Revenue, color=\"blue\", linestyle=\"-\", marker=\"o\", label=\"Revenue (million dollars)\")\nax.set_title(\"Profit and Revenue of a Business from 2020 to 2024\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Amount (million dollars)\")\nax.set_xticks(np.arange(2020, 2025, 1))\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, fontsize='large',\n          fancybox=True, shadow=True, frameon=True)\nplt.tight_layout()\nplt.savefig(\"line chart/png/401.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference between profit and revenue in the year 2021?",
            "output": "5800"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_392",
        "img": "./line_chart/png/line_392.png",
        "topic": "Healthcare and Health",
        "title": " Average Weight and Height of People in Different Age Groups",
        "csv": "Age \\t Average Weight(kg) \\t Average Height(m) \\n 0-5 \\t 15 \\t 1.2 \\n 6-12 \\t 25 \\t 1.5 \\n 13-18 \\t 45 \\t 1.8 \\n 19-25 \\t 55 \\t 1.9 \\n 26-35 \\t 65 \\t 1.7 \\n 36-45 \\t 75 \\t 1.6 \\n 46-60 \\t 85 \\t 1.5 \\n 61-100 \\t 65 \\t 1.4 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the average weight and height of people across different age groups. For ages 0-5, the average weight is 15 kg with a height of 1.2 meters. Ages 6-12 show an average weight of 25 kg and height of 1.5 meters. The 13-18 age bracket has an average weight of 45 kg and height of 1.8 meters. Individuals aged 19-25 average 55 kg in weight and 1.9 meters in height, whereas the 26-35 group weighs on average 65 kg and measures 1.7 meters in height. Those in the 36-45 age range have an average weight of 75 kg and height of 1.6 meters. The 46-60 group averages 85 kg and 1.5 meters, and finally, those aged 61-100 average 65 kg in weight and 1.4 meters in height."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\n\nage = [\"0-5\", \"6-12\", \"13-18\", \"19-25\", \"26-35\", \"36-45\", \"46-60\", \"61-100\"]\nweight = [15, 25, 45, 55, 65, 75, 85, 65]\nheight = [1.2, 1.5, 1.8, 1.9, 1.7, 1.6, 1.5, 1.4]\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(1,1,1)\nax.plot(age, weight, 'g', label=\"Average Weight (kg)\")\nax.plot(age, height, 'b', label=\"Average Height (m)\")\nax.set_xlabel(\"Age\")\nax.set_xticks(age)\nax.set_ylabel(\"Value\")\nax.set_title(\"Average Weight and Height of People in Different Age Groups\")\nax.grid(True)\nax.legend()\n\nplt.tight_layout()\nplt.savefig(\"line chart/png/128.png\", bbox_inches = 'tight')\nplt.clf()"
        },
        "QA": {
            "input": "What is the average height for the age group 26-35?",
            "output": "1.7 m"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_233",
        "img": "./line_chart/png/line_233.png",
        "topic": "Environment and Sustainability",
        "title": " Energy Usage and Renewable Energy Usage in the US from 2019-2024",
        "csv": "Year \\t Energy Usage (Gigawatts) \\t Renewable Energy Usage(Gigawatts) \\n 2019 \\t 450 \\t 100 \\n 2020 \\t 500 \\t 150 \\n 2021 \\t 550 \\t 200 \\n 2022 \\t 600 \\t 250 \\n 2023 \\t 650 \\t 300 \\n 2024 \\t 700 \\t 350 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the progression of energy usage alongside renewable energy usage in the US from 2019 to 2024. In 2019, energy usage stood at 450 gigawatts with renewables at 100 gigawatts. Each subsequent year shows an increase, with 2020 recording 500 gigawatts of total energy and 150 of renewable, 2021 with 550 and 200 respectively, 2022 at 600 and 250, 2023 with 650 and 300, and 2024 forecasting 700 gigawatts of energy usage with renewable sources contributing 350 gigawatts."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data\nYear = [2019, 2020, 2021, 2022, 2023, 2024] \nEnergy_Usage = [450, 500, 550, 600, 650, 700] \nRenewable_Energy = [100, 150, 200, 250, 300, 350] \n\n# Create figure\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(111)\n\n# Plot Line chart\nax.plot(Year, Energy_Usage, color='red', label='Energy Usage', marker='o')\nax.plot(Year, Renewable_Energy, color='blue', label='Renewable Energy Usage', marker='o')\n\n# Set title and labels for axes\nax.set_title('Energy Usage and Renewable Energy Usage in the US from 2019-2024')\nax.set_xlabel('Year')\nax.set_ylabel('Gigawatts')\n\n# Set x ticks\nplt.xticks(Year, rotation=45, wrap=True)\n\n# Create legend\nax.legend()\n\n# Save the figure\nplt.tight_layout()\nplt.savefig('line chart/png/209.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "By how many Gigawatts did the Energy Usage increase from 2020 to 2022?",
            "output": "100 Gigawatts"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_461",
        "img": "./line_chart/png/line_461.png",
        "topic": "Science and Engineering",
        "title": " Analysis of Research and Development Expenditure in the Science and Engineering Sector",
        "csv": "Year \\t Research Grants(million dollars) \\t Research Output(articles) \\t R&D Expenditure(billion dollars) \\n 2001 \\t 400 \\t 100 \\t 1000 \\n 2002 \\t 450 \\t 120 \\t 1100 \\n 2003 \\t 500 \\t 140 \\t 1200 \\n 2004 \\t 550 \\t 160 \\t 1300 \\n 2005 \\t 600 \\t 180 \\t 1400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the trends in research and development in the science and engineering sector from 2001 to 2005. It tracks three metrics: Research Grants in million dollars, Research Output in the form of articles, and R&D Expenditure in billion dollars. The data shows an upward trajectory for all three metrics over the five-year period. In 2001, research grants stood at 400 million dollars, with 100 articles produced and an R&D expenditure of 1000 billion dollars. By 2005, grants increased to 600 million dollars, output to 180 articles, and expenditure rose to 1400 billion dollars."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \n\nx = np.array([2001, 2002, 2003, 2004, 2005]) \ny1 = np.array([400, 450, 500, 550, 600]) \ny2 = np.array([100, 120, 140, 160, 180]) \ny3 = np.array([1000, 1100, 1200, 1300, 1400]) \n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\nax.plot(x, y1, color='blue', linestyle='-', label=\"Research Grants (million dollars)\")\nax.plot(x, y2, color='orange', linestyle='-', label=\"Research Output (articles)\")\nax.plot(x, y3, color='green', linestyle='-', label=\"R&D Expenditure (billion dollars)\")\nax.set_xticks(x)\n\nax.legend(loc='best', ncol=2, prop={'size': 10})\nplt.title('Analysis of Research and Development Expenditure in the Science and Engineering Sector')\nplt.tight_layout()\nplt.savefig('line chart/png/521.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much did the R&D Expenditure increase from 2001 to 2005?",
            "output": "$400 billion"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_37",
        "img": "./line_chart/png/line_37.png",
        "topic": "Social Sciences and Humanities",
        "title": " Average Salary of 18-25 Year Olds in the US in 2021",
        "csv": "Age \\t Average Salary(USD) \\n 18 \\t 35000 \\n 19 \\t 30000 \\n 20 \\t 40000 \\n 21 \\t 38000 \\n 22 \\t 42000 \\n 23 \\t 45000 \\n 24 \\t 50000 \\n 25 \\t 47000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the average salary in USD by age for individuals aged 18 to 25 in the US during the year 2021. An 18-year-old's average salary is listed as $35,000, decreasing to $30,000 for 19-year-olds. The trend then ascends with 20-year-olds earning $40,000, 21-year-olds at $38,000, and continues to rise with 22-year-olds earning $42,000, 23-year-olds at $45,000, 24-year-olds at $50,000, and finally, 25-year-olds making an average of $47,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#Set the size of the figure\nplt.figure(figsize=(8,5))\n\n#Generate chart\nax = plt.subplot()\nx = np.arange(18,26)\ny = [35000,30000,40000,38000,42000,45000,50000,47000]\nplt.plot(x, y, color='orange', marker='o', linestyle='--', label=\"Average Salary\")\n\n#Set title of the figure\nplt.title(\"Average Salary of 18-25 Year Olds in the US in 2021\")\n\n#Set x-axis and y-axis\nplt.xlabel(\"Age\")\nplt.ylabel(\"Average Salary(USD)\")\n\n#Set the x-axis ticks\nplt.xticks(x)\n\n#Add legend\nplt.legend(loc='best')\n\n#Add background grid\nplt.grid()\n\n#Resize the image\nplt.tight_layout()\n\n#Save figure\nplt.savefig(\"line chart/png/312.png\")\n\n#Clear the current image state\nplt.cla()\nplt.clf()\nplt.close()"
        },
        "QA": {
            "input": "What is the average salary for a 25-year-old?",
            "output": "$47,000"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_100",
        "img": "./line_chart/png/line_100.png",
        "topic": "Tourism and Hospitality",
        "title": " Occupancy rate comparison of three hotels in the US from January to August 2020",
        "csv": "Month \\t Hotel A Occupancy Rate \\t Hotel B Occupancy Rate \\t Hotel C Occupancy Rate \\n January \\t 90% \\t 80% \\t 60% \\n February \\t 85% \\t 75% \\t 65% \\n March \\t 80% \\t 70% \\t 70% \\n April \\t 75% \\t 65% \\t 75% \\n May \\t 85% \\t 75% \\t 80% \\n June \\t 90% \\t 80% \\t 85% \\n July \\t 95% \\t 85% \\t 90% \\n August \\t 90% \\t 80% \\t 85% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart presents the occupancy rates of three different hotels from January to August 2020. Hotel A's occupancy rates range from 75% in April to 95% in July. Hotel B's lowest occupancy rate is 65% in April, while its peak is at 85% in July. Hotel C shows an occupancy rate beginning at 60% in January and reaching its highest at 90% in July. The chart tracks the monthly fluctuations in occupancy rates, revealing trends and variations among the three hotels throughout these eight months."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nlabels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August']\nHotel_A = [90, 85, 80, 75, 85, 90, 95, 90]\nHotel_B = [80, 75, 70, 65, 75, 80, 85, 80]\nHotel_C = [60, 65, 70, 75, 80, 85, 90, 85]\n\nfig = plt.figure(figsize=(10,7))\nax = fig.add_subplot(111)\n\nax.plot(labels, Hotel_A, label='Hotel A')\nax.plot(labels, Hotel_B, label='Hotel B')\nax.plot(labels, Hotel_C, label='Hotel C')\n\nax.set_title('Occupancy rate comparison of three hotels in the US from January to August 2020')\nax.set_xlabel('Month')\nax.set_ylabel('Occupancy Rate')\nax.set_xticks(labels)\nplt.legend(loc='best')\nplt.grid()\n\nplt.tight_layout()\nplt.savefig('line chart/png/177.png')\nplt.clf()"
        },
        "QA": {
            "input": "What was the occupancy rate of Hotel B in July?",
            "output": "85%"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_318",
        "img": "./line_chart/png/line_318.png",
        "topic": "Tourism and Hospitality",
        "title": " Hotel visitors in four cities during the first four months of 2021",
        "csv": "Month \\t Hotel A(number of visitors) \\t Hotel B(number of visitors) \\t Hotel C(number of visitors) \\t Hotel D(number of visitors) \\n January \\t 100 \\t 90 \\t 120 \\t 150 \\n February \\t 120 \\t 100 \\t 110 \\t 160 \\n March \\t 80 \\t 110 \\t 130 \\t 120 \\n April \\t 150 \\t 120 \\t 140 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart presents the fluctuation in the number of visitors at four different hotels across four cities during the first four months of 2021. In January, Hotel A had 100 visitors, Hotel B had 90, Hotel C had 120, and Hotel D had 150. February showed Hotel A increasing to 120 visitors, Hotel B to 100, Hotel C decreasing slightly to 110, and Hotel D climbing to 160. March recorded a dip for Hotel A to 80, an increase for Hotel B to 110, and Hotel C to 130, with Hotel D decreasing to 120. In April, there was a notable rise for Hotel A to 150, Hotel B to 120, Hotel C to 140, and a significant drop for Hotel D to 80 visitors."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(8,6))\nplt.plot(['January','February','March','April'],[100,90,120,150],label='Hotel A')\nplt.plot(['January','February','March','April'],[120,100,110,160],label='Hotel B')\nplt.plot(['January','February','March','April'],[80,110,130,120],label='Hotel C')\nplt.plot(['January','February','March','April'],[150,120,140,80],label='Hotel D')\nplt.xticks(['January','February','March','April'])\nplt.title('Hotel visitors in four cities during the first four months of 2021')\nplt.legend(loc=\"upper left\")\nplt.tight_layout()\nplt.savefig('line chart/png/216.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which hotel had the least number of visitors in April?",
            "output": "Hotel D"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_359",
        "img": "./line_chart/png/line_359.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Increase in donations and volunteer hours for a non-profit organization from 2011-2015.",
        "csv": "Year \\t Donations (USD) \\t Volunteer Hours \\n 2011 \\t 30000 \\t 20000 \\n 2012 \\t 35000 \\t 25000 \\n 2013 \\t 40000 \\t 30000 \\n 2014 \\t 45000 \\t 35000 \\n 2015 \\t 50000 \\t 40000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the annual increase in donations and volunteer hours for a non-profit organization over a five-year period, from 2011 to 2015. In 2011, donations stood at $30,000 with 20,000 volunteer hours. Each subsequent year shows a consistent increase in donations by $5,000 and volunteer hours by 5,000, culminating in 2015 with donations reaching $50,000 and volunteer hours totaling 40,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {'Year':[2011,2012,2013,2014,2015],\n        'Donations (USD)':[30000,35000,40000,45000,50000],\n        'Volunteer Hours':[20000,25000,30000,35000,40000]}\ndf = pd.DataFrame(data)\n\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(111)\nax.plot(df['Year'], df['Donations (USD)'], linestyle='-', marker='^', color='red', label='Donations (USD)')\nax.plot(df['Year'], df['Volunteer Hours'], linestyle='-', marker='o', color='blue', label='Volunteer Hours')\nax.set_xticks(df['Year'])\nax.set_title('Increase in donations and volunteer hours for a non-profit organization from 2011-2015')\nax.set_xlabel('Year')\nax.set_ylabel('Amount (USD)')\nax.legend(loc='upper left', bbox_to_anchor=(1,1))\nplt.tight_layout()\nplt.savefig('line chart/png/525.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more volunteer hours were there in 2015 compared to 2011?",
            "output": "20000 hours"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_483",
        "img": "./line_chart/png/line_483.png",
        "topic": "Social Media and the Web",
        "title": " Increase in Social Media Posts from January to May 2021",
        "csv": "Month \\t Number of Tweets \\t Number of Instagram Posts \\t Number of Facebook Posts \\n January \\t 20000 \\t 30000 \\t 40000 \\n February \\t 25000 \\t 35000 \\t 45000 \\n March \\t 30000 \\t 40000 \\t 50000 \\n April \\t 35000 \\t 45000 \\t 55000 \\n May \\t 40000 \\t 50000 \\t 60000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the increase in social media posts across three platforms from January to May 2021. In January, there were 20,000 tweets, 30,000 Instagram posts, and 40,000 Facebook posts. Each platform shows a monthly increase leading to May, where tweets rose to 40,000, Instagram posts to 50,000, and Facebook posts to 60,000. The data exhibits a consistent growth in user activity on all three social networks during the five-month span."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx_labels = [\"January\",\"February\",\"March\",\"April\",\"May\"]\ny_Tweets = [20000,25000,30000,35000,40000]\ny_Instagram = [30000,35000,40000,45000,50000]\ny_Facebook = [40000,45000,50000,55000,60000]\n\nfig = plt.figure(figsize=(10,6))\n\nplt.plot(x_labels, y_Tweets, linestyle=\"-\", marker=\"o\", color=\"b\", label=\"Tweets\")\nplt.plot(x_labels, y_Instagram, linestyle=\"-\", marker=\"o\", color=\"r\", label=\"Instagram\")\nplt.plot(x_labels, y_Facebook, linestyle=\"-\", marker=\"o\", color=\"g\", label=\"Facebook\")\n\nplt.title(\"Increase in Social Media Posts from January to May 2021\")\nplt.xlabel(\"Month\")\nplt.ylabel(\"Number of Posts\")\nplt.xticks(np.arange(len(x_labels)), x_labels)\nplt.legend(loc=\"best\")\n\nplt.tight_layout()\nplt.savefig(\"line chart/png/236.png\")\nplt.clf()"
        },
        "QA": {
            "input": "By how much did the Number of Facebook Posts increase from January to May 2021?",
            "output": "20000 posts"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_332",
        "img": "./line_chart/png/line_332.png",
        "topic": "Business and Finance",
        "title": " Investment in four categories of businesses in the next four years",
        "csv": "Year \\t Investment A(million dollars) \\t Investment B(million dollars) \\t Investment C(million dollars) \\t Investment D \\n 2020 \\t 200 \\t 100 \\t 400 \\t 500 \\n 2021 \\t 150 \\t 200 \\t 300 \\t 550 \\n 2022 \\t 400 \\t 300 \\t 200 \\t 450 \\n 2023 \\t 250 \\t 350 \\t 450 \\t 500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart depicts investment trends in four different categories over four years. In 2020, investment A received 200 million dollars, while investment B had 100 million, investment C 400 million, and investment D 500 million. The subsequent year, 2021, saw a decrease in investment A to 150 million, an increase in investment B to 200 million, a decrease in investment C to 300 million, and an increase in investment D to 550 million. Investments in A and C increased in 2022 to 400 million and 200 million, respectively, whereas investments B and D changed to 300 million and 450 million respectively. By 2023, investment A was at 250 million, B at 350 million, C at 450 million, and D maintained at 500 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\n# Create figure\nfig = plt.figure(figsize=(15, 8))\n\n# Plot data\nplt.plot(\n    [2020, 2021, 2022, 2023],\n    [200, 150, 400, 250],\n    label=\"Investment A(million dollars)\",\n    color=\"b\",\n    linestyle=\"dashed\",\n    marker=\"o\",\n    markerfacecolor=\"red\",\n    markersize=10\n)\n\nplt.plot(\n    [2020, 2021, 2022, 2023],\n    [100, 200, 300, 350],\n    label=\"Investment B(million dollars)\",\n    color=\"g\",\n    linestyle=\"dashed\",\n    marker=\"o\",\n    markerfacecolor=\"yellow\",\n    markersize=10\n)\n\nplt.plot(\n    [2020, 2021, 2022, 2023],\n    [400, 300, 200, 450],\n    label=\"Investment C(million dollars)\",\n    color=\"k\",\n    linestyle=\"dashed\",\n    marker=\"o\",\n    markerfacecolor=\"orange\",\n    markersize=10\n)\n\nplt.plot(\n    [2020, 2021, 2022, 2023],\n    [500, 550, 450, 500],\n    label=\"Investment D(million dollars)\",\n    color=\"r\",\n    linestyle=\"dashed\",\n    marker=\"o\",\n    markerfacecolor=\"green\",\n    markersize=10\n)\n\n# Set x and y labels\nplt.xlabel('Year')\nplt.ylabel('Investment (million dollars)')\n\n# Set ticks\nplt.xticks([2020, 2021, 2022, 2023])\n\n# Set legend\nplt.legend(loc=\"upper left\")\n\n# Set title\nplt.title('Investment in four categories of businesses in the next four years')\n\n# Resize image\nplt.tight_layout()\n\n# Save image\nplt.savefig('line chart/png/270.png')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which category had the highest investment in 2020?",
            "output": "Investment D"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_35",
        "img": "./line_chart/png/line_35.png",
        "topic": "Government and Public Policy",
        "title": " Voter Turnout and Government Spending in the United States from 2004 to 2020",
        "csv": "Year \\t Voting Turnout(%) \\t Spending on Healthcare(billion dollars) \\t Spending on Education(billion dollars) \\n 2004 \\t 65 \\t 400 \\t 200 \\n 2008 \\t 72 \\t 420 \\t 220 \\n 2012 \\t 60 \\t 440 \\t 240 \\n 2016 \\t 69 \\t 460 \\t 260 \\n 2020 \\t 64 \\t 480 \\t 280 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the voter turnout percentages and government spending on healthcare and education in the United States across five election years, from 2004 to 2020. In 2004, there was a 65% voting turnout, with $400 billion spent on healthcare and $200 billion on education. In 2008, turnout increased to 72%, alongside rises in spending to $420 billion in healthcare and $220 billion in education. Voter participation decreased to 60% in 2012, while spending grew to $440 billion on healthcare and $240 billion on education. In 2016, 69% of voters turned out, with spending reaching $460 billion for healthcare and $260 billion for education. Finally, in 2020, the turnout was 64%, and spending hit $480 billion in healthcare and $280 billion in education."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \n\nplt.figure(figsize=(10,8)) \nax = plt.subplot() \n\ndata = np.array([[2004, 65, 400, 200], \n                 [2008, 72, 420, 220], \n                 [2012, 60, 440, 240],\n                 [2016, 69, 460, 260],\n                 [2020, 64, 480, 280]])\n\nax.plot(data[:,0], data[:,1], label=\"Voting Turnout(%)\")\nax.plot(data[:,0], data[:,2], label=\"Spending on Healthcare(billion dollars)\")\nax.plot(data[:,0], data[:,3], label=\"Spending on Education(billion dollars)\")\n\nax.set_title(\"Voter Turnout and Government Spending in the United States from 2004 to 2020\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Amount\")\nax.legend(loc=\"upper left\", fontsize=\"medium\", frameon=True, shadow=True, bbox_to_anchor=(1, 1))\n\nplt.xticks(data[:,0])\nplt.tight_layout()\n\nplt.savefig('line chart/png/156.png') \nplt.clf()"
        },
        "QA": {
            "input": "How much was spent on healthcare in the United States in 2016?",
            "output": "460 billion dollars"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_52",
        "img": "./line_chart/png/line_52.png",
        "topic": "Law and Legal Affairs",
        "title": " Trend of Criminal and Civil Cases in the US Courts from 2015 to 2019",
        "csv": "Year \\t Number of Criminal Cases \\t Number of Civil Cases \\n 2015 \\t 500000 \\t 3000000 \\n 2016 \\t 550000 \\t 3200000 \\n 2017 \\t 600000 \\t 3500000 \\n 2018 \\t 650000 \\t 3700000 \\n 2019 \\t 700000 \\t 4000000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the trend of criminal and civil cases in the US courts between 2015 and 2019. Criminal cases increased from 500,000 in 2015 to 700,000 in 2019. In the same period, civil cases rose from 3,000,000 to 4,000,000. Each year shows a consistent rise in the number of both criminal and civil cases."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#data\ndata = np.array([[2015, 500000, 3000000], \n                 [2016, 550000, 3200000],\n                 [2017, 600000, 3500000],\n                 [2018, 650000, 3700000],\n                 [2019, 700000, 4000000]])\n\n# Create figure\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(1, 1, 1)\n\n# Plot data\nax.plot(data[:, 0], data[:, 1], label='Number of Criminal Cases')\nax.plot(data[:, 0], data[:, 2], label='Number of Civil Cases')\n\n# Set ticks\nax.set_xticks(data[:, 0])\n\n# Other settings\nax.set_title(\"Trend of Criminal and Civil Cases in the US Courts from 2015 to 2019\")\nax.legend(loc='upper left', bbox_to_anchor=(1, 1))\nplt.tight_layout()\nplt.savefig('line chart/png/476.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many criminal cases were there in the US Courts in 2017?",
            "output": "600,000"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_462",
        "img": "./line_chart/png/line_462.png",
        "topic": "Business and Finance",
        "title": " US GDP and Unemployment Rate from 2001 to 2006",
        "csv": "Year \\t Gross Domestic Product (GDP)(billion dollars) \\t Unemployment Rate (%) \\n 2001 \\t 13000 \\t 4.6 \\n 2002 \\t 13500 \\t 5.2 \\n 2003 \\t 14000 \\t 4.7 \\n 2004 \\t 14500 \\t 5.1 \\n 2005 \\t 15000 \\t 4.9 \\n 2006 \\t 15500 \\t 4.8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the US Gross Domestic Product (GDP) in billion dollars alongside the Unemployment Rate (%) from 2001 to 2006. In 2001, the GDP was $13,000 billion with an unemployment rate of 4.6%. By 2002, the GDP increased to $13,500 billion, and the unemployment rate rose to 5.2%. The following years showed a trend of rising GDP reaching $15,500 billion by 2006, while the unemployment rate fluctuated, ending at 4.8% that year."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nx_axis = [2001, 2002, 2003, 2004, 2005, 2006]\ngdp = [13000,13500,14000,14500,15000,15500]\nunemployment = [4.6,5.2,4.7,5.1,4.9,4.8]\n\nplt.figure(figsize=(8,8))\nax1 = plt.subplot(111)\nax1.plot(x_axis, gdp, label='GDP')\nax1.plot(x_axis, unemployment, label='Unemployment Rate')\nax1.set_title('US GDP and Unemployment Rate from 2001 to 2006')\nax1.set_xlabel('Year')\nax1.set_ylabel('Value')\nax1.legend()\nax1.grid()\nplt.xticks(x_axis)\nplt.tight_layout()\nplt.savefig('line chart/png/409.png')\nplt.clf()"
        },
        "QA": {
            "input": "What was the highest unemployment rate recorded between 2001 and 2006?",
            "output": "5.2%"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_351",
        "img": "./line_chart/png/line_351.png",
        "topic": "Education and Academics",
        "title": " Reading, Math and Science scores of students in Grade 1-4.",
        "csv": "Grade \\t Reading Score \\t Math Score \\t Science Score \\n 1 \\t 90 \\t 80 \\t 95 \\n 2 \\t 85 \\t 90 \\t 90 \\n 3 \\t 80 \\t 95 \\t 85 \\n 4 \\t 95 \\t 85 \\t 95 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the academic performance of students across three different subjects\u2014Reading, Math, and Science\u2014in grades 1 through 4. Grade 1 students scored 90 in Reading, 80 in Math, and 95 in Science. Grade 2 scored 85 in Reading, 90 in Math, and 90 in Science. Students in Grade 3 had scores of 80 in Reading, 95 in Math, and 85 in Science. Lastly, Grade 4 students achieved 95 in Reading, 85 in Math, and 95 in Science."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot()\n\ngrade = [1, 2, 3, 4]\nreading_score = [90, 85, 80, 95]\nmath_score = [80, 90, 95, 85]\nscience_score = [95, 90, 85, 95]\n\nax.plot(grade, reading_score, label=\"Reading Score\", marker=\"o\", color=\"red\")\nax.plot(grade, math_score, label=\"Math Score\", marker=\"v\", color=\"green\")\nax.plot(grade, science_score, label=\"Science Score\", marker=\"s\", color=\"blue\")\n\nax.set_xticks(grade)\nax.set_title(\"Reading, Math and Science scores of students in Grade 1-4\")\nax.legend(loc=\"best\", ncol=3, frameon=False)\n\nplt.tight_layout()\nplt.savefig(\"line chart/png/421.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the reading score of students in Grade 1?",
            "output": "90"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_342",
        "img": "./line_chart/png/line_342.png",
        "topic": "Science and Engineering",
        "title": " The Relationship between Mass, Length, Time and Force in a Physics Experiment",
        "csv": "Experiment \\t Mass(kg) \\t Length(m) \\t Time(s) \\t Force(N) \\n 1 \\t 2 \\t 1 \\t 3 \\t 20 \\n 2 \\t 2.5 \\t 1.2 \\t 2.5 \\t 25 \\n 3 \\t 3 \\t 1.5 \\t 2 \\t 30 \\n 4 \\t 3.5 \\t 1.8 \\t 1.5 \\t 35 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the outcomes of a physics experiment, recording the relationships between mass, length, time, and force. Four experiments are plotted: Experiment 1 shows a mass of 2 kg, length of 1 m, time of 3 s, and a force of 20 N. Experiment 2 has a mass of 2.5 kg, length of 1.2 m, time of 2.5 s, and force of 25 N. In Experiment 3, the mass is 3 kg, length is 1.5 m, time is 2 s, and force is 30 N. Lastly, Experiment 4 documents a mass of 3.5 kg, a length of 1.8 m, time of 1.5 s, and force of 35 N."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nx = [1,2,3,4]\nm = [2,2.5,3,3.5]\nl = [1,1.2,1.5,1.8]\nt = [3,2.5,2,1.5]\nf = [20,25,30,35]\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(111)\nax.plot(x,m, label='Mass(kg)')\nax.plot(x,l, label='Length(m)')\nax.plot(x,t, label='Time(s)')\nax.plot(x,f, label='Force(N)')\nax.legend(loc='upper center',bbox_to_anchor=(0.5,0.95),ncol=4,fancybox=True,shadow=True,fontsize='small')\nax.set_title('The Relationship between Mass, Length, Time and Force in a Physics Experiment', fontsize='large')\nax.set_xlabel('Experiment')\nax.set_xticks(x)\nax.set_ylabel('Value')\nplt.tight_layout()\nplt.savefig('line_342.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much greater is the force in Experiment 4 compared to Experiment 1?",
            "output": "15 N"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_261",
        "img": "./line_chart/png/line_261.png",
        "topic": "Government and Public Policy",
        "title": " US Employment and Income Changes from 2001 to 2004",
        "csv": "Year \\t Unemployment Rate \\t Average Income(dollars) \\t Minimum Wage(dollars) \\n 2001 \\t 7.2 \\t 30000 \\t 7.25 \\n 2002 \\t 6.8 \\t 32000 \\t 7.50 \\n 2003 \\t 6.4 \\t 35000 \\t 7.90 \\n 2004 \\t 5.9 \\t 40000 \\t 8.20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates changes in the United States' unemployment rate, average income, and minimum wage over the period from 2001 to 2004. In 2001, the unemployment rate was 7.2%, with an average income of $30,000 and a minimum wage of $7.25. The following year, 2002, saw a slight decrease in unemployment to 6.8%, an increase in average income to $32,000, and a minimum wage adjustment to $7.50. In 2003, unemployment further decreased to 6.4%, average income grew to $35,000, and the minimum wage rose to $7.90. The year 2004 marked a further decrease in unemployment to 5.9%, an increase in average income to $40,000, and a minimum wage of $8.20."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(8,8))\nax = plt.subplot()\nx_axis = [\"2001\",\"2002\",\"2003\",\"2004\"]\ny_axis_1 = [7.2,6.8,6.4,5.9]\ny_axis_2 = [30000,32000,35000,40000]\ny_axis_3 = [7.25,7.50,7.90,8.20]\nax.plot(x_axis,y_axis_1,label='Unemployment Rate')\nax.plot(x_axis,y_axis_2,label='Average Income(dollars)')\nax.plot(x_axis,y_axis_3,label='Minimum Wage(dollars)')\nplt.title(\"US Employment and Income Changes from 2001 to 2004\",fontsize=16)\nplt.xlabel(\"Year\",fontsize=14)\nplt.ylabel(\"Rate/Income(dollars)\",fontsize=14)\nplt.xticks(x_axis,rotation=45)\nplt.legend(loc='upper left',bbox_to_anchor=(0.1,1.02),ncol=3,frameon=False)\nplt.tight_layout()\nplt.savefig(\"line chart/png/518.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How much did the minimum wage increase from 2001 to 2004?",
            "output": "$0.95"
        }
    },
    {
        "chart_type": "line_chart",
        "imgname": "line_419",
        "img": "./line_chart/png/line_419.png",
        "topic": "Food and Beverage Industry",
        "title": " Revenue growth of food and beverage industry in the US from 2000 to 2003",
        "csv": "Year \\t Fast Food Revenue(billion dollars) \\t Beverage Revenue(billion dollars) \\t Grocery Revenue(billion dollars) \\t Restaurant Revenue(billion dollars) \\n 2000 \\t 3000 \\t 2500 \\t 2000 \\t 1000 \\n 2001 \\t 3500 \\t 2800 \\t 2200 \\t 1200 \\n 2002 \\t 4000 \\t 3200 \\t 2400 \\t 1400 \\n 2003 \\t 4500 \\t 3600 \\t 2600 \\t 1600 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart represents the revenue growth in the US food and beverage industry from 2000 to 2003. It shows four different sectors: fast food, beverages, groceries, and restaurants. In 2000, fast food revenue was at $3000 billion, beverage at $2500 billion, grocery at $2000 billion, and restaurant at $1000 billion. By 2003, the revenues increased across all sectors, with fast food reaching $4500 billion, beverages $3600 billion, grocery $2600 billion, and restaurant revenue climbing to $1600 billion."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate data\ndata = np.array([[2000, 3000,2500,2000,1000],[2001,3500,2800,2200,1200],[2002,4000,3200,2400,1400],[2003,4500,3600,2600,1600]])\n\n# Create figure\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(1,1,1)\n\n# Set x and y axis\nx = data[:, 0]\ny1 = data[:, 1]\ny2 = data[:, 2]\ny3 = data[:, 3]\ny4 = data[:, 4]\n\n# Set xticks\nplt.xticks(x, rotation=45)\n\n# Plot data\nax.plot(x, y1, label=\"Fast Food Revenue(billion dollars)\", color=\"blue\", linestyle=\"--\")\nax.plot(x, y2, label=\"Beverage Revenue(billion dollars)\", color=\"green\", linestyle=\"-.\")\nax.plot(x, y3, label=\"Grocery Revenue(billion dollars)\", color=\"red\", linestyle=\":\")\nax.plot(x, y4, label=\"Restaurant Revenue(billion dollars)\", color=\"orange\")\n\n# Add title and legend\nax.set_title(\"Revenue growth of food and beverage industry in the US from 2000 to 2003\")\nlegend=ax.legend(loc=\"upper right\", shadow=True, fontsize=\"small\", ncol=2, fancybox=True)\n\n# Set background grid\nax.grid(axis=\"both\", linestyle=\"-\", linewidth=\"0.5\", color=\"gray\")\n\n# Resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"line chart/png/168.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "In which year did the grocery revenue reach 2400 billion dollars?",
            "output": "2002"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_340",
        "img": "./pie_chart/png/pie_340.png",
        "topic": "Science and Engineering",
        "title": " Distribution of Science and Engineering Fields in 2023",
        "csv": "Fields \\t Percentage \\n Computer Science \\t 25% \\n Mathematics \\t 20% \\n Engineering \\t 35% \\n Physics \\t 15% \\n Chemistry \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of different science and engineering fields in 2023 by percentage. Computer Science accounts for 25%, Mathematics for 20%, Engineering for the highest percentage at 35%, Physics follows with 15%, and Chemistry has the smallest share at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\n\n# Create figure and a subplot\nfig, ax = plt.subplots(figsize=(8, 8))\n\n # Labels of each wedge\nlabels = ['Computer Science','Mathematics','Engineering','Physics','Chemistry']\n\n# Percentage of each wedge\nsizes = [25,20,35,15,5]\n\n# Colors for each wedge\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#a3acff']\n\n# Draw pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, \n                        autopct='%1.1f%%', \n                        colors=colors,\n                        shadow=True, \n                        startangle=90,\n                        radius=1.2,\n                        textprops={'fontsize': 12, 'color':'black'},\n                        wedgeprops={'linewidth': 2, 'edgecolor':'white'})\n\n# Make sure text is inside the plot\nplt.setp(autotexts, size=10, weight=\"bold\")\n\n# Legend\npatches = [mpatches.Patch(color=colors[i], label=labels[i]) for i in range(len(labels))]\nplt.legend(handles=patches, bbox_to_anchor=(1.2, 0.5), fontsize=10)\n\n# Title\nplt.title('Distribution of Science and Engineering Fields in 2023', fontsize=15, y=1.08)\n\n# Tight layout\nplt.tight_layout()\n\n# Save figure\nplt.savefig('pie chart/png/530.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage difference between Computer Science and Mathematics fields?",
            "output": "5%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_245",
        "img": "./pie_chart/png/pie_245.png",
        "topic": "Social Sciences and Humanities",
        "title": " Education Level Distribution in the USA, 2023",
        "csv": "Education Level \\t Percentage \\n High School \\t 25% \\n Associate's Degree \\t 20% \\n Bachelor's Degree \\t 30% \\n Master's Degree \\t 15% \\n Doctoral Degree \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of education levels in the USA for the year 2023. The segments represent the following percentages: High School graduates make up 25%, Associate's Degree holders account for 20%, individuals with a Bachelor's Degree constitute 30%, those with a Master's Degree represent 15%, and Doctoral Degree holders make up 10% of the chart."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['High School', \"Associate's Degree\",\"Bachelor's Degree\",\"Master's Degree\",\"Doctoral Degree\"]\nsizes = [25,20,30,15,10]\ncolors  = ['#FFD700','#FFA500','#FF8C00','#FF4500','#FF0000']\n\nplt.figure(figsize=(6,4))\nplt.pie(sizes, colors=colors, autopct='%1.1f%%',labels=labels,startangle=90,pctdistance=0.6,labeldistance=1.1,center=(0.5,0.5))\nplt.title(\"Education Level Distribution in the USA, 2023\",fontsize=18) \nplt.axis('equal')\nplt.tight_layout()\nplt.xticks(np.arange(0,1.1,0.1))\nplt.savefig(\"pie chart/png/61.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the population has attained a Bachelor's degree or higher?",
            "output": "55%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_229",
        "img": "./pie_chart/png/pie_229.png",
        "topic": "Education and Academics",
        "title": " Percentage of Students at Different Levels of Education in the USA, 2023",
        "csv": "Grade Level \\t Percentage \\n Elementary \\t 35% \\n Middle School \\t 30% \\n High School \\t 20% \\n College \\t 10% \\n Graduate School \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of students across various educational levels in the USA for the year 2023. Elementary students make up 35% of the population, followed by middle school students at 30%. High school students account for 20%, whereas college students represent 10%. Lastly, graduate school students comprise 5% of the student population."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111)\nax.axis(\"equal\")\nlabels = [\"Elementary\", \"Middle School\", \"High School\", \"College\", \"Graduate School\"]\npcts = [35, 30, 20, 10, 5]\nax.pie(pcts, labels=labels, autopct='%1.1f%%', startangle=90, pctdistance=0.85, labeldistance=1.1)\nax.set_title(\"Percentage of Students at Different Levels of Education in the USA, 2023\")\nax.legend(bbox_to_anchor=(1.2, 1))\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.savefig(\"pie chart/png/490.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How much larger is the percentage of Elementary students compared to High School students?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_425",
        "img": "./pie_chart/png/pie_425.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Allocation of Donations for Non-profit Organizations in the US, 2023",
        "csv": "Categories \\t Percentage \\n Animal Welfare \\t 20% \\n Education \\t 25% \\n Humanitarianism \\t 30% \\n Healthcare \\t 15% \\n Arts & Culture \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart shows the allocation of donations for non-profit organizations in the US for the year 2023. It illustrates the percentage distribution across five categories: Animal Welfare at 20%, Education at 25%, Humanitarianism at 30%, Healthcare at 15%, and Arts & Culture at 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nlabels = [\"Animal Welfare\", \"Education\", \"Humanitarianism\", \"Healthcare\", \"Arts & Culture\"]\nsizes = [20, 25, 30, 15, 10]\n\nfig = plt.figure(figsize=(10, 7))\nax = fig.add_subplot()\nax.pie(sizes, labels=labels, autopct=\"%1.1f%%\", wedgeprops={\"edgecolor\": \"black\"}, textprops={'fontsize': 14, 'wrap': True, 'rotation': 45})\n\nax.set_title(\"Allocation of Donations for Non-profit Organizations in the US, 2023\")\n\nplt.tight_layout()\nplt.savefig('pie chart/png/215.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much percentage is allocated to Healthcare?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_66",
        "img": "./pie_chart/png/pie_66.png",
        "topic": "Agriculture and Food Production",
        "title": " Major Crop Production in the USA, 2023",
        "csv": "Crops \\t Percentage \\n Rice \\t 25% \\n Wheat \\t 20% \\n Maize \\t 15% \\n Soybean \\t 10% \\n Sorghum \\t 10% \\n Barley \\t 10% \\n Millet \\t 5% \\n Oats \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This pie chart represents the major crop production in the USA for 2023 by percentage. Rice comprises 25% of the total, making it the largest segment, followed by wheat at 20%. Maize accounts for 15% of the crop production, whereas soybean, sorghum, and barley each represent 10%. The smaller portions consist of millet and oats, each at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\n# Create figure\nfig=plt.figure(figsize=(10,8))\n\n# Data\ncrops=[\"Rice\",\"Wheat\",\"Maize\",\"Soybean\",\"Sorghum\",\"Barley\",\"Millet\",\"Oats\"]\npercentage=[25,20,15,10,10,10,5,5]\n\n# Plot Pie Chart\nplt.pie(percentage,labels=crops,autopct='%1.1f%%',textprops={'fontsize': 14,'wrap':True,'rotation':45},labeldistance=1.1)\n\n# Set Title\nplt.title(\"Major Crop Production in the USA, 2023\",fontsize=14)\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('pie chart/png/246.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of crop production is made up by wheat?",
            "output": "20%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_418",
        "img": "./pie_chart/png/pie_418.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Distribution of Charitable Causes in the United States, 2023",
        "csv": "Charitable Causes \\t Percentage \\n Education \\t 20 \\n Healthcare \\t 25 \\n Human Rights \\t 15 \\n Environment \\t 20 \\n Poverty Alleviation \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of charitable causes in the United States for the year 2023. The chart is segmented to show the percentage allocation to various sectors: Education receives 20%, Healthcare is allocated 25%, Human Rights has 15%, Environment also takes a 20% share, and Poverty Alleviation is assigned 20%. Each sector is likely represented by a different color slice on the pie chart."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ncauses = [\"Education\", \"Healthcare\", \"Human Rights\", \"Environment\", \"Poverty Alleviation\"]\npercentages = [20, 25, 15, 20, 20]\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111)\nax.pie(percentages, labels=causes, autopct='%1.1f%%', startangle=90, textprops={'fontsize': 14})\nax.axis('equal') \nplt.title(\"Distribution of Charitable Causes in the United States, 2023\")\nplt.tight_layout()\nplt.savefig(\"pie chart/png/283.png\")\nplt.xticks(rotation=45)\nplt.show()\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of charitable contributions is allocated to Healthcare?",
            "output": "25%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_257",
        "img": "./pie_chart/png/pie_257.png",
        "topic": "Manufacturing and Production",
        "title": " Breakdown of Production Technologies in the Manufacturing Sector, 2023",
        "csv": "Production \\t Percentage \\n Manufacturing \\t 30% \\n Distribution \\t 20% \\n Logistics \\t 20% \\n Machinery \\t 15% \\n Automation \\t 10% \\n Robotics \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the breakdown of different production technologies utilized within the manufacturing sector in 2023. It highlights six categories with corresponding percentages: Manufacturing constitutes 30% of the sector, Distribution and Logistics each make up 20%, Machinery accounts for 15%, Automation constitutes 10%, and Robotics represents the smallest portion at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\n\n# Create figure before plotting\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Plot the data\nlabels = ['Manufacturing', 'Distribution', 'Logistics', 'Machinery', 'Automation', 'Robotics']\nsizes = [30, 20, 20, 15, 10, 5]\nexplode = (0.1, 0, 0, 0, 0, 0)\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax.axis('equal')\n\n# Set the legend\nmanufacturing = mpatches.Patch(color='#ffb000', label='Manufacturing')\ndistribution = mpatches.Patch(color='#ff7800', label='Distribution')\nlogistics = mpatches.Patch(color='#ff7800', label='Logistics')\nmachinery = mpatches.Patch(color='#ff7800', label='Machinery')\nautomation = mpatches.Patch(color='#ff7800', label='Automation')\nrobotics = mpatches.Patch(color='#ff7800', label='Robotics')\nplt.legend(handles=[manufacturing, distribution, logistics, machinery, automation, robotics], loc=\"best\")\n\n# Set the title\nplt.title(\"Breakdown of Production Technologies in the Manufacturing Sector, 2023\")\n\n# Start to show the image, and automatically resize the image by tight_layout()\nplt.xticks(rotation='vertical')\nplt.tight_layout()\n\n# Save the image as pie chart/png/414.png\nplt.savefig('pie chart/png/414.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage attributed to Logistics in the manufacturing sector?",
            "output": "20%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_145",
        "img": "./pie_chart/png/pie_145.png",
        "topic": "Education and Academics",
        "title": " Education Level Distribution in the USA, 2023",
        "csv": "Education Level \\t Percentage \\n Pre-K \\t 5% \\n K-12 \\t 35% \\n Associate's Degree \\t 10% \\n Bachelor's Degree \\t 20% \\n Master's Degree \\t 15% \\n Doctorate Degree \\t 15% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This pie chart presents the distribution of education levels in the USA in 2023. Pre-K education accounts for 5% of the distribution, while K-12 covers a much larger share at 35%. Those with an Associate's degree make up 10%, and those having a Bachelor's degree represent 20%. Both Master's and Doctorate degrees account for a significant portion as well, each with 15% of the distribution."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\n# Create figure\nfig = plt.figure(figsize=(15, 8))\nax1 = fig.add_subplot()\n\n# Data\neducation = [\"Pre-K\", \"K-12\", \"Associate's Degree\", \"Bachelor's Degree\", \"Master's Degree\", \"Doctorate Degree\"]\npercentage = [5, 35, 10, 20, 15, 15]\n\n# Plot\nax1.pie(percentage, labels=education, autopct='%1.1f%%', textprops={'wrap':True, 'rotation':90})\nax1.set_title(\"Education Level Distribution in the USA, 2023\")\n\n# Axis\nax1.xaxis.set_ticks_position('none')\nax1.yaxis.set_ticks_position('none')\n\n# Resize figure\nplt.tight_layout()\n\n# Save and clear\nplt.savefig(\"pie chart/png/415.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the population has a graduate-level education (Master's or Doctorate degree) in 2023?",
            "output": "30%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_436",
        "img": "./pie_chart/png/pie_436.png",
        "topic": "Government and Public Policy",
        "title": " Distribution of Tax Revenue in the USA, 2023",
        "csv": "Taxation \\t Percentage \\n Personal Income Tax \\t 45% \\n Corporate Tax \\t 35% \\n Sales Tax \\t 15% \\n Property Tax \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of tax revenue sources in the USA for the year 2023. The chart comprises four segments representing different types of taxation: Personal Income Tax at 45%, Corporate Tax at 35%, Sales Tax at 15%, and Property Tax at 5%. Each segment's size is proportional to its contribution to the overall tax revenue."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = [\"Personal Income Tax\",\"Corporate Tax\",\"Sales Tax\",\"Property Tax\"]\nsizes = [45,35,15,5]\n\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111)\n\nax.pie(sizes, labels = labels, autopct='%1.1f%%',\n        startangle=90, pctdistance=0.85,\n        wedgeprops=dict(width=0.5, edgecolor='w'))\n\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\nplt.title(\"Distribution of Tax Revenue in the USA, 2023\")\nplt.axis('equal')\nplt.tight_layout()\nplt.xticks([])\nplt.savefig(\"pie chart/png/32.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage of the Property Tax?",
            "output": "5%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_4",
        "img": "./pie_chart/png/pie_4.png",
        "topic": "Human Resources and Employee Management",
        "title": " Distribution of Employee Types in the USA in 2023",
        "csv": "Employment Status \\t Percentage \\n Full-Time Employees \\t 55% \\n Part-Time Employees \\t 30% \\n Contractors \\t 10% \\n Freelancers \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of employment types in the USA for the year 2023. The data presents Full-Time Employees as comprising 55% of the workforce, Part-Time Employees at 30%, Contractors at 10%, and Freelancers making up 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create a dataframe\ndf = pd.DataFrame({'Employment Status':['Full-Time Employees', 'Part-Time Employees', 'Contractors', 'Freelancers'], \n                   'Percentage':[55,30,10,5]})\n\n# Create the figure\nplt.figure(figsize=(8,8))\n\n# Plot the data\nplt.pie(df['Percentage'], labels=df['Employment Status'], autopct='%1.1f%%', startangle=90, textprops={'fontsize': 8},\n        wedgeprops={'linewidth': 1, 'edgecolor': 'black'}, rotatelabels=True, pctdistance=0.7, radius=1)\n\n# Add a legend\nplt.legend(df['Employment Status'],loc='lower right', bbox_to_anchor=(1.2, 0.5, 0.5, 0.5))\n\n# Set the title\nplt.title('Distribution of Employee Types in the USA in 2023', fontsize=14)\n\n# Resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('pie chart/png/331.png')\n\n# Clear the image\nplt.clf()"
        },
        "QA": {
            "input": "How much percentage of the employment does Part-Time Employees constitute?",
            "output": "30%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_333",
        "img": "./pie_chart/png/pie_333.png",
        "topic": "Manufacturing and Production",
        "title": " Distribution of Materials Used in Manufacturing in the USA, 2023",
        "csv": "Materials \\t Percentage \\n Steel \\t 30% \\n Plastic \\t 20% \\n Aluminum \\t 15% \\n Textiles \\t 10% \\n Glass \\t 10% \\n Other \\t 15% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of materials used in manufacturing in the USA in 2023. Steel accounts for the highest percentage at 30%, followed by plastic at 20%. Both aluminum and 'Other' materials are used at a rate of 15% each. Textiles and glass each make up 10% of the materials used in the manufacturing process."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# set the figure size and axis\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\n\n# set the data \ndata = {'Materials':['Steel', 'Plastic', 'Aluminum', 'Textiles', 'Glass', 'Other'],\n        'Percentage':[30, 20, 15, 10, 10, 15]}\n\n# create pie chart using data\nlabels = data['Materials']\nsizes = data['Percentage']\nexplode = (0.1, 0, 0, 0, 0, 0)\n\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90, textprops={'fontsize': 14})\n\n# set the title of the figure\nax.set_title(\"Distribution of Materials Used in Manufacturing in the USA, 2023\", fontsize=16)\n\n# set the legend\nax.legend(labels, loc=\"best\", bbox_to_anchor=(1, 0.5))\n\n# prevent the label from overlapping\nplt.xticks(rotation=-45)\nplt.tight_layout()\n\nplt.savefig(\"pie chart/png/492.png\")\n\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the materials used in manufacturing is Aluminum?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_431",
        "img": "./pie_chart/png/pie_431.png",
        "topic": "Education and Academics",
        "title": " Level of Education Distribution in the USA, 2023",
        "csv": "Level of Education \\t Percentage \\n Primary \\t 25 \\n Secondary \\t 35 \\n High School \\t 15 \\n University \\t 20 \\n Postgraduate \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of educational levels in the USA in 2023. It shows that 25% of individuals have achieved primary education, 35% secondary education, 15% high school education, 20% have a university degree, and 5% hold a postgraduate degree."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = {'Primary':25, 'Secondary':35, 'High School':15, 'University':20, 'Postgraduate':5}\n\nplt.figure(figsize=(10,10))\n\nlabels = list(data.keys())\nvalues = list(data.values())\n\nplt.pie(values,labels=labels,autopct='%1.1f%%')\nplt.title('Level of Education Distribution in the USA, 2023')\nplt.xticks(rotation=45, wrap=True)\nplt.tight_layout()\nplt.savefig('pie chart/png/431.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the percentage of people with Secondary education compared to University education?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_105",
        "img": "./pie_chart/png/pie_105.png",
        "topic": "Tourism and Hospitality",
        "title": " Popular Tourist Attractions in the USA, 2023",
        "csv": "Attractions \\t Percentage \\n Historical Sites \\t 30% \\n Natural Wonders \\t 25% \\n Museums \\t 15% \\n Theme Parks \\t 15% \\n Outdoor Activities \\t 10% \\n Shopping \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the popularity of different tourist attractions in the USA for 2023. Historical Sites lead with 30%, followed by Natural Wonders at 25%. Museums and Theme Parks both stand at 15%, while Outdoor Activities account for 10%. Shopping is the least popular, with 5% of the percentage share."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(8,8))\nattractions = ['Historical Sites','Natural Wonders','Museums','Theme Parks','Outdoor Activities','Shopping']\npercentage = [30,25,15,15,10,5]\nexplode = [0.1,0,0,0,0,0]\nplt.pie(percentage, explode=explode, labels=attractions, autopct='%1.1f%%',shadow=True, startangle=90)\nplt.title('Popular Tourist Attractions in the USA, 2023', fontsize=20, wrap=True)\nplt.axis('equal')\nplt.tight_layout()\nplt.xticks(rotation=45)\nplt.savefig(\"pie chart/png/390.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which category of popular tourist attractions has the smallest percentage in the USA, 2023?",
            "output": "Shopping"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_380",
        "img": "./pie_chart/png/pie_380.png",
        "topic": "Transportation and Logistics",
        "title": " Distribution of Cargo Transportation Modes in the USA, 2023",
        "csv": "Modes of Transportation \\t Percentage \\n Road \\t 45% \\n Rail \\t 30% \\n Air \\t 15% \\n Sea \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of cargo transportation modes in the USA in 2023. It shows four different modes with corresponding percentages: road at 45%, rail at 30%, air at 15%, and sea at 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data\nmodes = ['Road', 'Rail', 'Air', 'Sea']\npercentage = [45, 30, 15, 10]\n\n# Create figure\nfig = plt.figure(figsize=(6,6))\nax = fig.add_subplot()\n\n# Plot\nax.pie(percentage, labels=modes, autopct='%.2f%%',\n       textprops={'fontsize': 14, 'wrap': True, 'rotation': 90})\nax.set_title('Distribution of Cargo Transportation Modes in the USA, 2023')\n\n# Resize\nplt.tight_layout()\n\n# Save\nplt.savefig('pie chart/png/355.png')\n\n# Clear\nplt.cla()"
        },
        "QA": {
            "input": "What percentage of cargo transportation is done by Rail in the USA?",
            "output": "30%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_263",
        "img": "./pie_chart/png/pie_263.png",
        "topic": "Education and Academics",
        "title": " Distribution of Degree Types in the USA, 2023",
        "csv": "Degree Types \\t Percentage \\n Bachelor's Degree \\t 35% \\n Master's Degree \\t 25% \\n Doctoral Degree \\t 20% \\n Professional Degree \\t 10% \\n Certificate/Diploma \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of various degree types in the USA for 2023. It shows that 35% of the degrees are Bachelor's, followed by 25% being Master's degrees. Doctoral degrees make up 20%, while both Professional degrees and Certificates/Diplomas each account for 10% of the degrees.\n"
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\n\nlabels = ['Bachelor\\'s Degree', 'Master\\'s Degree', 'Doctoral Degree', 'Professional Degree', 'Certificate/Diploma']\npercentage = [35, 25, 20, 10, 10]\nexplode = (0.1, 0, 0, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Hogs')\n\n# Set figure size\nfig = plt.figure(figsize=(12, 8))\n\n# Set title\nplt.title(\"Distribution of Degree Types in the USA, 2023\")\n\n# Add subplot\ngs = gridspec.GridSpec(1, 1)\nax1 = plt.subplot(gs[0, 0])\n\n# Create pie chart\nax1.pie(percentage, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Display legend\nplt.legend(bbox_to_anchor=(1.0, 0.5), loc=\"center left\", fontsize=10)\n\n# Set x-ticks\nplt.xticks(rotation=45)\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save figure\nplt.savefig(\"pie chart/png/137.png\")\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of degrees are Bachelor's Degree according to the chart?",
            "output": "35%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_131",
        "img": "./pie_chart/png/pie_131.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Management Categories for Organizations in 2021",
        "csv": "Categories \\t Percentage \\n Recruiting \\t 25% \\n Onboarding \\t 20% \\n Training \\t 20% \\n Employee Engagement \\t 15% \\n Performance Management \\t 10% \\n Compensation and Benefits \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This pie chart illustrates the distribution of employee management categories across organizations in 2021. The categories include Recruiting at 25%, Onboarding and Training both at 20%, Employee Engagement at 15%, and Performance Management and Compensation and Benefits, each at 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(8,6))\ncategories = ['Recruiting', 'Onboarding', 'Training', 'Employee Engagement', 'Performance Management', 'Compensation and Benefits'] \npercentage = [25, 20, 20, 15, 10, 10]\n\nplt.pie(percentage, labels=categories, startangle=90, autopct='%.1f%%', rotatelabels=True, textprops={'fontsize': 14, 'wrap':True})\nplt.title('Employee Management Categories for Organizations in 2021', fontsize=16)\nplt.tight_layout()\nplt.savefig('pie chart/png/423.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the categories is dedicated to Employee Engagement?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_160",
        "img": "./pie_chart/png/pie_160.png",
        "topic": "Science and Engineering",
        "title": " Distribution of Engineering Disciplines in Academic Research, 2023",
        "csv": "Areas \\t Percentage \\n Computer Science \\t 45% \\n Electrical Engineering \\t 20% \\n Mechanical Engineering \\t 15% \\n Civil Engineering \\t 10% \\n Chemical Engineering \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of engineering disciplines in academic research for 2023. Computer Science represents the largest segment at 45% of the total distribution. Electrical Engineering accounts for 20%, while Mechanical Engineering and Civil Engineering each constitute 15% and 10% respectively. Chemical Engineering also makes up 10% of the academic research distribution in engineering fields."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nAreas=['Computer Science', 'Electrical Engineering', 'Mechanical Engineering', 'Civil Engineering', 'Chemical Engineering']\nPercentage=[45, 20, 15, 10, 10]\n\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111)\nax.pie(Percentage, labels=Areas, autopct='%.2f%%', textprops={'fontsize':13, 'wrap':True, 'rotation':30})\nplt.title(\"Distribution of Engineering Disciplines in Academic Research, 2023\")\nplt.tight_layout()\nplt.xticks([])\nplt.savefig('pie chart/png/516.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of academic research is attributed to Chemical Engineering?",
            "output": "10%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_218",
        "img": "./pie_chart/png/pie_218.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing Industry Distribution in the USA, 2023",
        "csv": "Production \\t Percentage \\n Automotive \\t 20 \\n Electronics \\t 15 \\n Food and Beverage \\t 15 \\n Apparel \\t 10 \\n Pharmaceuticals \\t 10 \\n Aerospace \\t 10 \\n Construction \\t 10 \\n Other \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of different sectors within the manufacturing industry in the USA for the year 2023. Automotive represents 20% of production, matching the 'Other' category which also constitutes 20%. Electronics, Food and Beverage both account for 15% each. Apparel, Pharmaceuticals, Aerospace, and Construction industries each hold a share of 10% in the production percentages."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(7,7))\nplt.subplot()\n\nlabels = ['Automotive', 'Electronics', 'Food and Beverage', 'Apparel', 'Pharmaceuticals', 'Aerospace', 'Construction', 'Other']\nsizes = [20, 15, 15, 10, 10, 10, 10, 20]\n\nplt.pie(sizes, labels=labels, autopct='%.2f%%', textprops={'fontsize': 12}, pctdistance=0.8, labeldistance=1.1, \n        rotatelabels=True, startangle=90, wedgeprops={'linewidth':2, 'edgecolor':'white'})\n\nplt.title('Manufacturing Industry Distribution in the USA, 2023', fontsize=14)\n\nplt.tight_layout()\nplt.savefig('pie chart/png/105.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much greater is the production percentage of Automotive compared to Pharmaceuticals?",
            "output": "10%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_492",
        "img": "./pie_chart/png/pie_492.png",
        "topic": "Real Estate and Housing Market",
        "title": " Age Distribution of Home Owners in the USA, 2023",
        "csv": "Age Group \\t Percentage \\n 18-29 \\t 25% \\n 30-45 \\t 35% \\n 46-60 \\t 25% \\n 60 and Above \\t 15% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the age distribution of home owners in the USA for the year 2023. Four distinct age groups are presented: 18-29 years old, constituting 25% of home owners; 30-45 years old, representing the largest portion at 35%; 46-60 years old, also making up 25%; and those 60 and above, accounting for the smallest segment at 15%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\n\n# Create a figure\nfig = plt.figure(figsize=(10,7))\n\n# Plot pie chart\nplt.pie(x=[25,35,25,15], \n        labels=['18-29','30-45','46-60','60 and Above'], \n        autopct='%.1f%%', \n        textprops={'fontsize':14}, \n        startangle=90, \n        counterclock=False, \n        wedgeprops={\"edgecolor\": \"black\"}, \n        explode=[0.02, 0, 0, 0])\n\n# Add legend\nplt.legend(labels=['18-29','30-45','46-60','60 and Above'], \n           loc='upper right', \n           bbox_to_anchor=(1.2,1.1), \n           fontsize=14, \n           bbox_transform=fig.transFigure)\n\n# Add title\nplt.title('Age Distribution of Home Owners in the USA, 2023', fontsize=18)\n\n# Resize image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('pie chart/png/230.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage of home owners in the \"60 and Above\" age group?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_463",
        "img": "./pie_chart/png/pie_463.png",
        "topic": "Science and Engineering",
        "title": " Breakdown of Science and Engineering Fields in the US, 2023",
        "csv": "Areas \\t Percentage \\n Materials Science \\t 20% \\n Mechanical Engineering \\t 15% \\n Computer Science \\t 25% \\n Electrical Engineering \\t 15% \\n Civil Engineering \\t 10% \\n Chemical Engineering \\t 10% \\n Aerospace Engineering \\t 5% \\n Nanotechnology \\t 5% \\n Biomedical Engineering \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the breakdown of various science and engineering fields in the US for the year 2023. Materials Science accounts for 20% of the distribution, while Mechanical and Electrical Engineering each hold 15%. Computer Science leads with a 25% share. Civil and Chemical Engineering are at 10% each, and Aerospace Engineering, Nanotechnology, and Biomedical Engineering each make up 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mticker\n\nareas = ['Materials Science', 'Mechanical Engineering', 'Computer Science', 'Electrical Engineering', 'Civil Engineering', \n         'Chemical Engineering', 'Aerospace Engineering', 'Nanotechnology', 'Biomedical Engineering']\npercentage = [20, 15, 25, 15, 10, 10, 5, 5, 5]\n\nplt.figure(figsize=(8,8))\nax = plt.subplot()\nax.pie(percentage, labels=areas, startangle=90, autopct='%.1f%%', pctdistance=0.8, labeldistance=1.05, \n       textprops={'fontsize': 12, 'wrap': True, 'rotation': 90})\n\nax.set_title('Breakdown of Science and Engineering Fields in the US, 2023')\nax.legend(loc='upper left', bbox_to_anchor=(0.7, 0.9))\nplt.tight_layout()\nplt.savefig('pie chart/png/521.png', pad_inches=1, bbox_inches='tight')\n\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the percentage of Computer Science compared to Chemical Engineering?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_474",
        "img": "./pie_chart/png/pie_474.png",
        "topic": "Law and Legal Affairs",
        "title": " Distribution of Laws in the United States, 2023",
        "csv": "Laws \\t Percentage \\n Constitutional Law \\t 20% \\n Contract Law \\t 15% \\n Criminal Law \\t 30% \\n Tax Law \\t 15% \\n Human Rights Law \\t 10% \\n Tort Law \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of various laws by percentage in the United States for 2023. Constitutional Law comprises 20%, Contract Law 15%, Criminal Law the largest segment at 30%, Tax Law 15%, Human Rights Law 10%, and Tort Law also at 10%. Each sector of the chart represents a different area of law, reflecting its proportional presence or emphasis within the United States legal framework."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,6))\nax = plt.subplot()\npercentages = [20, 15, 30, 15, 10, 10]\nlaws = [\"Constitutional Law\", \"Contract Law\", \"Criminal Law\", \"Tax Law\", \"Human Rights Law\", \"Tort Law\"]\nplt.pie(percentages, labels=laws, autopct='%1.1f%%', startangle=90, textprops={'wrap': True, 'rotation': 0, 'fontsize': 16})\nplt.title('Distribution of Laws in the United States, 2023', fontsize=20)\nplt.tight_layout()\nplt.savefig('pie chart/png/244.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the percentage of Criminal Law compared to Human Rights Law?",
            "output": "20%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_407",
        "img": "./pie_chart/png/pie_407.png",
        "topic": "Social Sciences and Humanities",
        "title": " Educational Attainment Rates in the USA, 2023",
        "csv": "Education Level \\t Percentage \\n High School \\t 25% \\n Bachelor Degree \\t 30% \\n Master Degree \\t 20% \\n Doctoral Degree \\t 15% \\n Post-Doctoral Degree \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the educational attainment rates in the USA for 2023. It shows the percentage of people with various education levels: High School at 25%, Bachelor Degree at 30%, Master Degree at 20%, Doctoral Degree at 15%, and Post-Doctoral Degree at 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['High School', 'Bachelor Degree', 'Master Degree', 'Doctoral Degree', 'Post-Doctoral Degree']\nsizes = [25, 30, 20, 15, 10]\n\nfig1, ax1 = plt.subplots(figsize=(10, 8))\nax1.pie(sizes, labels=labels, autopct='%1.1f%%', textprops={'fontsize': 14}, startangle=90, wedgeprops={'linewidth': 0.7, 'edgecolor':'white'})\nplt.title('Educational Attainment Rates in the USA, 2023', fontsize=16)\nplt.legend(loc='upper right', bbox_to_anchor=(1.2, 1), fontsize=14)\nplt.tight_layout()\nplt.savefig('pie chart/png/51.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of individuals have a Bachelor's Degree?",
            "output": "30%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_267",
        "img": "./pie_chart/png/pie_267.png",
        "topic": "Technology and the Internet",
        "title": " Usage of Digital Devices in 2021",
        "csv": "Devices \\t Usage \\n Desktops \\t 20% \\n Laptops \\t 30% \\n Tablets \\t 15% \\n Smartphones \\t 35% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the usage percentages of different digital devices in 2021. Desktops account for 20% of the usage, while laptops lead to a slightly higher percentage at 30%. Tablets are used less, taking up 15% of the total usage. Smartphones dominate the chart with the highest proportion of use at 35%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(1, 1, 1)\n\ndevices = [\"Desktops\", \"Laptops\", \"Tablets\", \"Smartphones\"]\nusage = [20, 30, 15, 35]\n\nax.pie(usage, labels=devices, autopct=\"%.2f%%\", textprops={'fontsize': 14, 'wrap': True}, shadow=True, rotatelabels=True)\nax.set_title(\"Usage of Digital Devices in 2021\", fontsize=20)\n\nplt.tight_layout()\nplt.xticks([])\n\nplt.savefig(\"pie chart/png/131.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined usage percentage of Desktops and Tablets?",
            "output": "35%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_34",
        "img": "./pie_chart/png/pie_34.png",
        "topic": "Tourism and Hospitality",
        "title": " Global Tourism Share in 2023",
        "csv": "Countries \\t Tourism Share \\n United States \\t 25% \\n Spain \\t 15% \\n France \\t 13% \\n China \\t 10% \\n Germany \\t 9% \\n Italy \\t 7% \\n United Kingdom \\t 6% \\n Mexico \\t 4% \\n Canada \\t 4% \\n Other \\t 17% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of global tourism share in 2023 among various countries and regions. The United States leads with a 25% share, followed by Spain at 15% and France at 13%. China accounts for 10%, while Germany and Italy hold 9% and 7% respectively. The United Kingdom has a 6% share, with Mexico and Canada each capturing 4%. The remaining 17% of the tourism share is represented by a segment labeled 'Other.'"
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\n# Create figure\nfig = plt.figure(figsize=(12, 9))\nax = fig.add_subplot(111)\n\n# Plotting of pie chart\ndata = [25, 15, 13, 10, 9, 7, 6, 4, 4, 17]\nlabels = ['United States', 'Spain', 'France', 'China', 'Germany', 'Italy', 'United Kingdom', 'Mexico', 'Canada', 'Other']\nax.pie(data, labels=labels, autopct='%.2f%%', shadow=True, startangle=90, textprops={'fontsize': 14})\n\n# Configure the figure\nplt.title('Global Tourism Share in 2023', fontsize=18)\nplt.tight_layout()\nplt.xticks(rotation=15, fontsize=14)\n\n# Save figure\nplt.savefig('pie chart/png/378.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined tourism share of France and Germany?",
            "output": "22%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_270",
        "img": "./pie_chart/png/pie_270.png",
        "topic": "Science and Engineering",
        "title": " Distribution of Science and Engineering Disciplines in Higher Education, 2023",
        "csv": "Components \\t Percentage \\n Mathematics \\t 25% \\n Computer Science \\t 20% \\n Engineering \\t 35% \\n Physics \\t 15% \\n Chemistry \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This pie chart illustrates the distribution of science and engineering disciplines in higher education for the year 2023. Mathematics accounts for 25%, Computer Science for 20%, Engineering takes the largest share with 35%, Physics makes up 15%, and Chemistry the smallest at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\n\nfig = plt.figure(figsize=(12,8))\nax = fig.add_subplot(111)\n\nlabels=['Mathematics','Computer Science','Engineering','Physics','Chemistry']\nsizes=[25,20,35,15,5]\nexplode=[0.1,0,0,0,0]\n\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)\nax.axis('equal') \nax.set_title('Distribution of Science and Engineering Disciplines in Higher Education, 2023', fontsize=14)\n\nplt.legend(labels, loc=\"best\", bbox_to_anchor=(1, 1))\nplt.tight_layout()\nplt.savefig('pie chart/png/62.png', bbox_inches='tight')\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined percentage for Mathematics and Computer Science?",
            "output": "45%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_13",
        "img": "./pie_chart/png/pie_13.png",
        "topic": "Human Resources and Employee Management",
        "title": " Gender Distribution of Employees in the US, 2023",
        "csv": "Employee Gender Distribution \\t Percentage \\n Female \\t 45% \\n Male \\t 55% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the gender distribution of employees in the US for the year 2023. It is divided into two sections showing Female and Male employees' percentages. Female employees make up 45% of the workforce, while Male employees constitute a slightly higher percentage at 55%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['Female','Male']\nsizes = [45,55]\ncolors = ['#ff9999','#66b3ff']\nplt.figure(figsize=(10,7))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\nplt.title('Gender Distribution of Employees in the US, 2023', fontsize=14, wrap=True)\nplt.axis('equal')\nplt.tight_layout()\nplt.savefig('pie chart/png/389.png') \nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage of female employees according to the data?",
            "output": "45%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_277",
        "img": "./pie_chart/png/pie_277.png",
        "topic": "Social Sciences and Humanities",
        "title": " Gender Employment Rate in the USA, 2023",
        "csv": "Gender \\t Employment Rate \\n Male \\t 60% \\n Female \\t 40% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the gender employment rate in the USA for 2023, depicting two categories: Male and Female. Males have a 60% employment rate, while females have a 40% employment rate. The chart presents a visual comparison of employment distribution between the genders."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport matplotlib\nplt.figure(figsize=(8, 8)) \nax = plt.subplot(111) \nax.pie([60, 40], labels=['Male', 'Female'], autopct='%.2f%%', \n       pctdistance=0.7, labeldistance=1.2, \n       rotatelabels=True, textprops={'fontsize': 12},\n       wedgeprops={'linewidth': 2, 'edgecolor': 'white'}, \n       startangle=90) \nplt.title(\"Gender Employment Rate in the USA, 2023\", fontsize=14, wrap=True) \nplt.xticks(rotation=90)\nplt.tight_layout()\nplt.savefig('pie chart/png/129.png') \nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the employment rate is attributed to females?",
            "output": "40%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_427",
        "img": "./pie_chart/png/pie_427.png",
        "topic": "Business and Finance",
        "title": " Investment Portfolio Allocation in the USA, 2023",
        "csv": "Investment Type \\t Percentage \\n Equity \\t 30% \\n Bonds \\t 30% \\n Mutual funds \\t 20% \\n ETFs \\t 10% \\n Cash \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the Investment Portfolio Allocation in the USA for 2023. Equity and Bonds each represent 30% of the portfolio, occupying the largest shares. Mutual Funds account for 20%, while ETFs (Exchange-Traded Funds) and Cash each make up 10% of the investment distribution."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Patch\n\nfig = plt.figure(figsize=(6,6))\nax = fig.add_subplot(111)\n\nlabels = ['Equity','Bonds','Mutual funds','ETFs','Cash']\nsizes = [30,30,20,10,10]\ncolors = ['red','orange','yellow','green','blue']\n\nax.pie(sizes, colors=colors, labels=labels, autopct='%1.f%%',pctdistance=0.85, labeldistance=1.05,\n        rotatelabels=True, textprops={'fontsize': 11, 'color':'black'})\n\nax.legend(labels,\n          title=\"Investment Type\",\n          bbox_to_anchor=(1, 0.5),\n          loc=\"center right\",\n          fontsize=11,\n          framealpha=1)\n\nplt.title('Investment Portfolio Allocation in the USA, 2023')\nplt.tight_layout()\nplt.savefig('pie chart/png/162.png')\nplt.clf()"
        },
        "QA": {
            "input": "What type of investment has the smallest percentage in the portfolio?",
            "output": "ETFs and Cash"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_473",
        "img": "./pie_chart/png/pie_473.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Types of Donations to Nonprofit Organizations in the USA,2023",
        "csv": "Donation Type \\t Percentage \\n Monetary Donations \\t 50% \\n In-kind Donations \\t 25% \\n Volunteering Time \\t 15% \\n Gift of Stock \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the proportion of different types of donations to nonprofit organizations in the USA in 2023. Monetary Donations make up 50% of the contributions, In-kind Donations account for 25%, Volunteering Time represents 15%, and the Gift of Stock comprises 10% of the total donations."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport numpy as np\n\n# setting figure size\nfig = plt.figure(figsize=(7,7))\n\n# plotting pie chart\nax = fig.add_subplot(111)\nlabels=['Monetary Donations','In-kind Donations','Volunteering Time','Gift of Stock']\nvalues= [50,25,15,10]\nax.pie(values,labels=labels, autopct='%1.1f%%', textprops={'fontsize': 12})\n\n# setting title\nax.set_title('Types of Donations to Nonprofit Organizations in the USA,2023')\n\n# setting legend\ndonation_type = mpatches.Patch(color='white', label='Donation Type')\nax.legend(handles=[donation_type], loc=\"upper right\")\n\n# setting font\nplt.rcParams[\"font.family\"] = 'sans-serif'\nplt.rcParams[\"font.sans-serif\"] = 'Arial'\n\n# setting rotation for labels\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# setting image to show\nplt.tight_layout()\n\n# saving figure\nplt.savefig('pie chart/png/13.png')\n\n# clearing current image state\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the donations is In-kind Donations?",
            "output": "25%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_64",
        "img": "./pie_chart/png/pie_64.png",
        "topic": "Real Estate and Housing Market",
        "title": " Distribution of Homeownership Types in the USA, 2023",
        "csv": "Homeownership Type \\t Percentage \\n Single-Family Homes \\t 60% \\n Townhomes \\t 15% \\n Condominiums \\t 15% \\n Multi-Family Homes \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of different types of homeownership in the USA for the year 2023. Single-Family Homes constitute 60% of homeownership, making it the most common type. Townhomes and Condominiums each represent 15% of the market share. Multi-Family Homes account for the remaining 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\n# create figure\nplt.figure(figsize=(10, 8))\n\n# set x, y, label and explode\nx = [\"Single-Family Homes\",\"Townhomes\",\"Condominiums\",\"Multi-Family Homes\"]\ny = [60,15,15,10]\nlabel = [\"Single-Family Homes\",\"Townhomes\",\"Condominiums\",\"Multi-Family Homes\"]\nexplode = [0.1, 0, 0, 0]\n\n# set font size\nplt.rc('font', size=12)\n\n# draw pie chart\nplt.pie(y, explode=explode, labels=label,autopct='%1.1f%%', startangle=90, shadow=True, textprops={'fontsize': 12, 'color': 'black'})\n\n# set title\nplt.title(\"Distribution of Homeownership Types in the USA, 2023\")\n\n# set position of legend\nplt.legend(loc=\"upper right\", bbox_to_anchor=(1.2, 1))\n\n# set tight layout\nplt.tight_layout()\n\n# save the figure\nplt.savefig('pie chart/png/38.png')\n\n# clear the figure\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the homeownership is made up of Multi-Family Homes?",
            "output": "10%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_95",
        "img": "./pie_chart/png/pie_95.png",
        "topic": "Agriculture and Food Production",
        "title": " Crop Distribution in the Agricultural Industry, 2023",
        "csv": "Crops \\t Percentage \\n Grains \\t 50% \\n Vegetables \\t 15% \\n Fruits \\t 20% \\n Dairy \\t 10% \\n Livestock \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This pie chart illustrates the crop distribution in the agricultural industry for 2023. Grains make up the largest portion with 50%, followed by fruits at 20%, and vegetables at 15%. Dairy products account for 10% of the distribution, while livestock is the smallest segment at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111)\n\nlabels = ['Grains','Vegetables','Fruits','Dairy','Livestock']\nsizes = [50,15,20,10,5]\ncolors = ['yellowgreen','lightcoral','lightskyblue','gold','pink']\nexplode = (0.05, 0, 0, 0, 0)\n\npatches, texts, autotexts = ax.pie(sizes,explode=explode,labels=labels,colors=colors,autopct='%1.1f%%',shadow=True,startangle=90)\nax.axis('equal')\nfor text in texts:\n    text.set_wrap(True)\n    text.set_rotation(0)\nax.set_title(\"Crop Distribution in the Agricultural Industry, 2023\")\nplt.tight_layout()\nplt.savefig(\"pie chart/png/177.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the agricultural industry is made up of fruits?",
            "output": "20%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_368",
        "img": "./pie_chart/png/pie_368.png",
        "topic": "Science and Engineering",
        "title": " Distribution of Scientific Fields in the USA, 2023",
        "csv": "Fields of Science \\t Percentage \\n Physics \\t 20% \\n Chemistry \\t 15% \\n Biology \\t 25% \\n Computer Science \\t 15% \\n Mathematics \\t 15% \\n Engineering \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart represents the distribution of scientific fields in the USA for the year 2023. It shows that Biology accounts for 25% of the distribution, followed by Physics with 20%. Chemistry and Computer Science both make up 15% each, alongside Mathematics, which also constitutes 15%, while Engineering holds the smallest share at 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.text as text\n\nlabels = [\"Physics\",\"Chemistry\",\"Biology\",\"Computer Science\",\"Mathematics\",\"Engineering\"]\nsizes = [20,15,25,15,15,10]\n\nfig=plt.figure(figsize=(10,10))\nax = fig.add_subplot(111)\nax.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90, textprops={'fontsize': 15, 'wrap': True, 'rotation': 0}) \nax.axis('equal') \nax.set_title(\"Distribution of Scientific Fields in the USA, 2023\")\nplt.tight_layout()\nplt.savefig('pie chart/png/517.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which field of science has the largest percentage according to the data?",
            "output": "Biology"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_462",
        "img": "./pie_chart/png/pie_462.png",
        "topic": "Social Sciences and Humanities",
        "title": " Educational Attainment in the USA, 2023",
        "csv": "Education Level \\t Percentage \\n High School \\t 20 \\n Associate Degree \\t 25 \\n Bachelor Degree \\t 30 \\n Master Degree \\t 20 \\n Doctoral Degree \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the educational attainment in the USA for the year 2023. It shows the percentage distribution of different education levels among the population. According to the data, 20% have a high school diploma, 25% possess an associate degree, the highest proportion, 30%, hold a bachelor's degree, 20% have obtained a master's degree, and 5% have earned a doctoral degree."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['High School','Associate Degree','Bachelor Degree','Master Degree','Doctoral Degree']\ndata = [20,25,30,20,5]\n\nfig = plt.figure(figsize=(6,6))\nplt.pie(data, labels=labels, autopct='%1.1f%%', startangle=90, explode=(0,0,0.1,0,0))\nplt.title('Educational Attainment in the USA, 2023')\nplt.legend(labels, \n           bbox_to_anchor=(1,0.7), \n           loc=\"lower right\", \n           fontsize=11, \n           bbox_transform=fig.transFigure)\nplt.tight_layout()\nplt.savefig('pie chart/png/365.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the total percentage of people with at least a Bachelor Degree?",
            "output": "55%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_156",
        "img": "./pie_chart/png/pie_156.png",
        "topic": "Food and Beverage Industry",
        "title": " Distribution of Food categories in the Global Market, 2023",
        "csv": "Food \\t Percentage \\n Dairy Products \\t 20% \\n Fruits and Vegetables \\t 20% \\n Bakery items \\t 15% \\n Meat and Fish \\t 15% \\n Beverages \\t 15% \\n Snacks \\t 15% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of various food categories in the global market in 2023. Dairy products and fruits and vegetables each hold a 20% share. Bakery items, meat and fish, beverages, and snacks are each represented with an equal share of 15%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nfig = plt.figure(figsize=(6, 6))\n\n# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nlabels = ['Dairy Products', 'Fruits and Vegetables', 'Bakery items', 'Meat and Fish', 'Beverages', 'Snacks']\nsizes = [20, 20, 15, 15, 15, 15]\n\nexplode = [0, 0, 0, 0, 0, 0]  # only \"explode\" the 2nd slice (i.e. 'Hogs')\n\nax = fig.add_subplot(111)\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.title('Distribution of Food categories in the Global Market, 2023', fontsize=14, fontweight='bold')\nplt.tight_layout()\nplt.xticks(rotation=90)\n\n# Save Figure\nplt.savefig('pie chart/png/17.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the Global Market distribution does Snacks represent?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_77",
        "img": "./pie_chart/png/pie_77.png",
        "topic": "Social Media and the Web",
        "title": " Distribution of Popular Social Media Platforms in the USA, 2023",
        "csv": "Platforms \\t Percentage \\n Google \\t 25% \\n YouTube \\t 20% \\n Facebook \\t 20% \\n Instagram \\t 15% \\n Twitter \\t 10% \\n Reddit \\t 5% \\n Others \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart presents the distribution of popular social media platform usage in the USA for the year 2023. Google accounts for 25% of the distribution, while YouTube and Facebook each make up 20%. Instagram represents 15% of the usage, followed by Twitter at 10%, and both Reddit and \"Others\" each hold 5% of the social media platform distribution."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nplt.figure(figsize=(6,6))\n\n# Data to plot\nlabels = ['Google','YouTube','Facebook','Instagram','Twitter','Reddit','Others']\nsizes = [25,20,20,15,10,5,5]\n\n# Plot\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', wedgeprops={'linewidth': 1.2}, shadow=True, textprops={'fontsize': 11})\n\n# Legend\nplt.legend(labels, loc=\"upper right\", bbox_to_anchor=(1.3,1))\n\n# Title\nplt.title('Distribution of Popular Social Media Platforms in the USA, 2023')\n\n# Tight layout\nplt.tight_layout()\n\n# Save png\nplt.savefig('pie chart/png/503.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined percentage of YouTube and Twitter?",
            "output": "30%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_443",
        "img": "./pie_chart/png/pie_443.png",
        "topic": "Agriculture and Food Production",
        "title": " Agriculture Production Distribution in the USA, 2023",
        "csv": "Production \\t Percentage \\n Crops \\t 40% \\n Dairy \\t 20% \\n Poultry \\t 20% \\n Fisheries \\t 10% \\n Livestock \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of agricultural production in the USA for 2023. It shows that crops make up 40% of production. Dairy and poultry each account for 20% of the production, while fisheries and livestock both stand at 10%. The chart visually represents the percentage contribution of each agriculture sector to the total production in the USA."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(8,8))\nax = fig.add_subplot()\nlabels = ['Crops','Dairy','Poultry','Fisheries','Livestock']\nsizes = [40,20,20,10,10]\nexplode = [0.1,0,0,0,0]\nax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, explode=explode, shadow=True, textprops={'fontsize': 6, 'rotation':45, 'wrap':True})\nax.axis('equal')\nax.set_title(\"Agriculture Production Distribution in the USA, 2023\")\nplt.tight_layout()\nplt.savefig('pie chart/png/78.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of agricultural production is comprised of Poultry and Livestock combined?",
            "output": "30%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_161",
        "img": "./pie_chart/png/pie_161.png",
        "topic": "Arts and Culture",
        "title": " Popular Music Genres in the United States, 2023",
        "csv": "Genres \\t Percentage \\n Pop \\t 30 \\n Hip-Hop \\t 25 \\n Rock \\t 20 \\n Jazz \\t 10 \\n Classical \\t 10 \\n Country \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart titled \"Popular Music Genres in the United States, 2023\" illustrates the music genre preferences among listeners. Pop holds the largest share with 30%, followed by Hip-Hop at 25%, Rock at 20%, with both Jazz and Classical tied at 10%. Country music has the smallest slice at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# set the size of the graph\nplt.figure(figsize=(7,7))\n\n# create a pie chart\nax = plt.subplot(111)\ngenres = [\"Pop\",\"Hip-Hop\",\"Rock\",\"Jazz\",\"Classical\",\"Country\"]\npercentage = [30,25,20,10,10,5]\nax.pie(percentage, labels=genres,autopct='%1.1f%%',shadow=True, startangle=90)\nplt.title(\"Popular Music Genres in the United States, 2023\")\nplt.legend(title=\"Music Genres\", loc=\"upper right\")\n\n# prevent labels from being stacked on top of each other\nplt.tight_layout()\n\n# save the chart\nplt.savefig(\"pie chart/png/357.png\")\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined percentage of the Rock and Classical music genres?",
            "output": "30%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_139",
        "img": "./pie_chart/png/pie_139.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Distribution of Donations to Nonprofit Organizations in 2021",
        "csv": "Donations \\t Share \\n Individual Donors \\t 50% \\n Charitable Foundations \\t 20% \\n Corporations \\t 10% \\n Government Grants \\t 10% \\n Fundraising Events \\t 5% \\n Other \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of donations to nonprofit organizations in 2021, showing the proportional contributions by different sources. Individual donors are the largest contributors at 50%, followed by charitable foundations at 20%, and both corporations and government grants at 10% each. Fundraising events and other sources each account for 5% of the donations."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#Set the figure size\nplt.figure(figsize=(8, 8))\n\n#Set the font size\nmatplotlib.rcParams.update({'font.size': 14})\n\n# Set the color \ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99', '#feb2a7']\n\n# Set the label \nlabels = ['Individual Donors','Charitable Foundations','Corporations','Government Grants','Fundraising Events','Other']\n\n# Set the data\ndata = np.array([50,20,10,10,5,5])\n\n# Set the subplot\nplt.subplot(111)\n\n# Set the pie chart\nplt.pie(data, labels=labels, autopct='%1.1f%%', colors=colors, startangle=90)\n\n# Set the title\nplt.title(\"Distribution of Donations to Nonprofit Organizations in 2021\")\n\n# Set the legend\nplt.legend(labels, loc='best', bbox_to_anchor=(1, 0.5))\n\n# Set the tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('pie chart/png/155.png')\n\n# Clear the figure\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the donations comes from fundraising events?",
            "output": "5%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_113",
        "img": "./pie_chart/png/pie_113.png",
        "topic": "Law and Legal Affairs",
        "title": " Distribution of Legal Professionals in the USA, 2023",
        "csv": "Legal Professionals \\t Percentage \\n Lawyers \\t 35% \\n Judges \\t 20% \\n Paralegals \\t 15% \\n Legal Assistants \\t 10% \\n Other \\t 20% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of various legal professionals in the USA as of 2023. Lawyers make up 35% of the total, followed by judges at 20%, and 'Other' legal professionals also at 20%. Paralegals and legal assistants constitute smaller portions, with paralegals at 15% and legal assistants at 10% of the distribution."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(8,8))\nplt.title('Distribution of Legal Professionals in the USA, 2023')\nlabels = ['Lawyers','Judges','Paralegals','Legal Assistants','Other']\nsizes = [35,20,15,10,20]\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', textprops={'fontsize':14,'color':'black', 'wrap':True, 'rotation':0})\nplt.axis('equal')\nplt.tight_layout()\nplt.savefig('pie chart/png/103.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the distribution do paralegals and legal assistants together comprise?",
            "output": "25%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_396",
        "img": "./pie_chart/png/pie_396.png",
        "topic": "Agriculture and Food Production",
        "title": " Distribution of Agricultural Production in the USA, 2023",
        "csv": "Crops \\t Percentage \\n Cereal Crops \\t 50% \\n Vegetables \\t 20% \\n Fruit \\t 15% \\n Nuts and Seeds \\t 7% \\n Dairy Products \\t 3% \\n Livestock \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of agricultural production in the USA for the year 2023. Cereal crops dominate agricultural production with a 50% share, followed by vegetables at 20% and fruits at 15%. Nuts and seeds account for 7%, while dairy products and livestock represent smaller portions at 3% and 5%, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib\n\n# set figure size\nplt.figure(figsize=(10,10))\n\n# add subplot\nax = plt.subplot(111)\n\n# set data\nCrops = ['Cereal Crops','Vegetables','Fruit','Nuts and Seeds','Dairy Products','Livestock']\nPercentage = [50,20,15,7,3,5]\n\n# draw pie chart\nax.pie(Percentage, labels=Crops, autopct='%1.1f%%',startangle=90, textprops={'fontsize': 12})\n\n# set title\nax.set_title('Distribution of Agricultural Production in the USA, 2023', fontsize=20)\n\n# set legend\nax.legend(title='Crops', loc='upper right', bbox_to_anchor=(1.2,0.8))\n\n# prevent the labels from overlapping\nmatplotlib.rc('xtick', labelsize=10) \nmatplotlib.rc('ytick', labelsize=10) \nax.axis('equal')\n\n# adjust figure\nplt.tight_layout()\n\n# save figure\nplt.savefig('pie chart/png/125.png')\n\n# clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the agricultural production is attributed to Livestock?",
            "output": "5%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_329",
        "img": "./pie_chart/png/pie_329.png",
        "topic": "Government and Public Policy",
        "title": " Distribution of Public Spending on Social Services in the US, 2023",
        "csv": "Social Services \\t Percentage \\n Education \\t 25% \\n Healthcare \\t 20% \\n Transportation \\t 15% \\n Housing and Community \\t 15% \\n Public Safety \\t 10% \\n Welfare \\t 10% \\n Other \\t 15% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of public spending on social services in the US in 2023. Education receives the largest share with 25%, followed by healthcare at 20%. Transportation, housing, and community amenities are both allocated 15% each. Public safety and welfare services are apportioned 10% each, and the remaining 15% is dedicated to other unspecified areas."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np\n\n# Set up figure\nfig = plt.figure(figsize=(7,7))\nax1 = fig.add_subplot(111)\n\n# Set up data\nlabels = ['Education', 'Healthcare', 'Transportation', 'Housing and Community', 'Public Safety', 'Welfare', 'Other']\nsizes = [25, 20, 15, 15, 10, 10, 15]\n\n# Set up colors\ncolors = cm.Set3(np.arange(len(labels))/float(len(labels)))\n\n# Plot\nwedges, texts, autotexts = ax1.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90, textprops={'fontsize':12}, wedgeprops={'linewidth':2})\n\n# Set up legend\nplt.legend(wedges, labels, title=\"Social Services\", bbox_to_anchor=(1.3, 0.85))\n\n# Set up title\nplt.title('Distribution of Public Spending on Social Services in the US, 2023', fontsize=16)\n\n# Make sure text is readable\nfor i, autotext in enumerate(autotexts):\n    autotext.set_rotation(45)\n    autotext.set_text(autotext.get_text() + \"\\n\")\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save Figure\nplt.savefig(\"pie chart/png/273.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined percentage for Education and Healthcare?",
            "output": "45%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_201",
        "img": "./pie_chart/png/pie_201.png",
        "topic": "Social Media and the Web",
        "title": " Social Media Platform Distribution in the USA, 2023",
        "csv": "Platforms \\t Percentage \\n Facebook \\t 30% \\n YouTube \\t 20% \\n Twitter \\t 10% \\n Instagram \\t 15% \\n Reddit \\t 10% \\n Snapchat \\t 10% \\n Pinterest \\t 5% \\n Other \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of social media platform usage percentages in the USA for 2023. Facebook leads with a 30% share, followed by YouTube at 20%, Instagram at 15%, Twitter and Reddit each with 10%, Snapchat also at 10%, Pinterest at 5%, and other platforms collectively at 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,6))\nlabels = ['Facebook','YouTube','Twitter','Instagram','Reddit','Snapchat','Pinterest','Other']\nsizes = [30,20,10,15,10,10,5,10]\nexplode = [0, 0, 0, 0, 0, 0, 0, 0] \nplt.pie(sizes, labels=labels, explode=explode, autopct='%1.1f%%', startangle=30, shadow=True)\nplt.title(\"Social Media Platform Distribution in the USA, 2023\")\nplt.tight_layout()\nplt.savefig('pie chart/png/335.png', format='png')\nplt.clf()"
        },
        "QA": {
            "input": "How much larger is Facebook\u2019s percentage compared to Instagram in the USA, 2023?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_285",
        "img": "./pie_chart/png/pie_285.png",
        "topic": "Human Resources and Employee Management",
        "title": " Education Level of Employees in the Workforce in 2023",
        "csv": "Education Level \\t Percentage \\n Bachelor's Degree \\t 43% \\n Associate's Degree \\t 22% \\n High School \\t 15% \\n Master's Degree \\t 10% \\n Doctorate \\t 5% \\n Other \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the education level of employees within the workforce in 2023. It shows that 43% hold a Bachelor's degree, 22% have an Associate's degree, and 15% completed High School. Additionally, 10% of employees possess a Master's degree, while Doctorate holders and other education levels each account for 5% of the workforce."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,5))\nlabels = ['Bachelor\\'s Degree', 'Associate\\'s Degree', 'High School', 'Master\\'s Degree', 'Doctorate', 'Other']\nsizes = [43, 22, 15, 10, 5, 5]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#f2a2a2','#cc99ff']\nexplode = [0, 0, 0, 0, 0, 0]\n\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90, pctdistance=0.85, explode=explode)\n\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\nplt.tight_layout()\nplt.title('Education Level of Employees in the Workforce in 2023')\nplt.axis('equal')\nplt.savefig(\"pie chart/png/504.png\")\nplt.show()\nplt.clf()"
        },
        "QA": {
            "input": "How much greater is the percentage of employees with a Bachelor's Degree compared to those with an Associate's Degree?",
            "output": "21%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_55",
        "img": "./pie_chart/png/pie_55.png",
        "topic": "Food and Beverage Industry",
        "title": " Distribution of Food and Beverage Products in the Global Market, 2023",
        "csv": "Product Categories \\t Percentage \\n Fresh Produce \\t 35 \\n Packaged Food \\t 20 \\n Meat and Seafood \\t 15 \\n Dairy Products \\t 15 \\n Beverages \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of food and beverage products in the global market for 2023. Fresh Produce represents the largest share at 35%. Packaged Food accounts for 20% of the market. Meat and Seafood, Dairy Products, and Beverages each make up 15% of the distribution, showing an equal market share for these three product categories."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(7, 7))\ncategory = ['Fresh Produce', 'Packaged Food', 'Meat and Seafood', 'Dairy Products', 'Beverages']\npercentage = [35, 20, 15, 15, 15]\nexplode = (0, 0, 0, 0, 0)\n\nplt.pie(percentage, explode=explode, labels=category, autopct='%1.1f%%', shadow=False, startangle=90)\nplt.title('Distribution of Food and Beverage Products in the Global Market, 2023', fontsize=10, wrap=True, pad=10)\nplt.axis('equal')\nplt.tight_layout()\nplt.xticks(rotation=90)\nplt.savefig('pie chart/png/74.png', bbox_inches='tight')\nplt.close()"
        },
        "QA": {
            "input": "What is the combined percentage of Meat and Seafood and Beverages in the Global Market for 2023?",
            "output": "30%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_58",
        "img": "./pie_chart/png/pie_58.png",
        "topic": "Energy and Utilities",
        "title": " Percentage of Renewable Resources in the World, 2023",
        "csv": "Renewable Sources \\t Percentage \\n Solar \\t 25 \\n Wind \\t 25 \\n Hydropower \\t 20 \\n Geothermal \\t 15 \\n Biomass \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of renewable energy sources worldwide by percentage in 2023. Solar and wind energy both account for 25% each. Hydropower makes up 20%, while geothermal and biomass each represent 15% of the global renewable resources."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure object\nfig = plt.figure(figsize=(8, 8))\n# Add a subplot\nax = fig.add_subplot(111)\n\n# Data to plot\nlabels = 'Solar', 'Wind', 'Hydropower', 'Geothermal', 'Biomass'\nsizes = [25, 25, 20, 15, 15]\n\n# Pie chart\npatches, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, pctdistance=0.85, labeldistance=1.05)\n\n# Equal aspect ratio\nax.axis('equal')\n# Title\nplt.title('Percentage of Renewable Resources in the World, 2023', fontsize=14) \n# Legend\nplt.legend(loc='upper right', bbox_to_anchor=(1, 0.8))\n# Resize the image\nplt.tight_layout()\n# Rotate the labels\nfor i, label in enumerate(labels):\n    angle = (sizes[i]/sum(sizes))*360\n    if angle > 90:\n        texts[i].set_rotation(angle-180)\n    else:\n        texts[i].set_rotation(angle)\n\n# Save the figure\nplt.savefig('pie chart/png/25.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much more does Solar energy contribute to the percentage of renewable resources compared to Biomass?",
            "output": "10%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_207",
        "img": "./pie_chart/png/pie_207.png",
        "topic": "Transportation and Logistics",
        "title": " Method of Transportation in the US in 2023",
        "csv": "Modes \\t Percentage \\n Air \\t 25% \\n Rail \\t 20% \\n Road \\t 45% \\n Water \\t 5% \\n Pipeline \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of transportation methods in the US for the year 2023. It shows that road is the most prevalent mode of transportation, accounting for 45% of the total. Air transport is used 25% of the time, followed by rail at 20%. Water and pipeline modes of transportation are the least used, each representing 5% of the transportation methods."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure()\nax = plt.subplot()\n\nmodes = [\"Air\", \"Rail\", \"Road\", \"Water\", \"Pipeline\"]\npercentages = [25, 20, 45, 5, 5]\n\nax.pie(percentages, labels=modes, autopct='%1.1f%%', textprops={'fontsize': 14}, startangle=90,\n       labeldistance=1.05, radius=1.2, rotatelabels=True, wedgeprops={'linewidth': 1.5, 'edgecolor': 'white'})\n\nplt.title(\"Method of Transportation in the US in 2023\", fontsize=16)\nplt.tight_layout()\n\nplt.savefig('pie chart/png/170.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of transportation in the US is done by Road?",
            "output": "45%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_383",
        "img": "./pie_chart/png/pie_383.png",
        "topic": "Arts and Culture",
        "title": " Popularity of Art Forms in the USA, 2023",
        "csv": "Art Forms \\t Percentage \\n Music \\t 25% \\n Visual Arts \\t 25% \\n Theatre \\t 15% \\n Literature \\t 15% \\n Dance \\t 10% \\n Film \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart represents the popularity of different art forms in the USA in 2023. Music and Visual Arts each hold a 25% share, making them the most popular. Theatre and Literature are equally favored at 15% each. Dance and Film both capture a smaller portion of the chart, with 10% popularity each."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(8, 8))\nplt.title(\"Popularity of Art Forms in the USA, 2023\")\n\nlabels = ['Music', 'Visual Arts', 'Theatre', 'Literature', 'Dance', 'Film']\nsizes = [25, 25, 15, 15, 10, 10]\ncolors = ['#FFB6C1', '#FFC0CB', '#FF1493', '#DB7093', '#C71585', '#8B008B']\n\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90, \n        wedgeprops={'linewidth': 1.5, 'edgecolor': 'black'})\n\n#draw a circle at the center of pie to make it look like a donut\ncentre_circle = plt.Circle((0, 0), 0.70, fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\nplt.axis('equal')\nplt.tight_layout()\n\nplt.savefig('pie chart/png/67.png', format='png', dpi=300)\nplt.show()\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the popularity does the Theatre and Film combined represent?",
            "output": "25%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_324",
        "img": "./pie_chart/png/pie_324.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Distribution of Donations for Nonprofit Organizations in 2023",
        "csv": "Type of Donations \\t Percentage \\n Individual Donations \\t 50% \\n Corporate Donations \\t 25% \\n Government Grants \\t 15% \\n Foundations \\t 7% \\n Events \\t 3% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart represents the distribution of donations to nonprofit organizations in 2023, broken down by donation type. Individual donations account for 50% of the total, while corporate donations make up 25%. Government grants contribute 15%, foundations provide 7%, and fundraising events bring in 3% of the donations."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(8,8))\nlabels = ['Individual Donations', 'Corporate Donations', 'Government Grants', 'Foundations', 'Events']\nsizes = [50, 25, 15, 7, 3]\n\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)\nplt.axis('equal') \nplt.title('Distribution of Donations for Nonprofit Organizations in 2023', fontsize=14)\nplt.tight_layout()\nplt.savefig('pie chart/png/276.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the donations is composed by Individual Donations and Corporate Donations combined?",
            "output": "75%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_203",
        "img": "./pie_chart/png/pie_203.png",
        "topic": "Sports and Entertainment",
        "title": " Global Market Share of Popular Sports in 2023",
        "csv": "Sports \\t Share of Global Market \\n Football \\t 45% \\n Basketball \\t 20% \\n Ice Hockey \\t 15% \\n Golf \\t 10% \\n Motorsport \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the global market share of popular sports in 2023. Football leads with a 45% share of the global market. Basketball follows with a 20% share, while Ice Hockey represents 15%. Golf and Motorsport each hold a 10% share of the market. The data showcases the distribution of market dominance among these sports worldwide."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np \n\nfig=plt.figure(figsize=(8,8))\nax=fig.add_subplot(111)\n\nsports=['Football','Basketball','Ice Hockey','Golf','Motorsport']\nshare=[45,20,15,10,10]\n\nexplode=[0.2,0,0,0,0]\nax.pie(share,explode=explode,labels=sports,autopct='%1.1f%%',shadow=True,startangle=90,textprops={'fontsize': 10})\nax.set_title(\"Global Market Share of Popular Sports in 2023\")\n\nplt.tight_layout()\nplt.savefig('pie chart/png/176.png')\nplt.show()\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined market share of Basketball and Ice Hockey?",
            "output": "35%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_351",
        "img": "./pie_chart/png/pie_351.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare Services Distribution in the USA, 2023",
        "csv": "Types \\t Percentage \\n Primary Care \\t 25% \\n Specialty Care \\t 40% \\n Hospital Care \\t 15% \\n Mental Health \\t 10% \\n Telemedicine \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of healthcare services in the USA for the year 2023. It shows five types of services with their corresponding percentages: Primary Care constitutes 25%, Specialty Care is the largest at 40%, Hospital Care accounts for 15%, while Mental Health and Telemedicine each represent 10% of the distribution."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nplt.figure(figsize=(10,6))\nlabels = ['Primary Care', 'Specialty Care', 'Hospital Care', 'Mental Health', 'Telemedicine']\nsizes = [25, 40, 15, 10, 10]\nexplode = [0, 0, 0, 0.1, 0]\n\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title('Healthcare Services Distribution in the USA, 2023')\nplt.tight_layout()\nplt.savefig('pie chart/png/262.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the healthcare services distribution is allocated to mental health?",
            "output": "10%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_409",
        "img": "./pie_chart/png/pie_409.png",
        "topic": "Sports and Entertainment",
        "title": " Viewership Distribution for Sports and Entertainment Platforms in 2023",
        "csv": "Platforms \\t Viewership Percentage \\n Television \\t 35% \\n YouTube \\t 25% \\n Social media \\t 20% \\n Streaming services \\t 10% \\n Radio \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the viewership distribution for sports and entertainment platforms in 2023. Television leads with a 35% share of viewership, followed by YouTube at 25%, and social media at 20%. Streaming services and radio each hold a smaller portion of the viewership, both at 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(8, 8))\nlabels = [\"Television\", \"YouTube\", \"Social media\", \"Streaming services\", \"Radio\"]\nsizes = [35, 25, 20, 10, 10]\nexplode = (0.1, 0, 0, 0, 0)\n\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90, textprops={'fontsize': 8, 'rotation': 45, 'wrap':True})\nplt.axis('equal')\nplt.title('Viewership Distribution for Sports and Entertainment Platforms in 2023')\nplt.tight_layout()\nplt.savefig(\"pie chart/png/223.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is Television\u2019s viewership percentage compared to Social media?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_412",
        "img": "./pie_chart/png/pie_412.png",
        "topic": "Government and Public Policy",
        "title": " Government Spending Distribution in the USA, 2023",
        "csv": "Expenditures \\t Percentage \\n Education \\t 30% \\n Social Services \\t 20% \\n Defense \\t 15% \\n Healthcare \\t 15% \\n Infrastructure \\t 10% \\n Public Works \\t 10% \\n Other \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of government spending in the USA for 2023. Education receives the largest share with 30%. Social services are allocated 20%, while defense and healthcare each account for 15%. Infrastructure, public works, and other expenditures are each designated 10% of the budget."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(7,5))\nax = fig.add_subplot(1, 1, 1)\nplt.title('Government Spending Distribution in the USA, 2023')\nlabels = [\"Education\",\"Social Services\",\"Defense\",\"Healthcare\",\"Infrastructure\",\"Public Works\",\"Other\"]\nsizes = [30,20,15,15,10,10,10]\nexplode = [0, 0, 0, 0, 0, 0, 0.2]\nax.pie(sizes, labels=labels, explode=explode, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax.axis('equal')\nplt.tight_layout()\nplt.savefig('pie chart/png/35.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which sector has the same percentage of government spending as Defense?",
            "output": "Healthcare"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_308",
        "img": "./pie_chart/png/pie_308.png",
        "topic": "Education and Academics",
        "title": " Distribution of Higher Education Degrees in the US, 2023",
        "csv": "Degree Type \\t Percentage \\n Bachelor's Degree \\t 42% \\n Master's Degree \\t 18% \\n Doctoral Degree \\t 29% \\n Associate Degree \\t 7% \\n Certificate/Diploma \\t 4% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of higher education degrees in the US for 2023. It shows that 42% of the degrees are Bachelor's, 18% are Master's, and 29% are Doctoral degrees. Associate degrees account for 7%, while Certificates/Diplomas represent 4% of the educational distribution."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['Bachelor\\'s Degree','Master\\'s Degree','Doctoral Degree','Associate Degree','Certificate/Diploma']\npercents = [42, 18, 29, 7, 4]\ncolors = ['green', 'red', 'blue', 'pink', 'yellow']\n\nplt.figure(figsize=(8,8))\nplt.pie(percents, labels=labels, colors=colors, autopct='%.2f%%', shadow=True, startangle=90, wedgeprops={'linewidth': 1, 'edgecolor': 'black'})\nplt.legend(labels, loc='upper right', bbox_to_anchor=(1.2, 1))\nplt.title('Distribution of Higher Education Degrees in the US, 2023', fontsize=14)\nplt.tight_layout()\nplt.savefig('pie chart/png/440.png', dpi=440)\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the percentage of people with a Bachelor's Degree compared to Master's Degree?",
            "output": "24%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_411",
        "img": "./pie_chart/png/pie_411.png",
        "topic": "Social Sciences and Humanities",
        "title": " Gender Distribution in the USA in 2021",
        "csv": "Gender \\t Percentage \\n Male \\t 45% \\n Female \\t 55% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the gender distribution in the USA for the year 2021. It shows that females constitute 55% of the population, whereas males represent 45%. The data suggests a slightly higher percentage of females compared to males."
        },
        "summarization": {
            "input": "Create a brief summarization or extract key insights based on the chart image.",
            "ouput_put": "In the USA for the year 2023, the gender distribution shows a slight female majority, with women making up 55% of the population while men account for 45%. This data indicates a gender ratio where women slightly outnumber men, which could have various implications for market demographics, policy making, and social services. The pie chart representation of this data would clearly illustrate the female predominance in the population."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(7,7))\nlabels = ['Male', 'Female']\nsizes = [45, 55]\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, textprops={'fontsize': 14})\nplt.title('Gender Distribution in the USA in 2021', fontsize=16)\nplt.tight_layout()\nplt.savefig('pie chart/png/392.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage difference between genders in the USA in 2021?",
            "output": "10%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_315",
        "img": "./pie_chart/png/pie_315.png",
        "topic": "Law and Legal Affairs",
        "title": " Global Distribution of Lawyers in 2023",
        "csv": "Regions \\t Lawyer population share \\n North America \\t 30% \\n Europe \\t 30% \\n Asia \\t 20% \\n South America \\t 10% \\n Africa \\t 7% \\n Oceania \\t 3% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart represents the global distribution of lawyers across various regions in 2023. North America and Europe each have a 30% share of the lawyer population. Asia accounts for 20%, while South America has a 10% share. Africa's share is 7%, and Oceania has the smallest with 3%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nregions = [\"North America\", \"Europe\", \"Asia\", \"South America\", \"Africa\", \"Oceania\"]\npopulation_share = [30, 30, 20, 10, 7, 3]\n\nfig = plt.figure(num=None, figsize=(8, 8), dpi=80, facecolor='w', edgecolor='k')\n\nax = fig.add_subplot(111)\nax.pie(population_share, labels=regions, autopct='%.2f%%', startangle=90, textprops={'fontsize': 10}, pctdistance=0.7, labeldistance=1.1)\n\nax.set_title(\"Global Distribution of Lawyers in 2023\", fontsize=13, y=1.08)\n\nplt.tight_layout()\nplt.xticks(rotation=45)\n\nplt.savefig(\"pie chart/png/219.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the lawyer population share percentage of Oceania?",
            "output": "3%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_184",
        "img": "./pie_chart/png/pie_184.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Status in the US in 2023",
        "csv": "Employee Status \\t Percentage \\n Full-time \\t 50 \\n Part-time \\t 30 \\n Contract \\t 15 \\n Self-employed \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart visualizes the distribution of employee status in the US for 2023. The chart shows that 50% of employees are full-time, 30% part-time, 15% on contract, and 5% self-employed."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(7,7))\n\nlabels = [\"Full-time\", \"Part-time\", \"Contract\", \"Self-employed\"]\nsizes = [50, 30, 15, 5]\ncolors = [\"yellowgreen\", \"gold\", \"lightskyblue\", \"lightcoral\"]\nexplode = (0, 0, 0.1, 0)\n\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=140)\nplt.title(\"Employee Status in the US in 2023\", fontsize=14, fontweight=\"bold\")\nplt.axis('equal')\nplt.tight_layout()\nplt.xticks(rotation=45)\n\nplt.savefig('pie chart/png/187.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of employees is working part-time in the US in 2023?",
            "output": "30%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_151",
        "img": "./pie_chart/png/pie_151.png",
        "topic": "Social Media and the Web",
        "title": " Popular Social Media Platforms Usage in 2023",
        "csv": "Platforms \\t Usage Rate \\n Facebook \\t 30% \\n Instagram \\t 20% \\n Twitter \\t 15% \\n YouTube \\t 15% \\n LinkedIn \\t 10% \\n Snapchat \\t 5% \\n Other \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the usage rates of popular social media platforms in 2023. Facebook leads with a 30% usage rate, followed by Instagram at 20%. Twitter and YouTube both have a 15% share each, while LinkedIn sees 10% usage. Snapchat and Other categories are at the lower end with 5% each."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndata = {'Platforms':['Facebook','Instagram','Twitter','YouTube','LinkedIn','Snapchat','Other'],\n        'Usage Rate':[30,20,15,15,10,5,5]}\n\nfig = plt.figure(figsize=(8,8))\nax = fig.add_subplot(111)\nax.set_title('Popular Social Media Platforms Usage in 2023')\n\nwedges, texts, autotexts = ax.pie(data['Usage Rate'], \n                                  labels=data['Platforms'],\n                                  autopct='%.2f%%',\n                                  textprops={'fontsize':14},\n                                  wedgeprops={'linewidth':2},\n                                  startangle=90)\n\nax.legend(wedges, data['Platforms'],\n          title='Platforms',\n          loc='center left',\n          bbox_to_anchor=(1, 0, 0.5, 1),\n          fontsize=14)\nax.axis('equal')\nax.set_xticks([])\nax.set_yticks([])\nplt.tight_layout()\nplt.savefig('pie chart/png/33.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined usage rate of Twitter and YouTube?",
            "output": "30%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_294",
        "img": "./pie_chart/png/pie_294.png",
        "topic": "Law and Legal Affairs",
        "title": " Types of Law Practiced in the US, 2023",
        "csv": "Types of Law \\t Percentage \\n Civil Law \\t 37% \\n Criminal Law \\t 27% \\n International Law \\t 16% \\n Constitutional Law \\t 10% \\n Administrative Law \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of different types of law practiced in the US in 2023. Civil Law constitutes 37% of the practice, making it the most prevalent. Criminal Law follows with 27%. International Law accounts for 16%, while Constitutional Law and Administrative Law each make up 10% of the legal practices."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(6,6))\nlabels=['Civil Law','Criminal Law','International Law','Constitutional Law','Administrative Law']\nsizes=[37,27,16,10,10]\nexplode=(0.1,0,0,0,0)\nplt.pie(sizes,explode=explode,labels=labels,autopct='%1.1f%%',shadow=True,startangle=45,pctdistance=0.6,labeldistance=1.1)\nplt.title('Types of Law Practiced in the US, 2023')\nplt.axis('equal')\nplt.tight_layout()\nplt.xticks([]) \nplt.savefig('pie chart/png/183.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined percentage of Constitutional Law and Administrative Law?",
            "output": "20%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_62",
        "img": "./pie_chart/png/pie_62.png",
        "topic": "Law and Legal Affairs",
        "title": " Distribution of Legal Areas in the USA in 2023",
        "csv": "Legal Areas \\t Percentage \\n Civil Law \\t 30% \\n Criminal Law \\t 20% \\n Administrative Law \\t 15% \\n Constitutional Law \\t 10% \\n International Law \\t 10% \\n Human Rights Law \\t 10% \\n Contract Law \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the proportion of various legal areas in the USA for 2023. Civil Law leads with 30% of the distribution. Criminal Law follows at 20%, while Administrative Law makes up 15%. Constitutional Law, International Law, and Human Rights Law each represent 10% of the distribution. Lastly, Contract Law accounts for 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111)\n \nlabels = 'Civil Law', 'Criminal Law', 'Administrative Law', 'Constitutional Law', 'International Law', 'Human Rights Law', 'Contract Law'\nsizes = [30, 20, 15, 10, 10, 10, 5]\ncolors = ['#FFC125', '#C0C0C0', '#DAA520', '#006400', '#0000CD', '#FF6347', '#8B4513']\nexplode = (0.1, 0, 0, 0, 0, 0, 0)\n\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90)\nax.axis('equal')\nax.set_title('Distribution of Legal Areas in the USA in 2023', fontsize=15, fontweight='bold')\nax.legend(labels=labels, bbox_to_anchor=(1, 0.7), loc=\"upper right\")\nplt.xticks(rotation=45)\nplt.tight_layout()\n\nplt.savefig('pie chart/png/408.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which area of law has the same percentage as International Law in the distribution?",
            "output": "Constitutional Law"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_121",
        "img": "./pie_chart/png/pie_121.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Charitable Donation Distribution in the USA, 2023",
        "csv": "Causes \\t Percentage \\n Education \\t 20% \\n Healthcare \\t 30% \\n Environment \\t 25% \\n Poverty \\t 15% \\n Humanity \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of charitable donations across different causes in the USA for the year 2023. Education received 20% of donations, while healthcare was allocated 30%, making it the largest share. Contributions to environmental causes constituted 25%. Poverty and humanity-related donations were lower, with 15% and 10% respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\n\n# create figure and set size\nfig = plt.figure(figsize=(12, 8))\n\n# create data list\ncauses = ['Education', 'Healthcare', 'Environment', 'Poverty', 'Humanity']\npercentage = [20, 30, 25, 15, 10]\n\n# create pie chart\nplt.pie(percentage, labels=causes, autopct='%1.1f%%', startangle=90, textprops={'fontsize': 14}, wedgeprops={'linewidth': 0.5})\n\n# set legend\ngreen_patch = mpatches.Patch(color='green', label='Education')\nblue_patch = mpatches.Patch(color='blue', label='Healthcare')\nyellow_patch = mpatches.Patch(color='yellow', label='Environment')\npink_patch = mpatches.Patch(color='pink', label='Poverty')\nblack_patch = mpatches.Patch(color='black', label='Humanity')\nplt.legend(handles=[green_patch, blue_patch, yellow_patch, pink_patch, black_patch], loc='upper left', fontsize=14)\n\n# set title\nplt.title('Charitable Donation Distribution in the USA, 2023', fontsize=18)\n\n# adjust the plot\nplt.xticks(rotation=30)\nplt.tight_layout()\n\n# save the figure\nplt.savefig('pie chart/png/36.png')\n\n# clear the current figure\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage of charitable donations received by Healthcare?",
            "output": "30%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_158",
        "img": "./pie_chart/png/pie_158.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Distribution of Charitable Causes in the USA, 2023",
        "csv": "Type of Charities \\t Percentage \\n Humanitarian and Disaster Relief \\t 25% \\n Education and Literacy \\t 20% \\n Poverty \\t 15% \\n Health \\t 12% \\n Animals \\t 10% \\n Environment and Sustainability \\t 10% \\n Art Culture and Humanities \\t 8% \\n Religion \\t 5% \\n Other \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of charitable causes in the USA for the year 2023. Humanitarian and Disaster Relief have the largest share at 25%, followed by Education and Literacy at 20%. Poverty-related charities receive 15%, while Health is allocated 12%. Both Animal and Environment and Sustainability causes are represented equally with 10% each. Art, Culture, and Humanities have an 8% slice of the pie, with Religion and Other categories each holding 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ncauses = ['Humanitarian & Disaster Relief', 'Education & Literacy', 'Poverty', 'Health', 'Animals', 'Environment & Sustainability', 'Arts, Culture & Humanities', 'Religion', 'Other']\npercentage = [25,20,15,12,10,10,8,5,5]\n\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot()\nax.pie(percentage, labels=causes, autopct='%1.1f%%', rotatelabels=True, textprops={'fontsize':8}, wedgeprops={'linewidth':3, 'edgecolor':'black'})\nax.axis('equal')\nax.set_title('Distribution of Charitable Causes in the USA, 2023')\nplt.tight_layout()\nplt.xticks([])\nplt.savefig('pie chart/png/250.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined percentage of donations to Health and Religion charities?",
            "output": "17%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_164",
        "img": "./pie_chart/png/pie_164.png",
        "topic": "Energy and Utilities",
        "title": " Distribution of Energy Sources in the USA, 2023",
        "csv": "Sources \\t Percentage \\n Renewable \\t 42% \\n Coal \\t 25% \\n Natural Gas \\t 18% \\n Nuclear \\t 10% \\n Oil \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of different energy sources in the USA in 2023. Renewable energy accounts for the largest share at 42%. Coal follows with 25%, Natural Gas at 18%, and Nuclear energy contributes 10%. Oil represents the smallest portion of the energy mix at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot(111)\n\nsources = ['Renewable','Coal','Natural Gas','Nuclear','Oil']\npercentage = [42,25,18,10,5]\n\nax.pie(percentage, labels=sources, textprops={'fontsize': 14, 'color':'black'}, autopct='%1.1f%%',\n        labeldistance=1.2, rotatelabels=True)\nax.axis('equal')\nax.set_title('Distribution of Energy Sources in the USA, 2023', fontsize=14)\n\nplt.tight_layout()\nplt.savefig('pie chart/png/407.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage difference between the energy sourced from renewable and coal?",
            "output": "17%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_496",
        "img": "./pie_chart/png/pie_496.png",
        "topic": "Government and Public Policy",
        "title": " Voter Turnout by Age Group in the USA, 2023",
        "csv": "Age Groups \\t Voting Turnout \\n 18-29 \\t 25% \\n 30-44 \\t 30% \\n 45-64 \\t 40% \\n 65+ \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart represents the voter turnout in the USA by age group for the year 2023. It shows that 25% of voters were aged 18-29, 30% were aged 30-44, the largest segment of 40% were aged 45-64, and only 5% of voters were aged 65 and above."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(6,4))\nax = fig.add_subplot()\nlabels = np.array(['18-29','30-44','45-64','65+'])\nturnout = np.array([25,30,40,5])\nax.pie(turnout, labels=labels, autopct='%1.1f%%', startangle=90)\nax.axis('equal') \nax.set_title(\"Voter Turnout by Age Group in the USA, 2023\")\nax.legend(labels, loc=\"best\", bbox_to_anchor=(1, 0, 0.5, 1))\nplt.tight_layout()\nplt.xticks(rotation=90)\nplt.savefig('pie chart/png/63.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which age group has the highest voting turnout according to the data?",
            "output": "45-64"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_349",
        "img": "./pie_chart/png/pie_349.png",
        "topic": "Environment and Sustainability",
        "title": " Distribution of Renewable Energy Sources in the USA, 2023",
        "csv": "Renewable Energy Sources \\t Percentage \\n Solar \\t 25% \\n Wind \\t 20% \\n Hydropower \\t 30% \\n Biomass \\t 15% \\n Geothermal \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of renewable energy sources in the USA in 2023. Solar energy accounts for 25% of the renewable sources, while wind energy composes 20%. Hydropower is the most substantial fraction, contributing 30%. Biomass and geothermal energy represent smaller portions, at 15% and 10%, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nsources = ['Solar','Wind','Hydropower','Biomass','Geothermal']\npercentage = [25,20,30,15,10]\n\nplt.figure(figsize=(10,8))\nax = plt.subplot()\nax.pie(percentage, labels=sources, autopct='%1.2f%%', wedgeprops={\"edgecolor\":\"k\",'linewidth': 2})\nplt.title(\"Distribution of Renewable Energy Sources in the USA, 2023\", fontsize=16)\nplt.legend(loc=\"upper left\", bbox_to_anchor=(1,1),fontsize=14)\nplt.xticks(rotation=90)\nplt.tight_layout()\nplt.savefig(\"pie chart/png/309.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage of Solar energy in the distribution of renewable energy sources?",
            "output": "25%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_362",
        "img": "./pie_chart/png/pie_362.png",
        "topic": "Environment and Sustainability",
        "title": " Percentage of Renewable Energy Sources in the USA, 2023",
        "csv": "Renewable Energy Sources \\t Percentage \\n Solar \\t 25 \\n Wind \\t 25 \\n Hydroelectric \\t 20 \\n Geothermal \\t 20 \\n Biomass \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This pie chart illustrates the percentage distribution of renewable energy sources in the USA for the year 2023. Solar and wind energy lead equally with 25% each, followed by hydroelectric and geothermal energy contributing 20% each. Biomass accounts for the smallest share at 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['Solar', 'Wind', 'Hydroelectric', 'Geothermal', 'Biomass']\ndata = [25,25,20,20,10]\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot()\nax.pie(data, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90, textprops={'fontsize': 14})\nax.axis('equal')\nax.set_title('Percentage of Renewable Energy Sources in the USA, 2023', fontsize=16)\nplt.tight_layout()\nplt.savefig('pie chart/png/141.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the renewable energy sources is Biomass?",
            "output": "10%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_246",
        "img": "./pie_chart/png/pie_246.png",
        "topic": "Energy and Utilities",
        "title": " Global Energy Mix in 2023",
        "csv": "Types of Energy \\t Percentage \\n Oil \\t 30% \\n Coal \\t 25% \\n Natural Gas \\t 20% \\n Nuclear \\t 10% \\n Renewables \\t 15% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart presents the global energy mix in 2023, illustrating the distribution of different energy types by percentage. Oil accounts for 30% of the energy mix, while coal represents 25%. Natural gas composes 20% of the energy sources. Nuclear energy contributes 10%, and renewables, such as wind, solar, and hydro, make up 15% of the global energy palette."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['Oil', 'Coal', 'Natural Gas', 'Nuclear', 'Renewables']\nsizes = [30, 25, 20, 10, 15]\n\nfig = plt.figure(figsize=(6,6))\nax = fig.add_subplot(111)\nax.pie(sizes,labels=labels, autopct='%1.1f%%',textprops={'fontsize': 10, 'wrap': True, 'rotation': 60})\nax.set_title('Global Energy Mix in 2023')\nplt.tight_layout()\nplt.xticks(rotation=60)\nplt.savefig('pie chart/png/94.png')\nplt.clf()"
        },
        "QA": {
            "input": "What type of energy has the smallest percentage in the Global Energy Mix in 2023?",
            "output": "Nuclear"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_282",
        "img": "./pie_chart/png/pie_282.png",
        "topic": "Real Estate and Housing Market",
        "title": " Types of Properties in the Housing Market in the USA, 2023",
        "csv": "Property Types \\t Percentage \\n Single-Family Homes \\t 45% \\n Townhouses \\t 20% \\n Condominiums \\t 20% \\n Multi-Family Homes \\t 10% \\n Vacation Homes \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of various property types within the USA housing market in 2023. Single-Family Homes dominate the chart, making up 45% of the market. Townhouses and Condominiums each account for 20% of the market share. Smaller portions are held by Multi-Family Homes at 10% and Vacation Homes at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\n# Create figure\nfigure = plt.figure(figsize=(8,8))\nax = figure.add_subplot(1,1,1)\n\n# Set data\nlabels = ['Single-Family Homes', 'Townhouses', 'Condominiums', 'Multi-Family Homes', 'Vacation Homes']\nsizes = [45, 20, 20, 10, 5]\n\n# Set color\ncolors = ['#D45F41','#5CB8E6','#FFCE54','#4DBD33','#444444']\nexplode = (0, 0, 0, 0, 0.1)\n\n# Draw pie chart\nax.pie(sizes, colors=colors, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=False, startangle=90, pctdistance=0.7,\n        labeldistance=1.1, textprops={'fontsize': 14})\n\n# Set title\nax.set_title('Types of Properties in the Housing Market in the USA, 2023', fontsize=18)\n\n# Set legend\nax.legend(labels, bbox_to_anchor=(1.5, 0.7), shadow=False, fontsize=14)\n\n# Save image\nplt.tight_layout()\nplt.savefig('pie chart/png/348.png')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the housing market do Condominiums make up?",
            "output": "20%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_265",
        "img": "./pie_chart/png/pie_265.png",
        "topic": "Agriculture and Food Production",
        "title": " Crop Distribution in the USA, 2023",
        "csv": "Crops \\t Percentage \\n Corn \\t 25% \\n Soybeans \\t 25% \\n Wheat \\t 15% \\n Potatoes \\t 10% \\n Apples \\t 10% \\n Rice \\t 8% \\n Tomatoes \\t 4% \\n Other \\t 3% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of various crops by percentage in the USA for the year 2023. Corn and soybeans each make up 25%, followed by wheat at 15%, and both potatoes and apples at 10%. Rice constitutes 8% of the crop distribution, tomatoes are at 4%, and all other crops combined account for 3%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\ncrops = ['Corn', 'Soybeans', 'Wheat', 'Potatoes', 'Apples', 'Rice', 'Tomatoes', 'Other']\npercentage = [25, 25, 15, 10, 10, 8, 4, 3]\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111)\nax.pie(percentage, labels=crops, autopct='%1.1f%%', startangle=90,\n       textprops={'fontsize': 12, 'color': 'black'})\nax.legend(loc='upper left', bbox_to_anchor=(0.8, 1.00),\n          fontsize=12, bbox_transform=fig.transFigure)\nax.set_title(\"Crop Distribution in the USA, 2023\", fontsize=14, pad=20)\nplt.xticks(rotation=90)\nplt.tight_layout()\nplt.savefig('pie chart/png/356.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the crop distribution is made up by Soybeans and Wheat combined?",
            "output": "40%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_332",
        "img": "./pie_chart/png/pie_332.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Distribution of Donations to Nonprofit Organizations in the USA in 2023",
        "csv": "Donations \\t Percentage \\n Individuals \\t 45% \\n Foundations \\t 20% \\n Corporations \\t 15% \\n Government \\t 15% \\n Other \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart visualizes the distribution of donations to nonprofit organizations in the USA in 2023. Individuals contribute 45% of the donations, making up the largest segment. Foundations provide 20%, while corporations and government donations each account for 15%. The 'Other' category constitutes the smallest portion with 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mticker\n\n# Create figure and set figsize\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set Data\nDonations = ['Individuals', 'Foundations', 'Corporations', 'Government', 'Other']\nPercentage = [45, 20, 15, 15, 5]\n\n# Plot Pie Chart\nax.pie(Percentage, labels=Donations, autopct='%1.1f%%', radius=1.2, startangle=90, \n        textprops={'fontsize': 12}, labeldistance=1.2, pctdistance=0.5)\n\n# Adjust text position\nax.set_title(\"Distribution of Donations to Nonprofit Organizations in the USA in 2023\", \n             fontsize=16, wrap=True, y=1.15)\n\n# Adjust text length\nax.legend(Donations, loc='center', bbox_to_anchor=(1.25, 0.2), fontsize=14, frameon=False)\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('pie chart/png/270.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of donations to nonprofit organizations come from individual donors in the USA in 2023?",
            "output": "45%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_438",
        "img": "./pie_chart/png/pie_438.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Distribution in the USA, 2023",
        "csv": "Employee Types \\t Percentage \\n Full-time \\t 50% \\n Part-time \\t 25% \\n Contractors \\t 15% \\n Interns \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the employee distribution in the USA for the year 2023. It shows four categories of employee types along with their corresponding percentages. Full-time employees make up 50% of the workforce, part-time employees are 25%, contractors represent 15%, and interns account for 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport numpy as np\n\nplt.figure(figsize=(9, 9))\nlabels = ['Full-time', 'Part-time', 'Contractors', 'Interns']\nsizes = [50, 25, 15, 10]\ncolors = ['#00e600', '#ff8c00', '#a180cc', '#ff0000']\nexplode = [0, 0.1, 0, 0]\n\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', explode=explode, shadow=True, startangle=90)\nplt.title('Employee Distribution in the USA, 2023', fontsize=20)\nplt.axis('equal')\nplt.tight_layout()\nplt.savefig('pie chart/png/98.png')\nplt.gca().set_aspect('equal')\nplt.xticks([])\nplt.show()\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the workforce do Interns represent?",
            "output": "10%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_262",
        "img": "./pie_chart/png/pie_262.png",
        "topic": "Law and Legal Affairs",
        "title": " Types of Cases Handled by the Legal System in the USA, 2023",
        "csv": "Types of Cases \\t Percentage \\n Civil Cases \\t 30% \\n Criminal Cases \\t 30% \\n Regulatory Cases \\t 15% \\n International Cases \\t 20% \\n Other Cases \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart represents the types of cases handled by the legal system in the USA in 2023. Civil Cases and Criminal Cases each make up 30% of the chart, followed by International Cases at 20%. Regulatory Cases account for 15%, while Other Cases constitute the remaining 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure and add subplot\nfig = plt.figure(figsize=(7,7))\nax = fig.add_subplot(111)\n\n# Data\nlabels = ['Civil Cases', 'Criminal Cases', 'Regulatory Cases', 'International Cases', 'Other Cases']\ndata = [30, 30, 15, 20, 5]\n\n# Plot\nax.pie(data, labels=labels, autopct='%1.1f%%', textprops={'fontsize': 10, 'wrap': True, 'rotation': 20}, startangle=90, colors=['#566f9f', '#ed553b', '#e4a14b', '#c6d2d5', '#c5e3bf'])\n\n# Title\nax.set_title(\"Types of Cases Handled by the Legal System in the USA, 2023\", fontsize=14, pad=20)\n\n# Save and display \nplt.tight_layout()\nplt.savefig('pie chart/png/518.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which type of cases accounts for the smallest percentage in the legal system in the USA in 2023?",
            "output": "Other Cases"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_310",
        "img": "./pie_chart/png/pie_310.png",
        "topic": "Agriculture and Food Production",
        "title": " Distribution of Crops in Global Agriculture, 2023",
        "csv": "Crops \\t Percentage \\n Grains \\t 20% \\n Fruits \\t 20% \\n Vegetables \\t 25% \\n Dairy \\t 15% \\n Nuts \\t 10% \\n Legumes \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of different crops in global agriculture for the year 2023. It shows that grains and fruits each make up 20% of the distribution. Vegetables have a slightly larger share at 25%, while dairy products account for 15%. Nuts and legumes are the least, with each constituting 10% of the agricultural distribution."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\n# Create Figure \nplt.figure(figsize=(10,10))\n\n# Create labels\nlabels = ['Grains','Fruits','Vegetables','Dairy','Nuts','Legumes']\nsizes = [20,20,25,15,10,10]\n\n# Create Pie Chart\nplt.pie(sizes, labels=labels, autopct='%1.1f%%',textprops={'fontsize': 14},pctdistance=0.8, labeldistance=1.1)\n\n# Set title and remove axes \nplt.title('Distribution of Crops in Global Agriculture, 2023', fontsize=16)\nplt.axis('off')\n\n# Add grids and adjust display\nplt.tight_layout()\n\n# Save Pie Chart\nplt.savefig('pie chart/png/112.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the global agriculture distribution is occupied by dairy products?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_441",
        "img": "./pie_chart/png/pie_441.png",
        "topic": "Sports and Entertainment",
        "title": " Media Platform Distribution in the Sports and Entertainment Industry, 2023",
        "csv": "Media Platforms \\t Percentage \\n Television \\t 35% \\n Social Media \\t 25% \\n Streaming Services \\t 18% \\n Radio \\t 10% \\n Print \\t 7% \\n Digital Advertising \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the percentage distribution of different media platforms used in the sports and entertainment industry in 2023. Television accounts for 35%, making it the most utilized platform. Social Media follows with 25%, while Streaming Services hold an 18% share. Radio and Print media are used less frequently, comprising 10% and 7% respectively. Digital Advertising has the smallest share at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(8, 8))\nplt.title('Media Platform Distribution in the Sports and Entertainment Industry, 2023')\nlabels = ['Television','Social Media','Streaming Services','Radio','Print','Digital Advertising']\nsizes = [35,25,18,10,7,5]\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90,textprops={'fontsize': 14},rotatelabels=True)\nplt.legend(labels, bbox_to_anchor=(1,0.5), loc=\"center right\", fontsize=14, \n           bbox_transform=plt.gcf().transFigure)\nplt.axis('equal')\nplt.tight_layout()\nplt.savefig('pie chart/png/16.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in percentage between Social Media and Radio?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_434",
        "img": "./pie_chart/png/pie_434.png",
        "topic": "Science and Engineering",
        "title": " Distribution of Science and Engineering Fields in Universities Worldwide, 2023",
        "csv": "Fields \\t Percentage \\n Computer Science \\t 25% \\n Electrical Engineering \\t 20% \\n Materials Science \\t 15% \\n Mechanical Engineering \\t 20% \\n Civil Engineering \\t 10% \\n Chemical Engineering \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the worldwide distribution percentage of various science and engineering fields in universities in 2023. Computer Science accounts for 25%, Electrical Engineering for 20%, Materials Science for 15%, Mechanical Engineering also at 20%, while Civil Engineering and Chemical Engineering each make up 10% of the distribution."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(8,8))\nlabels = ['Computer Science','Electrical Engineering','Materials Science','Mechanical Engineering','Civil Engineering','Chemical Engineering']\npercentages = [25,20,15,20,10,10]\nexplode = np.full(len(labels), 0.05)\nplt.pie(percentages, labels=labels, autopct='%1.1f%%', explode=explode, shadow=True, startangle=90)\nplt.title('Distribution of Science and Engineering Fields in Universities Worldwide, 2023')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.savefig('pie chart/png/157.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage difference is there between Computer Science and Civil Engineering?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_350",
        "img": "./pie_chart/png/pie_350.png",
        "topic": "Arts and Culture",
        "title": " Distribution of Arts and Culture Genres in 2023",
        "csv": "Genres \\t Percentage \\n Painting \\t 25% \\n Sculpture \\t 15% \\n Music \\t 20% \\n Theater \\t 15% \\n Dance \\t 10% \\n Photography \\t 10% \\n Literature \\t 10% \\n Film \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of various arts and culture genres in 2023. Painting holds the largest share with 25%, followed by music at 20%. Sculpture and theatre each have a 15% share. Dance, photography, and literature are evenly split with 10% each. Film represents the smallest portion at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111)\n\n# Set data\ngenres = [\"Painting\",\"Sculpture\",\"Music\",\"Theater\",\"Dance\",\"Photography\",\"Literature\",\"Film\"]\npercentage = [25,15,20,15,10,10,10,5]\n\n# Plot pie chart\nax.pie(percentage, labels=genres, autopct='%.2f%%', textprops={'fontsize': 12, 'color':'black'}, shadow=True, startangle=90, labeldistance=1.05, rotatelabels=True, pctdistance=1.02)\n\n# Add title\nax.set_title('Distribution of Arts and Culture Genres in 2023', fontsize=14, pad=15)\n\n# Tight layout\nplt.tight_layout()\n\n# Save figure\nplt.savefig('pie chart/png/37.png')\n\n# Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "Which genre has the lowest percentage and what is it?",
            "output": "Film, 5%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_357",
        "img": "./pie_chart/png/pie_357.png",
        "topic": "Transportation and Logistics",
        "title": " Distribution of Transportation Modes in the US, 2023",
        "csv": "Modes of Transport \\t Percentage \\n Rail \\t 15% \\n Road \\t 45% \\n Air \\t 30% \\n Water \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of different transportation modes in the US in 2023. Rail accounts for 15% of the distribution, road transport dominates with a 45% share, air travel represents 30%, and water-based transport constitutes the smallest segment at 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\n# Create figure\nfig = plt.figure(figsize=(8, 8))\n\n# Pie chart\nlabels = ['Rail','Road','Air','Water']\nsizes = [15, 45, 30, 10]\nexplode = [0, 0.1, 0, 0]\n\nmpl.rcParams['font.size'] = 13.0\n\nplt.pie(sizes, labels=labels, explode=explode, shadow=True, autopct='%1.1f%%')\nplt.title('Distribution of Transportation Modes in the US, 2023')\nplt.tight_layout()\nplt.savefig('pie chart/png/525.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "How much more is the percentage of Road transport used compared to Rail transport?",
            "output": "30%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_392",
        "img": "./pie_chart/png/pie_392.png",
        "topic": "Retail and E-commerce",
        "title": " Popular Payment Methods for Retail Shopping in 2023",
        "csv": "Payment Methods \\t Percentage \\n Credit Cards \\t 35% \\n Debit Cards \\t 25% \\n PayPal \\t 20% \\n Cash \\t 15% \\n Apple Pay \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This pie chart illustrates the distribution of popular payment methods used for retail shopping in 2023. Credit Cards account for 35% of the payments, making them the most used method. Debit Cards follow at 25%, while PayPal is used 20% of the time. Cash transactions represent 15%. Lastly, Apple Pay is the least utilized, with 5% usage among these payment options."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\n# Create figure\nfig = plt.figure(figsize=(7,7))\n\n# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nlabels = ['Credit Cards','Debit Cards','PayPal','Cash','Apple Pay']\nsizes = [35,25,20,15,5]\nexplode = (0, 0, 0, 0.1, 0)  # only \"explode\" the 2nd slice (i.e. 'Cash')\n\nax = fig.add_subplot()\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90, textprops={'fontsize': 14})\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.title('Popular Payment Methods for Retail Shopping in 2023', fontsize=18)\nplt.tight_layout()\nplt.xticks(rotation=45)\nplt.savefig('pie chart/png/128.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of retail shopping payments is made with PayPal?",
            "output": "20%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_309",
        "img": "./pie_chart/png/pie_309.png",
        "topic": "Manufacturing and Production",
        "title": " Distribution of Manufacturing Production in the USA, 2023",
        "csv": "Product \\t Percentage \\n Automobiles \\t 25% \\n Electronics \\t 20% \\n Machinery \\t 20% \\n Textiles \\t 15% \\n Food and Beverage \\t 10% \\n Chemicals \\t 10% \\n Other \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of manufacturing production in the USA for the year 2023. Automobiles make up 25% of the production, followed by Electronics and Machinery each at 20%. Textiles account for 15%, while Food and Beverage, Chemicals, and Other categories each represent 10% of the total manufacturing production."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\n\n# Create figure \nfig = plt.figure(figsize=(8,8))\nax = fig.add_subplot()\n\n# Pie chart\nproducts = [\"Automobiles\", \"Electronics\", \"Machinery\", \"Textiles\", \"Food and Beverage\", \"Chemicals\", \"Other\"]\npercentages = [25, 20, 20, 15, 10, 10, 10]\n\nax.pie(percentages, labels=products, autopct='%1.1f%%', pctdistance=0.8, textprops={'fontsize': 14})\nax.set_title(\"Distribution of Manufacturing Production in the USA, 2023\", fontsize=16)\n\n# Tight layout and save\nplt.tight_layout()\nplt.savefig(\"pie chart/png/10.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage of the Chemicals sector in the manufacturing production?",
            "output": "10%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_63",
        "img": "./pie_chart/png/pie_63.png",
        "topic": "Government and Public Policy",
        "title": " Popular Government Systems in the World, 2023",
        "csv": "Methods \\t Percentage \\n Voting \\t 30% \\n Direct Democracy \\t 25% \\n Representative Democracy \\t 35% \\n Totalitarianism \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of popular government systems around the world in 2023. Voting methods are used by 30% of the systems. Direct democracy is employed by 25% of the systems. Representative democracy has a slightly larger share at 35%, while totalitarianism is the least common, accounting for 10% of the systems."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\n# Set figure size\nplt.figure(figsize=(7,7)) \n\n# Create pie chart\nlabels =['Voting', 'Direct Democracy', 'Representative Democracy', 'Totalitarianism']\nsizes=[30,25,35,10]\nexplode = [0,0,0,0.1]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\n\n# Add title\nplt.title('Popular Government Systems in the World, 2023')\n\n# Add legend\nplt.legend(labels, loc=\"best\", bbox_to_anchor=(1, 0.5), shadow=True, ncol=1)\n\n# Draw pie chart\npatches, texts, autotexts = plt.pie(sizes, explode=explode, labels=labels, colors=colors,autopct=\"%1.1f%%\", shadow=True, startangle=90)\n\n# Avoid text being overwritten\nplt.setp(autotexts, size=8, weight=\"bold\", rotation=30)\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save figure\nplt.savefig('pie chart/png/9.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What method of government has the smallest percentage according to the data?",
            "output": "Totalitarianism"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_448",
        "img": "./pie_chart/png/pie_448.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Distribution of Donations to Charitable Causes in the US, 2023",
        "csv": "Charitable Causes \\t Percentage \\n Education \\t 25% \\n Health \\t 20% \\n Humanitarian Aid \\t 20% \\n Environment \\t 15% \\n Community Development \\t 10% \\n Religion \\t 5% \\n Animal Welfare \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of donations to various charitable causes in the US for the year 2023. Education receives the highest share with 25%, followed by Health and Humanitarian Aid, each at 20%. The Environment is allocated 15%, while Community Development is given 10%. Both Religion and Animal Welfare receive the smallest portion of donations, each at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\n\n# Create figure\nfig = plt.figure(figsize=(10, 8))\n\n# Data to plot\nlabels = 'Education', 'Health', 'Humanitarian Aid', 'Environment', 'Community Development', 'Religion', 'Animal Welfare'\nsizes = [25, 20, 20, 15, 10, 5, 5]\n\n# Plot\nax = fig.add_subplot()\nax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Legend\nblue_patch = mpatches.Patch(color='blue', label='Education')\ngreen_patch = mpatches.Patch(color='green', label='Health')\norange_patch = mpatches.Patch(color='orange', label='Humanitarian Aid')\nyellow_patch = mpatches.Patch(color='yellow', label='Environment')\nmagenta_patch = mpatches.Patch(color='magenta', label='Community Development')\ncyan_patch = mpatches.Patch(color='cyan', label='Religion')\nred_patch = mpatches.Patch(color='red', label='Animal Welfare')\nplt.legend(handles=[blue_patch, green_patch, orange_patch, yellow_patch, magenta_patch, cyan_patch, red_patch], bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)\n\n# Title\nplt.title('Distribution of Donations to Charitable Causes in the US, 2023', fontsize=14)\n\n# Figure Resizing\nplt.tight_layout()\n\n# Save figure\nplt.savefig('pie chart/png/201.png', dpi=300)\n\n# Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "How much greater is the combined percentage of donations to Education and Health compared to Humanitarian Aid?",
            "output": "25%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_185",
        "img": "./pie_chart/png/pie_185.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Distribution in a Company, 2023",
        "csv": "Employee Type \\t Percentage \\n Full-time \\t 50% \\n Part-time \\t 30% \\n Contract \\t 15% \\n Intern \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the employee distribution within a company in 2023 by type. Full-time employees constitute 50% of the workforce, part-time employees make up 30%, contract workers represent 15%, and interns account for a smaller portion with 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Shadow\n\nlabels = ['Full-time','Part-time','Contract','Intern']\nsizes = [50,30,15,5]\ncolors = ['#FFD700','#F08080','#4682B4','#008000']\nexplode = (0.1,0,0,0)\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.pie(sizes, explode=explode, colors=colors, autopct='%1.1f%%', shadow=True)\nax.legend(labels,loc='upper right', bbox_to_anchor=(0.5, 0.5), shadow=True, fontsize=12)\nax.set_title('Employee Distribution in a Company, 2023', fontsize=14)\nax.text(-0.1, 0.5, 'Employee Type', fontsize=14, fontweight='bold', ha='center', va='center', rotation='vertical')\n\nax.axis('equal')\nplt.tight_layout()\nplt.savefig('pie chart/png/502.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the company's employees are on contract?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_14",
        "img": "./pie_chart/png/pie_14.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare Utilization by Age in the USA, 2023",
        "csv": "Age Group \\t Percentage \\n 18-24 \\t 15% \\n 25-34 \\t 20% \\n 35-44 \\t 20% \\n 45-54 \\t 20% \\n 55-64 \\t 15% \\n 65+ \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart titled \"Healthcare Utilization by Age in the USA, 2023\" illustrates the distribution of healthcare usage across different age groups. The age group 18-24 accounts for 15% of healthcare utilization, while those in the 25-34, 35-44, and 45-54 brackets each represent 20%. The 55-64 age group uses 15% of healthcare services, and the 65+ age group accounts for 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nage_group = ['18-24', '25-34', '35-44', '45-54', '55-64', '65+']\npercentage = [15, 20, 20, 20, 15, 10]\n\n# create figure\nfig = plt.figure(figsize=(7,7))\n\n# plot pie chart\nax = fig.add_subplot(111)\nax.pie(percentage, labels=age_group, autopct='%1.1f%%', startangle=90,\n        textprops={'fontsize': 10, 'color':'k'})\n\nax.set_title('Healthcare Utilization by Age in the USA, 2023')\nax.legend(labels=age_group, loc='lower left', bbox_to_anchor=(-0.1, -0.1), fontsize=10)\n\n# adjust the layout\nplt.tight_layout()\n\n# save figure\nplt.savefig('pie chart/png/323.png')\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage of healthcare utilization for the 25-34 age group?",
            "output": "20%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_320",
        "img": "./pie_chart/png/pie_320.png",
        "topic": "Science and Engineering",
        "title": " Percentage Distribution of Science and Engineering Fields in Higher Education, 2023",
        "csv": "Areas \\t Percentage \\n Biological Sciences \\t 25% \\n Physics \\t 20% \\n Chemistry \\t 20% \\n Mathematics \\t 15% \\n Computer Science \\t 10% \\n Earth Science \\t 5% \\n Aerospace Engineering \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the percentage distribution of various science and engineering fields in higher education for the year 2023. It shows that Biological Sciences make up 25% of the distribution, the largest share. Physics and Chemistry each account for 20%, Mathematics represents 15%, Computer Science is 10%, and both Earth Science and Aerospace Engineering constitute the smallest portions, with 5% each."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(7,7))\nax=plt.subplot()\nAreas=['Biological Sciences','Physics','Chemistry','Mathematics','Computer Science','Earth Science','Aerospace Engineering']\n\nPercentage=[25,20,20,15,10,5,5]\n\nax.pie(Percentage,labels=Areas,autopct='%1.1f%%')\nplt.title('Percentage Distribution of Science and Engineering Fields in Higher Education, 2023',fontsize=14)\nplt.tight_layout()\nplt.xticks(rotation=45)\n\nplt.savefig('pie chart/png/279.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which field has the least percentage distribution in higher education according to the data?",
            "output": "Earth Science and Aerospace Engineering"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_311",
        "img": "./pie_chart/png/pie_311.png",
        "topic": "Education and Academics",
        "title": " Distribution of Education Levels in the USA, 2023",
        "csv": "Education Level \\t Percentage \\n Primary School \\t 30% \\n Secondary School \\t 35% \\n Tertiary Education \\t 25% \\n Vocational Education \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of education levels in the USA for the year 2023. It shows four sectors: Primary School education accounts for 30% of the distribution, Secondary School for 35%, Tertiary Education represents 25%, and Vocational Education makes up 10% of the chart."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['Primary School', 'Secondary School', 'Tertiary Education', 'Vocational Education']\nsizes = [30, 35, 25, 10]\n\nfig, ax = plt.subplots(figsize=(7,7))\nax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90,\n        colors=['dodgerblue', 'orange', 'forestgreen', 'crimson'],\n        textprops=dict(color=\"black\", wrap=True, rotation=45))\n\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax.set_title('Distribution of Education Levels in the USA, 2023', fontsize=14)\nplt.tight_layout()\nplt.savefig('pie chart/png/281.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which education level has the highest percentage according to the chart?",
            "output": "Secondary School"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_293",
        "img": "./pie_chart/png/pie_293.png",
        "topic": "Energy and Utilities",
        "title": " Energy Sources in the US, 2023",
        "csv": "Sources \\t Percentage \\n Renewables \\t 25% \\n Coal \\t 20% \\n Oil \\t 15% \\n Natural Gas \\t 30% \\n Nuclear \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the percentage distribution of different energy sources used in the US in 2023. Renewables account for 25%, Coal for 20%, Oil for 15%, Natural Gas is the largest at 30%, and Nuclear makes up 10% of the energy sources."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['Renewables', 'Coal', 'Oil', 'Natural Gas', 'Nuclear']\nsizes = [25, 20, 15, 30, 10]\n\nfig = plt.figure(figsize=(7,7))\nax = fig.add_subplot()\nax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, textprops={'fontsize': 14})\nax.axis('equal') \nax.set_title('Energy Sources in the US, 2023')\nplt.tight_layout()\nplt.savefig('pie chart/png/342.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the US energy sources is composed of coal in 2023?",
            "output": "20%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_428",
        "img": "./pie_chart/png/pie_428.png",
        "topic": "Business and Finance",
        "title": " Distribution of Financial Instruments in the Global Investment Market in 2023",
        "csv": "Financial Instruments \\t Percentage \\n Stocks \\t 30% \\n Bonds \\t 20% \\n Mutual Funds \\t 20% \\n Options \\t 15% \\n Futures \\t 10% \\n ETFs \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of various financial instruments in the global investment market for the year 2023. Stocks make up 30% of the market, bonds and mutual funds each account for 20%, options represent 15%, futures constitute 10%, and ETFs make up the remaining 5%. The chart offers a visual representation of the investment landscape, focusing on the proportional composition of different types of financial assets."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['Stocks','Bonds','Mutual Funds','Options','Futures','ETFs']\nsizes = [30,20,20,15,10,5]\n\nfig = plt.figure(figsize=(10, 10))\nax1 = fig.add_subplot(111)\nax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)\nax1.set_title('Distribution of Financial Instruments in the Global Investment Market in 2023')\nax1.axis('equal') \nplt.tight_layout()\nplt.savefig('pie chart/png/384.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined percentage of Options and Futures in the investment market?",
            "output": "25%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_391",
        "img": "./pie_chart/png/pie_391.png",
        "topic": "Agriculture and Food Production",
        "title": " Distribution of Agricultural Production in the USA, 2023",
        "csv": "Production \\t Percentage \\n Fruits \\t 20% \\n Vegetables \\t 25% \\n Grains \\t 15% \\n Dairy Products \\t 15% \\n Livestock \\t 15% \\n Other \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of agricultural production in the USA for 2023. Fruits make up 20% of production, while vegetables comprise 25%. Grains, dairy products, and livestock each represent 15% of the total production. The 'Other' category constitutes 10% of the agricultural output."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\n\nplt.figure(figsize=(8,8))\nax = plt.subplot()\nlabels=['Fruits','Vegetables','Grains','Dairy Products','Livestock','Other']\nsizes=[20,25,15,15,15,10]\ncolors=['#ffe400','#ff7e00','#6ac98a','#1aacd6','#6b3d9a','#fadf80']\nexplode=[0,0,0,0,0,0]\nax.pie(sizes, explode=explode, colors=colors, labels=labels, autopct='%1.1f%%', startangle=90, shadow=True)\nax.axis('equal')\nax.set_title('Distribution of Agricultural Production in the USA, 2023')\nplt.tight_layout()\nplt.savefig('pie chart/png/234.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of agricultural production do dairy products represent in the USA, 2023?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_272",
        "img": "./pie_chart/png/pie_272.png",
        "topic": "Science and Engineering",
        "title": " Software Distribution in the Science and Engineering Industry, 2023",
        "csv": "Software \\t Percentage \\n Operating Systems \\t 25% \\n Programming Languages \\t 15% \\n Database Management \\t 15% \\n Networking \\t 15% \\n Artificial Intelligence \\t 15% \\n Graphics \\t 10% \\n Animation \\t 5% \\n Simulation \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the software distribution in the science and engineering industry in 2023. Operating Systems account for the largest percentage at 25%. Programming Languages, Database Management, Networking, and Artificial Intelligence each represent 15% of the distribution. Graphics software makes up 10%, while Animation and Simulation are the smallest categories, both at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['Operating Systems','Programming Languages','Database Management','Networking','Artificial Intelligence','Graphics','Animation', 'Simulation'] \npercentage = [25, 15, 15, 15, 15, 10, 5, 5]\n\nplt.figure(figsize=(12, 8))\nplt.title('Software Distribution in the Science and Engineering Industry, 2023')\nplt.pie(percentage, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90, textprops={'fontsize': 12, 'rotation': 90, 'wrap':True})\nplt.axis('equal')\nplt.tight_layout()\nplt.xticks([])\nplt.savefig('pie chart/png/191.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which category accounts for the smallest percentage in the software distribution?",
            "output": "Animation and Simulation"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_171",
        "img": "./pie_chart/png/pie_171.png",
        "topic": "Arts and Culture",
        "title": " Music Genre Popularity in the US, 2023",
        "csv": "Music Genres \\t Percentage \\n Pop \\t 30% \\n Hip-Hop \\t 20% \\n Rock \\t 15% \\n Country \\t 10% \\n EDM \\t 10% \\n Jazz \\t 10% \\n Classical \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This pie chart illustrates the popularity of various music genres in the US in 2023. Pop leads with 30%, followed by Hip-Hop at 20%. Rock accounts for 15%, while Country, EDM, and Jazz each represent 10% of the music genre popularity. Classical music has the smallest share with 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(9,9))\nplt.subplot()\nmusic_genres=[\"Pop\",\"Hip-Hop\",\"Rock\",\"Country\",\"EDM\",\"Jazz\",\"Classical\"]\npercentages = [30,20,15,10,10,10,5]\n\nplt.pie(percentages, labels=music_genres, autopct=\"%1.1f%%\", pctdistance=0.8, \n        wedgeprops={\"edgecolor\":\"black\"},textprops={'fontsize': 14})\n\nplt.title(\"Music Genre Popularity in the US, 2023\", fontsize=20)\nplt.tight_layout()\nplt.savefig('pie chart/png/245.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the total percentage of popularity for EDM and Country music genres combined?",
            "output": "20%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_187",
        "img": "./pie_chart/png/pie_187.png",
        "topic": "Sports and Entertainment",
        "title": " Popularity of Sports in the United States, 2023",
        "csv": "Sports \\t Percentage \\n Soccer \\t 30% \\n Basketball \\t 25% \\n Baseball \\t 20% \\n Hockey \\t 15% \\n Golf \\t 5% \\n Tennis \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This pie chart depicts the popularity of various sports in the United States in 2023. Soccer leads with 30% popularity, followed by basketball at 25%, and baseball at 20%. Hockey represents 15% of the chart, while both golf and tennis account for 5% each, indicating their relative popularity among the sports presented in the data."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['Soccer','Basketball','Baseball','Hockey','Golf','Tennis']\nsizes = [30,25,20,15,5,5]\n\nfig = plt.figure(figsize=(7,7))\nax = fig.add_subplot()\nax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, textprops={'fontsize': 14, 'color': 'black'}, explode=(0.1, 0, 0, 0, 0, 0))\nplt.title('Popularity of Sports in the United States, 2023', fontsize=16, wrap=True)\nax.axis('equal')\nplt.tight_layout()\nfig.savefig(\"pie chart/png/343.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which sport has the lowest popularity percentage according to the data provided?",
            "output": "Golf and Tennis"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_140",
        "img": "./pie_chart/png/pie_140.png",
        "topic": "Agriculture and Food Production",
        "title": " Crop Production Distribution in the USA,2023",
        "csv": "Crops \\t Percentage \\n Corn \\t 32% \\n Wheat \\t 15% \\n Rice \\t 14% \\n Soybeans \\t 11% \\n Barley \\t 8% \\n Other Grains \\t 5% \\n Fruits \\t 10% \\n Vegetables \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of crop production in the USA for the year 2023. Corn leads with 32% of the total production, followed by wheat at 15%, and rice at 14%. Soybeans account for 11%, barley takes up 8%, and other grains constitute 5% of the production. Fruits and vegetables each make up 10% and 5% of the production, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(8,8))\nlabels = ['Corn','Wheat','Rice','Soybeans','Barley','Other Grains','Fruits','Vegetables']\nsizes = [32, 15, 14, 11, 8, 5, 10, 5]\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=False, startangle=90)\nplt.title('Crop Production Distribution in the USA, 2023')\nplt.tight_layout()\nplt.xticks(rotation=90)\nplt.savefig('pie chart/png/311.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined production percentage of fruits and vegetables?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_471",
        "img": "./pie_chart/png/pie_471.png",
        "topic": "Manufacturing and Production",
        "title": " Distribution of Manufacturing Sectors in the US, 2023",
        "csv": "Manufacturing Sectors \\t Percentage \\n Automotive \\t 20% \\n Aerospace \\t 18% \\n Industrial Machinery \\t 15% \\n Electronics \\t 14% \\n Food and Beverages \\t 10% \\n Chemicals \\t 9% \\n Textiles \\t 7% \\n Semiconductors \\t 5% \\n Other \\t 12% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart presents the distribution percentages of various manufacturing sectors in the US for the year 2023. Automotive leads with 20%, followed closely by Aerospace at 18%, and Industrial Machinery at 15%. Electronics account for 14%, while Food and Beverages compose 10% of the distribution. Chemicals represent 9%, Textiles come in at 7%, and Semiconductors at 5%. The 'Other' category makes up the remaining 12%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nfig = plt.figure(figsize=(10, 8))\n\n# Data to plot\nlabels = ['Automotive','Aerospace','Industrial Machinery','Electronics','Food and Beverages','Chemicals','Textiles','Semiconductors','Other']\nsizes = [20, 18, 15, 14, 10, 9, 7, 5, 12]\n\n# Add subplot\nax = fig.add_subplot()\n\n# Plot\nax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, textprops={'fontsize': 14}, wedgeprops={'linewidth': 1.5, 'edgecolor': 'black'})\n\n# Add title\nax.set_title('Distribution of Manufacturing Sectors in the US, 2023', fontsize=20)\n\n# Set legend\nax.legend(labels, loc=\"best\", fontsize='large')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Set xticks\nplt.xticks(np.arange(0.0, 360.0, 90.0))\n\n# Save the figure\nplt.savefig('pie chart/png/95.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage of the Automotive sector in the distribution of manufacturing sectors?",
            "output": "20%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_290",
        "img": "./pie_chart/png/pie_290.png",
        "topic": "Government and Public Policy",
        "title": " Quality of Life in the USA in 2023",
        "csv": "Quality of Life \\t Percentage \\n Education \\t 20% \\n Healthcare \\t 25% \\n Housing \\t 18% \\n Economy \\t 15% \\n Environment \\t 12% \\n Social and Community Well-being \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This pie chart illustrates the distribution of various aspects contributing to the Quality of Life in the USA in 2023. Education accounts for 20% of the quality metrics, followed by Healthcare at 25%. Housing is represented with 18%, and the Economy makes up 15%. Environmental factors contribute 12%, while Social and Community Well-being has the smallest share at 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nfig=plt.figure(figsize=(8,8)) \nax=fig.add_subplot(111) \nlabels=['Education', 'Healthcare', 'Housing', 'Economy', 'Environment','Social and Community Well-being'] \nsizes=[20,25,18,15,12,10] \nexplode=[0,0.1,0,0,0,0] \nax.pie(sizes,explode=explode,labels=labels,autopct='%.2f %%',shadow=True,startangle=90) \nax.axis('equal') \nax.set_title('Quality of Life in the USA in 2023',fontsize=20,y=1.08) \nplt.xticks(rotation=30) \nplt.tight_layout() \nplt.savefig(\"pie chart/png/186.png\") \nplt.clf()"
        },
        "QA": {
            "input": "By how much does the percentage of healthcare exceed the percentage of social and community well-being?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_318",
        "img": "./pie_chart/png/pie_318.png",
        "topic": "Human Resources and Employee Management",
        "title": " Proportion of Employee Types in the USA, 2023",
        "csv": "Employee Types \\t Percentage \\n Full-time \\t 50% \\n Part-time \\t 30% \\n Contractors \\t 10% \\n Interns \\t 5% \\n Freelancers \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart represents the proportion of employee types in the USA in 2023. Full-time employees make up 50% of the workforce, part-time employees account for 30%, contractors constitute 10%, while interns and freelancers each represent 5% of the employee population."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(8, 6))\nvalues = [50, 30, 10, 5, 5]\nlabels = [\"Full-time\", \"Part-time\", \"Contractors\", \"Interns\", \"Freelancers\"]\nplt.pie(values, labels=labels, autopct=\"%1.1f%%\", shadow=True, rotatelabels=True, startangle=90)\nplt.title(\"Proportion of Employee Types in the USA, 2023\")\nplt.tight_layout()\nplt.savefig(\"pie chart/png/216.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the total percentage of Contractors and Interns together?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_301",
        "img": "./pie_chart/png/pie_301.png",
        "topic": "Social Sciences and Humanities",
        "title": " Population Distribution by Age Group in the USA, 2023",
        "csv": "Age Group \\t Percentage \\n 18-24 \\t 17% \\n 25-34 \\t 25% \\n 35-44 \\t 21% \\n 45-54 \\t 16% \\n 55-64 \\t 15% \\n 65+ \\t 6% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This pie chart represents the distribution of the population across different age groups in the USA for the year 2023. The age group 18-24 accounts for 17% of the population, 25-34 for 25%, 35-44 for 21%, 45-54 for 16%, 55-64 for 15%, and those aged 65 and above make up 6% of the population."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(7,7))\nlabels = ['18-24','25-34','35-44','45-54','55-64','65+']\nsizes = [17,25,21,16,15,6]\nexplode = (0, 0, 0, 0, 0, 0.1)\nplt.pie(sizes, explode=explode, labels=labels, autopct='%.2f%%',shadow=True,startangle=90)\nplt.title(\"Population Distribution by Age Group in the USA, 2023\")\nplt.axis('equal')\nplt.tight_layout()\nplt.savefig('pie chart/png/118.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined percentage of the age groups 18-24 and 25-34?",
            "output": "42%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_222",
        "img": "./pie_chart/png/pie_222.png",
        "topic": "Agriculture and Food Production",
        "title": " Distribution of Agricultural Crops in the USA, 2023",
        "csv": "Crops \\t Percentage \\n Cereals \\t 35% \\n Vegetables \\t 20% \\n Fruits \\t 15% \\n Legumes \\t 10% \\n Nuts \\t 5% \\n Oils \\t 5% \\n Spices \\t 5% \\n Dairy \\t 5% \\n Other \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of different agricultural crops in the USA for the year 2023. Cereals make up the largest segment at 35%. Vegetables account for 20% and fruits stand at 15%. Legumes represent 10%, while nuts, oils, spices, dairy, and other categories each comprise 5% of the distribution.\n"
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\n\nimport matplotlib.pyplot as plt\n\n# Create figure before plotting\nfig=plt.figure(figsize=(6,6))\n\n# Plot the data with the type of pie chart\nlabels = ['Cereals','Vegetables','Fruits','Legumes','Nuts','Oils','Spices','Dairy','Other']\nsizes = [35,20,15,10,5,5,5,5,5]\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Hogs')\n\n# Automatically resize the image by tight_layout()\nfig.tight_layout()\n\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90, textprops={'fontsize': 8})\n\n# Set the title of the figure \nplt.title('Distribution of Agricultural Crops in the USA, 2023')\n\n# Rotate the x-axis labels to prevent them from overlapping\nplt.xticks(rotation=-40)\n\n# Save the figure\nplt.savefig('pie chart/png/28.png')\n\n# Clear the current image state at the end of the code \nplt.clf()"
        },
        "QA": {
            "input": "Which categories of crops have the same percentage as Nuts?",
            "output": "Oils, Spices, Dairy, and Other"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_398",
        "img": "./pie_chart/png/pie_398.png",
        "topic": "Social Media and the Web",
        "title": " Social Media Usage in the US, 2023",
        "csv": "Social Platforms \\t Percentage \\n Facebook \\t 25% \\n Instagram \\t 20% \\n Twitter \\t 15% \\n YouTube \\t 20% \\n Snapchat \\t 10% \\n TikTok \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart represents the social media usage in the US for 2023, showing the distribution by percentages. Facebook leads with a 25% share, followed by Instagram and YouTube each at 20%. Twitter accounts for 15%, while Snapchat and TikTok both hold 10% of the social media usage share."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['Facebook','Instagram','Twitter','YouTube','Snapchat','TikTok']\nsizes = [25,20,15,20,10,10]\n\nplt.figure(figsize=(10,10))\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, \n        wedgeprops={'linewidth': 2}, textprops={'fontsize':14,'wrap': True})\nplt.title(\"Social Media Usage in the US, 2023\", fontsize=20)\nplt.tight_layout()\nplt.savefig('pie chart/png/450.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined percentage usage of YouTube and Snapchat?",
            "output": "30%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_486",
        "img": "./pie_chart/png/pie_486.png",
        "topic": "Tourism and Hospitality",
        "title": " Global Visitation Distribution in 2023",
        "csv": "Destinations \\t Visitor Rate \\n Europe \\t 33% \\n North America \\t 19% \\n Asia \\t 22% \\n South America \\t 12% \\n Africa \\t 7% \\n Oceania \\t 7% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart represents the global visitation distribution in 2023 across six destinations. Europe accounts for 33% of the visitor rate, making it the most visited region. North America follows with 19% and Asia with 22%. South America sees 12% of visitors, while both Africa and Oceania each attract 7% of the global visitor rate."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib\n\nlabels = [\"Europe\", \"North America\", \"Asia\", \"South America\", \"Africa\", \"Oceania\"]\nvalues = [33, 19, 22, 12, 7, 7]\n\nplt.figure(figsize=(8, 8))\nplt.title(\"Global Visitation Distribution in 2023\")\nplt.pie(values, labels=labels, autopct=\"%1.1f%%\", pctdistance=0.7, labeldistance=1.2, shadow=True, rotatelabels=True, startangle=90)\nplt.tight_layout()\nplt.xticks(rotation=90)\nplt.savefig(\"pie chart/png/236.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined visitor rate for South America and Africa?",
            "output": "19%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_440",
        "img": "./pie_chart/png/pie_440.png",
        "topic": "Social Sciences and Humanities",
        "title": " Age Distribution of the US Population in 2023",
        "csv": "Age Group \\t Percentage \\n 0-17 \\t 25% \\n 18-25 \\t 20% \\n 26-35 \\t 25% \\n 36-50 \\t 15% \\n 51-65 \\t 13% \\n 65+ \\t 2% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the age distribution of the US population in 2023. The age group 0-17 and 26-35 each make up 25% of the population, while those aged 18-25 represent 20%. The 36-50 age bracket accounts for 15%, and those aged 51-65 make up 13%. The smallest group is the seniors aged 65 and above, constituting 2%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\n\n# set the figure size  \nplt.figure(figsize=(7,7))\n\n# define labels \nlabels = ['0-17','18-25','26-35','36-50','51-65','65+']\n\n# set data \nsizes = [25,20,25,15,13,2]\n\n# set colors \ncolors = ['#ffd1dc','#f9a7b0','#f77f88','#f45d5d','#ee3a36','#e81714']\n\n# draw pie chart \nexplode = (0.1,0,0,0,0,0) \nplt.pie(sizes, labels=labels, colors=colors, autopct='%.2f%%', pctdistance=0.9, explode=explode, shadow=True)\n\n# adjust the position of the legend \nplt.legend(labels, bbox_to_anchor=(1,0.7), loc=\"center right\", fontsize=12)\n\n# set title \nplt.title('Age Distribution of the US Population in 2023')\n\n# adjust the position of the title \nplt.subplots_adjust(top=0.85)\n\n# adjust the characters to show correctly \nplt.tight_layout()\n\n# xticks to prevent interpolation \nplt.xticks(rotation=90)\n\n# save the figure \nplt.savefig('pie chart/png/154.png',bbox_inches = 'tight')\n\n# clear the current state\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined percentage of the age groups 51-65 and 65+?",
            "output": "15%"
        }
    },
    {
        "chart_type": "pie_chart",
        "imgname": "pie_137",
        "img": "./pie_chart/png/pie_137.png",
        "topic": "Transportation and Logistics",
        "title": " Distribution of Transportation Modes in the USA, 2023",
        "csv": "Mode of Transport \\t Percentage \\n Rail \\t 30% \\n Air \\t 15% \\n Sea \\t 20% \\n Road \\t 35% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The pie chart illustrates the distribution of different transportation modes in the USA for the year 2023. Rail transport accounts for 30% of the distribution, air transport makes up 15%, sea transport constitutes 20%, and the road is the most significant portion, representing 35% of transport distribution."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['Rail', 'Air', 'Sea', 'Road']\npercentage = [30, 15, 20, 35]\n\nfig,ax = plt.subplots(figsize=(9, 9))\nax.pie(percentage, labels=labels, autopct='%1.1f%%', startangle=90, pctdistance=0.85)\n\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\nax.axis('equal')  \nax.set_title(\"Distribution of Transportation Modes in the USA, 2023\")\nplt.xticks(rotation=90)\nplt.tight_layout()\nplt.savefig(\"pie chart/png/261.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage of Air transport?",
            "output": "15%"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_273",
        "img": "./bar_chart_num/png/bar_num_273.png",
        "topic": "Social Media and the Web",
        "title": " Number of users and revenue of four major social media platforms in 2021",
        "csv": "Platform \\t Users (millions) \\t Revenue (million USD) \\n Facebook \\t 2.00 \\t 65 \\n YouTube \\t 2.50 \\t 20 \\n Twitter \\t 0.80 \\t 7 \\n Instagram \\t 1.20 \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of users (in millions) and revenue (in million USD) for four major social media platforms in 2021. Facebook shows 2.00 million users with a revenue of 65 million USD, YouTube has the highest user count at 2.50 million with a revenue of 20 million USD, Twitter has 0.80 million users alongside 7 million USD in revenue, and Instagram reports 1.20 million users and 15 million USD revenue."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nPlatform = [ 'Facebook', 'YouTube', 'Twitter', 'Instagram' ]\nUsers = [ 2.00, 2.50, 0.80, 1.20 ]\nRevenue = [ 65, 20, 7, 15 ]\n\nx = np.arange(len(Platform))\nwidth = 0.35\n\nfig, ax = plt.subplots(figsize=(7,6))\nax.bar(x - width/2, Users, width, label='Users (millions)')\nax.bar(x + width/2, Revenue, width, label='Revenue (million USD)')\n\nax.set_xticks(x)\nax.set_xticklabels(Platform)\nax.set_ylabel('Number of users and revenue')\nax.set_title('Number of users and revenue of four major social media platforms in 2021')\nax.legend(loc='upper center',bbox_to_anchor=(0.5,-0.2),ncol=2)\nax.autoscale_view()\n\nfor i, v in enumerate(Users):\n    ax.text(x[i] - width/2, v + 0.5, str(v), color='blue', fontweight='bold')\n\nfor i, v in enumerate(Revenue):\n    ax.text(x[i] + width/2, v + 0.5, str(v), color='red', fontweight='bold')\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/575.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "How many users does YouTube have in millions?",
            "output": "2.50"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_210",
        "img": "./bar_chart_num/png/bar_num_210.png",
        "topic": "Sports and Entertainment",
        "title": " Number of Sports Teams and Concerts in Four Countries in 2021",
        "csv": "Country \\t Sports Teams \\t Concerts \\n USA \\t 60 \\t 50 \\n UK \\t 70 \\t 60 \\n Germany \\t 50 \\t 70 \\n France \\t 80 \\t 60 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of Sports Teams and Concerts in Four Countries in 2021\" presents data on two categories across the USA, UK, Germany, and France. Specifically, the USA is shown with 60 sports teams and 50 concerts, the UK has 70 sports teams and 60 concerts, Germany features 50 sports teams and 70 concerts, while France leads with 80 sports teams and 60 concerts."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ncountry = ['USA','UK','Germany','France']\nsports_teams = [60,70,50,80]\nconcerts = [50,60,70,60]\n\nfig = plt.figure(figsize=(10,7))\nax = fig.add_subplot()\n\nwidth = 0.35\nx = np.arange(len(country))\n\nax.bar(x, sports_teams, width, label=\"Sports Teams\")\nax.bar(x + width, concerts, width, label=\"Concerts\")\n\nax.set_ylabel(\"Number\")\nax.set_title(\"Number of Sports Teams and Concerts in Four Countries in 2021\")\nax.set_xticks(x + width/2)\nax.set_xticklabels(country)\n\nax.legend(loc=\"upper left\")\n\nfor i, v in enumerate(sports_teams):\n    ax.text(i - 0.15, v+3, str(v))\n\nfor i, v in enumerate(concerts):\n    ax.text(i + 0.15, v+3, str(v))\n\nplt.tight_layout()\nplt.savefig(\"Bar Chart/png/176.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How many concerts were there in Germany?",
            "output": "70"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_3",
        "img": "./bar_chart_num/png/bar_num_3.png",
        "topic": "Food and Beverage Industry",
        "title": " Number of food and beverage outlets in four regions in 2021",
        "csv": "Region \\t Fast Food \\t Coffee \\t Beverages \\n North \\t 200 \\t 400 \\t 300 \\n South \\t 220 \\t 420 \\t 320 \\n East \\t 180 \\t 380 \\t 280 \\n West \\t 210 \\t 410 \\t 310 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of fast food, coffee, and beverage outlets across four regions in 2021. The North region features 200 fast food outlets, 400 coffee shops, and 300 beverage stores. In the South, there are 220 fast food outlets, 420 coffee shops, and 320 beverage stores. The East shows a count of 180 fast food outlets, 380 coffee shops, and 280 beverage stores. Finally, the West has 210 fast food outlets, 410 coffee shops, and 310 beverage stores."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nRegion = ['North','South','East','West']\nFast_Food = [200,220,180,210]\nCoffee = [400,420,380,410]\nBeverages = [300,320,280,310]\n\nfig = plt.figure(figsize=(12,6))\nax = fig.add_subplot()\nax.bar(Region, Fast_Food, label='Fast Food', bottom=0)\nax.bar(Region, Coffee, label='Coffee', bottom=Fast_Food)\nax.bar(Region, Beverages, label='Beverages', bottom=[sum(x) for x in zip(Fast_Food, Coffee)])\nplt.xticks(Region)\nplt.legend()\nplt.title('Number of food and beverage outlets in four regions in 2021')\n\n\nplt.tight_layout()\nplt.savefig('bar_3.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more beverage outlets are there in the South than in the East?",
            "output": "40"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_12",
        "img": "./bar_chart_num/png/bar_num_12.png",
        "topic": "Social Media and the Web",
        "title": " Number of social media users in four countries in 2021",
        "csv": "Country \\t Facebook Users \\t Instagram Users \\t Twitter Users \\n USA \\t 200 million \\t 130 million \\t 160 million \\n UK \\t 90 million \\t 50 million \\t 80 million \\n Germany \\t 120 million \\t 60 million \\t 70 million \\n France \\t 130 million \\t 70 million \\t 90 million \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of social media users across Facebook, Instagram, and Twitter in four countries for the year 2021. The USA leads with 200 million Facebook users, 130 million Instagram users, and 160 million Twitter users. The UK follows with 90 million Facebook users, 50 million on Instagram, and 80 million Twitter users. Germany has 120 million Facebook users, 60 million Instagram users, and 70 million Twitter users. France has 130 million users on Facebook, 70 million on Instagram, and 90 million using Twitter."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# create the figure\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot()\n\n# define the data\ncountry = np.array(['USA', 'UK', 'Germany', 'France'])\nfb_users = np.array([200, 90, 120, 130])\nig_users = np.array([130, 50, 60, 70])\ntw_users = np.array([160, 80, 70, 90])\n\n# draw the plot\np1 = ax.bar(country, fb_users, color='#FFA500', label='Facebook')\np2 = ax.bar(country, ig_users, bottom=fb_users, color='#0099FF', label='Instagram')\np3 = ax.bar(country, tw_users, bottom=fb_users+ig_users, color='#66CC99', label='Twitter')\n\n\n# set the title\nplt.title(\"Number of social media users in four countries in 2021\")\n\n# set the legend\nplt.legend(loc='upper left')\n\n# set the xticks\nplt.xticks(country, fontsize=9, rotation=45)\n\n# automatically resize the image\nplt.tight_layout()\n\n# save the figure\nplt.savefig('bar_12.png')\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "By how many million is the number of Facebook users in France greater than its Twitter users?",
            "output": "40 million"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_188",
        "img": "./bar_chart_num/png/bar_num_188.png",
        "topic": "Government and Public Policy",
        "title": " Public services, tax rate and GDP of four countries in 2021",
        "csv": "Country \\t Public Services \\t Tax Rate \\t GDP \\n USA \\t 8.5 \\t 20% \\t 21.4 trillion \\n UK \\t 7.5 \\t 25% \\t 2.9 trillion \\n Germany \\t 9.0 \\t 30% \\t 4.2 trillion \\n France \\t 8.0 \\t 35% \\t 2.9 trillion \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart numerically quantifies public services ratings, tax rates, and GDP for the USA, UK, Germany, and France in 2021. Ratings for public services are out of 10, with the USA at 8.5, the UK at 7.5, Germany leading at 9.0, and France at 8.0. Tax rates are shown in percentages, with the USA at 20%, the UK at 25%, Germany at 30%, and France the highest at 35%. GDP is presented in trillions: the USA at 21.4, the UK and France both at 2.9, and Germany at 4.2."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['USA', 8.5, 20, 21.4],\n        ['UK', 7.5, 25, 2.9],\n        ['Germany', 9.0, 30, 4.2],\n        ['France', 8.0, 35, 2.9]]\n\n# Create figure\nfig = plt.figure(figsize=(8,5))\n\n# Plot bar chart\nax = fig.add_subplot()\n\n# Define labels\nlabels = ['Public Services','Tax Rate','GDP']\n\n# Get data\ndata_x = np.arange(len(data))\ndata_y0 = [i[1] for i in data]\ndata_y1 = [i[2] for i in data]\ndata_y2 = [i[3] for i in data]\ndata_y = [data_y0, data_y1, data_y2]\n\n# Create bar chart\nax.bar(data_x, data_y0, label=labels[0], color='#539caf')\nax.bar(data_x, data_y1, bottom=data_y0, label=labels[1], color='#7663b0')\nax.bar(data_x, data_y2, bottom=[sum(x) for x in zip(data_y1,data_y0)], label=labels[2], color='#e45756')\n\n# Set x-axis\nax.set_xticks(data_x)\nax.set_xticklabels([i[0] for i in data])\n\n# Add title and legend\nax.set_title('Public services, tax rate and GDP of four countries in 2021')\nax.legend(loc='upper right', bbox_to_anchor=(1.15, 1))\n\n# Add value annotation\nfor x, y0, y1, y2 in zip(data_x, data_y0, data_y1, data_y2):\n    ax.annotate(f'{y0}', xy=(x, y0/2), ha='center')\n    ax.annotate(f'{y1}', xy=(x, y0+y1/2), ha='center')\n    ax.annotate(f'{y2}', xy=(x, y0+y1+y2/2), ha='center', rotation=90, wrap=True)\n\n# Resize the image\nfig.tight_layout()\n\n# Save figure\nplt.savefig('bar_118.png')\n\n# Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "What was the GDP of the UK in 2021?",
            "output": "2.9 trillion"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_206",
        "img": "./bar_chart_num/png/bar_num_206.png",
        "topic": "Healthcare and Health",
        "title": " Number of hospitals and staffs in four countries in 2021",
        "csv": "Country \\t Hospitals \\t Staff \\n USA \\t 150 \\t 25000 \\n UK \\t 170 \\t 26000 \\n Germany \\t 140 \\t 23000 \\n France \\t 160 \\t 24000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the total number of hospitals and staff in four countries for the year 2021. The data illustrates that the USA has 150 hospitals with 25,000 staff members, the UK with 170 hospitals and 26,000 staff, Germany with 140 hospitals and 23,000 staff, and France with 160 hospitals accompanied by 24,000 staff members."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfig=plt.figure(figsize=(12,8))\nax=fig.add_subplot()\nx=[\"USA\",\"UK\",\"Germany\",\"France\"]\nhospitals=[150,170,140,160]\nstaffs=[25000,26000,23000,24000]\nax.bar(x,hospitals,label=\"Hospitals\",bottom=staffs,color='#00aaff',alpha=0.7)\nax.bar(x,staffs,label=\"Staff\",color='#ffaa00',alpha=0.7)\nfor i,j in zip(x,hospitals):\n    ax.annotate(str(j),xy=(i,j),ha='center',va='center',color='black',fontsize=12)\nfor i,j in zip(x,staffs):\n    ax.annotate(str(j),xy=(i,j),ha='center',va='center',color='black',fontsize=12)\nax.set_title(\"Number of hospitals and staffs in four countries in 2021\",fontsize=15)\nax.set_xticks(x)\nax.set_ylabel(\"Number\")\nax.legend(loc=\"upper right\")\nplt.tight_layout()\nplt.savefig('Bar Chart/png/179.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many staff members are there in French hospitals?",
            "output": "24000"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_168",
        "img": "./bar_chart_num/png/bar_num_168.png",
        "topic": "Science and Engineering",
        "title": " Number of research institutions, laboratories, and engineers in four regions in 2021",
        "csv": "Region \\t Research Institutions \\t Laboratories \\t Engineers \\n North America \\t 50 \\t 90 \\t 1500 \\n South America \\t 25 \\t 70 \\t 1200 \\n Europe \\t 75 \\t 120 \\t 1100 \\n Asia \\t 100 \\t 150 \\t 1300 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of research institutions, laboratories, and engineers in four regions in 2021\" presents data for North America with 50 research institutions, 90 laboratories, and 1500 engineers. South America follows with 25 research institutions, 70 laboratories, and 1200 engineers. Europe is shown with 75 research institutions, 120 laboratories, and 1100 engineers, whereas Asia leads in research institutions and laboratories with 100 and 150, respectively, and exhibits 1300 engineers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nregion = ['North America', 'South America', 'Europe', 'Asia']\nresearch_institutions = [50, 25, 75, 100]\nlaboratories = [90, 70, 120, 150]\nengineers = [1500, 1200, 1100, 1300]\n\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot()\n\nax.bar(region, research_institutions, label='Research Institutions')\nax.bar(region, laboratories, bottom=research_institutions, label='Laboratories')\nax.bar(region, engineers, bottom=np.array(research_institutions)+np.array(laboratories), label='Engineers')\n\nax.set_xticks(region)\nax.set_title('Number of research institutions, laboratories, and engineers in four regions in 2021')\nax.set_xlabel('Region')\nax.set_ylabel('Number')\n\nax.legend(loc='upper left')\n\nfor i, v in enumerate(research_institutions):\n    ax.text(i-0.1, v/2, str(v), color='white', fontweight='bold')\nfor i, v in enumerate(laboratories):\n    ax.text(i-0.1, research_institutions[i] + v/2, str(v), color='white', fontweight='bold')\nfor i, v in enumerate(engineers):\n    ax.text(i-0.1, research_institutions[i] + laboratories[i] + v/2, str(v), color='white', fontweight='bold')\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/472.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many engineers are there in North America?",
            "output": "1500"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_99",
        "img": "./bar_chart_num/png/bar_num_99.png",
        "topic": "Law and Legal Affairs",
        "title": " Number of criminal and civil cases in four countries in 2021",
        "csv": "Country \\t Criminal Cases \\t Civil Cases \\n USA \\t 150 \\t 350 \\n UK \\t 170 \\t 400 \\n Germany \\t 160 \\t 380 \\n France \\t 140 \\t 370 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of criminal and civil cases in four countries in 2021\" shows the counts of legal cases categorized as either criminal or civil across the USA, UK, Germany, and France. The USA saw 150 criminal cases and 350 civil cases; the UK recorded 170 criminal and 400 civil cases; Germany experienced 160 criminal and 380 civil cases; and in France, there were 140 criminal cases and 370 civil cases reported."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nCountry = ['USA', 'UK', 'Germany', 'France']\nCriminal_Cases = [150, 170, 160, 140]\nCivil_Cases = [350, 400, 380, 370]\n\n# Create figure\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(111)\n\n# Stacked bar chart\nwidth = 0.4\nx = np.arange(len(Country))\nax.bar(x, Criminal_Cases, width, label='Criminal Cases')\nax.bar(x, Civil_Cases, width, bottom=Criminal_Cases, label='Civil Cases')\n\n# Label the bars\nfor i in range(len(Country)):\n    ax.annotate('{}'.format(Criminal_Cases[i]),\n                xy=(i, Criminal_Cases[i]),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom', rotation=45)\n    ax.annotate('{}'.format(Civil_Cases[i]),\n                xy=(i, Criminal_Cases[i]+Civil_Cases[i]),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom', rotation=45)\n\n# Naming the x-axis\nplt.xticks(x, Country, rotation=45)\n\n# Add legend\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), shadow=True, ncol=2)\n\n# Add title\nax.set_title('Number of criminal and civil cases in four countries in 2021')\n\n# Resize the figure\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Bar Chart/png/88.png')\n\n# Clear the current image state\nplt.cla()"
        },
        "QA": {
            "input": "How many more civil cases are there in the UK compared to the USA?",
            "output": "50 cases"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_413",
        "img": "./bar_chart_num/png/bar_num_413.png",
        "topic": "Tourism and Hospitality",
        "title": " Number of hotels, restaurants and tourists in four countries in 2021",
        "csv": "Country \\t Hotels \\t Restaurants \\t Tourists \\n USA \\t 50 \\t 80 \\t 450 \\n UK \\t 70 \\t 90 \\t 500 \\n Germany \\t 60 \\t 70 \\t 400 \\n France \\t 80 \\t 100 \\t 470 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of hotels, restaurants, and tourists in four countries in 2021\" depicts discrete numerical comparisons among the USA, UK, Germany, and France. In 2021, the USA is shown to have 50 hotels, 80 restaurants, and 450 tourists. The UK figures are slightly higher with 70 hotels, 90 restaurants, and 500 tourists. Germany has 60 hotels, 70 restaurants, and 400 tourists. France leads in hotels and restaurants with 80 and 100 respectively and has 470 tourists. The data presents a straightforward comparison of the three sectors across the countries."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \n\ndata = np.array([[50,80,450],[70,90,500],[60,70,400],[80,100,470]])\nx_labels = ['USA','UK','Germany','France']\ncategory = ['Hotels','Restaurants','Tourists']\n\nfig, ax = plt.subplots(figsize=(10, 6))\nbottom = np.zeros(len(x_labels))\nfor i,cat in enumerate(category):\n    ax.bar(x_labels,data[:,i],bottom=bottom, label=cat, width=0.5)\n    bottom += data[:,i]\nplt.title('Number of hotels, restaurants and tourists in four countries in 2021')\nplt.xticks(x_labels)\nplt.legend()\n\nfor x,y in zip(x_labels,data.sum(axis=1)):\n    plt.text(x,y,y, ha='center', va='bottom')\n\nplt.tight_layout()\nplt.savefig(\"Bar Chart/png/283.png\")\nplt.show()\nplt.clf()"
        },
        "QA": {
            "input": "How many tourists visited the UK in 2021?",
            "output": "500"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_414",
        "img": "./bar_chart_num/png/bar_num_414.png",
        "topic": "Agriculture and Food Production",
        "title": " Agricultural production of crops, livestock and fruit in four countries in 2021",
        "csv": "Country \\t Crops(tons) \\t Livestock(tons) \\t Fruit(tons) \\n USA \\t 100 \\t 200 \\t 300 \\n UK \\t 80 \\t 150 \\t 250 \\n Germany \\t 90 \\t 180 \\t 230 \\n France \\t 110 \\t 210 \\t 270 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Agricultural production of crops, livestock, and fruit in four countries in 2021\" illustrates the quantity of each category produced in tons. The USA produced 100 tons of crops, 200 tons of livestock, and 300 tons of fruit. The UK's figures are 80 tons for crops, 150 tons for livestock, and 250 tons for fruit. Germany produced 90 tons of crops, 180 tons for livestock, and 230 tons of fruit, while France had 110 tons of crops, 210 tons of livestock, and 270 tons of fruit."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nCountry = ['USA', 'UK', 'Germany', 'France']\nCrops = [100, 80, 90, 110]\nLivestock = [200, 150, 180, 210]\nFruit = [300, 250, 230, 270]\n\nx = np.arange(len(Country))  # the label locations\nwidth = 0.25  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(8,6))\nrects1 = ax.bar(x - width, Crops, width, label='Crops')\nrects2 = ax.bar(x, Livestock, width, label='Livestock')\nrects3 = ax.bar(x + width, Fruit, width, label='Fruit')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Quantity (tons)')\nax.set_title('Agricultural production of crops, livestock and fruit in four countries in 2021')\nax.set_xticks(x)\nax.set_xticklabels(Country)\nax.legend()\n\n# label each bar with its respective value\nfor rect in rects1:\n    height = rect.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor rect in rects2:\n    height = rect.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor rect in rects3:\n    height = rect.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\nfig.tight_layout()\n\nplt.savefig('Bar Chart/png/2.png', dpi=100, bbox_inches='tight')\n\nplt.clf()"
        },
        "QA": {
            "input": "How many tons of fruit does Germany produce?",
            "output": "230"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_478",
        "img": "./bar_chart_num/png/bar_num_478.png",
        "topic": "Real Estate and Housing Market",
        "title": " Average House Prices and Number of Houses Sold in Four Regions in 2021",
        "csv": "Region \\t Average House Price (million) \\t Number of Houses Sold \\n North \\t 1.5 \\t 250 \\n South \\t 2.3 \\t 320 \\n East \\t 1.8 \\t 280 \\n West \\t 2.1 \\t 300 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the average house prices in millions and the number of houses sold across four regions in 2021. The North region shows an average house price of 1.5 million with 250 houses sold. The South has a higher average house price of 2.3 million and 320 houses sold. The East region's average house price stands at 1.8 million with 280 houses sold, while the West follows closely with an average price of 2.1 million and 300 houses sold."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data\nRegion = np.array([\"North\", \"South\", \"East\", \"West\"])\nAverage_House_Price = np.array([1.5, 2.3, 1.8, 2.1])\nNumber_of_Houses_Sold = np.array([250, 320, 280, 300])\n\n# Create a figure\nfig = plt.figure(figsize=(8,5))\nax = fig.add_subplot(111)\n\n# Plot data\nax.bar(Region, Average_House_Price, width=0.3, bottom=0, label=\"Average House Price (million)\")\nax.bar(Region, Number_of_Houses_Sold, width=0.3, bottom=Average_House_Price, label=\"Number of Houses Sold\")\n\n# Label data\nfor i, j in enumerate(Average_House_Price):\n    ax.annotate(str(j)+\"\\n\"+str(Number_of_Houses_Sold[i]), xy=(i-0.15, j/2+Number_of_Houses_Sold[i]/2), rotation=90)\n\n# Settings\nax.set_title(\"Average House Prices and Number of Houses Sold in Four Regions in 2021\")\nax.set_xticks(np.arange(4))\nax.set_xticklabels(Region, rotation=-45, ha=\"left\")\nax.set_yticks(np.arange(0, 4, 0.5))\nax.set_yticklabels(np.arange(0, 4, 0.5))\nax.legend(loc=\"upper left\")\n\n# Display\nplt.tight_layout()\nplt.savefig(\"Bar Chart/png/132.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How many more houses were sold in the South compared to the East?",
            "output": "40"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_458",
        "img": "./bar_chart_num/png/bar_num_458.png",
        "topic": "Education and Academics",
        "title": " Academic scores of Math, Science and English for grades 1 to 4",
        "csv": "Grade \\t Math \\t Science \\t English \\n 1 \\t 80 \\t 85 \\t 90 \\n 2 \\t 85 \\t 90 \\t 95 \\n 3 \\t 90 \\t 95 \\t 100 \\n 4 \\t 95 \\t 100 \\t 105 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the academic scores for Math, Science, and English across grades 1 to 4. In grade 1, students scored an average of 80 in Math, 85 in Science, and 90 in English. For grade 2, the scores increased to 85 in Math, 90 in Science, and 95 in English. The trend continues with grade 3 scoring 90 in Math, 95 in Science, and 100 in English, and grade 4 with 95 in Math, 100 in Science, and 105 in English."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [[1, 80, 85, 90],\n        [2, 85, 90, 95],\n        [3, 90, 95, 100],\n        [4, 95, 100, 105]]\n\nlabels = [\"Grade\",\"Math\",\"Science\",\"English\"]\n\ngrade,math,science,english = np.array(data).T\n\nx = np.arange(len(grade))\n\nwidth = 0.2\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\nrects1 = ax.bar(x, math, width, label=labels[1])\nrects2 = ax.bar(x + width, science, width, label=labels[2])\nrects3 = ax.bar(x + width + width, english, width, label=labels[3])\n\nax.set_xticks(x + width / 2)\nax.set_xticklabels(grade)\nax.set_title(\"Academic scores of Math, Science and English for grades 1 to 4\")\nax.legend()\n\ndef add_value_labels(ax, spacing=5):\n    for rect in ax.patches:\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() / 2\n\n        space = spacing\n        va = 'bottom'\n\n        if y_value < 0:\n            space *= -1\n            va = 'top'\n\n        label = \"{:.0f}\".format(y_value)\n\n        ax.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\nadd_value_labels(ax)\n\nfig.tight_layout()\nplt.savefig('Bar Chart/png/524.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much is the Science score for Grade 3?",
            "output": "95"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_500",
        "img": "./bar_chart_num/png/bar_num_500.png",
        "topic": "Real Estate and Housing Market",
        "title": " Average house prices and rents in four regions in 2021",
        "csv": "Region \\t Average House Price($) \\t Average Rent($) \\n North \\t 500000 \\t 3000 \\n South \\t 450000 \\t 2500 \\n East \\t 400000 \\t 2000 \\n West \\t 350000 \\t 1500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents average house prices and rents across four different regions in 2021. In the North region, the average house price is $500,000 with an average rent of $3,000. The South shows an average house price of $450,000 and rent at $2,500. For the East region, the average price stands at $400,000 with rent being $2,000. Finally, the West region has the lowest average house price of $350,000 and rent at $1,500."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(4)\n\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(111)\n\ndata = np.array([[500000,3000],[450000,2500],[400000,2000],[350000,1500]])\nhouse_price = ax.bar(x,data[:,0],width=0.4,label='House Prices')\nrent = ax.bar(x+0.4,data[:,1],width=0.4,label='Rent')\n\nax.set_xticks(x+0.2)\nax.set_xticklabels(('North','South','East','West'))\nax.set_title('Average house prices and rents in four regions in 2021')\nax.legend()\n\nfor house, rent in zip(house_price, rent):\n    ax.annotate('$'+str(house.get_height()),\n                xy=(house.get_x() + house.get_width() / 2, house.get_height()),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n    ax.annotate('$'+str(rent.get_height()),\n                xy=(rent.get_x() + rent.get_width() / 2, rent.get_height()),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\nfig.tight_layout()\nplt.savefig('Bar Chart/png/556.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the average house price difference between the Northern and Southern regions?",
            "output": "$50,000"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_410",
        "img": "./bar_chart_num/png/bar_num_410.png",
        "topic": "Law and Legal Affairs",
        "title": " Number of lawyers and Judges in four countries in 2021",
        "csv": "Country \\t Lawyers(thousands) \\t Judges(thousands) \\n USA \\t 600 \\t 90 \\n UK \\t 400 \\t 100 \\n Germany \\t 500 \\t 120 \\n France \\t 450 \\t 110 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of Lawyers and Judges in Four Countries in 2021\" presents data on legal professionals in thousands. In the USA, there are 600 thousand lawyers and 90 thousand judges. The UK follows with 400 thousand lawyers and a higher count of judges at 100 thousand. Meanwhile, Germany has 500 thousand lawyers and the highest number of judges at 120 thousand. France has 450 thousand lawyers paired with 110 thousand judges. The chart compares these two categories of legal professionals across the countries."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(9,6))\nwidth = 0.35\nax.bar(['USA','UK','Germany','France'], [600,400,500,450], width, label='Lawyers(thousands)', color='purple')\nax.bar(['USA','UK','Germany','France'], [90,100,120,110], width, label='Judges(thousands)', color='orange', bottom=[600,400,500,450])\nax.set_title('Number of lawyers and Judges in four countries in 2021')\nax.set_xticks(['USA','UK','Germany','France'])\nax.legend()\nfor i, v in enumerate([600,400,500,450]):\n    ax.text(i-.12, v/2 + max([90,100,120,110])/2, str(v), color='blue', fontweight='bold')\nfor i, v in enumerate([90,100,120,110]):\n    ax.text(i-.12, v/2 + 600, str(v), color='green', fontweight='bold')\nplt.tight_layout()\nplt.savefig('Bar Chart/png/97.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many judges are there in Germany?",
            "output": "120"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_44",
        "img": "./bar_chart_num/png/bar_num_44.png",
        "topic": "Tourism and Hospitality",
        "title": " Number of hotels, restaurants and tourist attractions in four regions in 2021",
        "csv": "Region \\t Hotels \\t Restaurants \\t Tourist Attractions \\n Europe \\t 145 \\t 400 \\t 600 \\n Asia \\t 180 \\t 500 \\t 700 \\n Africa \\t 120 \\t 350 \\t 500 \\n Oceania \\t 130 \\t 380 \\t 570 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of hotels, restaurants, and tourist attractions in four regions in 2021\" shows a comparison across Europe, Asia, Africa, and Oceania. Europe has 145 hotels, 400 restaurants, and 600 tourist attractions. Asia leads with 180 hotels, 500 restaurants, and 700 tourist attractions. Africa is presented with 120 hotels, 350 restaurants, and 500 tourist attractions, and Oceania has slightly more with 130 hotels, 380 restaurants, and 570 tourist attractions."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(12,6))\nax = fig.add_subplot(111)\n\nregions = ['Europe', 'Asia', 'Africa', 'Oceania']\nhotels = [145, 180, 120, 130]\nrestaurants = [400, 500, 350, 380]\ntourist_attractions = [600, 700, 500, 570]\n\nax.set_title('Number of hotels, restaurants and tourist attractions in four regions in 2021')\n\nbar1 = ax.bar(regions, hotels, bottom=np.add(restaurants,tourist_attractions), label='Hotels')\nbar2 = ax.bar(regions, restaurants, bottom=tourist_attractions, label='Restaurants')\nbar3 = ax.bar(regions, tourist_attractions, label='Tourist Attractions')\n\nax.set_xticks(regions)\nax.set_yticks(np.arange(0, 1201, 100))\nax.set_ylabel('Number of Hotels/Restaurants/Tourist Attractions')\nax.legend()\n\nfor i, rect in enumerate(bar1):\n    ax.annotate(hotels[i], xy=(rect.get_x() + rect.get_width() / 2, rect.get_height()), xytext=(0, 3), \n                textcoords=\"offset points\", ha='center', va='bottom', rotation=45)\nfor i, rect in enumerate(bar2):\n    ax.annotate(restaurants[i], xy=(rect.get_x() + rect.get_width() / 2, rect.get_height()), xytext=(0, 3), \n                textcoords=\"offset points\", ha='center', va='bottom', rotation=45)\nfor i, rect in enumerate(bar3):\n    ax.annotate(tourist_attractions[i], xy=(rect.get_x() + rect.get_width() / 2, rect.get_height()), xytext=(0, 3), \n                textcoords=\"offset points\", ha='center', va='bottom', rotation=45)\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/531.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more restaurants are there in Asia compared to Oceania?",
            "output": "120"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_38",
        "img": "./bar_chart_num/png/bar_num_38.png",
        "topic": "Law and Legal Affairs",
        "title": " Number of criminal and civil cases in four countries in 2021",
        "csv": "Country \\t Criminal Cases \\t Civil Cases \\n USA \\t 2000 \\t 3000 \\n UK \\t 1750 \\t 2500 \\n Germany \\t 1800 \\t 2700 \\n France \\t 1900 \\t 3100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of criminal and civil cases in four countries in 2021\" presents data on legal cases for the USA, UK, Germany, and France. Specifically, the USA has 2000 criminal and 3000 civil cases; the UK shows 1750 criminal and 2500 civil cases; Germany records 1800 criminal and 2700 civil cases; while France reports 1900 criminal and 3100 civil cases."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure and plot space\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Add x-axis and y-axis\nax.bar([\"USA\", \"UK\", \"Germany\", \"France\"],\n       [2000, 1750, 1800, 1900], label=\"Criminal Cases\",\n       bottom=[3000, 2500, 2700, 3100], color='b')\nax.bar([\"USA\", \"UK\", \"Germany\", \"France\"],\n       [3000, 2500, 2700, 3100], label=\"Civil Cases\",\n       color='r')\n\n# Set title and labels for axes\nax.set(xlabel=\"Country\",\n       ylabel=\"Number of Cases\",\n       title=\"Number of criminal and civil cases in four countries in 2021\")\n\n# Define the position of the legend\nax.legend(loc=\"upper left\")\n\n# Add text annotation to the plot\nfor p in ax.patches:\n    ax.annotate(np.round(p.get_height(),decimals=2),\n                (p.get_x()+p.get_width()/2., p.get_height()),\n                ha='center', va='center',\n                xytext=(0, 10),\n                textcoords='offset points',\n                rotation='vertical',\n                fontsize = 14)\n\n# Resize the figure\nplt.tight_layout()\n\n# Set ticks\nplt.xticks(rotation=45)\n\n# Save Figure\nplt.savefig('Bar Chart/png/484.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more criminal cases are there in the USA compared to Germany?",
            "output": "200"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_371",
        "img": "./bar_chart_num/png/bar_num_371.png",
        "topic": "Social Sciences and Humanities",
        "title": " Number of publications in three fields of Social Sciences and Humanities in four countries in 2021",
        "csv": "Country \\t Literature \\t Philosophy \\t Anthropology \\n USA \\t 200 \\t 450 \\t 510 \\n UK \\t 300 \\t 500 \\t 550 \\n Germany \\t 180 \\t 400 \\t 430 \\n France \\t 230 \\t 470 \\t 490 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of publications in three fields of Social Sciences and Humanities in four countries in 2021\" presents data on the quantity of literature, philosophy, and anthropology publications for the year. According to the provided data, the USA produced 200 literature, 450 philosophy, and 510 anthropology publications. The UK had 300 in literature, 500 in philosophy, and 550 in anthropology. Germany's numbers were 180 for literature, 400 for philosophy, and 430 for anthropology, while France recorded 230 literature, 470 philosophy, and 490 anthropology publications."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = ['USA', 'UK', 'Germany', 'France']\n\ny1 = [200, 300, 180, 230]\ny2 = [450, 500, 400, 470]\ny3 = [510, 550, 430, 490]\n\nfig = plt.figure(figsize=(12,6))\nax = fig.add_subplot(111)\n\nax.bar(x, y1, color='c', label='Literature')\nax.bar(x, y2, color='m', bottom=y1, label='Philosophy')\nax.bar(x, y3, color='y', bottom=[i+j for i,j in zip(y1,y2)], label='Anthropology')\n\nax.set_title(\"Number of publications in three fields of Social Sciences and Humanities in four countries in 2021\")\nax.set_xticks(np.arange(len(x)))\nax.set_xticklabels(x)\nax.legend()\nax.grid()\n\nfor i, j in enumerate(y1):\n    ax.annotate(str(j), xy=(i-0.2, j+10))\n\nfor i, j in enumerate(y2):\n    ax.annotate(str(j), xy=(i-0.2, j+10+y1[i]))\n\nfor i, j in enumerate(y3):\n    ax.annotate(str(j), xy=(i-0.2, j+10+y1[i]+y2[i]))\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/199.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which country is the number of Literature publications the highest?",
            "output": "UK"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_287",
        "img": "./bar_chart_num/png/bar_num_287.png",
        "topic": "Education and Academics",
        "title": " Number of students enrolled and schools in four countries in 2021",
        "csv": "Country \\t Students Enrolled(million) \\t Schools \\n USA \\t 50 \\t 4000 \\n UK \\t 40 \\t 3000 \\n Germany \\t 30 \\t 2500 \\n France \\t 35 \\t 3500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of students enrolled in millions alongside the total schools in four different countries for the year 2021. In the USA, there are 50 million students enrolled across 4000 schools. The UK follows with 40 million students enrolled in 3000 schools. Germany has 30 million students with 2500 schools, while France shows 35 million students enrolled across 3500 schools."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#Creation of data\ncountry = ['USA','UK','Germany','France']\nstudents_enrolled = [50,40,30,35]\nschools = [4000,3000,2500,3500]\n\n#Create figure\nfig, ax = plt.subplots(figsize=(12, 6))\n\n#Plotting of data\nax.bar(country, students_enrolled, label='Enrolled Students', zorder=2)\nax.bar(country, schools, bottom=students_enrolled, label='Schools', zorder=2)\n\n#Labeling of data\nax.set_title('Number of students enrolled and schools in four countries in 2021')\nax.set_xlabel('Country')\nax.set_ylabel('Number')\nax.legend(loc='upper left')\nax.set_xticks(country)\n\n#Annotation of data\nfor i, v in enumerate(students_enrolled):\n    ax.text(i-.1, v+2, str(v), color='black', fontweight='bold')\nfor i, v in enumerate(schools):\n    ax.text(i-.1, v+2, str(v), color='black', fontweight='bold')\n\n#Adjusting the display\nplt.tight_layout()\n\n#Save figure\nplt.savefig('Bar Chart/png/451.png')\n\n#Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more million students are enrolled in the USA compared to France?",
            "output": "15 million"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_48",
        "img": "./bar_chart_num/png/bar_num_48.png",
        "topic": "Business and Finance",
        "title": " GDP and Economic Growth of four countries in 2021",
        "csv": "Country \\t GDP (billion USD) \\t Economic Growth (%) \\n USA \\t 22 \\t 3.4 \\n UK \\t 2.5 \\t 1.3 \\n Germany \\t 4.7 \\t 2.1 \\n France \\t 2.9 \\t 1.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"GDP and Economic Growth of four countries in 2021\" illustrates numerical data for each country's gross domestic product (GDP) in billions of USD and their respective economic growth rates in percentages. The USA is shown with a GDP of 22 billion USD and an economic growth rate of 3.4%. The UK follows with a GDP of 2.5 billion USD and a growth rate of 1.3%. Germany has a GDP of 4.7 billion USD with a 2.1% growth rate, and France's GDP is 2.9 billion USD with a 1.5% economic growth rate."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nCountry = ['USA', 'UK', 'Germany', 'France']\nGDP = [22, 2.5, 4.7, 2.9]\nGrowth = [3.4, 1.3, 2.1, 1.5]\n\nx = np.arange(len(Country))\nwidth = 0.35\n\nfig, ax = plt.subplots(figsize=(10,7))\np1 = ax.bar(x, GDP, width, label='GDP')\np2 = ax.bar(x, Growth, width, bottom=GDP, label='Economic Growth')\n\nax.set_xticks(x)\nax.set_xticklabels(Country)\nax.legend()\nax.set_title('GDP and Economic Growth of four countries in 2021')\n\nfor i in range(len(GDP)):\n    ax.text(x[i]-0.1, GDP[i]/2, str(GDP[i]), color='white', fontweight='bold', fontsize=14)\n    ax.text(x[i]-0.1, GDP[i]+Growth[i]/2, str(Growth[i]), color='white', fontweight='bold', fontsize=14)\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/416.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the GDP of Germany in billion USD?",
            "output": "4.7 billion USD"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_367",
        "img": "./bar_chart_num/png/bar_num_367.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Tonnage and volunteer hours of donations in four countries in 2021",
        "csv": "Country \\t Food Donations(ton) \\t Clothing Donations(ton) \\t Volunteer Hours(million) \\n USA \\t 200 \\t 80 \\t 50 \\n UK \\t 150 \\t 60 \\t 40 \\n Germany \\t 130 \\t 50 \\t 30 \\n France \\t 180 \\t 70 \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the tonnage of food and clothing donations, as well as the number of volunteer hours in four countries for the year 2021. The USA contributed 200 tons of food donations, 80 tons of clothing, and volunteers dedicated 50 million hours. The UK's figures show 150 tons of food, 60 tons of clothing donations, and 40 million volunteer hours. Germany gave 130 tons and 50 tons in food and clothing donations respectively, with 30 million hours volunteered. France donated 180 tons of food, 70 tons of clothing, and reported 20 million hours of volunteer work."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nCountry = ['USA','UK','Germany','France']\nFoodDonations = [200, 150, 130, 180]\nClothingDonations = [80, 60, 50, 70]\nVolunteerHours = [50, 40, 30, 20]\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(1,1,1)\n\nwidth = 0.25\nx = np.arange(4)\nax.bar(x - width, FoodDonations, width, label='Food Donations', color='tab:green')\nax.bar(x, ClothingDonations, width, label='Clothing Donations', color='tab:blue')\nax.bar(x + width, VolunteerHours, width, label='Volunteer Hours', color='tab:orange')\nax.set_title('Tonnage and volunteer hours of donations in four countries in 2021')\nax.set_xticks(x)\nax.set_xticklabels(Country)\nax.set_ylim(0, 250)\nax.legend()\n\nfor i in range(len(Country)):\n    ax.annotate(str(FoodDonations[i]), xy=(x[i] - width, FoodDonations[i] + 10),va='bottom', rotation=90)\n    ax.annotate(str(ClothingDonations[i]), xy=(x[i], ClothingDonations[i] + 10),va='bottom', rotation=90)\n    ax.annotate(str(VolunteerHours[i]), xy=(x[i] + width, VolunteerHours[i] + 10),va='bottom', rotation=90)\n    \nfig.tight_layout()\nplt.savefig('Bar Chart/png/136.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many volunteer hours does France contribute?",
            "output": "20 million"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_403",
        "img": "./bar_chart_num/png/bar_num_403.png",
        "topic": "Social Sciences and Humanities",
        "title": " Number of publications in Social Sciences and Humanities in four countries in 2021",
        "csv": "Country \\t Literature \\t Philosophy \\t History \\n USA \\t 100 \\t 150 \\t 200 \\n UK \\t 120 \\t 170 \\t 220 \\n Germany \\t 140 \\t 190 \\t 240 \\n France \\t 160 \\t 210 \\t 260 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the number of publications in the domains of Literature, Philosophy, and History across four countries in 2021. The USA recorded 100 literature, 150 philosophy, and 200 history publications. The UK had 120 literature, 170 philosophy, and 220 history publications. Germany's figures show 140 literature, 190 philosophy, and 240 history publications, while France leads with 160 literature, 210 philosophy, and 260 history publications."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data\nCountry = ['USA', 'UK', 'Germany', 'France']\nLiterature = [100, 120, 140, 160]\nPhilosophy = [150, 170, 190, 210]\nHistory = [200, 220, 240, 260]\n\n# create figure\nfig, ax = plt.subplots(figsize=(15, 8))\n\n# plot\nwidth = 0.2\nx = np.arange(len(Country))\nax.bar(x - width, Literature, width, label='Literature')\nax.bar(x, Philosophy, width, label='Philosophy')\nax.bar(x + width, History, width, label='History')\n\n# labels\nax.set_title('Number of publications in Social Sciences and Humanities in four countries in 2021')\nax.set_xticks(x)\nax.set_xticklabels(Country)\nax.legend()\n\n# annotate\nfor i, j in enumerate(Literature):\n    ax.annotate(str(j), xy=(i - width, j + 5))\nfor i, j in enumerate(Philosophy):\n    ax.annotate(str(j), xy=(i, j + 5))\nfor i, j in enumerate(History):\n    ax.annotate(str(j), xy=(i + width, j + 5))\n\n# adjust\nplt.tight_layout()\n\n# save\nplt.savefig('Bar Chart/png/51.png')\n\n# clear\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the least number of History publications?",
            "output": "USA"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_59",
        "img": "./bar_chart_num/png/bar_num_59.png",
        "topic": "Arts and Culture",
        "title": " Gross Revenue and Movies Released in four categories in 2021",
        "csv": "Category \\t Gross Revenue( Million) \\t Movies Released \\n Drama \\t 200 \\t 10 \\n Comedy \\t 180 \\t 15 \\n Action \\t 150 \\t 20 \\n Sci-fi \\t 80 \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the gross revenue in millions and the number of movies released across four categories in 2021. Drama generated $200 million with 10 releases, Comedy amounted to $180 million from 15 movies, Action films brought in $150 million with the highest releases at 20, and Sci-fi resulted in $80 million in gross revenue with 10 films released."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Setting the category and data\ncategory = ['Drama', 'Comedy', 'Action', 'Sci-fi']\ngross_revenue = [200, 180, 150, 80]\nmovies_released = [10, 15, 20, 10]\n\n# Create the figure and plot the data\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\nwidth = 0.3\nax.bar(np.arange(len(category)) - width/2, gross_revenue, width=width, label='Gross Revenue(Million)')\nax.bar(np.arange(len(category)) + width/2, movies_released, width=width, label='Movies Released')\nax.set_title('Gross Revenue and Movies Released in four categories in 2021')\nax.set_xticks(np.arange(len(category)))\nax.set_xticklabels(category)\nax.legend()\n\n# Adding the value labels for every variables\nfor x, y_1, y_2 in zip(np.arange(len(category)), gross_revenue, movies_released):\n    ax.annotate('{}M\\n{}'.format(y_1, y_2), xy=(x, max(y_1, y_2)), xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom', rotation=45, wrap=True)\n\n# Adjusting the figure for better display\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Bar Chart/png/301.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much gross revenue did the Comedy category generate more than the Sci-fi category?",
            "output": "$100 million"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_299",
        "img": "./bar_chart_num/png/bar_num_299.png",
        "topic": "Social Media and the Web",
        "title": " Social Media Users in four countries in 2021",
        "csv": "Country \\t Facebook Users(million) \\t Twitter Users(million) \\n USA \\t 200 \\t 50 \\n UK \\t 100 \\t 20 \\n Germany \\t 80 \\t 15 \\n France \\t 90 \\t 25 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of social media users on Facebook and Twitter in millions across four countries for the year 2021. In the USA, there are 200 million Facebook users and 50 million Twitter users. The UK follows with 100 million on Facebook and 20 million on Twitter. Germany has 80 million Facebook users and 15 million Twitter users, while France reports 90 million Facebook users and 25 million Twitter users."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \n\ncountry = ['USA','UK','Germany','France']\nfacebook_users = [200,100,80,90]\ntwitter_users = [50,20,15,25]\n\nfig = plt.figure(figsize=(15,5)) \nax = fig.add_subplot() \nax.bar(country, facebook_users, label=\"Facebook Users\", bottom=twitter_users, color=\"orange\") \nax.bar(country, twitter_users, label=\"Twitter Users\", color=\"blue\") \n\nax.set_title(\"Social Media Users in four countries in 2021\") \n\nax.set_xlabel(\"Country\") \nax.set_ylabel(\"Number of Users (million)\") \n\nax.legend() \n\nfor i, v in enumerate(facebook_users):\n    ax.text(i-0.2, v+2, str(v), fontsize=10, color=\"black\")\nfor i, v in enumerate(twitter_users):\n    ax.text(i-0.2, v+2, str(v), fontsize=10, color=\"black\")\n\nplt.xticks(np.arange(len(country)), country) \nplt.tight_layout() \nplt.savefig(\"Bar Chart/png/605.png\") \nplt.clf()"
        },
        "QA": {
            "input": "How many million Facebook users are there in the UK?",
            "output": "100"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_110",
        "img": "./bar_chart_num/png/bar_num_110.png",
        "topic": "Business and Finance",
        "title": " Financial data of four countries in 2021",
        "csv": "Country \\t Savings(billion) \\t Debt(billion) \\t Investment(billion) \\n USA \\t 20 \\t 40 \\t 60 \\n UK \\t 25 \\t 50 \\t 70 \\n Germany \\t 22 \\t 45 \\t 65 \\n France \\t 21 \\t 42 \\t 63 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates financial data of four countries in 2021, detailing their savings, debt, and investment figures in billions. For the USA, savings are at 20 billion, debt at 40 billion, and investment at 60 billion. The UK shows savings of 25 billion, debt at 50 billion, and investment at 70 billion. Germany's figures include 22 billion in savings, 45 billion in debt, and 65 billion in investments. Lastly, France has 21 billion saved, 42 billion in debt, and 63 billion invested. Each country's financial status is represented by three distinct bars."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot()\n\nsavings = [20,25,22,21]\ndebt = [40,50,45,42]\ninvestment = [60,70,65,63]\n\ncountry = ['USA','UK','Germany','France']\n\nbar1 = ax.bar(country,savings,bottom=debt,label='Savings')\nbar2 = ax.bar(country,debt,label='Debt')\nbar3 = ax.bar(country,investment,bottom=[sum(x) for x in zip(debt, savings)],label='Investment')\n\nfor bar in bar1+bar2+bar3:\n    h = bar.get_height()\n    ax.annotate('{}'.format(h),\n                xy=(bar.get_x() + bar.get_width() / 2, h/2),\n                xytext=(0, 3),  \n                textcoords=\"offset points\",\n                ha='center', va='bottom',rotation=90)\n\nplt.xticks(country)\nplt.legend()\nplt.title('Financial data of four countries in 2021')\nplt.tight_layout()\nplt.savefig('bar_110.png')\nplt.clf()"
        },
        "QA": {
            "input": "By how much does Germany's debt exceed its savings?",
            "output": "$23 billion"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_27",
        "img": "./bar_chart_num/png/bar_num_27.png",
        "topic": "Agriculture and Food Production",
        "title": " Fruit and Vegetable Production in four countries in 2021",
        "csv": "Country \\t Fruit Production(tonnes) \\t Vegetable Production(tonnes) \\n USA \\t 8000 \\t 20000 \\n UK \\t 4000 \\t 17000 \\n Germany \\t 5000 \\t 18000 \\n France \\t 6000 \\t 19000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the amount of fruit and vegetable production in tonnes for four countries in 2021. The USA produced 8000 tonnes of fruit and 20000 tonnes of vegetables. The UK's production amounted to 4000 tonnes of fruit and 17000 tonnes of vegetables. Germany produced 5000 tonnes of fruit and 18000 tonnes of vegetables, while France produced 6000 tonnes of fruit and 19000 tonnes of vegetables."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n \n# Create data\nCountry = ['USA', 'UK', 'Germany', 'France']\nFruit_Production = [8000, 4000, 5000, 6000]\nVegetable_Production = [20000, 17000, 18000, 19000]\n \n# Create figure\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(111)\n \n# Set x ticks\nax.set_xticks(np.arange(len(Country)))\nax.set_xticklabels(Country)\n \n# Bar chart\nax.bar(np.arange(len(Country)), Fruit_Production, label='Fruit Production', bottom=Vegetable_Production, width=0.35)\nax.bar(np.arange(len(Country))+0.35, Vegetable_Production, label='Vegetable Production', width=0.35)\n \n# Annotate value of each point\nfor i in range(len(Country)):\n    ax.annotate(str(Fruit_Production[i]), xy=(i, Fruit_Production[i]), ha='center')\n    ax.annotate(str(Vegetable_Production[i]), xy=(i, Vegetable_Production[i]), ha='center')\n \n# Increase the font size of the legend\nleg = ax.legend(prop={'size': 12})\n \n# Set title and label\nax.set_title('Fruit and Vegetable Production in four countries in 2021', fontsize=16)\nax.set_xlabel('Country')\nax.set_ylabel('Production (tonnes)')\n \n# Adjust the layout\nplt.tight_layout()\n \n# Save image\nfig.savefig('Bar Chart/png/161.png')\n \n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many tonnes of vegetables did the UK produce?",
            "output": "17000"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_396",
        "img": "./bar_chart_num/png/bar_num_396.png",
        "topic": "Energy and Utilities",
        "title": " Energy production from renewable sources from January to April 2021",
        "csv": "Month \\t Wind Energy(GWh) \\t Solar Energy(GWh) \\t Hydro Energy(GWh) \\n January \\t 20 \\t 30 \\t 40 \\n February \\t 25 \\t 35 \\t 45 \\n March \\t 30 \\t 40 \\t 50 \\n April \\t 35 \\t 45 \\t 55 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart illustrates the energy production in gigawatt-hours (GWh) from renewable sources - wind, solar, and hydro - over four months in 2021. In January, wind energy production was 20 GWh, solar was 30 GWh, and hydro was 40 GWh. February saw an increase to 25 GWh for wind, 35 GWh for solar, and 45 GWh for hydro. The trend continued upwards in March with wind at 30 GWh, solar at 40 GWh, and hydro at 50 GWh. April's figures further increased to 35 GWh for wind, 45 GWh for solar, and 55 GWh for hydro energy."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\n# Create figure\nfig = plt.figure(figsize=(15,6))\n\n# Get data\nmonths = ['January', 'February', 'March', 'April']\nWind_Energy = [20, 25, 30, 35]\nSolar_Energy = [30, 35, 40, 45]\nHydro_Energy = [40, 45, 50, 55]\n\n# Create bar chart\nax = fig.add_subplot(111)\nax.bar(months, Wind_Energy, width=0.2, color='b', label='Wind Energy')\nax.bar(months, Solar_Energy, width=0.2, bottom=Wind_Energy, color='g', label='Solar Energy')\nax.bar(months, Hydro_Energy, width=0.2, bottom=[w+s for w,s in zip(Wind_Energy, Solar_Energy)], color='r', label='Hydro Energy')\n\n# Label value of each data point for every variables directly on the figure\nfor i, v in enumerate(Wind_Energy):\n    ax.text(i-.08, v+3, str(v))\nfor i, v in enumerate(Solar_Energy):\n    ax.text(i-.08, v+3+Wind_Energy[i], str(v))\nfor i, v in enumerate(Hydro_Energy):\n    ax.text(i-.08, v+3+Wind_Energy[i]+Solar_Energy[i], str(v))\n\n# Get legend\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.2), ncol=3)\n\n# Set title\nax.set_title('Energy production from renewable sources from January to April 2021')\n\n# Set xticks\nax.set_xticks(months)\n\n# Automatically resize the image \nplt.tight_layout()\n\n# Save figure\nplt.savefig('Bar Chart/png/122.png', bbox_inches='tight')\n\n# Clear current image \nplt.clf()"
        },
        "QA": {
            "input": "How much solar energy was produced in March?",
            "output": "40 GWh"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_331",
        "img": "./bar_chart_num/png/bar_num_331.png",
        "topic": "Sports and Entertainment",
        "title": " Number of sports teams and attendance in four regions in 2021",
        "csv": "Region \\t Sports Teams \\t Attendance(hundred) \\n North America \\t 18 \\t 55 \\n Europe \\t 20 \\t 45 \\n Asia \\t 15 \\t 35 \\n Oceania \\t 12 \\t 25 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart illustrates the number of sports teams and their attendance, measured in hundreds, across four regions in 2021. North America has 18 teams with an attendance of 55 hundred, Europe has 20 teams with an attendance of 45 hundred, Asia is represented by 15 teams with an attendance of 35 hundred, and Oceania has 12 teams with an attendance of 25 hundred."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the data\nregion = ['North America','Europe','Asia','Oceania'] \nsports_teams = [18,20,15,12]\nattendance = [55,45,35,25]\n\n# Create the figure\nfig = plt.figure(figsize=(12,8))\nax = fig.add_subplot()\n\n# Plot the data\nax.bar(region, sports_teams, label='Sports Teams', bottom=0, width=0.4)\nax.bar(region, attendance, label='Attendance(hundred)', bottom=np.array(sports_teams), width=0.4)\n\n# Set the title\nax.set_title('Number of sports teams and attendance in four regions in 2021')\n\n# Adjust the legend\nax.legend(loc=\"best\")\n\n# Adjust the label\nax.set_xticks(region)\nax.set_xticklabels(region,rotation=45)\n\n\n# Adjust the layout\nplt.tight_layout()\n\n# Save the image\nplt.savefig('bar_331.png')\n\n# Clear the current figure\nplt.clf()"
        },
        "QA": {
            "input": "How many more sports teams are there in Europe compared to Oceania?",
            "output": "8"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_91",
        "img": "./bar_chart_num/png/bar_num_91.png",
        "topic": "Agriculture and Food Production",
        "title": " Food production of vegetables, fruits and grains in four countries in 2021",
        "csv": "Country \\t Vegetables(tons) \\t Fruits(tons) \\t Grains(tons) \\n USA \\t 600 \\t 800 \\t 400 \\n Canada \\t 500 \\t 700 \\t 500 \\n Mexico \\t 400 \\t 600 \\t 600 \\n Brazil \\t 800 \\t 900 \\t 700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart renders the quantities of vegetables, fruits, and grains produced in tons by four different countries in the year 2021. The USA produced 600 tons of vegetables, 800 tons of fruits, and 400 tons of grains. In comparison, Canada's production was recorded at 500 tons of vegetables, 700 tons of fruits, and 500 tons of grains. Mexico produced 400 tons of vegetables, 600 tons of fruits, and 600 tons of grains, while Brazil topped these numbers with 800 tons of vegetables, 900 tons of fruits, and 700 tons of grains."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(14,7))\nax = fig.add_subplot()\n\nCountry = ['USA','Canada','Mexico','Brazil']\nVegetables = [600,500,400,800]\nFruits = [800,700,600,900]\nGrains = [400,500,600,700]\n\np1 = ax.bar(Country, Vegetables, label='Vegetables', color='#F8B195')\np2 = ax.bar(Country, Fruits, bottom=Vegetables, label='Fruits', color='#F67280')\np3 = ax.bar(Country, Grains, bottom=[i+j for i,j in zip(Vegetables, Fruits)], label='Grains', color='#C06C84')\n\nplt.ylabel('Production(tons)')\nplt.title('Food production of vegetables, fruits and grains in four countries in 2021')\nplt.legend(loc='upper left')\n\nplt.xticks(Country)\nplt.tight_layout()\nplt.savefig('bar_91.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the smallest difference in production between fruits and grains?",
            "output": "Canada"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_368",
        "img": "./bar_chart_num/png/bar_num_368.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Number of charities and donations in four states in 2021",
        "csv": "State \\t Charities \\t Donations(million) \\n California \\t 100 \\t 150 \\n Texas \\t 80 \\t 130 \\n New York \\t 90 \\t 140 \\n Florida \\t 110 \\t 160 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of charities and the volume of donations they received, in millions, for four different states in 2021. California had 100 charities with donations totaling 150 million. Texas showed 80 charities with 130 million in donations. New York had 90 charities receiving 140 million, and Florida topped the list with 110 charities and donations amounting to 160 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# set data\nState = [\"California\",\"Texas\",\"New York\",\"Florida\"]\nCharities = [100, 80, 90, 110]\nDonations = [150, 130, 140, 160]\n\n# create figure\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(1,1,1)\n\n# plot the data\nax.bar(State, Charities, color=\"blue\", label=\"Charities\")\nax.bar(State, Donations, color=\"red\", bottom=Charities, label=\"Donations\")\n\n# add label to each bar\nfor x, y in zip(State, Charities):\n    ax.annotate(\"{0:.0f}\".format(y), xy=(x,y+1), ha=\"center\", va=\"bottom\")\n\nfor x, y in zip(State, Donations):\n    ax.annotate(\"{0:.0f}\".format(y), xy=(x,y+1), ha=\"center\", va=\"bottom\")\n\n# set x label\nax.set_xticks(State)\nax.set_xticklabels(State, rotation=45, ha=\"right\")\n\n# set title\nax.set_title(\"Number of charities and donations in four states in 2021\")\n\n# add legend\nax.legend(loc=\"upper right\")\n\n# adjust figure\nfig.tight_layout()\n\n# save figure\nfig.savefig('Bar Chart/png/358.png')\n\n# clear figure\nplt.clf()"
        },
        "QA": {
            "input": "How many charities are there in New York?",
            "output": "90"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_433",
        "img": "./bar_chart_num/png/bar_num_433.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Donations and volunteers in four countries in 2021",
        "csv": "Country \\t Donations(million) \\t Volunteers \\n USA \\t 10 \\t 500 \\n UK \\t 12 \\t 450 \\n Germany \\t 9 \\t 400 \\n France \\t 11 \\t 470 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled 'Donations and Volunteers in Four Countries in 2021' illustrates the amount of donations in millions and the number of volunteers in the USA, UK, Germany, and France. The USA has recorded donations of 10 million with 500 volunteers. The UK follows with 12 million in donations and 450 volunteers. Germany has contributions amounting to 9 million, supported by 400 volunteers. Lastly, France shows 11 million in donations alongside 470 volunteers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#Set data\nCountry=['USA','UK','Germany','France']\nDonations=[10,12,9,11]\nVolunteers=[500,450,400,470]\n\n#Set figure\nfig, ax = plt.subplots(figsize=(7,7))\n\n#Set title\nax.set_title('Donations and volunteers in four countries in 2021')\n\n#Plot bar\nbar1=ax.bar(Country,Donations,bottom=0,label='Donations(million)')\nbar2=ax.bar(Country,Volunteers,bottom=Donations,label='Volunteers')\n\n#Set xticks\nax.set_xticks(Country)\n\n#Set legend\nax.legend(loc='upper left', bbox_to_anchor=(1,1))\n\n#Set annotation\nfor rect1,rect2 in zip(bar1,bar2):\n    height1 = rect1.get_height()\n    height2 = rect2.get_height()\n    ax.annotate('{}'.format(height1),\n                xy=(rect1.get_x() + rect1.get_width() / 2, height1),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n    ax.annotate('{}'.format(height2),\n                xy=(rect2.get_x() + rect2.get_width() / 2, height1+height2/2),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n#Set grid and tight layout\nax.grid()\nplt.tight_layout()\n\n#Save fig\nplt.savefig('Bar Chart/png/32.png')\n\n#Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "How much did the UK donate in millions in 2021?",
            "output": "12"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_83",
        "img": "./bar_chart_num/png/bar_num_83.png",
        "topic": "Business and Finance",
        "title": " Revenue and Profit of a Business from 2020 to 2023",
        "csv": "Year \\t Revenue(million) \\t Profit(million) \\n 2020 \\t 120 \\t 20 \\n 2021 \\t 130 \\t 25 \\n 2022 \\t 140 \\t 30 \\n 2023 \\t 150 \\t 35 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents a business's revenue and profit from 2020 to 2023. In 2020, the revenue was 120 million with a profit of 20 million. Following that, 2021 shows an increase to 130 million in revenue and 25 million in profit. The upward trend continues in 2022, with revenue at 140 million and profit at 30 million. The chart concludes with the year 2023, exhibiting revenue of 150 million and profit of 35 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure and subplot\nfig = plt.figure()\nax = fig.add_subplot()\n\n# Set data\nyears = np.array(['2020', '2021', '2022', '2023'])\nrevenue_million = np.array([120, 130, 140, 150])\nprofit_million = np.array([20, 25, 30, 35])\n\n# Plot data\nax.bar(years, revenue_million, label='Revenue(million)', bottom=profit_million)\nax.bar(years, profit_million, label='Profit(million)')\n\n# Set x-axis\nax.set_xticks(years)\n\n# Set title\nax.set_title('Revenue and Profit of a Business from 2020 to 2023')\n\n# Annotate\nfor r, p in zip(revenue_million, profit_million):\n    ax.annotate('{:.0f}'.format(r + p), xy=(years[np.where((revenue_million + profit_million) == r + p)[0]], r + p + 1))\n\n# Show legend\nax.legend(loc='upper left')\n\n# Resize figure\nfig.tight_layout()\n\n# Save figure\nplt.savefig(\"Bar Chart/png/619.png\")\n\n# Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "How much did the revenue increase from 2020 to 2023?",
            "output": "30 million"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_233",
        "img": "./bar_chart_num/png/bar_num_233.png",
        "topic": "Sports and Entertainment",
        "title": " Number of sports and entertainment activities in four countries in 2021",
        "csv": "Country \\t Sports \\t Entertainment \\n USA \\t 100 \\t 120 \\n UK \\t 90 \\t 110 \\n Germany \\t 80 \\t 95 \\n France \\t 85 \\t 105 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of sports and entertainment activities in four countries in 2021\" visualizes the quantities of sports and entertainment activities across the USA, UK, Germany, and France. In the USA, there are 100 sports activities and 120 entertainment activities. The UK has 90 sports activities and 110 entertainment activities. Germany shows 80 sports activities and 95 entertainment activities. France reports 85 sports activities and 105 entertainment activities."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['USA',100,120],['UK',90,110],['Germany',80,95],['France',85,105]]\n\nfig, ax = plt.subplots(figsize=(8,6))\nax.set_title('Number of sports and entertainment activities in four countries in 2021')\n\np1 = ax.bar(np.arange(4), [item[1] for item in data], width=0.3, label='Sports')\np2 = ax.bar(np.arange(4)+0.3, [item[2] for item in data], width=0.3, label='Entertainment')\n\nax.set_xticks(np.arange(4)+0.15)\nax.set_xticklabels([item[0] for item in data])\nax.legend(loc='best')\n\nfor i, v in enumerate(zip([item[1] for item in data], [item[2] for item in data])):\n    ax.text(i-0.15, v[0]+20, str(v[0]), color='black', fontsize=10, rotation=90,\n            ha='center', va='bottom', fontweight='bold')\n    ax.text(i+0.15, v[1]+20, str(v[1]), color='black', fontsize=10, rotation=90,\n            ha='center', va='bottom', fontweight='bold')\n\nfig.tight_layout()\nfig.savefig('Bar Chart/png/324.png')\nplt.close()"
        },
        "QA": {
            "input": "How many entertainment activities are there in Germany?",
            "output": "95"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_20",
        "img": "./bar_chart_num/png/bar_num_20.png",
        "topic": "Food and Beverage Industry",
        "title": " Food and Beverage Production in four countries in 2021",
        "csv": "Country \\t Food Production(tonnes) \\t Beverage Production(litres) \\n USA \\t 3000 \\t 4500 \\n UK \\t 4500 \\t 6000 \\n Germany \\t 4000 \\t 5000 \\n France \\t 3500 \\t 4800 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Food and Beverage Production in four countries in 2021\" quantitatively compares the production of food in tonnes and beverages in litres among the USA, UK, Germany, and France. The USA shows a production of 3000 tonnes of food and 4500 litres of beverages. The UK's production figures are 4500 tonnes of food and 6000 litres of beverages. Germany produced 4000 tonnes of food and 5000 litres of beverages, while France's production was 3500 tonnes of food and 4800 litres of beverages."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set up the data\nCountry = ['USA', 'UK', 'Germany', 'France']\nFood = [3000, 4500, 4000, 3500]\nBeverage = [4500, 6000, 5000, 4800]\n\n# Create figure\nfig = plt.figure(figsize=(8, 6))\n\n# Plot bar chart\nax = fig.add_subplot(111)\nax.bar(Country, Food, bottom=Beverage, label='Food Production', align='center')\nax.bar(Country, Beverage, label='Beverage Production', align='center')\n\n\n# Set the title of the figure\nplt.title('Food and Beverage Production in four countries in 2021', fontsize=14)\n\n# Set the legend\nax.legend(loc='best')\n\n# Adjust the position of the x-axis label\nax.set_xticks(Country)\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('bar_20.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much more beverage production did the UK have compared to the USA?",
            "output": "1500 litres"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_149",
        "img": "./bar_chart_num/png/bar_num_149.png",
        "topic": "Transportation and Logistics",
        "title": " Cost and time for transportation by road, air and sea in 2021",
        "csv": "Mode \\t Cost(USD) \\t Time(hours) \\n Road \\t 300 \\t 10 \\n Air \\t 500 \\t 4 \\n Sea \\t 400 \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the cost in USD and time in hours for transportation by road, air, and sea in 2021. For road transportation, the cost is $300 and it takes 10 hours. Air transportation is more expensive, costing $500, with a travel time of 4 hours. Sea travel has a moderate cost of $400 and has the longest duration of 20 hours."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot()\n\n# Set figure properties\nlabels = ['Road', 'Air', 'Sea']\ncosts = [300, 500, 400]\ntimes = [10, 4, 20]\n\nx = np.arange(len(labels))\nwidth = 0.25\n\nax.bar(x-width, costs, width=width, color='#EE3224', label='Cost')\nax.bar(x, times, width=width, color='#F78F1E', label='Time')\n\nax.set_title('Cost and time for transportation by road, air and sea in 2021')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend(loc='upper center')\n\n# Annotate the value of data points\nfor i, v in enumerate(costs):\n    ax.text(i - width/2, v + 10, str(v), fontsize=9)\nfor i, v in enumerate(times):\n    ax.text(i + width/2, v + 10, str(v), fontsize=9)\n\nfig.tight_layout()\nplt.savefig('Bar Chart/png/311.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many hours does it take to travel by air compared to by road?",
            "output": "6 hours less"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_416",
        "img": "./bar_chart_num/png/bar_num_416.png",
        "topic": "Environment and Sustainability",
        "title": " CO2 Emission and Renewable Energy Usage in Four Continents in 2021",
        "csv": "Continent \\t CO2 Emission(tonnes) \\t Renewable Energy(%) \\n North America \\t 2400 \\t 20 \\n South America \\t 3200 \\t 30 \\n Europe \\t 2700 \\t 35 \\n Asia \\t 4200 \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates levels of CO2 emissions in tonnes alongside percentages of renewable energy usage for four continents in 2021. North America shows CO2 emissions at 2400 tonnes with 20% renewable energy use, while South America has higher emissions at 3200 tonnes and a greater renewable energy usage of 30%. Europe has 2700 tonnes of CO2 emissions with the highest renewable energy percentage at 35%. Asia reports the most significant CO2 emissions, at 4200 tonnes, but has the lowest renewable energy use, at just 15%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.array([\n    [\"North America\", 2400, 20],\n    [\"South America\", 3200, 30],\n    [\"Europe\", 2700, 35],\n    [\"Asia\", 4200, 15]\n])\n\nx = np.arange(data.shape[0])\nco2 = data[:,1].astype(int)\nrenewable = data[:,2].astype(int)\n\nplt.figure(figsize=(12,6))\nax = plt.subplot()\nax.bar(x, co2, label='CO2 Emission(tonnes)', bottom=renewable)\nax.bar(x, renewable, label='Renewable Energy(%)')\nax.xaxis.set_ticks(x)\nax.set_xticklabels(data[:,0], fontsize=10)\n\nfor i, v in enumerate(co2):\n    ax.text(i - 0.15, v/2 + renewable[i], str(v), color='white', fontweight='bold', fontsize=10)\n\nfor i, v in enumerate(renewable):\n    ax.text(i - 0.15, v/2, str(v), color='white', fontweight='bold', fontsize=10)\n\nplt.title('CO2 Emission and Renewable Energy Usage in Four Continents in 2021')\nplt.legend()\nplt.tight_layout()\nplt.savefig('Bar Chart/png/168.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which continent has the highest CO2 emissions?",
            "output": "Asia"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_194",
        "img": "./bar_chart_num/png/bar_num_194.png",
        "topic": "Tourism and Hospitality",
        "title": " Number of Domestic and International Tourists from January to April 2021",
        "csv": "Month \\t Domestic Tourists (million) \\t International Tourists (million) \\n January \\t 10 \\t 20 \\n February \\t 15 \\t 25 \\n March \\t 20 \\t 30 \\n April \\t 25 \\t 35 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of domestic and international tourists, in millions, from January to April 2021. In January, there were 10 million domestic tourists and 20 million international tourists. February saw an increase, with 15 million domestic and 25 million international tourists. March continued this upward trend with 20 million domestic tourists and 30 million international tourists. April reached the highest numbers with 25 million domestic and 35 million international tourists."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# The data to be plotted\nMonth = ['January', 'February', 'March', 'April']\nDomestic_Tourists = [10, 15, 20, 25]\nInternational_Tourists = [20, 25, 30, 35]\n\n# Create figure\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot()\n\n# Plotting the bar chart\nax.bar(Month, Domestic_Tourists, label='Domestic Tourists', bottom=International_Tourists)\nax.bar(Month, International_Tourists, label='International Tourists')\n\n# Annotate the value of each data point for every variables directly on the figure\nfor x, y in zip(Month, Domestic_Tourists):\n    ax.annotate('{}'.format(y), xy=(x, y/2), xytext=(0, 3), \n            textcoords=\"offset points\", ha='center', va='bottom')\nfor x, y in zip(Month, International_Tourists):\n    ax.annotate('{}'.format(y), xy=(x, y+y/2), xytext=(0, 3), \n            textcoords=\"offset points\", ha='center', va='bottom')\n\n# Set the title of the figure\nax.set_title('Number of Domestic and International Tourists from January to April 2021')\n\n# Place the legend\nax.legend(loc='best')\n\n# Prevent interpolation\nplt.xticks(Month)\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Bar Chart/png/343.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more international tourists were there compared to domestic tourists in April?",
            "output": "10 million"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_122",
        "img": "./bar_chart_num/png/bar_num_122.png",
        "topic": "Human Resources and Employee Management",
        "title": " Number of Employees and average salary in four departments in 2021",
        "csv": "Department \\t Employees \\t Average Salary(USD) \\n IT \\t 200 \\t 7000 \\n HR \\t 150 \\t 6000 \\n Marketing \\t 100 \\t 8000 \\n Sales \\t 250 \\t 9000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart title indicates it will display the number of employees and their average salary within four departments in 2021. The IT department has 200 employees with an average salary of $7,000. HR shows 150 employees earning an average of $6,000. Marketing has 100 employees with a higher average salary of $8,000. Lastly, the Sales department has the highest number of employees at 250, with the top average salary of $9,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np\n\nfig = plt.figure(figsize=(10,6)) \nax = fig.add_subplot()\n\ndepartment = np.array(['IT','HR','Marketing','Sales'])\nemployees = np.array([200,150,100,250])\nsalary = np.array([7000,6000,8000,9000])\n\nax.bar(department,employees,width=0.4,align='center',label='Employees')\nax.bar(department,salary,width=0.4,bottom=employees,align='center',label='Average Salary(USD)')\n\nax.legend(loc='upper right')\nax.set_title('Number of Employees and average salary in four departments in 2021')\n\nfor i,j in enumerate(salary):\n    ax.annotate(str(j),(i-0.2,employees[i]+j/2))\nfor i,j in enumerate(employees):\n    ax.annotate(str(j),(i-0.2,j/2))\n\nplt.xticks(department, rotation=45)\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/72.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which department has the least number of employees?",
            "output": "Marketing"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_167",
        "img": "./bar_chart_num/png/bar_num_167.png",
        "topic": "Real Estate and Housing Market",
        "title": " Average Home Price and Homes Sold in Four Major US Cities in 2021",
        "csv": "City \\t Average Home Price (million) \\t Homes Sold \\n Los Angeles \\t 4.8 \\t 300 \\n New York \\t 6.2 \\t 400 \\n San Francisco \\t 5.5 \\t 350 \\n Chicago \\t 4.3 \\t 250 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the average home prices in millions and the number of homes sold across four major US cities in 2021. Los Angeles shows an average home price of 4.8 million with 300 homes sold. New York's average home price stands at 6.2 million with 400 homes sold, whereas San Francisco has a 5.5 million average home price and 350 homes sold. Chicago displays a lower average home price of 4.3 million with 250 homes sold."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10, 6))\n\ncity=[\"Los Angeles\",\"New York\",\"San Francisco\",\"Chicago\"]\nprice=[4.8,6.2,5.5,4.3]\nsales=[300,400,350,250]\n\nbarWidth=0.3\nr1=np.arange(len(price))\nr2=[x+barWidth for x in r1]\n\nplt.bar(r1,price,width=barWidth,label='Average Home Price (million)', color='#1F77B4')\nplt.bar(r2,sales,width=barWidth,label='Homes Sold', color='#FF7F0E')\n\nplt.xlabel('City')\nplt.xticks([r+barWidth/2 for r in range(len(price))], city)\n\nplt.title('Average Home Price and Homes Sold in Four Major US Cities in 2021')\nplt.legend()\nplt.tight_layout()\n\nfor i, v in enumerate(price):\n    plt.text(i-0.1, v+0.2, str(v), color='black', fontsize=12)\nfor i, v in enumerate(sales):\n    plt.text(i+barWidth-0.1, v+0.2, str(v), color='black', fontsize=12)\n\nplt.savefig('Bar Chart/png/250.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in the average home price between Los Angeles and New York?",
            "output": "$1.4 million"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_255",
        "img": "./bar_chart_num/png/bar_num_255.png",
        "topic": "Environment and Sustainability",
        "title": " CO2 emissions and renewable energy use in four regions in 2021",
        "csv": "Region \\t CO2 emissions(thousand kg/year) \\t Renewable Energy (%) \\n North America \\t 80 \\t 20 \\n South America \\t 70 \\t 25 \\n Europe \\t 60 \\t 30 \\n Asia \\t 90 \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart numerically illustrates CO2 emissions in thousand kilograms per year and the percentage of renewable energy use across four regions in 2021. North America shows 80,000 kg/year of CO2 emissions with 20% renewable energy, South America emits 70,000 kg/year with 25% renewable energy, Europe releases 60,000 kg/year and utilizes 30% renewable energy, while Asia has the highest emissions at 90,000 kg/year with the lowest renewable energy use at 15%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['North America', 80, 20],\n        ['South America', 70, 25],\n        ['Europe', 60, 30],\n        ['Asia', 90, 15]]\n\nfig = plt.figure(figsize=(8,5))\nax = fig.add_subplot(111)\n\nregion = [i[0] for i in data]\nCO2_emissions = [i[1] for i in data]\nRenewable_Energy = [i[2] for i in data]\n\nx_pos = np.arange(len(region))\nwidth = 0.35\n\nax.bar(x_pos, CO2_emissions, width, label='CO2 emissions(thousand kg/year)', color='green')\nax.bar(x_pos, Renewable_Energy, width, label='Renewable Energy(%)', bottom=CO2_emissions, color='red')\n\nax.set_title('CO2 emissions and renewable energy use in four regions in 2021')\nax.set_xticks(x_pos)\nax.set_xticklabels(region)\n\nplt.legend(loc='upper left')\nplt.tight_layout()\n\nfor i, v in enumerate(CO2_emissions):\n    ax.text(i-0.2, v+7000, str(v), color='green', fontweight='bold')\nfor i, v in enumerate(Renewable_Energy):\n    ax.text(i-0.2, v+CO2_emissions[i]+7000, str(v), color='red', fontweight='bold')\n\nplt.savefig('bar_255.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which region has the lowest CO2 emissions?",
            "output": "Europe"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_452",
        "img": "./bar_chart_num/png/bar_num_452.png",
        "topic": "Human Resources and Employee Management",
        "title": " Number of employees and average salary in four countries in 2021",
        "csv": "Country \\t Employees \\t Average Salary \\n USA \\t 1000 \\t 4500 \\n UK \\t 1200 \\t 5000 \\n Germany \\t 1400 \\t 4800 \\n France \\t 900 \\t 5500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of employees and their average salary across four different countries in 2021. In the USA, there are 1000 employees earning an average salary of $4500. The UK shows a slightly higher number of employees at 1200, with an average salary of $5000. Germany surpasses both with 1400 employees and an average salary of $4800. France, however, has the least number of employees at 900, but the highest average salary of $5500."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np \n\n# Set figure size and create figure\nplt.figure(figsize=(7, 5))\n\n# Generate data\ncountry = ['USA', 'UK', 'Germany', 'France']\nemployees = np.array([1000, 1200, 1400, 900])\nsalary = np.array([4500, 5000, 4800, 5500])\n\n# Create bar chart \nax = plt.subplot()\nax.bar(country, employees, label='Employees', width=0.4)\nax.bar(country, salary, bottom=employees, label='Average Salary', width=0.4)\n\n# Add title and legend\nplt.title('Number of employees and average salary in four countries in 2021')\nplt.legend()\n\n# Label each data point\nfor x, y1, y2 in zip(country, employees, salary):\n    plt.annotate('{}\\n{}'.format(y1, y2), xy=(x, y1+y2/2), ha='center', va='center')\n\n# Resize figure\nplt.tight_layout()\n\n# Save figure\nplt.savefig('Bar Chart/png/477.png')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest average salary?",
            "output": "France"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_363",
        "img": "./bar_chart_num/png/bar_num_363.png",
        "topic": "Environment and Sustainability",
        "title": " Energy sources and carbon emissions in four countries in 2021",
        "csv": "Country \\t Renewable Energy(%) \\t Non-renewable Energy(%) \\t Carbon Emissions(million tons) \\n USA \\t 20 \\t 80 \\t 1000 \\n UK \\t 30 \\t 70 \\t 800 \\n Germany \\t 40 \\t 60 \\t 900 \\n France \\t 50 \\t 50 \\t 700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart presents the percentage usage of renewable and non-renewable energy sources, alongside carbon emissions for the USA, UK, Germany, and France in 2021. The USA has 20% renewable energy, 80% non-renewable energy, and emits 1000 million tons of carbon. The UK uses 30% renewable energy, 70% non-renewable, and emits 800 million tons. Germany's figures show 40% renewable energy and 60% non-renewable, with carbon emissions at 900 million tons. France leads in renewables at 50%, matches with non-renewable energy, and has the lowest emissions, at 700 million tons."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(111)\n\ncountry = [\"USA\", \"UK\", \"Germany\", \"France\"]\nrenewable = [20, 30, 40, 50]\nnon_renewable = [80, 70, 60, 50]\ncarbon_emissions = [1000, 800, 900, 700]\n\np1 = ax.bar(country, renewable, color='#2feb89', label='Renewable Energy(%)')\np2 = ax.bar(country, non_renewable, bottom=renewable, color='#d42323', label='Non-renewable Energy(%)')\n\nax.set_xticks(country)\nax.set_title(\"Energy sources and carbon emissions in four countries in 2021\")\nax.set_xlabel(\"Country\")\nax.set_ylabel(\"Energy (%)\")\nax.legend(loc='upper left')\n\nfor x, y in zip(country, renewable):\n    ax.annotate('{}'.format(y), xy=(x, y+0.5), ha='center', va='bottom')\n\nfor x, y, z in zip(country, renewable, non_renewable):\n    ax.annotate('{}'.format(z), xy=(x, y+z+0.5), ha='center', va='bottom')\n\nfor x, y, z in zip(country, renewable, carbon_emissions):\n    ax.annotate('{}'.format(z), xy=(x, y+z/1.5), ha='center', va='bottom')\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/467.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the lowest carbon emissions according to the data?",
            "output": "France"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_359",
        "img": "./bar_chart_num/png/bar_num_359.png",
        "topic": "Government and Public Policy",
        "title": " Number of Voters, Votes Cast and Votes Counted in Four Countries in 2021",
        "csv": "Country \\t Voters \\t Votes Cast \\t Votes Counted \\n USA \\t 200000 \\t 180000 \\t 180000 \\n UK \\t 400000 \\t 390000 \\t 390000 \\n Germany \\t 300000 \\t 290000 \\t 290000 \\n France \\t 500000 \\t 490000 \\t 490000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart illustrates the number of voters, votes cast, and votes counted in four countries in the year 2021. The USA had 200,000 registered voters with 180,000 votes cast and all of them counted. The UK showed 400,000 voters, 390,000 votes cast, and 390,000 counted. Germany's data reflects 300,000 voters, 290,000 votes cast, and 290,000 counted. Lastly, France had 500,000 voters, with 490,000 votes cast and the same number counted."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#set data\ncountry = ['USA', 'UK', 'Germany', 'France']\nvoters = np.array([200000, 400000, 300000, 500000])\nvotes_cast = np.array([180000, 390000, 290000, 490000])\nvotes_counted = np.array([180000, 390000, 290000, 490000])\n\n#create figure\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111)\n\n#plot data\nax.bar(country, voters, label='Voters', color='lightblue', width=0.5)\nax.bar(country, votes_cast, bottom=voters, label='Votes Cast',\n       color='yellowgreen', width=0.5)\nax.bar(country, votes_counted, bottom=voters + votes_cast,\n       label='Votes Counted', color='red', width=0.5)\n\n#set legend\nax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n\n#annotate values\nfor x, y, z in zip(country, voters, votes_counted):\n    ax.text(x, y+z/2, '{:.0f}'.format(z), ha='center')\n\n#set title\nplt.title('Number of Voters, Votes Cast and Votes Counted in Four Countries in 2021')\n\n#set xticks\nax.set_xticks(country)\n\n#resize image\nplt.tight_layout()\n\n#save figure\nplt.savefig('Bar Chart/png/141.png')\n\n#clear image state\nplt.clf()"
        },
        "QA": {
            "input": "How many votes were cast in the USA?",
            "output": "180000"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_126",
        "img": "./bar_chart_num/png/bar_num_126.png",
        "topic": "Sports and Entertainment",
        "title": " Number of attendees and participants in major sports events in 2021",
        "csv": "Event \\t Attendees \\t Participants \\n Olympics \\t 800000 \\t 10000 \\n World Cup \\t 1000000 \\t 20000 \\n Super Bowl \\t 1500000 \\t 3000 \\n Tour de France \\t 500000 \\t 20000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of attendees and participants in major sports events in 2021\" depicts the attendance and participation numbers for four events. The Olympics had 800,000 attendees and 10,000 participants, the World Cup saw 1,000,000 attendees and 20,000 participants, the Super Bowl reached 1,500,000 attendees with 3,000 participants, and the Tour de France attracted 500,000 attendees and had 20,000 participants."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.array([[800000, 10000], [1000000, 20000], [1500000, 3000], [500000, 20000]])\n\n# Create the figure\nfig = plt.figure(figsize=(10,6))\n\n# Plot the data\nax = fig.add_subplot()\nax.bar(['Olympics','World Cup','Super Bowl','Tour de France'], data[:,0], label='Attendees')\nax.bar(['Olympics','World Cup','Super Bowl','Tour de France'], data[:,1], bottom=data[:,0], label='Participants')\n\n# Add labels to value of each data point\nfor i in range(4):\n    ax.text(x=i-0.2, y=data[i,0]+data[i,1]/2, s=data[i,0]+data[i,1], color='black', fontsize=10)\n\n# Add legend\nax.legend()\n\n# Change the label of x axis\nax.set_xticklabels(['Olympics','World Cup','Super Bowl','Tour de France'], fontsize=10, rotation=45)\n\n# Set the title\nax.set_title('Number of attendees and participants in major sports events in 2021')\n\n# Resize the figure\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Bar Chart/png/272.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which event had the least number of participants?",
            "output": "Super Bowl"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_392",
        "img": "./bar_chart_num/png/bar_num_392.png",
        "topic": "Food and Beverage Industry",
        "title": " Coffee and tea consumption in four countries in 2021",
        "csv": "Country \\t Coffee Consumption(kg/year) \\t Tea Consumption(kg/year) \\n USA \\t 2500 \\t 3000 \\n UK \\t 3200 \\t 2800 \\n Germany \\t 3000 \\t 2600 \\n France \\t 2700 \\t 2900 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates annual coffee and tea consumption in kilograms for 2021 across four countries. The USA shows 2500 kg/year of coffee and 3000 kg/year of tea consumption. The UK has higher coffee consumption at 3200 kg/year, while tea consumption is slightly less at 2800 kg/year. Germany's figures stand at 3000 kg/year for coffee and 2600 kg/year for tea. France has a coffee consumption of 2700 kg/year and tea consumption of 2900 kg/year."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#create figure\nfig=plt.figure(figsize=(8,6))\nax=fig.add_subplot(111)\n\n#plot data\nCountry=['USA','UK','Germany','France']\nCoffeeConsumption=[2500,3200,3000,2700]\nTeaConsumption=[3000,2800,2600,2900]\nbottom=np.array([0,0,0,0])\nax.bar(Country,CoffeeConsumption,label='Coffee Consumption',bottom=bottom)\nbottom+=np.array(CoffeeConsumption)\nax.bar(Country,TeaConsumption,label='Tea Consumption',bottom=bottom)\n\n#display legend\nax.legend(loc='upper left')\n\n#display text\nfor x,y1,y2 in zip(Country,CoffeeConsumption,TeaConsumption):\n    ax.text(x,y1/2+y2/2,str(y1+y2)+'kg',ha='center')\n\n#set title\nplt.title('Coffee and tea consumption in four countries in 2021')\n\n#set xticks\nplt.xticks(Country)\n\n#tight layout\nplt.tight_layout()\n\n#save figure\nplt.savefig('Bar Chart/png/453.png')\n\n#clear figure\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest coffee consumption?",
            "output": "UK"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_454",
        "img": "./bar_chart_num/png/bar_num_454.png",
        "topic": "Real Estate and Housing Market",
        "title": " Average home prices and rents in four major cities in 2021",
        "csv": "City \\t Average Home Price(million) \\t Average Rent(thousand) \\n New York \\t 2.5 \\t 4.5 \\n Los Angeles \\t 3.2 \\t 3.9 \\n London \\t 2.8 \\t 4.2 \\n Tokyo \\t 3.0 \\t 5.0 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the average home prices in millions and average rents in thousands for four major cities in 2021. New York's average home price stands at 2.5 million with a rent of 4.5 thousand, Los Angeles at 3.2 million in home prices and 3.9 thousand in rent. London's figures show an average home price of 2.8 million and rent at 4.2 thousand, while Tokyo has an average home price of 3.0 million and the highest average rent of 5.0 thousand."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# import data\ndata = [['New York', 2.5, 4.5], \n        ['Los Angeles', 3.2, 3.9], \n        ['London', 2.8, 4.2], \n        ['Tokyo', 3.0, 5.0]]\n\n# Create DataFrame\ndf = pd.DataFrame(data, columns =['City', 'Average Home Price(million)', 'Average Rent(thousand)']) \n\n# Create figure\nfig = plt.figure(figsize=(10, 6))\n\n# Plot bar chart\nax = fig.add_subplot(111)\nax.bar(df['City'], df['Average Home Price(million)'], width=0.2, bottom=df['Average Rent(thousand)'], color='b', label=\"Average Home Price(million)\")\nax.bar(df['City'], df['Average Rent(thousand)'], width=0.2, color='r', label=\"Average Rent(thousand)\")\n\n# Add title\nax.set_title('Average home prices and rents in four major cities in 2021')\n\n# Label each bar\nfor i in range(len(df)):\n    ax.text(x = df['City'][i], y = df['Average Home Price(million)'][i] + df['Average Rent(thousand)'][i]/2, s = round(df['Average Home Price(million)'][i] + df['Average Rent(thousand)'][i], 1), size = 10, horizontalalignment='center', verticalalignment='center')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Make sure text is not cut off\nplt.tight_layout()\n\n# save figure\nplt.savefig('Bar Chart/png/527.png', dpi=300)\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much is the average home price in Los Angeles?",
            "output": "3.2 million"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_447",
        "img": "./bar_chart_num/png/bar_num_447.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Financial donations and volunteers in four regions in 2021",
        "csv": "Region \\t Donations(million) \\t Volunteers \\n North America \\t 100 \\t 20000 \\n South America \\t 80 \\t 12000 \\n Europe \\t 90 \\t 25000 \\n Asia \\t 70 \\t 15000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents financial donations in millions and the number of volunteers across four regions in 2021. North America shows 100 million in donations with 20,000 volunteers, whereas South America records 80 million in donations alongside 12,000 volunteers. Europe contributes 90 million in donations and has the highest volunteer count at 25,000. Asia provides 70 million in donations with 15,000 volunteers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Prepare data\nRegion = ['North America', 'South America', 'Europe', 'Asia']\nDonations = [100,80,90,70]\nVolunteers = [20000,12000,25000,15000]\n\n# Set figure size\nplt.figure(figsize=(9,6))\n\n# Plot data\nax=plt.subplot()\nax.bar(Region, Donations, color='b', label='Donations(million)', width=0.45)\nax.bar(Region, Volunteers, color='g', label='Volunteers', width=0.45,bottom=Donations)\n\n# Set font\nplt.rcParams['font.sans-serif']=['SimHei']\n\n# Set labels\nfor x,y in zip(Region,Donations):\n    ax.annotate('{}'.format(y),xy=(x,y+0.5),ha='center')\nfor x,y in zip(Region,Volunteers):\n    ax.annotate('{}'.format(y),xy=(x,y+0.5),ha='center')\n\n# Set title\nplt.title('Financial donations and volunteers in four regions in 2021', fontsize=20)\n\n# Set legend\nax.legend()\n\n# Set xticks\nax.set_xticks(Region)\n\n# Resize the image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('Bar Chart/png/29.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much money was donated by Europe?",
            "output": "90 million"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_484",
        "img": "./bar_chart_num/png/bar_num_484.png",
        "topic": "Agriculture and Food Production",
        "title": " Food Production in four regions in 2021",
        "csv": "Region \\t Crops(tonnes) \\t Meats(tonnes) \\t Dairy(tonnes) \\n North America \\t 800 \\t 500 \\t 300 \\n South America \\t 700 \\t 450 \\t 250 \\n Europe \\t 600 \\t 400 \\t 200 \\n Asia \\t 500 \\t 350 \\t 150 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart visualizes food production by category in four different regions for the year 2021. It shows the quantities of crops, meats, and dairy produced in tonnes. North America leads with 800 tonnes of crops, 500 tonnes of meats, and 300 tonnes of dairy. South America follows with 700 tonnes of crops, 450 tonnes of meats, and 250 tonnes of dairy. Europe's production stands at 600 tonnes of crops, 400 tonnes of meats, and 200 tonnes of dairy. Asia reports 500 tonnes of crops, 350 tonnes of meats, and 150 tonnes of dairy."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['North America', 800, 500, 300],\n        ['South America', 700, 450, 250],\n        ['Europe', 600, 400, 200],\n        ['Asia', 500, 350, 150]]\n\n# Create figure\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set Y-axis\nY = np.arange(len(data))\n\n# Set variable names\nvariables = [v[0] for v in data]\n\n# Set data\nCrops = [v[1] for v in data]\nMeats = [v[2] for v in data]\nDairy = [v[3] for v in data]\n\n# Set bar width\nwidth = 0.2\n\n# Plot bar chart\nax.barh(Y-width, Crops, width, label='Crops', color='#f5dbd0')\nax.barh(Y, Meats, width, label='Meats', color='#6c7c46')\nax.barh(Y+width, Dairy, width, label='Dairy', color='#d1b7d8')\n\n# Set figure title\nax.set_title('Food Production in four regions in 2021')\n\n# Set Y-axis\nax.set_yticks(Y)\nax.set_yticklabels(variables)\n\n# Turn on the grid\nax.grid(axis='x')\n\n# Add legend\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1),\n          fancybox=True, shadow=True, ncol=3)\n\n# Display value for each bar\nfor v1, v2, v3 in zip(Y-width, Y, Y+width):\n    ax.text(0, v1, str(Crops[int(v1)]), ha='center', va='center')\n    ax.text(0, v2, str(Meats[int(v2)]), ha='center', va='center')\n    ax.text(0, v3, str(Dairy[int(v3)]), ha='center', va='center')\n\n# Auto adjust subplot parameters to give specified padding\nplt.tight_layout()\n\n# Save figure\nplt.savefig('Bar Chart/png/299.png', dpi=300) \n\n# Clear state\nplt.clf()"
        },
        "QA": {
            "input": "What is the total food production (crops, meats, and dairy combined) in Asia?",
            "output": "1000 tonnes"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_71",
        "img": "./bar_chart_num/png/bar_num_71.png",
        "topic": "Agriculture and Food Production",
        "title": " Food production in four countries in 2021",
        "csv": "Country \\t Cereals(tonne) \\t Vegetables(tonne) \\t Fruit(tonne) \\n USA \\t 10000 \\t 7000 \\t 4000 \\n UK \\t 8000 \\t 5000 \\t 3000 \\n Germany \\t 9000 \\t 6000 \\t 2000 \\n France \\t 7000 \\t 4000 \\t 1000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart with numerical values represents food production in tonnes across four countries in 2021. It shows cereal, vegetable, and fruit production. The USA produced 10000 tonnes of cereals, 7000 tonnes of vegetables, and 4000 tonnes of fruit. The UK's production was at 8000, 5000, and 3000 tonnes respectively. Germany produced 9000 tonnes of cereals, 6000 tonnes of vegetables, and 2000 tonnes of fruit. France's figures stood at 7000 tonnes of cereals, 4000 tonnes of vegetables, and 1000 tonnes of fruit."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np\n\n# Set figure size\nplt.figure(figsize=(12,9)) \n\n# Set data\ncountry=['USA','UK','Germany','France'] \ncereals = [10000,8000,9000,7000] \nvegetables = [7000,5000,6000,4000] \nfruit = [4000,3000,2000,1000] \n\n# Set Bar chart\nax = plt.subplot() \nbar_width = 0.2\nx_pos = np.arange(len(country)) \nax.bar(x_pos, cereals, bar_width, label='Cereals',color='red') \nax.bar(x_pos+bar_width, vegetables, bar_width, label='Vegetables',color='green') \nax.bar(x_pos+bar_width*2, fruit, bar_width, label='Fruit',color='blue') \n\n# Set xticks\nax.set_xticks(x_pos+bar_width/2) \nax.set_xticklabels(country) \n\n# Show legend\nax.legend(loc='best') \n\n# Show value of each data point on the figure\nax.annotate('{}'.format(cereals[0]),xy=(x_pos[0],cereals[0]), xytext=(x_pos[0],cereals[0]+1000),\n            fontsize=10, ha='center', va='bottom')\nax.annotate('{}'.format(cereals[1]),xy=(x_pos[1],cereals[1]), xytext=(x_pos[1],cereals[1]+1000),\n            fontsize=10, ha='center', va='bottom')\nax.annotate('{}'.format(cereals[2]),xy=(x_pos[2],cereals[2]), xytext=(x_pos[2],cereals[2]+1000),\n            fontsize=10, ha='center', va='bottom')\nax.annotate('{}'.format(cereals[3]),xy=(x_pos[3],cereals[3]), xytext=(x_pos[3],cereals[3]+1000),\n            fontsize=10, ha='center', va='bottom')\n\nax.annotate('{}'.format(vegetables[0]),xy=(x_pos[0]+bar_width,vegetables[0]), xytext=(x_pos[0]+bar_width,vegetables[0]+1000),\n            fontsize=10, ha='center', va='bottom')\nax.annotate('{}'.format(vegetables[1]),xy=(x_pos[1]+bar_width,vegetables[1]), xytext=(x_pos[1]+bar_width,vegetables[1]+1000),\n            fontsize=10, ha='center', va='bottom')\nax.annotate('{}'.format(vegetables[2]),xy=(x_pos[2]+bar_width,vegetables[2]), xytext=(x_pos[2]+bar_width,vegetables[2]+1000),\n            fontsize=10, ha='center', va='bottom')\nax.annotate('{}'.format(vegetables[3]),xy=(x_pos[3]+bar_width,vegetables[3]), xytext=(x_pos[3]+bar_width,vegetables[3]+1000),\n            fontsize=10, ha='center', va='bottom')\n\nax.annotate('{}'.format(fruit[0]),xy=(x_pos[0]+bar_width*2,fruit[0]), xytext=(x_pos[0]+bar_width*2,fruit[0]+1000),\n            fontsize=10, ha='center', va='bottom')\nax.annotate('{}'.format(fruit[1]),xy=(x_pos[1]+bar_width*2,fruit[1]), xytext=(x_pos[1]+bar_width*2,fruit[1]+1000),\n            fontsize=10, ha='center', va='bottom')\nax.annotate('{}'.format(fruit[2]),xy=(x_pos[2]+bar_width*2,fruit[2]), xytext=(x_pos[2]+bar_width*2,fruit[2]+1000),\n            fontsize=10, ha='center', va='bottom')\nax.annotate('{}'.format(fruit[3]),xy=(x_pos[3]+bar_width*2,fruit[3]), xytext=(x_pos[3]+bar_width*2,fruit[3]+1000),\n            fontsize=10, ha='center', va='bottom')\n\n# Set title\nplt.title(\"Food production in four countries in 2021\") \n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save image\nplt.savefig('Bar Chart/png/402.png')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest total production of cereals, vegetables, and fruit?",
            "output": "USA"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_112",
        "img": "./bar_chart_num/png/bar_num_112.png",
        "topic": "Food and Beverage Industry",
        "title": " Number of food and beverage outlets in four regions in 2021",
        "csv": "Region \\t Cafes \\t Bakeries \\t Restaurants \\n North America \\t 400 \\t 500 \\t 600 \\n Europe \\t 450 \\t 550 \\t 650 \\n Asia \\t 480 \\t 580 \\t 700 \\n South America \\t 420 \\t 520 \\t 620 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of food and beverage outlets in four regions in 2021\" illustrates the distribution of cafes, bakeries, and restaurants across North America, Europe, Asia, and South America. North America is shown to have 400 cafes, 500 bakeries, and 600 restaurants. Europe slightly exceeds these figures with 450 cafes, 550 bakeries, and 650 restaurants. Asia surpasses both with 480 cafes, 580 bakeries, and the highest number of restaurants at 700. South America has 420 cafes, 520 bakeries, and 620 restaurants, placing it between North America and Europe in terms of numbers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(4)\nwidth = 0.2\n\nFig = plt.figure(figsize=(10,6))\nax = Fig.add_subplot(111)\nax.bar(x, [400, 450, 480, 420], width, label='Cafes')\nax.bar(x+width, [500, 550, 580, 520], width, label='Bakeries')\nax.bar(x+width*2, [600, 650, 700, 620], width, label='Restaurants')\nax.set_xticks(x+width/2)\nax.set_xticklabels(['North America', 'Europe', 'Asia', 'South America'])\nax.set_title('Number of food and beverage outlets in four regions in 2021')\nax.legend()\nax.annotate('{}'.format(400), xy=(x[0], 400), xytext=(0, 10), \n            textcoords=\"offset points\",\n            ha='center', va='bottom')\nax.annotate('{}'.format(450), xy=(x[1], 450), xytext=(0, 10), \n            textcoords=\"offset points\",\n            ha='center', va='bottom')\nax.annotate('{}'.format(480), xy=(x[2], 480), xytext=(0, 10), \n            textcoords=\"offset points\",\n            ha='center', va='bottom')\nax.annotate('{}'.format(420), xy=(x[3], 420), xytext=(0, 10), \n            textcoords=\"offset points\",\n            ha='center', va='bottom')\nax.annotate('{}'.format(500), xy=(x[0]+width, 500), xytext=(0, 10), \n            textcoords=\"offset points\",\n            ha='center', va='bottom')\nax.annotate('{}'.format(550), xy=(x[1]+width, 550), xytext=(0, 10), \n            textcoords=\"offset points\",\n            ha='center', va='bottom')\nax.annotate('{}'.format(580), xy=(x[2]+width, 580), xytext=(0, 10), \n            textcoords=\"offset points\",\n            ha='center', va='bottom')\nax.annotate('{}'.format(520), xy=(x[3]+width, 520), xytext=(0, 10), \n            textcoords=\"offset points\",\n            ha='center', va='bottom')\nax.annotate('{}'.format(600), xy=(x[0]+width*2, 600), xytext=(0, 10), \n            textcoords=\"offset points\",\n            ha='center', va='bottom')\nax.annotate('{}'.format(650), xy=(x[1]+width*2, 650), xytext=(0, 10), \n            textcoords=\"offset points\",\n            ha='center', va='bottom')\nax.annotate('{}'.format(700), xy=(x[2]+width*2, 700), xytext=(0, 10), \n            textcoords=\"offset points\",\n            ha='center', va='bottom')\nax.annotate('{}'.format(620), xy=(x[3]+width*2, 620), xytext=(0, 10), \n            textcoords=\"offset points\",\n            ha='center', va='bottom')\nplt.tight_layout()\nplt.savefig('Bar Chart/png/330.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which region has the highest number of Cafes?",
            "output": "Asia"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_204",
        "img": "./bar_chart_num/png/bar_num_204.png",
        "topic": "Food and Beverage Industry",
        "title": " Number of food and beverage establishments by region in 2021",
        "csv": "Region \\t Fast Food Restaurants \\t Cafes \\t Bars \\n North \\t 50 \\t 30 \\t 20 \\n South \\t 60 \\t 40 \\t 25 \\n East \\t 65 \\t 35 \\t 15 \\n West \\t 55 \\t 45 \\t 30 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of fast food restaurants, cafes, and bars in four regions during 2021. In the North, there are 50 fast food restaurants, 30 cafes, and 20 bars. The South region shows 60 fast food outlets, 40 cafes, and 25 bars. The East lists 65 fast food joints, 35 cafes, and 15 bars, while the West has 55 fast food locations, 45 cafes, and the most bars at 30."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nregion = ['North', 'South', 'East', 'West']\nfast_food = [50, 60, 65, 55]\ncafes = [30, 40, 35, 45]\nbars = [20, 25, 15, 30]\n\nx = np.arange(len(region))\nwidth = 0.25\n\nfig, ax = plt.subplots(figsize=(10,5))\nax.bar(x - width, fast_food, width, label='Fast food restaurants', color='#f08080')\nax.bar(x, cafes, width, label='Cafes', color='#87ceeb')\nax.bar(x + width, bars, width, label='Bars', color='#ffa500')\n\nax.set_ylabel('Number of establishments')\nax.set_title('Number of food and beverage establishments by region in 2021')\nax.set_xticks(x)\nax.set_xticklabels(region)\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), \n          fancybox=True, shadow=True, ncol=5)\n\nfor i, v in enumerate(fast_food):\n    ax.text(x[i] - width/2., v + 0.25, str(v), fontsize=11, color='black')\nfor i, v in enumerate(cafes):\n    ax.text(x[i] + width/2., v + 0.25, str(v), fontsize=11, color='black')\nfor i, v in enumerate(bars):\n    ax.text(x[i] + (width+width/2.), v + 0.25, str(v), fontsize=11, color='black')\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/338.png', bbox_inches='tight', pad_inches=0.2)\nplt.clf()"
        },
        "QA": {
            "input": "How many more cafes are there in the West compared to the North?",
            "output": "15"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_222",
        "img": "./bar_chart_num/png/bar_num_222.png",
        "topic": "Government and Public Policy",
        "title": " Number of Schools, Hospitals and Police Stations in four regions in 2021",
        "csv": "Region \\t Number of Schools \\t Number of Hospitals \\t Number of Police Stations \\n East \\t 100 \\t 20 \\t 15 \\n West \\t 90 \\t 25 \\t 17 \\n North \\t 110 \\t 30 \\t 20 \\n South \\t 95 \\t 35 \\t 22 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of Schools, Hospitals, and Police Stations in four regions in 2021\" illustrates counts of public service institutions in the East, West, North, and South regions. The East region has 100 schools, 20 hospitals, and 15 police stations. In the West, there are 90 schools, 25 hospitals, and 17 police stations. The North shows higher numbers with 110 schools, 30 hospitals, and 20 police stations. Lastly, the South has 95 schools, the most hospitals at 35, and the highest count of police stations at 22."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\n#Create figure\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Data\nregion = ['East', 'West', 'North', 'South']\nschools = [100, 90, 110, 95]\nhospitals = [20, 25, 30, 35]\npolice = [15, 17, 20, 22]\n\n# Plot the data\nax.bar(region, schools, label='Schools')\nax.bar(region, hospitals, bottom=schools, label='Hospitals')\nax.bar(region, police, bottom=[schools[i] + hospitals[i] for i in range(len(schools))], label='Police Stations')\n\n# Add legend\nax.legend(loc='upper left')\n\n# Title\nplt.title('Number of Schools, Hospitals and Police Stations in four regions in 2021')\n\n# Annotate values\nfor i in range(len(region)):\n    ax.text(x=i, y=schools[i]+hospitals[i]+police[i]+2, s=schools[i]+hospitals[i]+police[i], ha='center', va='bottom')\n\n# Automatically resize\nplt.tight_layout()\n\n# xticks\nplt.xticks(rotation=45)\n\n# Save the figure\nplt.savefig('Bar Chart/png/499.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which region has the least number of schools?",
            "output": "West"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_178",
        "img": "./bar_chart_num/png/bar_num_178.png",
        "topic": "Education and Academics",
        "title": " Number of Schools and Students in Four Countries in 2021",
        "csv": "Country \\t Schools \\t Students \\n USA \\t 18000 \\t 3000000 \\n UK \\t 15000 \\t 2500000 \\n Germany \\t 13000 \\t 2000000 \\n France \\t 17000 \\t 2800000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of Schools and Students in Four Countries in 2021\" presents data on the count of schools and the corresponding student populations in the USA, UK, Germany, and France for the year 2021. According to the chart, the USA has 18,000 schools with 3,000,000 students, the UK has 15,000 schools with 2,500,000 students, Germany shows 13,000 schools serving 2,000,000 students, and France has 17,000 schools with a student population of 2,800,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nCountry = [\"USA\", \"UK\", \"Germany\", \"France\"]\nSchools = [18000, 15000, 13000, 17000]\nStudents = [3000000, 2500000, 2000000, 2800000]\n\nfig = plt.figure(figsize=(7,5))\nax = fig.add_subplot()\n\nax.bar(Country, Schools, label='Schools', color='C0')\nax.bar(Country, Students, bottom=Schools, label='Students', color='C1') \n\nax.set_title('Number of Schools and Students in Four Countries in 2021')\nax.set_xlabel('Country')\nax.set_ylabel('Number')\nax.legend()\n\nfor i in range(len(Country)):\n    ax.annotate(str(Schools[i]), xy=(Country[i], Schools[i]/2))\n    ax.annotate(str(Students[i]), xy=(Country[i], Schools[i]+Students[i]/2))\n\nplt.xticks(Country)\nplt.tight_layout()\nplt.savefig('Bar Chart/png/195.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more students does the USA have compared to Germany?",
            "output": "1,000,000"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_146",
        "img": "./bar_chart_num/png/bar_num_146.png",
        "topic": "Social Media and the Web",
        "title": " Social Media Users and Advertising Revenue in 2021",
        "csv": "Platform \\t Users(million) \\t Advertising Revenue(billion) \\n Facebook \\t 2.8 \\t 84 \\n Google \\t 3.2 \\t 183 \\n Twitter \\t 0.8 \\t 3.5 \\n Instagram \\t 1.2 \\t 25 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of users in millions and advertising revenue in billions for four different social media platforms in 2021. Facebook shows 2.8 million users and $84 billion in revenue, Google has 3.2 million users with $183 billion revenue, Twitter accounts for 0.8 million users and $3.5 billion in revenue, and Instagram has 1.2 million users with $25 billion in advertising revenue."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,6))\nax = plt.subplot()\n\nplatform = ['Facebook', 'Google', 'Twitter', 'Instagram']\nusers = [2.8, 3.2, 0.8, 1.2]\nrevenue = [84, 183, 3.5, 25]\n\nax.bar(platform, users, label='Users(million)', bottom=0)\nax.bar(platform, revenue, label='Advertising Revenue(billion)', bottom=users)\nplt.legend(loc='upper left', bbox_to_anchor=(1,1))\nplt.title('Social Media Users and Advertising Revenue in 2021')\n\nfor x, y1, y2 in zip(platform, users, revenue):\n    ax.annotate(y1, xy=(x, y1/2))\n    ax.annotate(y2, xy=(x, sum([y1, y2])/2))\n\nplt.xticks(platform)\nplt.tight_layout()\n\nplt.savefig('Bar Chart/png/261.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which platform has the highest advertising revenue per user?",
            "output": "Google"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_81",
        "img": "./bar_chart_num/png/bar_num_81.png",
        "topic": "Law and Legal Affairs",
        "title": " Number of legal cases pending and resolved in four countries in 2021",
        "csv": "Country \\t Cases Pending \\t Cases Resolved \\n USA \\t 20000 \\t 50000 \\n UK \\t 25000 \\t 40000 \\n Germany \\t 18000 \\t 35000 \\n France \\t 23000 \\t 47000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of legal cases pending and resolved in four countries in 2021\" illustrates the status of legal cases in the USA, UK, Germany, and France. The chart compares the number of cases that are still pending with those that have been resolved in the same year. Specifically, the USA has 20,000 pending cases and 50,000 resolved cases, the UK shows 25,000 pending and 40,000 resolved cases, Germany presents 18,000 pending cases and 35,000 resolved, while France indicates 23,000 pending cases and 47,000 cases resolved."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nCountry = ['USA', 'UK', 'Germany', 'France']\nCases_Pending = [20000, 25000, 18000, 23000]\nCases_Resolved = [50000, 40000, 35000, 47000]\n\nx = np.arange(len(Country))\n\nfig = plt.figure(figsize=(15,7))\nax = fig.add_subplot(111)\nax.bar(x-0.2, Cases_Pending, width=0.4, color='#00A0A0', label='Cases Pending')\nax.bar(x+0.2, Cases_Resolved, width=0.4, color='#F0F000', label='Cases Resolved')\nax.set_xticks(x)\nax.set_xticklabels(Country)\nax.set_title(\"Number of legal cases pending and resolved in four countries in 2021\")\nax.legend(loc='best')\n\nfor i, j in zip(x, Cases_Pending):\n    ax.annotate(str(j), xy=(i-0.2, j+1000), rotation=90)\n\nfor i, j in zip(x, Cases_Resolved):\n    ax.annotate(str(j), xy=(i+0.2, j+1000), rotation=90)\n\nplt.tight_layout()\nplt.savefig(\"Bar Chart/png/569.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How many cases were resolved in France in 2021?",
            "output": "47000"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_9",
        "img": "./bar_chart_num/png/bar_num_9.png",
        "topic": "Healthcare and Health",
        "title": " Number of hospitals and doctors in four countries in 2021",
        "csv": "Country \\t Hospitals \\t Doctors \\n USA \\t 500 \\t 3000 \\n UK \\t 400 \\t 3500 \\n Germany \\t 350 \\t 4000 \\n France \\t 450 \\t 3800 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of hospitals and doctors in four countries in 2021\" presents data for the USA, UK, Germany, and France. The USA is shown to have 500 hospitals and 3000 doctors, the UK has 400 hospitals and 3500 doctors, Germany is represented with 350 hospitals and 4000 doctors, and France has 450 hospitals and 3800 doctors."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nCountry = ['USA', 'UK', 'Germany', 'France']\nHospitals = [500, 400, 350, 450]\nDoctors = [3000, 3500, 4000, 3800]\n\nfig = plt.figure(figsize=(13,7))\nax = fig.add_subplot()\nax.bar(Country, Hospitals, label='Hospitals')\nax.bar(Country, Doctors, bottom=Hospitals, label='Doctors')\nax.set_title(\"Number of hospitals and doctors in four countries in 2021\")\nax.legend(loc='upper left')\nax.set_xlabel('Country')\nax.set_ylabel('Number of hospitals and doctors')\n\nfor i in range(len(Country)):\n    ax.annotate(Hospitals[i], xy=(i-0.15, Hospitals[i]/2), fontsize=14)\n    ax.annotate(Doctors[i], xy=(i-0.15, (Hospitals[i]+Doctors[i])/2), fontsize=14)\n\nax.set_xticks(np.arange(len(Country)))\nax.set_xticklabels(Country, rotation=45, fontsize=14, horizontalalignment='right')\nplt.tight_layout()\nplt.savefig('Bar Chart/png/172.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many doctors are there in Germany?",
            "output": "4000"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_374",
        "img": "./bar_chart_num/png/bar_num_374.png",
        "topic": "Law and Legal Affairs",
        "title": " Number of legal cases and lawyers in four countries in 2021",
        "csv": "Country \\t Number of Cases \\t Number of Lawyers \\n USA \\t 50000 \\t 8000 \\n UK \\t 45000 \\t 7500 \\n Germany \\t 40000 \\t 7000 \\n France \\t 45500 \\t 7200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of legal cases and lawyers in four countries in 2021\" shows the USA with 50,000 legal cases and 8,000 lawyers. The UK follows with 45,000 cases and 7,500 lawyers. Germany has 40,000 cases alongside 7,000 lawyers, while France reports slightly more cases at 45,500, with 7,200 lawyers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\nfigure(num=None, figsize=(7, 5), dpi=100, facecolor='w', edgecolor='k')\nplt.bar(['USA','UK','Germany','France'], [50000,45000,40000,45500], color='#009999', label='Cases')\nplt.bar(['USA','UK','Germany','France'], [8000,7500,7000,7200], bottom=[50000,45000,40000,45500], color='#0066cc', label='Lawyers')\nplt.xticks(rotation=0)\nplt.title('Number of legal cases and lawyers in four countries in 2021')\nplt.legend()\nplt.tight_layout()\n\nfor i, v in enumerate([50000,45000,40000,45500]):\n    plt.text(i-.15, v/2, str(v), color='black', fontsize=10)\nfor i, v in enumerate([8000,7500,7000,7200]):\n    plt.text(i-.15, v/2+50000, str(v), color='white', fontsize=10)\n\nplt.savefig('Bar Chart/png/133.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more cases does the USA have compared to France?",
            "output": "4500 cases"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_292",
        "img": "./bar_chart_num/png/bar_num_292.png",
        "topic": "Business and Finance",
        "title": " Revenue and Expenses of a company from 2019 to 2021",
        "csv": "Year \\t Revenue(billion) \\t Expenses(billion) \\n 2019 \\t 20 \\t 18 \\n 2020 \\t 22 \\t 20 \\n 2021 \\t 24 \\t 22 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Revenue and Expenses of a company from 2019 to 2021\" illustrates a year-wise break-up of a company's financials in billions. In 2019, the revenue was $20 billion against expenses of $18 billion. For 2020, the revenue increased to $22 billion, with expenses rising to $20 billion. The upward trend continued into 2021, with revenue reaching $24 billion versus expenses of $22 billion."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nfig=plt.figure(figsize=(10,4))\nax=fig.add_subplot(111)\nx=['2019','2020','2021']\ny1=[20,22,24]\ny2=[18,20,22]\nax.bar(x,y1,bottom=y2,label='Revenue',width=0.5,edgecolor='black')\nax.bar(x,y2,label='Expenses',width=0.5,edgecolor='black')\nax.legend(loc='upper center')\nax.set_title('Revenue and Expenses of a company from 2019 to 2021')\nax.set_xlabel('Year')\nax.set_ylabel('Amount(billion)')\nax.set_xticks(x)\nax.annotate('20',xy=(0,20),xytext=(-0.3,20.8))\nax.annotate('18',xy=(0,18),xytext=(-0.3,18.8))\nax.annotate('22',xy=(1,22),xytext=(0.2,22.8))\nax.annotate('20',xy=(1,20),xytext=(0.2,20.8))\nax.annotate('24',xy=(2,24),xytext=(0.6,24.8))\nax.annotate('22',xy=(2,22),xytext=(0.6,22.8))\nplt.tight_layout()\nplt.savefig('Bar Chart/png/501.png')\nplt.clf()"
        },
        "QA": {
            "input": "What was the revenue growth from 2019 to 2021?",
            "output": "$4 billion"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_92",
        "img": "./bar_chart_num/png/bar_num_92.png",
        "topic": "Law and Legal Affairs",
        "title": " Number of criminal and civil cases in four countries in 2021",
        "csv": "Country \\t Criminal Cases \\t Civil Cases \\n USA \\t 4000 \\t 6000 \\n UK \\t 3500 \\t 5500 \\n Germany \\t 3700 \\t 4500 \\n France \\t 3900 \\t 4800 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of criminal and civil cases in four countries in 2021\" presents data for two categories of cases in each country. In the USA, there were 4000 criminal cases and 6000 civil cases. The UK experienced 3500 criminal and 5500 civil cases. Germany accounted for 3700 criminal cases and 4500 civil cases. Lastly, France had 3900 criminal cases alongside 4800 civil cases."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(8,5))\nax = fig.add_subplot()\nax.bar(['USA','UK','Germany','France'], [4000,3500,3700,3900], label='Criminal Cases', color='#ff6600', bottom=0)\nax.bar(['USA','UK','Germany','France'], [6000,5500,4500,4800], label='Civil Cases', color='#00cc99', bottom=4000)\nax.set_xlabel('Country')\nax.set_ylabel('Number')\nax.set_title('Number of criminal and civil cases in four countries in 2021')\nax.legend()\n\nplt.xticks(['USA','UK','Germany','France'])\nplt.tight_layout()\nplt.savefig('bar_92.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many criminal cases were reported in France in 2021?",
            "output": "3900"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_422",
        "img": "./bar_chart_num/png/bar_num_422.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing and Export Output of Four Countries in 2021",
        "csv": "Country \\t Manufacturing Output (in million) \\t Exports (in million) \\n USA \\t 800 \\t 500 \\n UK \\t 900 \\t 700 \\n Germany \\t 700 \\t 500 \\n France \\t 800 \\t 600 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart illustrates the manufacturing output and exports, in millions, of four countries in 2021. The United States shows a manufacturing output of 800 million alongside exports of 500 million. The UK's manufacturing output stands at 900 million with exports of 700 million. Germany has a manufacturing output of 700 million and exports equal to 500 million. France presents an 800 million manufacturing output with 600 million in exports."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['USA', 800, 500], \n        ['UK', 900, 700], \n        ['Germany', 700, 500], \n        ['France', 800, 600]]\n\ncountry = [x[0] for x in data]\nman_output = [x[1] for x in data]\nexports = [x[2] for x in data]\n\nx = np.arange(len(country))\nwidth = 0.35\nfig, ax = plt.subplots(figsize=(15, 8))\nax.bar(x - width/2, man_output, width, label='Manufacturing Output (in million)', color='r')\nax.bar(x + width/2, exports, width, label='Exports (in million)', color='b')\n\nax.set_xticks(x)\nax.set_xticklabels(country)\nax.legend()\nax.set_ylabel('Output')\nax.set_title('Manufacturing and Export Output of Four Countries in 2021')\n\nfor i, v in enumerate(man_output):\n    ax.text(x[i] - width/2, v + 5, str(v), ha='center', va='bottom', fontsize=10)\nfor i, v in enumerate(exports):\n    ax.text(x[i] + width/2, v + 5, str(v), ha='center', va='bottom', fontsize=10)\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/215.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much more does the UK export in millions compared to Germany?",
            "output": "200 million"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_405",
        "img": "./bar_chart_num/png/bar_num_405.png",
        "topic": "Arts and Culture",
        "title": " Number of museums, galleries, and theaters in four countries in 2021",
        "csv": "Country \\t Museums \\t Galleries \\t Theaters \\n USA \\t 50 \\t 70 \\t 80 \\n UK \\t 30 \\t 60 \\t 40 \\n Germany \\t 60 \\t 50 \\t 70 \\n France \\t 40 \\t 90 \\t 60 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of museums, galleries, and theaters in four countries in 2021\" illustrates the cultural venues in the USA, UK, Germany, and France. The USA hosts 50 museums, 70 galleries, and 80 theaters. The UK provides 30 museums, 60 galleries, and 40 theaters. Germany is home to 60 museums, 50 galleries, and 70 theaters, whereas France features 40 museums, 90 galleries, and 60 theaters."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata = {'Country':['USA', 'UK', 'Germany', 'France'],\n        'Museums':[50, 30, 60, 40],\n        'Galleries':[70, 60, 50, 90],\n        'Theaters':[80, 40, 70, 60]}\n\ndf = pd.DataFrame(data)\n\nx = np.arange(len(df))\nwidth = 0.2\n\nfig = plt.figure()\nax = fig.add_subplot()\n\nax.bar(x-width, df['Museums'], width=width, label='Museums', color='b')\nax.bar(x, df['Galleries'], width=width, label='Galleries', color='r')\nax.bar(x+width, df['Theaters'], width=width, label='Theaters', color='g')\n\nax.set_ylabel('Number')\nax.set_title('Number of museums, galleries, and theaters in four countries in 2021')\nax.set_xticks(x)\nax.set_xticklabels(df['Country'])\nax.legend()\n\nfor x1, y1 in zip(x, df['Museums']):\n    ax.annotate('{}'.format(y1), xy=(x1-width, y1+1), xycoords='data', ha='center', va='bottom')\n\nfor x2, y2 in zip(x, df['Galleries']):\n    ax.annotate('{}'.format(y2), xy=(x2, y2+1), xycoords='data', ha='center', va='bottom')\n\nfor x3, y3 in zip(x, df['Theaters']):\n    ax.annotate('{}'.format(y3), xy=(x3+width, y3+1), xycoords='data', ha='center', va='bottom')\n\nfig.tight_layout()\nplt.savefig('Bar Chart/png/223.png') \nplt.clf()"
        },
        "QA": {
            "input": "How many galleries are there in Germany?",
            "output": "50"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_305",
        "img": "./bar_chart_num/png/bar_num_305.png",
        "topic": "Social Sciences and Humanities",
        "title": " Number of Social Science and Humanities Publications from 2000 to 2015",
        "csv": "Year \\t Anthropology \\t Psychology \\t Sociology \\n 2000 \\t 60 \\t 80 \\t 70 \\n 2005 \\t 70 \\t 90 \\t 80 \\n 2010 \\t 80 \\t 100 \\t 90 \\n 2015 \\t 90 \\t 110 \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart provides a visual representation of the number of publications in three social science and humanities disciplines over four different years. Specifically, it covers Anthropology, Psychology, and Sociology for the years 2000, 2005, 2010, and 2015. The data indicates an upward trend across all disciplines, with Anthropology publications increasing from 60 in 2000 to 90 in 2015, Psychology publications from 80 to 110, and Sociology publications from 70 to 100. Each discipline shows a consistent growth in the number of publications over the 15-year span."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data\nyear = np.array([2000,2005,2010,2015])\nanthropology = np.array([60,70,80,90])\npsychology = np.array([80,90,100,110])\nsociology = np.array([70,80,90,100])\n\n# figure\nfig = plt.figure(figsize=(12,6))\nax = fig.add_subplot(111)\n\n# plot\nax.bar(year,anthropology,label='Anthropology',bottom=psychology+sociology,width=2,color='#FFD700')\nax.bar(year,psychology,label='Psychology',bottom=sociology,width=2,color='#98FB98')\nax.bar(year,sociology,label='Sociology',width=2,color='#FFA500')\n\n# label\nfor x,y in zip(year,anthropology+psychology+sociology):\n    ax.annotate(y,xy=(x,y+2))\n\n# ticks\nax.set_xticks(year)\n\n# legend\nax.legend(loc='upper right',bbox_to_anchor=(1.2,1))\n\n# title\nax.set_title('Number of Social Science and Humanities Publications from 2000 to 2015')\n\n# tight_layout\nplt.tight_layout()\n\n# save\nplt.savefig('Bar Chart/png/443.png')\n\n# clear\nplt.clf()"
        },
        "QA": {
            "input": "How many publications were there in Sociology in the year 2005?",
            "output": "80"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_475",
        "img": "./bar_chart_num/png/bar_num_475.png",
        "topic": "Human Resources and Employee Management",
        "title": " Number of Employees and Average Salaries in four countries in 2021",
        "csv": "Country \\t Employees \\t Average Salary(USD) \\n USA \\t 300 \\t 4000 \\n UK \\t 400 \\t 5000 \\n Germany \\t 200 \\t 4500 \\n France \\t 250 \\t 4750 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of employees and their average salaries in USD across four countries in 2021. The USA is represented with 300 employees and an average salary of $4000, while the UK shows 400 employees earning an average of $5000. Germany has 200 employees with an average salary of $4500, and France has 250 employees with an average salary of $4750."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ncountry = ['USA','UK','Germany','France']\nEmployees = [300,400,200,250]\nAverage_Salary = [4000,5000,4500,4750]\n\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot(111)\nax.bar(country,Employees,bottom=Average_Salary,width=0.3,label='Employees')\nax.bar(country,Average_Salary,width=0.3,label='Average Salary')\nax.set_title('Number of Employees and Average Salaries in four countries in 2021')\nax.set_ylabel('Number')\nax.set_xticks(country)\nax.legend(loc='upper left')\n\nfor i, v in enumerate(Employees):\n    ax.text(i-0.1,v+100,str(v))\n\nfor i, v in enumerate(Average_Salary):\n    ax.text(i-0.1,v+100,str(v))\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/463.png')\nplt.cla()"
        },
        "QA": {
            "input": "Which country has the highest average salary?",
            "output": "UK"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_72",
        "img": "./bar_chart_num/png/bar_num_72.png",
        "topic": "Arts and Culture",
        "title": " Number of theater performances, concerts and exhibitions in four countries in 2021",
        "csv": "Country \\t Theater Performances \\t Concerts \\t Exhibitions \\n USA \\t 50 \\t 200 \\t 150 \\n UK \\t 60 \\t 220 \\t 170 \\n Germany \\t 55 \\t 180 \\t 130 \\n France \\t 45 \\t 210 \\t 150 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart entitled \"Number of theater performances, concerts, and exhibitions in four countries in 2021\" presents a country-wise distribution of cultural events. The categories include theater performances, concerts, and exhibitions. According to the data, the USA hosted 50 theater performances, 200 concerts, and 150 exhibitions. The UK had a slightly higher number of theater performances at 60, with concerts at 220 and exhibitions at 170. Germany saw 55 theater performances, 180 concerts, and 130 exhibitions. France, on the lower end for performances and exhibitions, had 45 theater performances, 210 concerts, and matched the USA with 150 exhibitions."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(4)\ncountry = ['USA','UK','Germany','France']\ntheatre_performances = [50,60,55,45]\nconcerts = [200,220,180,210]\nexhibitions = [150,170,130,150]\n\nfig = plt.figure(figsize=(6,4))\nax = fig.add_subplot(111)\nax.bar(x-0.2, theatre_performances, width=0.2, color='b', label='Theater Performances')\nax.bar(x, concerts, width=0.2, color='g', label='Concerts')\nax.bar(x+0.2, exhibitions, width=0.2, color='r', label='Exhibitions')\nplt.xticks(x,country)\nplt.title('Number of theater performances, concerts and exhibitions in four countries in 2021')\nplt.legend()\n\nax.annotate('%d' % theatre_performances[0], xy=(x[0]-0.2, theatre_performances[0]+1))\nax.annotate('%d' % theatre_performances[1], xy=(x[1]-0.2, theatre_performances[1]+1))\nax.annotate('%d' % theatre_performances[2], xy=(x[2]-0.2, theatre_performances[2]+1))\nax.annotate('%d' % theatre_performances[3], xy=(x[3]-0.2, theatre_performances[3]+1))\nax.annotate('%d' % concerts[0], xy=(x[0], concerts[0]+1))\nax.annotate('%d' % concerts[1], xy=(x[1], concerts[1]+1))\nax.annotate('%d' % concerts[2], xy=(x[2], concerts[2]+1))\nax.annotate('%d' % concerts[3], xy=(x[3], concerts[3]+1))\nax.annotate('%d' % exhibitions[0], xy=(x[0]+0.2, exhibitions[0]+1))\nax.annotate('%d' % exhibitions[1], xy=(x[1]+0.2, exhibitions[1]+1))\nax.annotate('%d' % exhibitions[2], xy=(x[2]+0.2, exhibitions[2]+1))\nax.annotate('%d' % exhibitions[3], xy=(x[3]+0.2, exhibitions[3]+1))\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/624.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many concerts were there in Germany?",
            "output": "180"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_162",
        "img": "./bar_chart_num/png/bar_num_162.png",
        "topic": "Business and Finance",
        "title": " Revenue and Expenses of four types of businesses in 2021",
        "csv": "Type \\t Revenue(million) \\t Expenses(million) \\n Restaurant \\t 800 \\t 600 \\n Retail \\t 1200 \\t 1000 \\n Technology \\t 1500 \\t 1200 \\n Service \\t 900 \\t 800 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the revenue and expenses in millions for four different types of businesses in 2021. Restaurants show a revenue of 800 million and expenses of 600 million. Retail businesses report 1200 million in revenue against 1000 million in expenses. The Technology sector exhibits the highest revenue of 1500 million and expenses of 1200 million. Lastly, the Service industry has 900 million in revenue and 800 million in expenses."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot()\nax.set_title('Revenue and Expenses of four types of businesses in 2021')\ntypes = ['Restaurant','Retail','Technology','Service']\nrevenues = [800,1200,1500,900]\nexpenses = [600,1000,1200,800]\nax.bar(types, revenues, label='Revenue')\nax.bar(types, expenses, label='Expenses', bottom=revenues)\nax.set_xticks(types)\nax.legend(loc='upper left')\n\nfor i, j in zip(types,revenues):\n    ax.annotate('{}M'.format(j), xy=(i, j/2), horizontalalignment='center',verticalalignment='center')\nfor i, j in zip(types,expenses):\n    ax.annotate('{}M'.format(j), xy=(i, j/2+j), horizontalalignment='center',verticalalignment='center')\nplt.tight_layout()\nplt.savefig('Bar Chart/png/33.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much higher are the revenues than expenses for the Retail sector?",
            "output": "200 million"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_239",
        "img": "./bar_chart_num/png/bar_num_239.png",
        "topic": "Education and Academics",
        "title": " Number of students and schools in four countries in 2021",
        "csv": "Country \\t Number of Students \\t Number of Schools \\n USA \\t 25000 \\t 1000 \\n UK \\t 18000 \\t 800 \\n Germany \\t 21000 \\t 900 \\n France \\t 20000 \\t 1200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart, titled \"Number of students and schools in four countries in 2021,\" presents data on education facilities. The chart shows the USA with 25,000 students and 1,000 schools. The UK is reported having 18,000 students and 800 schools. Germany has a count of 21,000 students and 900 schools, while France totals 20,000 students with the highest number of schools at 1,200."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ncountry = ['USA', 'UK','Germany','France']\nNumber_of_Students = [25000,18000,21000,20000]\nNumber_of_Schools = [1000, 800, 900, 1200]\n\nfig, ax = plt.subplots(figsize=(10,6))\nax.bar(country, Number_of_Students, label='Number of Students', width=0.5, bottom=Number_of_Schools)\nax.bar(country, Number_of_Schools, label='Number of Schools', width=0.5)\n\nfor x,y,z in zip(country,Number_of_Students,Number_of_Schools):\n    ax.annotate(str(y), xy=(x, y/2+z/2), ha='center')\n    ax.annotate(str(z), xy=(x, z/2), ha='center')\n\nax.set_title('Number of students and schools in four countries in 2021')\nax.set_xticks(country)\nax.legend()\nplt.tight_layout()\nplt.savefig('Bar Chart/png/597.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest student to school ratio?",
            "output": "USA"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_6",
        "img": "./bar_chart_num/png/bar_num_6.png",
        "topic": "Tourism and Hospitality",
        "title": " Tourist visits to hotels and restaurants in four countries in 2021",
        "csv": "Country \\t Hotel Stays(thousands) \\t Restaurants Visits(thousands) \\n USA \\t 100 \\t 400 \\n UK \\t 90 \\t 350 \\n Germany \\t 80 \\t 300 \\n France \\t 110 \\t 450 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the frequency of tourist visits to hotels and restaurants in the USA, UK, Germany, and France in 2021, measured in thousands. In the USA, there were 100 thousand hotel stays and 400 thousand restaurant visits. The UK shows 90 thousand hotel stays and 350 thousand restaurant visits. Germany had slightly fewer with 80 thousand hotel stays and 300 thousand restaurant visits. France, however, had the most with 110 thousand hotel stays and 450 thousand restaurant visits."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nCountry = ['USA','UK','Germany','France']\nHotel_Stays = [100, 90, 80, 110]\nRestaurants_Visits = [400, 350, 300, 450]\n\nfig, ax = plt.subplots(figsize=(10, 8))\nxtick_pos = np.arange(len(Country))\n\nax.bar(xtick_pos-0.2, Hotel_Stays, width=0.4, label='Hotel Stays(thousands)', color='blue')\nax.bar(xtick_pos+0.2, Restaurants_Visits, width=0.4, label='Restaurants Visits(thousands)', color='purple')\n\nax.set_title('Tourist visits to hotels and restaurants in four countries in 2021')\nax.set_xticks(xtick_pos)\nax.set_xticklabels(Country)\nax.legend(loc='best')\nplt.tight_layout()\n\nfor i, v in enumerate(Hotel_Stays):\n    ax.text(xtick_pos[i]-0.2, v+5, str(v), rotation=90, color='blue', fontsize=10)\n\nfor i, v in enumerate(Restaurants_Visits):\n    ax.text(xtick_pos[i]+0.2, v+5, str(v), rotation=90, color='purple', fontsize=10)\n\nplt.savefig('Bar Chart/png/331.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more restaurant visits were there than hotel stays in the USA?",
            "output": "300,000 visits"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_211",
        "img": "./bar_chart_num/png/bar_num_211.png",
        "topic": "Law and Legal Affairs",
        "title": " Number of law graduates and lawyers in four countries in 2021",
        "csv": "Country \\t Law Graduates \\t Lawyers \\n USA \\t 5000 \\t 18000 \\n UK \\t 4500 \\t 17000 \\n Germany \\t 4000 \\t 16000 \\n France \\t 4300 \\t 15000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of law graduates and lawyers in four countries in 2021\" illustrates the count of law graduates alongside the total number of lawyers in the USA, UK, Germany, and France. The USA reports 5000 law graduates and 18000 lawyers. The UK follows with 4500 graduates and 17000 lawyers. Germany shows 4000 law graduates with 16000 lawyers, and France has 4300 law graduates and 15000 lawyers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\ncountry = [\"USA\", \"UK\", \"Germany\", \"France\"]\nlaw_grads = [5000, 4500, 4000, 4300]\nlawyers = [18000, 17000, 16000, 15000]\n\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(111)\nax.bar(country, law_grads, label=\"Law Graduates\", bottom=lawyers, width=0.4, color=\"orange\")\nax.bar(country, lawyers, label=\"Lawyers\", width=0.4, color=\"blue\")\nax.set_title(\"Number of law graduates and lawyers in four countries in 2021\")\nax.set_xlabel(\"Country\")\nax.set_xticks(country)\nax.legend(loc='upper left')\nfor i, v in enumerate(law_grads):\n    ax.text(i - 0.2, v + lawyers[i] + 1000, str(v), color='black', fontsize=10)\nfor i, v in enumerate(lawyers):\n    ax.text(i - 0.2, v + 500, str(v), color='black', fontsize=10)\nplt.tight_layout()\nplt.savefig(\"Bar Chart/png/110.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the smallest difference between the number of law graduates and the number of lawyers?",
            "output": "France"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_74",
        "img": "./bar_chart_num/png/bar_num_74.png",
        "topic": "Agriculture and Food Production",
        "title": " Crop and livestock production in four countries in 2021",
        "csv": "Country \\t Crops(tonnes) \\t Livestock(tonnes) \\n USA \\t 20000 \\t 28000 \\n UK \\t 25000 \\t 30000 \\n Germany \\t 27000 \\t 32000 \\n France \\t 24000 \\t 35000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Crop and livestock production in four countries in 2021\" illustrates the total production in tonnes for both crops and livestock. The data reflects that the USA produced 20,000 tonnes of crops and 28,000 tonnes of livestock. The UK's production was 25,000 tonnes of crops and 30,000 tonnes of livestock. Germany had a slightly higher crop production at 27,000 tonnes and 32,000 tonnes of livestock. Meanwhile, France generated 24,000 tonnes of crops and the highest livestock production, at 35,000 tonnes."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['USA',20000, 28000],\n        ['UK',25000, 30000],\n        ['Germany',27000, 32000],\n        ['France',24000, 35000]]\n\n# Get the data\ncountries = [row[0] for row in data]\ncrops = [row[1] for row in data]\nlivestock = [row[2] for row in data]\n\n# Create figure\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot()\n\n# Plot the data\nax.bar(countries, crops, label='Crops', color='#FFBB00', bottom=livestock)\nax.bar(countries, livestock, label='Livestock', color='#0099FF')\n\n# Add labels\nfor i, j in enumerate(livestock):\n    ax.annotate(str(j), xy=(i-0.2, j/2))\nfor i, j in enumerate(crops):\n    ax.annotate(str(j), xy=(i-0.2, j+livestock[i]/2))\n\n# Add legend and title\nax.legend(loc='upper left')\nax.set_title('Crop and livestock production in four countries in 2021')\n\n# Adjust parameters\nax.set_xticks(np.arange(len(countries)))\nax.set_xticklabels(countries, rotation=45, ha=\"right\", wrap=True)\nplt.tight_layout()\n\n# Save figure\nplt.savefig('Bar Chart/png/243.png')\n\n# Clear current image\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest livestock production?",
            "output": "France"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_480",
        "img": "./bar_chart_num/png/bar_num_480.png",
        "topic": "Social Sciences and Humanities",
        "title": " Social and Human Development Indices of four countries in 2021",
        "csv": "Country \\t Humans Rights Index \\t Freedom Index \\t Off-grid Energy Access Index \\n USA \\t 80 \\t 50 \\t 20 \\n UK \\t 90 \\t 60 \\t 30 \\n Germany \\t 85 \\t 55 \\t 25 \\n France \\t 75 \\t 45 \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart numerically illustrates various social and human development indices for four countries in 2021, featuring the Human Rights Index, Freedom Index, and Off-grid Energy Access Index. The USA scores 80 on the Human Rights Index, 50 on the Freedom Index, and 20 on the Off-grid Energy Access Index. The UK leads with a Human Rights Index of 90, a Freedom Index of 60, and an Off-grid Energy Access Index of 30. Germany shows 85, 55, and 25 respectively, while France scores slightly lower with 75, 45, and 15 on these indices."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nfig = plt.figure(figsize=(8,5))\nax = fig.add_subplot()\n\n#data\ncountry = ['USA', 'UK', 'Germany', 'France']\nhumans_rights_index = [80, 90, 85, 75]\nfreedom_index = [50, 60, 55, 45]\noff_grid_energy_access = [20, 30, 25, 15]\n\n#figure\nx = np.arange(len(country)) \nwidth = 0.25\n\nax.bar(x-width, humans_rights_index, width=width, label='Human Rights Index', color='orange')\nax.bar(x, freedom_index, width=width, label='Freedom Index', color='green')\nax.bar(x+width, off_grid_energy_access, width=width, label='Off-grid Energy Access Index', color='blue')\n\n#x-axes\nax.set_xticks(x)\nax.set_xticklabels(country)\n\n#legend\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.2), shadow=True, ncol=4)\n\n#title\nax.set_title('Social and Human Development Indices of four countries in 2021')\n\n#labels\nfor i, v in enumerate(humans_rights_index):\n    ax.text(i-width+0.07, v+0.5, str(v), color='black', fontweight='bold')\n\nfor i, v in enumerate(freedom_index):\n    ax.text(i+0.07, v+0.5, str(v), color='black', fontweight='bold')\n\nfor i, v in enumerate(off_grid_energy_access):\n    ax.text(i+width+0.07, v+0.5, str(v), color='black', fontweight='bold')\n\n#adjusting\nplt.tight_layout()\n\n#save\nplt.savefig('Bar Chart/png/239.png')\n\n#clear\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the UK's Freedom Index compared to the USA's?",
            "output": "10"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_380",
        "img": "./bar_chart_num/png/bar_num_380.png",
        "topic": "Human Resources and Employee Management",
        "title": " Number of Employees and Average Salaries by Department in 2021",
        "csv": "Department \\t Employees \\t Average Salary(USD) \\n Administration \\t 120 \\t 4500 \\n Management \\t 100 \\t 5000 \\n Operations \\t 150 \\t 4000 \\n Human Resources \\t 80 \\t 4750 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart represents the number of employees and average salaries across different departments within an organization in 2021. The Administration department has 120 employees earning an average salary of $4500. Management has a smaller workforce of 100 employees, but a higher average salary of $5000. Operations is the largest department with 150 employees and an average salary of $4000. Human Resources has the fewest employees, 80, with an average salary of $4750."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data\ndepartment = ['Administration', 'Management', 'Operations', 'Human Resources']\nemployees = [120, 100, 150, 80]\naverage_salary = [4500, 5000, 4000, 4750]\n\n# Create figure\nfig, ax = plt.subplots(figsize=(12,6))\n\n# Plot bar chart\nbar_width = 0.4\nax.bar(department, employees, width=bar_width, label='Employees')\nax.bar(department, average_salary, bottom=employees, width=bar_width, label='Average Salary(USD)')\n\n# Set labels\nax.set_xlabel('Department')\nax.set_ylabel('Number of Employees and Average Salaries')\nax.set_title('Number of Employees and Average Salaries by Department in 2021')\n\n# Set legend, rotation of x tick labels and adjust margin\nax.legend(loc='upper left')\nax.set_xticklabels(department, rotation=45, ha='right')\nfig.tight_layout()\n\n# Add labels\nfor i in range(len(department)):\n    ax.annotate('{}'.format(employees[i]), xy=(i - bar_width/2, employees[i] + 50), ha='center', va='bottom')\n    ax.annotate('{}'.format(average_salary[i]), xy=(i + bar_width/2, employees[i] + average_salary[i] - 50), ha='center', va='bottom')\n\n# Save image\nplt.savefig('Bar Chart/png/18.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which department has the highest average salary?",
            "output": "Management"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_258",
        "img": "./bar_chart_num/png/bar_num_258.png",
        "topic": "Technology and the Internet",
        "title": " Number of internet and smartphone users in four countries in 2021",
        "csv": "Country \\t Internet Users(million) \\t Smartphone Users(million) \\n USA \\t 250 \\t 220 \\n UK \\t 90 \\t 80 \\n Germany \\t 70 \\t 60 \\n France \\t 50 \\t 40 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of internet and smartphone users (in millions) across four countries in 2021. The USA leads with 250 million internet users and 220 million smartphone users. The UK follows with internet and smartphone users at 90 million and 80 million respectively. Germany's numbers are 70 million internet users and 60 million smartphone users. Lastly, France has 50 million internet users and 40 million smartphone users."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nCountry = ['USA', 'UK', 'Germany', 'France']\nInternet_Users = [250, 90, 70, 50]\nSmartphone_Users = [220, 80, 60, 40]\n\nfig, ax = plt.subplots(figsize=(8, 4))\nax.bar(Country, Internet_Users, label=\"Internet Users\", color='#FFC0CB')\nax.bar(Country, Smartphone_Users, label=\"Smartphone Users\", bottom=Internet_Users, color='#FFB6C1')\n\nfor i in range(len(Country)):\n    ax.text(x=i, y=Internet_Users[i]/2, s=Internet_Users[i], size=12, ha='center', va='center')\n    ax.text(x=i, y=Internet_Users[i]+Smartphone_Users[i]/2, s=Smartphone_Users[i], size=12, ha='center', va='center')\n\nax.set_title(\"Number of internet and smartphone users in four countries in 2021\")\nax.set_ylabel(\"Number of users (million)\")\nax.set_xticks(np.arange(len(Country)))\nax.set_xticklabels(Country)\nax.legend(loc='upper right')\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/258.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more internet users are there in the USA compared to the UK?",
            "output": "160 million"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_36",
        "img": "./bar_chart_num/png/bar_num_36.png",
        "topic": "Food and Beverage Industry",
        "title": " Number of food outlets in four countries in 2021",
        "csv": "Country \\t Restaurants \\t Grocery Stores \\t Takeaway \\n USA \\t 800 \\t 9000 \\t 600 \\n UK \\t 500 \\t 7000 \\t 400 \\n Germany \\t 700 \\t 8000 \\t 500 \\n France \\t 600 \\t 9000 \\t 700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the number of various food outlets including restaurants, grocery stores, and takeaway services across the USA, UK, Germany, and France in 2021. The USA is recorded with 800 restaurants, 9000 grocery stores, and 600 takeaways. The UK figures show 500 restaurants, 7000 grocery stores, and 400 takeaways. Germany has 700 restaurants, 8000 grocery stores, and 500 takeaways, while France has 600 restaurants, equally 9000 grocery stores as the USA, and the highest takeaways at 700."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(8,6))\n\nCountry = ['USA', 'UK', 'Germany', 'France']\nRestaurants = [800, 500, 700, 600]\nGrocery_Stores = [9000, 7000, 8000, 9000]\nTakeaway = [600, 400, 500, 700]\n\nx = np.arange(len(Country))\nwidth = 0.2\n\nax = plt.subplot()\nax.bar(x - width, Restaurants, width=width, label='Restaurants')\nax.bar(x, Grocery_Stores, width=width, label='Grocery Stores')\nax.bar(x + width, Takeaway, width=width, label='Takeaway')\n\nax.set_ylabel('Number of Outlets')\nax.set_title('Number of food outlets in four countries in 2021')\nax.set_xticks(x)\nax.set_xticklabels(Country)\nax.legend()\n\nfor i, v in enumerate(Restaurants):\n    ax.text(x[i] - width/2, v + 50, str(v), ha='center', va='bottom', rotation=0, fontsize=12)\n\nfor i, v in enumerate(Grocery_Stores):\n    ax.text(x[i] + width/2, v + 50, str(v), ha='center', va='bottom', rotation=0, fontsize=12)\n\nfor i, v in enumerate(Takeaway):\n    ax.text(x[i], v + 50, str(v), ha='center', va='bottom', rotation=0, fontsize=12)\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/159.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more restaurants are there in the USA compared to France?",
            "output": "200"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_144",
        "img": "./bar_chart_num/png/bar_num_144.png",
        "topic": "Energy and Utilities",
        "title": " Renewable energy output in four regions in 2021",
        "csv": "Region \\t Wind Energy(kwh) \\t Solar Energy(kwh) \\t Hydro Energy(kwh) \\n North America \\t 20000 \\t 30000 \\t 25000 \\n South America \\t 21000 \\t 32000 \\t 27000 \\n Europe \\t 22000 \\t 33000 \\t 28000 \\n Asia \\t 23000 \\t 34000 \\t 29000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the renewable energy output measured in kilowatt-hours (kWh) across four regions in 2021. North America produced 20,000 kWh from wind, 30,000 kWh from solar, and 25,000 kWh from hydro sources. South America's production was slightly higher with 21,000 kWh from wind, 32,000 kWh from solar, and 27,000 kWh from hydro. Europe's output reached 22,000 kWh, 33,000 kWh, and 28,000 kWh from wind, solar, and hydro, respectively. Asia topped the chart with 23,000 kWh from wind, 34,000 kWh from solar, and 29,000 kWh from hydro energy."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['North America', 20000, 30000, 25000],\n        ['South America', 21000, 32000, 27000],\n        ['Europe', 22000, 33000, 28000],\n        ['Asia', 23000, 34000, 29000]]\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(1,1,1)\n\nx_labels = [i[0] for i in data]\nx_pos = np.arange(len(x_labels))\n\nax.bar(x_pos, [i[1] for i in data], label='Wind Energy', color='#FFC222')\nax.bar(x_pos, [i[2] for i in data], bottom=[i[1] for i in data], label='Solar Energy', color='#F07818')\nax.bar(x_pos, [i[3] for i in data], bottom=[i[1] + i[2] for i in data], label='Hydro Energy', color='#43C6DB')\n\nax.set_title('Renewable energy output in four regions in 2021')\nax.set_xticks(x_pos)\nax.set_xticklabels(x_labels, rotation=30)\nax.legend(loc='upper left')\n\nfor i in range(len(data)):\n    ax.annotate('{:.0f}'.format(data[i][1]), xy=(x_pos[i], data[i][1] + 500), ha='center')\n    ax.annotate('{:.0f}'.format(data[i][2]), xy=(x_pos[i], data[i][1] + data[i][2] + 500), ha='center')\n    ax.annotate('{:.0f}'.format(data[i][3]), xy=(x_pos[i], data[i][1] + data[i][2] + data[i][3] + 500), ha='center')\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/158.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much wind energy did Asia produce?",
            "output": "23000"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_78",
        "img": "./bar_chart_num/png/bar_num_78.png",
        "topic": "Sports and Entertainment",
        "title": " Number of tickets sold and viewers of four sports in 2021",
        "csv": "Sport \\t Tickets Sold \\t Viewers(million) \\n Soccer \\t 500 \\t 10 \\n Basketball \\t 400 \\t 12 \\n Baseball \\t 300 \\t 8 \\n Tennis \\t 200 \\t 7 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the number of tickets sold and viewers for four different sports in 2021. Soccer saw 500 tickets sold and had 10 million viewers. Basketball had 400 tickets sold with a higher viewership of 12 million. Baseball tickets sold were 300, complemented by 8 million viewers. Lastly, Tennis had 200 tickets sold and attracted 7 million viewers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,6))\nax = plt.subplot()\n\nsports = ['Soccer','Basketball','Baseball','Tennis']\ntickets_sold = [500,400,300,200]\nviewers = [10,12,8,7]\n\nbar_width = 0.5\nx = range(len(sports))\nax.bar(x, tickets_sold, width=bar_width, label='Tickets Sold')\nax.bar(x, viewers, width=bar_width, bottom=tickets_sold, label='Viewers(million)')\n\nplt.xticks(x, sports)\nplt.legend(loc='upper left')\n\nfor i in range(len(x)):\n    ax.annotate(str(tickets_sold[i]), xy=(x[i], tickets_sold[i]/2))\n    ax.annotate(str(viewers[i]), xy=(x[i], tickets_sold[i]+viewers[i]/2))\n\nplt.title('Number of tickets sold and viewers of four sports in 2021')\nplt.tight_layout()\nplt.savefig('Bar Chart/png/462.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "How many more viewers did basketball have compared to baseball in 2021?",
            "output": "4 million"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_440",
        "img": "./bar_chart_num/png/bar_num_440.png",
        "topic": "Arts and Culture",
        "title": " Number of Galleries, Museums, and Theatres in four countries in 2021",
        "csv": "Country \\t Galleries \\t Museums \\t Theatres \\n USA \\t 200 \\t 150 \\t 100 \\n UK \\t 250 \\t 180 \\t 120 \\n Germany \\t 220 \\t 140 \\t 90 \\n France \\t 230 \\t 130 \\t 110 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of Galleries, Museums, and Theatres in four countries in 2021\" presents the distribution of cultural venues across the USA, UK, Germany, and France. In the USA, there are 200 galleries, 150 museums, and 100 theatres. The UK features 250 galleries, 180 museums, and 120 theatres. Germany has 220 galleries, 140 museums, and 90 theatres. France contains 230 galleries, 130 museums, and 110 theatres."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.array([[200, 150, 100], [250,180,120], [220,140,90], [230,130,110]])\n\nx = np.arange(4)\ncountry = ['USA', 'UK', 'Germany', 'France']\n\nFig = plt.figure(figsize=(14, 8))\nax = Fig.add_subplot()\nax.bar(x, data[:, 0], color='b', width=0.4, label='Galleries')\nax.bar(x, data[:, 1], bottom=data[:, 0], color='g', width=0.4, label='Museums')\nax.bar(x, data[:, 2], bottom=data[:, 0] + data[:, 1], color='r', width=0.4, label='Theatres')\n\nfor xpos, ypos, yval in zip(x, data[:, 0]/2, data[:, 0]):\n    ax.text(xpos, ypos, yval, horizontalalignment='center',\n            verticalalignment='center', fontsize=20, fontweight=5)\n\nfor xpos, ypos, yval in zip(x, data[:, 0] + data[:, 1]/2, data[:, 1]):\n    ax.text(xpos, ypos, yval, horizontalalignment='center',\n            verticalalignment='center', fontsize=20, fontweight=5)\n\nfor xpos, ypos, yval in zip(x, data[:, 0] + data[:, 1] + data[:, 2]/2, data[:, 2]):\n    ax.text(xpos, ypos, yval, horizontalalignment='center',\n            verticalalignment='center', fontsize=20, fontweight=5)\n\nplt.xticks(x, country)\nplt.title('Number of Galleries, Museums, and Theatres in four countries in 2021')\nplt.legend()\nplt.tight_layout()\n\nplt.savefig('Bar Chart/png/598.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "How many museums are in France?",
            "output": "130"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_379",
        "img": "./bar_chart_num/png/bar_num_379.png",
        "topic": "Government and Public Policy",
        "title": " Voter turnout in four regions in 2021",
        "csv": "Region \\t Voting Age Population \\t Registered Voters \\n North \\t 100000 \\t 70000 \\n South \\t 140000 \\t 85000 \\n East \\t 120000 \\t 75000 \\n West \\t 130000 \\t 90000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the voter turnout data for four regions in 2021. It contrasts the Voting Age Population with the actual number of Registered Voters. The North has a population of 100,000 with 70,000 registered voters. The South shows a higher population at 140,000, with 85,000 registered. In the East, there are 120,000 potential voters with 75,000 registered. Lastly, the West has a voting age population of 130,000, of which 90,000 are registered voters."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt \nimport numpy as np \n\n# set the figure size \nplt.figure(figsize=(12, 6)) \n\n# data \nregion = [\"North\", \"South\", \"East\", \"West\"] \nvoting_age_population = [100000, 140000, 120000, 130000] \nregistered_voters = [70000, 85000, 75000, 90000] \n\n\n# create bars \nbar_width = 0.25 \nbar1 = plt.bar(region, voting_age_population, width=bar_width, \n                label=\"Voting Age Population\", color=\"blue\") \nbar2 = plt.bar(region, registered_voters, width=bar_width, \n                bottom=voting_age_population, label=\"Registered Voters\", \n                color=\"red\") \n\n# labels and title \nplt.xlabel(\"\\nRegion\", fontsize=14) \nplt.ylabel(\"Population Count\\n\", fontsize=14) \nplt.title(\"Voter turnout in four regions in 2021\\n\", fontsize=14) \n\n# set axis \nplt.xticks(np.arange(len(region)), region) \nplt.yticks(np.arange(0, 200001, 50000)) \n\n# add grids  \nplt.grid(True, axis=\"y\", alpha=0.3) \n\n# add legend \nplt.legend(bbox_to_anchor=(1.03, 1.0), loc=\"upper left\") \n\n\n# optimize layout \nplt.tight_layout() \n\n# save figure \nplt.savefig(\"bar_379.png\") \n\n# clear current figure \nplt.clf()"
        },
        "QA": {
            "input": "What is the total number of registered voters in the North and West regions combined?",
            "output": "160000"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_58",
        "img": "./bar_chart_num/png/bar_num_58.png",
        "topic": "Real Estate and Housing Market",
        "title": " Average Home Price and Number of Homes Sold by Region in 2021",
        "csv": "Region \\t Average Home Price(thousand $) \\t Number of Homes Sold \\n East Coast \\t 400 \\t 200 \\n West Coast \\t 500 \\t 250 \\n Midwest \\t 300 \\t 150 \\n South \\t 350 \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the average home price in thousand dollars and the number of homes sold by region in 2021. The East Coast shows an average home price of $400 thousand with 200 homes sold. The West Coast has a higher average price of $500 thousand and a larger number of homes sold at 250. The Midwest features the lowest average home price at $300 thousand with 150 homes sold. Lastly, the South presents an average price of $350 thousand and the fewest homes sold, numbering 100."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure()\nax = fig.add_subplot()\n\nregion = ['East Coast','West Coast','Midwest','South']\nprice = [400,500,300,350]\nnumber = [200,250,150,100]\n\nx = np.arange(len(region))\n\nax.bar(x,price,label='Average Home Price(thousand $)',width=0.35,bottom=0)\nax.bar(x,number,label='Number of Homes Sold',width=0.35,bottom=price)\n\nax.set_xticks(x)\nax.set_xticklabels(region)\nax.set_title('Average Home Price and Number of Homes Sold by Region in 2021')\n\nfor i,j in zip(x,price):\n    ax.annotate(str(j), xy=(i, j), xytext=(0,3), textcoords=\"offset points\", ha='center', va='bottom')\n\nfor i,j in zip(x,number):\n    ax.annotate(str(j), xy=(i, j+price[i]), xytext=(0,3), textcoords=\"offset points\", ha='center', va='bottom')\n\nax.legend()\nplt.tight_layout()\nplt.savefig('bar_58.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the average home price on the South?",
            "output": "350 thousand dollars"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_135",
        "img": "./bar_chart_num/png/bar_num_135.png",
        "topic": "Law and Legal Affairs",
        "title": " Number of Lawyers and Paralegals in four countries in 2021",
        "csv": "Country \\t Lawyers \\t Paralegals \\n USA \\t 800 \\t 1200 \\n UK \\t 700 \\t 1300 \\n Germany \\t 900 \\t 1100 \\n France \\t 1000 \\t 1000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart depicts the number of lawyers and paralegals across four countries in 2021. It shows the USA with 800 lawyers and 1200 paralegals, the UK with 700 lawyers and 1300 paralegals, Germany with 900 lawyers and 1100 paralegals, and France with 1000 lawyers and 1000 paralegals."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nfig = plt.figure(figsize=(15,5))\nax = fig.add_subplot(111)\nax.bar(['USA', 'UK', 'Germany', 'France'], [800, 700, 900, 1000], width=0.4, color='r', label='Lawyers')\nax.bar(['USA', 'UK', 'Germany', 'France'], [1200, 1300, 1100, 1000], width=0.4, bottom=[800, 700, 900, 1000], color='b', label='Paralegals')\nax.set_title(\"Number of Lawyers and Paralegals in four countries in 2021\")\nax.set_ylabel(\"Number of People\")\nax.legend(loc='upper center')\nax.set_xticks(['USA', 'UK', 'Germany', 'France'])\nax.annotate('800', xy=('USA', 800), xytext=(0,10), textcoords='offset points')\nax.annotate('700', xy=('UK', 700), xytext=(0,10), textcoords='offset points')\nax.annotate('900', xy=('Germany', 900), xytext=(0,10), textcoords='offset points')\nax.annotate('1000', xy=('France', 1000), xytext=(0,10), textcoords='offset points')\nax.annotate('1200', xy=('USA', 1200), xytext=(0,10), textcoords='offset points')\nax.annotate('1300', xy=('UK', 1300), xytext=(0,10), textcoords='offset points')\nax.annotate('1100', xy=('Germany', 1100), xytext=(0,10), textcoords='offset points')\nax.annotate('1000', xy=('France', 2000), xytext=(0,10), textcoords='offset points')\nplt.tight_layout()\nplt.savefig('Bar Chart/png/36.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has an equal number of lawyers and paralegals?",
            "output": "France"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_231",
        "img": "./bar_chart_num/png/bar_num_231.png",
        "topic": "Manufacturing and Production",
        "title": " Number of Manufacturing Units and Employees in four countries in 2021",
        "csv": "Country \\t Manufacturing Units \\t Employees \\n USA \\t 400 \\t 1200 \\n UK \\t 500 \\t 1400 \\n Germany \\t 700 \\t 1100 \\n France \\t 300 \\t 900 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of Manufacturing Units and Employees in four countries in 2021\" shows the count of manufacturing units and the number of employees in each unit across USA, UK, Germany, and France. In 2021, the USA had 400 units with 1200 employees, the UK with 500 units had 1400 employees, Germany led with 700 units and 1100 employees, and France had 300 units with 900 employees."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.array([[400, 1200], [500, 1400], [700, 1100], [300, 900]])\ncountries = [\"USA\", \"UK\", \"Germany\", \"France\"]\n\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot()\n\nx = np.arange(len(countries))\nwidth = 0.35\n\nax.bar(x - width/2, data[:,0], width, label='Manufacturing Units')\nax.bar(x + width/2, data[:,1], width, label='Employees')\n\nax.set_title('Number of Manufacturing Units and Employees in four countries in 2021')\nax.set_xticks(x)\nax.set_xticklabels(countries)\nax.legend()\n\nfor i in range(len(countries)):\n    ax.text(x[i] - width/2, data[i,0]/2, data[i,0], ha='center', va='center')\n    ax.text(x[i] + width/2, data[i,1]/2, data[i,1], ha='center', va='center')\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/430.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more employees does the UK have compared to Germany in manufacturing?",
            "output": "300"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_314",
        "img": "./bar_chart_num/png/bar_num_314.png",
        "topic": "Tourism and Hospitality",
        "title": " Number of hotels, restaurants and tourists in four countries in 2021",
        "csv": "Country \\t Hotels \\t Restaurants \\t Tourists \\n USA \\t 200 \\t 450 \\t 5000 \\n UK \\t 300 \\t 500 \\t 4500 \\n Germany \\t 180 \\t 400 \\t 4000 \\n France \\t 230 \\t 470 \\t 4200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of hotels, restaurants, and tourists in four countries in 2021\" illustrates the numerical data for each category. The USA has 200 hotels, 450 restaurants, and 5,000 tourists. The UK shows 300 hotels, 500 restaurants, and 4,500 tourists. In Germany, there are 180 hotels, 400 restaurants, and 4,000 tourists. Lastly, France is represented with 230 hotels, 470 restaurants, and 4,200 tourists."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(8, 5))\nax = plt.subplot()\nax.bar(['USA','UK','Germany','France'], [200, 300, 180, 230], label='Hotels', width=0.5)\nax.bar(['USA','UK','Germany','France'], [450, 500, 400, 470], label='Restaurants', width=0.5, bottom=[200, 300, 180, 230])\nax.bar(['USA','UK','Germany','France'], [5000, 4500, 4000, 4200], label='Tourists', width=0.5, bottom=[650, 800, 580, 700])\nplt.title(\"Number of hotels, restaurants and tourists in four countries in 2021\")\nplt.xlabel(\"Country\")\nplt.ylabel(\"Number\")\nplt.legend(bbox_to_anchor=(1, 1), loc=2, borderaxespad=0.)\nplt.xticks(rotation=45)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x()+0.10, p.get_height()+50))\nplt.tight_layout()\nplt.savefig('Bar Chart/png/89.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more restaurants are there in the UK than in Germany?",
            "output": "100"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_228",
        "img": "./bar_chart_num/png/bar_num_228.png",
        "topic": "Law and Legal Affairs",
        "title": " Number of criminal and civil cases in four states in 2021",
        "csv": "State \\t Criminal Cases \\t Civil Cases \\n California \\t 3000 \\t 5000 \\n New York \\t 3200 \\t 4200 \\n Texas \\t 3500 \\t 4500 \\n Florida \\t 4000 \\t 4800 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of criminal and civil cases in four states in 2021\" illustrates the distribution of legal cases across California, New York, Texas, and Florida. Specifically, California has 3000 criminal and 5000 civil cases. New York shows slightly higher criminal cases at 3200, but fewer civil cases at 4200. Texas reports 3500 criminal cases and 4500 civil cases. Florida has the highest numbers portrayed with 4000 criminal and 4800 civil cases."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np\n\n# Create a figure object\nfig = plt.figure(figsize=(15, 8))\n\n# Adding subplot to the figure object\nax = fig.add_subplot(1, 1, 1)\n\n# Defining labels\nstates = ['California', 'New York', 'Texas', 'Florida']\ncriminal_cases = np.array([3000, 3200, 3500, 4000])\ncivil_cases = np.array([5000, 4200, 4500, 4800])\n\n# Setting the position of the x-axis ticks\nx_pos = np.arange(len(states))\n\n# Plotting the Bar Chart\nax.bar(x_pos, criminal_cases, color='#38b6ff', label='Criminal Cases')\nax.bar(x_pos, civil_cases, color='#ffd938', bottom=criminal_cases, label='Civil Cases')\n\n# Adding legend\nax.legend(loc=\"upper right\")\n\n# Setting the xticks\nax.set_xticks(x_pos)\nax.set_xticklabels(states)\n\n# Adding title\nax.set_title('Number of criminal and civil cases in four states in 2021')\n\n# Adding Value Labels\nfor a,b,c in zip(x_pos, criminal_cases, civil_cases): \n    ax.annotate(str(b), (a, b+0.2), fontsize=10)\n    ax.annotate(str(c), (a, c+b+0.2), fontsize=10)\n\n# Automatically adjusting the image size\nplt.tight_layout()\n\n# Saving the figure\nplt.savefig(\"Bar Chart/png/327.png\") \n\n# Clearing the figure\nplt.clf()"
        },
        "QA": {
            "input": "How many more criminal cases are there in Florida compared to California?",
            "output": "1000 cases"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_140",
        "img": "./bar_chart_num/png/bar_num_140.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare visits by age group in 2021",
        "csv": "Age Group \\t Hospital Visits(million) \\t GP Visits(million) \\n 0-17 \\t 50 \\t 90 \\n 18-35 \\t 120 \\t 150 \\n 36-50 \\t 90 \\t 100 \\n 51-65 \\t 80 \\t 110 \\n 65+ \\t 60 \\t 130 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart illustrates healthcare visits by different age groups in 2021, categorized into hospital visits and GP visits, both measured in millions. The 0-17 age group made 50 million hospital visits and 90 million GP visits. Individuals aged 18-35 had 120 million hospital visits and 150 million GP visits. The 36-50 age bracket accounted for 90 million hospital visits and 100 million GP visits. There were 80 million hospital visits and 110 million GP visits made by those aged 51-65. Lastly, the 65+ age group saw 60 million hospital visits and 130 million GP visits."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \n\n# create figure \nfig = plt.figure() \nax = fig.add_subplot(1,1,1) \n\n# set figure size \nfig.set_figwidth(10) \nfig.set_figheight(6) \n\n# define data \nx_labels = ['0-17','18-35','36-50','51-65','65+'] \nhospital_visits = [50,120,90,80,60] \ngp_visits = [90,150,100,110,130] \n\n# plot bar chart \nbar_width = 0.45\nax.bar(x_labels, hospital_visits, bar_width, label='Hospital Visits', color='blue') \nax.bar(x_labels, gp_visits, bar_width, label='GP Visits', color='red', bottom=hospital_visits) \n\n# set label name \nax.set_xlabel('Age Group') \nax.set_ylabel('Visits (million)') \nax.set_title('Healthcare visits by age group in 2021') \nax.set_xticks(np.arange(len(x_labels))) \nax.set_xticklabels(x_labels, rotation=90) \n\n# annotate \nfor i, v in enumerate(hospital_visits): \n    ax.text(i-bar_width/2, v + 5, str(v), color='blue', fontweight='bold') \nfor i, v in enumerate(gp_visits): \n    ax.text(i+bar_width/2, hospital_visits[i] + v + 5, str(v), color='red', fontweight='bold') \n\n# set legend \nax.legend(loc='upper left') \n\n# adjust the display \nfig.tight_layout() \n\n# save figure \nfig.savefig('Bar Chart/png/382.png') \n\n# clear the figure state \nplt.clf()"
        },
        "QA": {
            "input": "Which age group has the least number of hospital visits?",
            "output": "65+"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_32",
        "img": "./bar_chart_num/png/bar_num_32.png",
        "topic": "Arts and Culture",
        "title": " Arts and Culture facilities in four countries in 2021",
        "csv": "Country \\t Galleries \\t Museums \\t Theaters \\n USA \\t 20 \\t 30 \\t 50 \\n UK \\t 25 \\t 40 \\t 60 \\n Germany \\t 15 \\t 35 \\t 45 \\n France \\t 18 \\t 32 \\t 55 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the quantity of arts and culture facilities, including galleries, museums, and theaters, in four countries in 2021. The USA is presented with 20 galleries, 30 museums, and 50 theaters. The UK exceeds these numbers with 25 galleries, 40 museums, and 60 theaters. Germany showcases fewer, with 15 galleries, 35 museums, and 45 theaters. France offers 18 galleries, 32 museums, and 55 theaters."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# set data\ncountries = ('USA', 'UK', 'Germany', 'France')\ngalleries = (20, 25, 15, 18)\nmuseums = (30, 40, 35, 32)\ntheaters = (50, 60, 45, 55)\n\n# draw figure\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(111)\n\n# plot\nx = np.arange(len(countries))\nwidth = 0.2\n\nax.bar(x, galleries, width, label='Galleries')\nax.bar(x + width, museums, width, label='Museums')\nax.bar(x + 2*width, theaters, width, label='Theaters')\n\n# set ticks\nax.set_xticks(x + width)\nax.set_xticklabels(countries)\nax.set_ylabel('Number of Facilities')\n\n# annotate labels\nfor a,b in zip(x, galleries):\n    ax.annotate(str(b), xy=(a, b), xytext=(0, 3), \n                textcoords='offset points', ha='center', va='bottom')\nfor a,b in zip(x, museums):\n    ax.annotate(str(b), xy=(a+width, b), xytext=(0, 3), \n                textcoords='offset points', ha='center', va='bottom')\nfor a,b in zip(x, theaters):\n    ax.annotate(str(b), xy=(a+2*width, b), xytext=(0, 3), \n                textcoords='offset points', ha='center', va='bottom')\n\n# legend\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.07),\n          fancybox=True, shadow=True, ncol=3)\n\n# set title\nfig.suptitle('Arts and Culture facilities in four countries in 2021', fontsize=14)\n\n# adjust layout\nplt.tight_layout()\n\n# save figure\nplt.savefig('Bar Chart/png/211.png')\n\n# clear figure\nplt.clf()"
        },
        "QA": {
            "input": "How many more Museums are there in the UK than in France?",
            "output": "8"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_277",
        "img": "./bar_chart_num/png/bar_num_277.png",
        "topic": "Energy and Utilities",
        "title": " Energy production from Hydroelectric, Solar and Wind in four regions in 2021",
        "csv": "Region \\t Hydroelectric \\t Solar \\t Wind \\n North America \\t 1000 \\t 2000 \\t 3000 \\n Europe \\t 1100 \\t 2200 \\t 3300 \\n Africa \\t 1200 \\t 2400 \\t 3600 \\n Asia \\t 1300 \\t 2600 \\t 3900 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart presents the energy production figures from hydroelectric, solar, and wind sources across four regions in 2021. North America reports production of 1000 units from hydroelectric, 2000 from solar, and 3000 from wind. Europe shows slightly higher amounts with 1100 units from hydroelectric, 2200 from solar, and 3300 from wind. Africa's energy production continues the incremental trend with 1200 units from hydroelectric, 2400 from solar, and 3600 from wind. Asia tops the chart with the highest production: 1300 units from hydroelectric, 2600 from solar, and 3900 from wind energy sources."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import FuncFormatter\nimport numpy as np\n\nregion = ['North America','Europe','Africa','Asia']\nhydroelectric = [1000,1100,1200,1300]\nsolar = [2000,2200,2400,2600]\nwind = [3000,3300,3600,3900]\n\n# Create figure\nfig = plt.figure(figsize=(10,5))\n\n# Create axes\nax = fig.add_subplot(111)\n\n# Create bar chart\nx = np.arange(len(region))\nax.bar(x - 0.2, hydroelectric, width=0.2, label='Hydroelectric', color='#8dafbe')\nax.bar(x, solar, width=0.2, label='Solar', color='#ffc000')\nax.bar(x + 0.2, wind, width=0.2, label='Wind', color='#007f5f')\n\n# Set the x-axis\nax.set_xticks(x)\nax.set_xticklabels(region)\n\n# Set the y-axis\nax.yaxis.set_major_formatter(FuncFormatter('{:.0f}'.format))\n\n# Set title\nplt.title('Energy Production from Hydroelectric, Solar and Wind in four regions in 2021')\n\n# Set legend\nplt.legend(loc='best')\n\n# Add label\nfor i in range(len(hydroelectric)):\n    ax.annotate(hydroelectric[i]+solar[i]+wind[i], xy=(i, hydroelectric[i]+solar[i]+wind[i]), xytext=(0, 3), \n            textcoords=\"offset points\", ha='center', va='bottom')\n\n# Adjust the size of the figure\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Bar Chart/png/572.png')\n\n# Clear the figure\nplt.clf()"
        },
        "QA": {
            "input": "Which region has the lowest hydroelectric energy production?",
            "output": "North America"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_63",
        "img": "./bar_chart_num/png/bar_num_63.png",
        "topic": "Social Media and the Web",
        "title": " Number of users and advertisers on social media platforms in 2021",
        "csv": "Platform \\t Users(million) \\t Advertisers \\n Facebook \\t 2.75 \\t 1.6 \\n YouTube \\t 2.3 \\t 2.2 \\n Instagram \\t 1.2 \\t 0.9 \\n Twitter \\t 0.9 \\t 0.7 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the number of users (in millions) and advertisers for different social media platforms in 2021. Facebook shows 2.75 million users and 1.6 million advertisers; YouTube has 2.3 million users alongside 2.2 million advertisers. Instagram's figures include 1.2 million users and 0.9 million advertisers, while Twitter has 0.9 million users and 0.7 million advertisers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \n\n# Set the figure size\nplt.figure(figsize=(9, 6)) \n\n# Create an array with the data\ndata = np.array([[2.75, 1.6], [2.3, 2.2], [1.2, 0.9], [0.9, 0.7]]) \n\n# Create a list with the names of the platforms\nplatforms = ['Facebook', 'YouTube', 'Instagram', 'Twitter'] \n\n# Create a list with the names of the bars\nbars = ['Users (million)', 'Advertisers'] \n\n# Create the position of the bars on the x-axis\nr = [0, 1] \n\n# Create a bar plot\nbottom = np.zeros(len(platforms)) \nfor i in range(len(bars)):\n    plt.bar(platforms, data[:,i], bottom=bottom, label=bars[i], width=0.5) \n    bottom += data[:,i] \n\n# Add legend\nplt.legend() \n\n# Place the value of each data point on the figure\nfor i in range(len(platforms)):\n    plt.annotate(data[i][0], xy=(platforms[i], data[i][0]/2)) \n    plt.annotate(data[i][1], xy=(platforms[i], bottom[i]-data[i][1]/2)) \n\n# Set the title of the figure\nplt.title('Number of users and advertisers on social media platforms in 2021') \n\n# Set the x-axis label\nplt.xlabel('Platforms') \n\n# Set the y-axis label\nplt.ylabel('Number of users/advertisers (million)') \n\n# Set the xticks to prevent interpolation\nplt.xticks(platforms) \n\n# Automatically adjust the image size\nplt.tight_layout() \n\n# Save the figure\nplt.savefig('Bar Chart/png/577.png') \n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many million users does Instagram have?",
            "output": "1.2"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_47",
        "img": "./bar_chart_num/png/bar_num_47.png",
        "topic": "Environment and Sustainability",
        "title": " Carbon emission and renewable energy in four regions in 2021",
        "csv": "Region \\t Carbon Emission(million tons) \\t Renewable Energy(%) \\n North America \\t 1000 \\t 20 \\n Europe \\t 1300 \\t 30 \\n Asia \\t 2000 \\t 15 \\n Africa \\t 500 \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart represents carbon emissions in million tons and the percentage of renewable energy used across four different regions for the year 2021. North America has carbon emissions of 1000 million tons and uses 20% renewable energy. Europe's carbon emissions stand at 1300 million tons with 30% renewable energy. Asia leads in emissions at 2000 million tons but has 15% renewable energy use. Africa contributes 500 million tons of carbon emissions and has the lowest renewable energy usage at 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(7, 5))\nax = fig.add_subplot(111)\n\nregion = ['North America', 'Europe', 'Asia', 'Africa']\ncarbon = [1000, 1300, 2000, 500]\nrenew = [20, 30, 15, 10]\n\nbar1 = ax.bar(region, carbon, width=0.4, label='Carbon Emission(million tons)', bottom=0)\nbar2 = ax.bar(region, renew, width=0.4, label='Renewable Energy(%)', bottom=carbon)\n\nplt.xticks(region, rotation='vertical')\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2)\nplt.title('Carbon emission and renewable energy in four regions in 2021')\nfor i, v in enumerate(carbon):\n    ax.text(i-0.2, v+renew[i]/2, str(v), color='blue', fontweight='bold')\nfor i, v in enumerate(renew):\n    ax.text(i+0.2, v/2, str(v), color='green', fontweight='bold')\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/372.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the carbon emission of Africa?",
            "output": "500 million tons"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_282",
        "img": "./bar_chart_num/png/bar_num_282.png",
        "topic": "Agriculture and Food Production",
        "title": " Fruit and vegetables production in four countries in 2021",
        "csv": "Country \\t Fruit Production(tonnes) \\t Vegetables Production(tonnes) \\n USA \\t 2000 \\t 4000 \\n UK \\t 2500 \\t 4500 \\n Germany \\t 1800 \\t 3800 \\n France \\t 2300 \\t 4700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates the fruit and vegetable production in tonnes of four countries in 2021. The United States produced 2000 tonnes of fruit and 4000 tonnes of vegetables. The UK's production was 2500 tonnes of fruit and 4500 tonnes of vegetables. Germany had a fruit output of 1800 tonnes and 3800 tonnes of vegetables. France produced 2300 tonnes of fruit and led with the highest vegetable production at 4700 tonnes."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data\ncountry = [\"USA\", \"UK\", \"Germany\", \"France\"]\nfruit_production = [2000, 2500, 1800, 2300]\nvegetables_production = [4000, 4500, 3800, 4700]\n\n# figure size\nplt.figure(figsize=(9, 6))\n\n# position of the legend\nax = plt.subplot(111)\n\n# plot bar charts\nax.bar(country, fruit_production, width = 0.2, label=\"Fruit Production\", color=\"green\")\nax.bar(country, vegetables_production, width = 0.2, bottom=fruit_production, label=\"Vegetables Production\", color=\"red\")\n\n# title\nplt.title(\"Fruit and vegetables production in four countries in 2021\")\n\n# legend\nax.legend(loc=\"upper left\")\n\n# add grid\nax.grid(axis=\"y\")\n\n# add value of every bar\nfor i in range(len(country)):\n    ax.annotate(str(fruit_production[i]), xy=(i-0.2,fruit_production[i]+200))\n    ax.annotate(str(vegetables_production[i]), xy=(i+0.2,vegetables_production[i]+200))\n\n# set x ticks\nplt.xticks(np.arange(len(country)), country, rotation=45, ha=\"right\")\n\n# adjust the figure size and spacing\nplt.tight_layout()\n\n# save image\nplt.savefig(\"Bar Chart/png/8.png\")\n\n# clear figure\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest production of vegetables?",
            "output": "France"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_261",
        "img": "./bar_chart_num/png/bar_num_261.png",
        "topic": "Tourism and Hospitality",
        "title": " Number of hotel rooms and tourist visits in four countries in 2021",
        "csv": "Country \\t Hotel Rooms \\t Tourist Visits \\n USA \\t 20000 \\t 40000 \\n UK \\t 30000 \\t 50000 \\n Germany \\t 18000 \\t 40000 \\n France \\t 23000 \\t 47000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of hotel rooms and tourist visits in four countries in 2021\" illustrates the count of hotel rooms and tourist visits in the USA, UK, Germany, and France. Specifically, the USA has 20,000 hotel rooms and 40,000 tourist visits, the UK with 30,000 rooms and 50,000 visits, Germany with 18,000 rooms and 40,000 visits, and France presents 23,000 hotel rooms alongside 47,000 tourist visits."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nCountry = ['USA', 'UK', 'Germany', 'France']\nHotel_Rooms = [20000, 30000, 18000, 23000]\nTourist_Visits = [40000, 50000, 40000, 47000]\n\nx = np.arange(len(Country))\nwidth = 0.35\n\nfig, ax = plt.subplots(figsize=(10, 8))\nax.bar(x - width/2, Hotel_Rooms, width, label='Hotel Rooms')\nax.bar(x + width/2, Tourist_Visits, width, label='Tourist Visits')\nax.set_xticks(x)\nax.set_xticklabels(Country)\nax.set_title('Number of hotel rooms and tourist visits in four countries in 2021')\nax.legend()\n\nfor i, v in enumerate(Hotel_Rooms):\n    ax.text(x[i] - width/2, v+1000, str(v), color='blue', fontweight='bold')\nfor i, v in enumerate(Tourist_Visits):\n    ax.text(x[i] + width/2, v+1000, str(v), color='red', fontweight='bold')\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/361.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more tourist visits does France have compared to the USA?",
            "output": "7000"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_401",
        "img": "./bar_chart_num/png/bar_num_401.png",
        "topic": "Retail and E-commerce",
        "title": " Percentage of Online and Offline Shopping in four countries in 2021",
        "csv": "Country \\t Online Shopping(%) \\t Offline Shopping(%) \\n USA \\t 80 \\t 20 \\n UK \\t 70 \\t 30 \\n Germany \\t 75 \\t 25 \\n France \\t 60 \\t 40 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart numerically represents the percentages of online and offline shopping in the USA, UK, Germany, and France in 2021. In the USA, 80% of shopping was done online compared to 20% offline. The UK's shopping habits were 70% online and 30% offline. Germany showed a 75% preference for online shopping, leaving 25% for offline. France had the highest offline shopping percentage at 40%, with online shopping accounted for 60%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nCountry = ['USA','UK','Germany','France']\nOnline_Shopping = [80, 70, 75, 60]\nOffline_Shopping = [20, 30, 25, 40]\n\nfig = plt.figure(figsize=(8,5))\nax = fig.add_subplot()\nax.bar(Country, Online_Shopping, width = 0.6, color='#2F4F4F', bottom=Offline_Shopping, label='Online Shopping')\nax.bar(Country, Offline_Shopping, width = 0.6, color='#696969', label='Offline Shopping')\n\nplt.title('Percentage of Online and Offline Shopping in four countries in 2021')\nax.set_xticks(Country)\nax.set_xticklabels(Country, rotation=45)\nax.legend(loc='upper left', bbox_to_anchor=(1,1))\n\nfor x, y1, y2 in zip(Country, Online_Shopping, Offline_Shopping):\n    ax.annotate('{}%'.format(y1), xy=(x, y1/2 + y2/2), ha='center')\n    ax.annotate('{}%'.format(y2), xy=(x, y2/2), ha='center')\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/289.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the smallest difference between Online and Offline Shopping percentages?",
            "output": "Germany"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_419",
        "img": "./bar_chart_num/png/bar_num_419.png",
        "topic": "Arts and Culture",
        "title": " Number of artworks in four genres in 2021",
        "csv": "Genre \\t Painting \\t Photography \\t Sculpture \\n Abstract \\t 50 \\t 60 \\t 70 \\n Realism \\t 40 \\t 50 \\t 60 \\n Impressionism \\t 60 \\t 70 \\t 80 \\n Surrealism \\t 40 \\t 50 \\t 60 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the number of artworks across four genres in 2021. Abstract genre has 50 paintings, 60 photographs, and 70 sculptures. Realism includes 40 paintings, 50 photographs, and 60 sculptures. Impressionism shows higher figures with 60 paintings, 70 photographs, and 80 sculptures. Surrealism matches Realism's statistics with 40 paintings, 50 photographs, and 60 sculptures per genre."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(8,6))\nax = plt.subplot()\n\nGenre = [\"Abstract\",\"Realism\",\"Impressionism\",\"Surrealism\"]\nPainting = [50,40,60,40]\nPhotography = [60,50,70,50]\nSculpture = [70,60,80,60]\n\nx = range(len(Genre))\nax.bar(x,Painting,label=\"Painting\",width=0.3)\nax.bar(x,Photography,bottom=Painting,label=\"Photography\",width=0.3)\nax.bar(x,Sculpture,bottom=[i+j for i,j in zip(Painting,Photography)],label=\"Sculpture\",width=0.3)\n\nax.set_title(\"Number of artworks in four genres in 2021\")\nax.set_xticks(x)\nax.set_xticklabels(Genre)\nax.legend(loc=\"upper left\")\n\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x(), p.get_height()))\n\nplt.tight_layout()\nplt.savefig(\"Bar Chart/png/165.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How many Photography artworks are there in the Surrealism genre?",
            "output": "50"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_340",
        "img": "./bar_chart_num/png/bar_num_340.png",
        "topic": "Science and Engineering",
        "title": " Number of engineers and scientists in four countries in 2021",
        "csv": "Country \\t Engineers \\t Scientists \\n USA \\t 500 \\t 400 \\n UK \\t 450 \\t 350 \\n Germany \\t 650 \\t 550 \\n France \\t 550 \\t 450 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of engineers and scientists in four countries in 2021\" shows the distribution of engineers and scientists across the USA, UK, Germany, and France. The USA has 500 engineers and 400 scientists, the UK has 450 engineers and 350 scientists, Germany leads with 650 engineers and 550 scientists, and France has 550 engineers and 450 scientists."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \n\nCountry = ['USA', 'UK', 'Germany', 'France'] \nEngineers = [500, 450, 650, 550]\nScientists = [400, 350, 550, 450]\n\nfig = plt.figure(figsize=(10, 6)) \nax = fig.add_subplot(111) \n\nwidth = 0.3 \nx = np.arange(len(Country)) \n\nax.bar(x - width/2, Engineers, width, color='b', label='Engineers')\nax.bar(x + width/2, Scientists, width, color='g', label='Scientists')\n\nax.set_xticks(x)\nax.set_xticklabels(Country)\nax.set_title('Number of engineers and scientists in four countries in 2021')\n\nax.legend(bbox_to_anchor=(1.02, 0.5), loc='center left', borderaxespad=0.)\n\nfor i, v in enumerate(Engineers):\n    ax.text(i - width/2, v + 0.5, str(v), color='b')\n\nfor i, v in enumerate(Scientists):\n    ax.text(i + width/2, v + 0.5, str(v), color='g')\n\nfig.tight_layout()\nfig.savefig('Bar Chart/png/530.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest number of engineers?",
            "output": "Germany"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_86",
        "img": "./bar_chart_num/png/bar_num_86.png",
        "topic": "Science and Engineering",
        "title": " Science and Engineering investments in four countries in 2021",
        "csv": "Country \\t Technology Research(million) \\t Engineering Projects(million) \\n USA \\t 120 \\t 150 \\n UK \\t 130 \\t 140 \\n Canada \\t 110 \\t 160 \\n Germany \\t 100 \\t 170 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart represents the investment in science and technology research alongside engineering projects, measured in millions, across four countries in 2021. The USA invested 120 million in technology research and 150 million in engineering projects. The UK allocated 130 million for technology research and 140 million for engineering projects. Canada spent 110 million on technology research and 160 million on engineering projects, while Germany put forth 100 million in technology research and topped engineering project investment with 170 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data to plot\nCountry=['USA','UK','Canada','Germany']\nTechnology_Research=[120,130,110,100]\nEngineering_Projects=[150,140,160,170]\n\n# Setting up the figure\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\n\n# Set the xticks\nplt.xticks(np.arange(len(Country)), Country, rotation=0)\n\n# Plot the data\nax.bar(Country, Technology_Research, label='Technology Research', bottom=Engineering_Projects)\nax.bar(Country, Engineering_Projects, label='Engineering Projects')\n\n# Add labels to the data points\nfor i in range(len(Country)):\n    ax.text(x=i-0.2, y=Technology_Research[i]+Engineering_Projects[i]+10, s=Technology_Research[i]+Engineering_Projects[i], size=10, color='black', horizontalalignment='center')\n\n# Add legend\nax.legend(loc='upper left')\n\n# Add title\nplt.title('Science and Engineering investments in four countries in 2021')\n\n# Adjust the figure size\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Bar Chart/png/238.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much has the UK invested in Technology Research in millions?",
            "output": "130"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_285",
        "img": "./bar_chart_num/png/bar_num_285.png",
        "topic": "Agriculture and Food Production",
        "title": " Comparison of Organic and Conventional Farming acreage in four countries in 2021",
        "csv": "Country \\t Organic Farming (acre) \\t Conventional Farming (acre) \\n USA \\t 10 \\t 20 \\n UK \\t 15 \\t 30 \\n Germany \\t 12 \\t 25 \\n France \\t 17 \\t 27 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bar chart illustrates the acreage dedicated to organic and conventional farming in four different countries for the year 2021. The USA has 10 acres of organic farming and 20 acres of conventional farming. The UK's figures are 15 acres for organic and 30 acres for conventional farming. Germany has 12 acres of organic farming versus 25 acres of conventional, and France allocates 17 acres to organic farming as opposed to 27 acres for conventional."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nCountry = ['USA', 'UK', 'Germany', 'France']\nOrganic_Farming = np.array([10, 15, 12, 17])\nConventional_Farming = np.array([20, 30, 25, 27])\n\nx = np.arange(len(Country))\nfig, ax = plt.subplots(figsize=(8, 4))\nax.bar(x, Organic_Farming, width=0.4, label='Organic Farming', bottom=Conventional_Farming)\nax.bar(x, Conventional_Farming, width=0.4, label='Conventional Farming')\n\nfor i in range(len(Country)):\n    ax.annotate(Organic_Farming[i], xy=(i - 0.2, Conventional_Farming[i] + Organic_Farming[i]/2), ha='center', va='center', fontsize=8, rotation=90)\n    ax.annotate(Conventional_Farming[i], xy=(i + 0.2, Conventional_Farming[i]/2), ha='center', va='center', fontsize=8, rotation=90)\n\nplt.xticks(x, Country)\nplt.title('Comparison of Organic and Conventional Farming acreage in four countries in 2021')\nplt.legend()\nplt.tight_layout()\nplt.savefig('Bar Chart/png/348.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more acres are used for conventional farming than organic farming in France?",
            "output": "10"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_332",
        "img": "./bar_chart_num/png/bar_num_332.png",
        "topic": "Tourism and Hospitality",
        "title": " Number of Hotels, Restaurants and Tourist Attractions in four countries in 2021",
        "csv": "Country \\t Hotels \\t Restaurants \\t Tourist Attractions \\n USA \\t 100 \\t 150 \\t 50 \\n UK \\t 120 \\t 170 \\t 60 \\n Germany \\t 110 \\t 160 \\t 70 \\n France \\t 90 \\t 130 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of Hotels, Restaurants, and Tourist Attractions in four countries in 2021\" illustrates data for the USA, UK, Germany, and France. For hotels, the USA has 100, the UK 120, Germany 110, and France 90. In terms of restaurants, the numbers are 150 for the USA, 170 for the UK, 160 for Germany, and 130 for France. Tourist attractions figures show the USA with 50, the UK with 60, Germany with 70, and France leading with 80."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# set figure size\nplt.figure(figsize=(8,6))\n\n# data\nlabels = ['USA', 'UK', 'Germany', 'France']\nHotels = [100, 120, 110, 90]\nRestaurants = [150, 170, 160, 130]\nTourist_Attractions = [50, 60, 70, 80]\n\n# plot bar chart\nx = np.arange(len(labels))  # the label locations\nwidth = 0.2  # the width of the bars\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width, Hotels, width, label='Hotels')\nrects2 = ax.bar(x, Restaurants, width, label='Restaurants')\nrects3 = ax.bar(x + width, Tourist_Attractions, width, label='Tourist Attractions')\n\n# add title and x,y label\nax.set_ylabel('Number')\nax.set_title('Number of Hotels, Restaurants and Tourist Attractions in four countries in 2021')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend(loc='upper left')\n\n# add value label\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\nautolabel(rects3)\n\n# adjust the figure\nplt.tight_layout()\n\n# save the figure\nplt.savefig('Bar Chart/png/208.png')\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the lowest number of tourist attractions?",
            "output": "USA"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_297",
        "img": "./bar_chart_num/png/bar_num_297.png",
        "topic": "Agriculture and Food Production",
        "title": " Number of crops and livestock in four countries in 2021",
        "csv": "Country \\t Crops \\t Livestock \\n USA \\t 1000 \\t 20000 \\n UK \\t 900 \\t 19000 \\n Germany \\t 800 \\t 18000 \\n France \\t 700 \\t 17000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Number of crops and livestock in four countries in 2021\" compares agriculture metrics. In the USA, there are 1000 crop units and 20,000 livestock units. The UK has 900 crop units alongside 19,000 livestock units. Germany shows 800 crop units and 18,000 livestock units. Last, France presents 700 crop units with 17,000 livestock units."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nfig = plt.figure(figsize=(10, 6))\ngs = gridspec.GridSpec(1, 1)\nax = fig.add_subplot(gs[0, 0])\nax.bar(Country, Crops, width=0.4, label=\"Crops\", color='#f7a072', bottom=Livestock)\nax.bar(Country, Livestock, width=0.4, label=\"Livestock\", color='#3bb4c1')\nax.set_xticks(Country)\nax.set_xticklabels(Country, fontsize=10, rotation=45)\nax.set_title(\"Number of crops and livestock in four countries in 2021\")\nax.set_ylabel(\"Number of crops and livestock\")\nax.set_xlabel(\"Country\")\nax.legend(loc='upper left')\nfor i, v in enumerate(Crops+Livestock):\n    ax.text(i-0.2, v+1000, str(v), color='#000000', fontweight='bold')\nplt.tight_layout()\nplt.savefig('Bar Chart/png/227.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many crops does France have?",
            "output": "700"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_426",
        "img": "./bar_chart_num/png/bar_num_426.png",
        "topic": "Agriculture and Food Production",
        "title": " Crop and livestock production in four regions in 2021",
        "csv": "Region \\t Crops \\t Livestock(million) \\n East \\t 250 \\t 100 \\n West \\t 200 \\t 120 \\n North \\t 350 \\t 130 \\n South \\t 300 \\t 150 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart titled \"Crop and Livestock Production in Four Regions in 2021\" illustrates the quantity of crops and livestock numbers, measured in millions, across four regions. The Eastern region produced 250 units of crops and had 100 million livestock, while the Western region had 200 units of crops and 120 million livestock. The Northern region showed the highest crop production at 350 units with 130 million livestock, and the Southern region produced 300 units of crops and had the largest livestock count at 150 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nax.bar(['East','West','North','South'],[250,200,350,300], width=0.3,label='Crops', bottom=0)\nax.bar(['East','West','North','South'],[100,120,130,150], width=0.3,label='Livestock', bottom=[250,200,350,300])\nplt.xticks(['East','West','North','South'])\nplt.title('Crop and livestock production in four regions in 2021')\nplt.legend(loc='upper left')\nfor i, v in enumerate(['250/100','200/120','350/130','300/150']):\n    ax.text(i-0.15, int(v.split('/')[0])+int(v.split('/')[1])/2, v, fontsize=12, fontweight='bold', rotation=90)\nfig.tight_layout()\nplt.savefig('bar_426.png', dpi=400)\nplt.clf()"
        },
        "QA": {
            "input": "Which region has the highest crop production?",
            "output": "North"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_65",
        "img": "./bar_chart_num/png/bar_num_65.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Charitable Donations and Number of Nonprofit Organizations in four countries in 2021",
        "csv": "Country \\t Charitable Donations (million) \\t Nonprofit Organizations \\n USA \\t 2400 \\t 4500 \\n UK \\t 1800 \\t 4000 \\n Germany \\t 2100 \\t 4700 \\n France \\t 2300 \\t 4200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart illustrates charitable donations in millions alongside the number of nonprofit organizations for four countries in 2021. The USA shows 2400 million in donations with 4500 nonprofits. The UK contributed 1800 million and has 4000 nonprofits. Germany donated 2100 million and hosts 4700 nonprofit entities. France's figures stand at 2300 million in donations with 4200 nonprofits."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = {'Country':['USA','UK','Germany','France'],\n        'Charitable Donations (million)':[2400,1800,2100,2300],\n        'Nonprofit Organizations':[4500,4000,4700,4200]}\n\nCountry = data['Country']\nCharitable_Donations = data['Charitable Donations (million)']\nNonprofit_Organizations = data['Nonprofit Organizations']\n\nx = np.arange(len(Country))\n\nfig = plt.figure(figsize=(7,5))\nax = fig.add_subplot(111)\nax.bar(x-0.2, Charitable_Donations, color='b', width=0.4, label='Charitable Donations (million)')\nax.bar(x+0.2, Nonprofit_Organizations, color='c', width=0.4, label='Nonprofit Organizations')\n\nax.set_xticks(x)\nax.set_xticklabels(Country)\nax.legend(loc='best')\nax.set_title('Charitable Donations and Number of Nonprofit Organizations in four countries in 2021')\n\nfor i in range(len(Country)):\n    ax.annotate('%d' %Charitable_Donations[i], xy=(x[i]-0.2,Charitable_Donations[i]+200))\n    ax.annotate('%d' %Nonprofit_Organizations[i], xy=(x[i]+0.2,Nonprofit_Organizations[i]+200))\n\nplt.tight_layout()\nplt.savefig('Bar Chart/png/38.png')\nplt.show()\nplt.clf()"
        },
        "QA": {
            "input": "How many nonprofit organizations are there in Germany?",
            "output": "4700"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_163",
        "img": "./bar_chart_num/png/bar_num_163.png",
        "topic": "Retail and E-commerce",
        "title": " Comparison of online and store sales from January to April 2021",
        "csv": "Month \\t Online Sales(million) \\t Store Sales(million) \\n January \\t 3000 \\t 2000 \\n February \\t 3500 \\t 2200 \\n March \\t 3700 \\t 2500 \\n April \\t 4000 \\t 2700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents a comparison of online and store sales, measured in millions, from January to April 2021. In January, online sales were 3000 million compared to 2000 million in store sales. February saw an increase to 3500 million in online sales and 2200 million in store sales. March continued the trend with online sales at 3700 million and store sales at 2500 million. April marked the highest with online sales reaching 4000 million and store sales at 2700 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\n\nfig = plt.figure()\nax = fig.add_subplot()\n\nmonth = ['January', 'February', 'March', 'April']\nonline = [3000, 3500, 3700, 4000]\nstore = [2000, 2200, 2500, 2700]\n\npos = [i for i, _ in enumerate(month)]\nax.bar(pos, online, color='green', width=0.8, label='Online Sales')\nax.bar(pos, store, color='blue', width=0.8, label='Store Sales', bottom=online)\n\nax.set_xticks(pos)\nax.set_xticklabels(month)\nax.set_ylabel('Million')\nax.set_title('Comparison of online and store sales from January to April 2021')\nax.legend(loc='upper center')\nax.annotate('3000', xy=(0,3000))\nax.annotate('2000', xy=(0,2000))\nax.annotate('3500', xy=(1,3500))\nax.annotate('2200', xy=(1,2200))\nax.annotate('3700', xy=(2,3700))\nax.annotate('2500', xy=(2,2500))\nax.annotate('4000', xy=(3,4000))\nax.annotate('2700', xy=(3,2700))\n\nplt.tight_layout()\nfig.set_size_inches(8, 6)\nplt.savefig('Bar Chart/png/66.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much higher were the online sales compared to store sales in April?",
            "output": "1300 million"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_257",
        "img": "./bar_chart_num/png/bar_num_257.png",
        "topic": "Human Resources and Employee Management",
        "title": " Percentage of staff in three categories from January to April 2021",
        "csv": "Month \\t Full-time Staff(%) \\t Part-time Staff(%) \\t Contract Staff(%) \\n January \\t 50 \\t 25 \\t 25 \\n February \\t 50 \\t 30 \\t 20 \\n March \\t 50 \\t 35 \\t 15 \\n April \\t 55 \\t 30 \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the staff composition in three categories\u2014Full-time, Part-time, and Contract\u2014across four months from January to April 2021. In January, the distribution is 50% full-time, 25% part-time, and 25% contract staff. February shows a slight increase in part-time staff to 30% while contract staff decreases to 20%. In March, part-time staff constitute 35%, with a further decrease in contract staff to 15%. April has an increase in full-time staff to 55%, part-time staff remains at 30%, and contract staff at 15%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the width of the bars\nbarWidth = 0.25\n\n# Set the data\nmonth = [\"January\", \"February\", \"March\", \"April\"]\nfulltime = [50, 50, 50, 55]\nparttime = [25, 30, 35, 30]\ncontract = [25, 20, 15, 15]\n\n# Set the position of the bars\nr1 = np.arange(len(fulltime))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\n\n# Make the plot\nplt.figure(figsize=(10,6))\nplt.bar(r1, fulltime, width=barWidth, label=\"Full-time Staff(%)\", edgecolor='white')\nplt.bar(r2, parttime, width=barWidth, label=\"Part-time Staff(%)\", edgecolor='white')\nplt.bar(r3, contract, width=barWidth, label=\"Contract Staff(%)\", edgecolor='white')\n\n# Add xticks on the middle of the group bars\nplt.xlabel(\"Month\", fontweight='bold')\nplt.xticks([r + barWidth for r in range(len(fulltime))], month)\n\n# Add text labels at the top of the bars\nfor i in range(len(fulltime)):\n    plt.text(x = r1[i]-0.08 , y = fulltime[i]+0.5, s = fulltime[i], size = 10)\n    plt.text(x = r2[i]-0.08 , y = parttime[i]+0.5, s = parttime[i], size = 10)\n    plt.text(x = r3[i]-0.08 , y = contract[i]+0.5, s = contract[i], size = 10)\n\n# Add legend\nplt.legend(loc='upper left', bbox_to_anchor=(1,1), ncol=1)\n\n# Add title\nplt.title(\"Percentage of staff in three categories from January to April 2021\")\n\n# Adjust the figure\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Bar Chart/png/586.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "In which month is the percentage of part-time staff the highest?",
            "output": "March"
        }
    },
    {
        "chart_type": "bar_chart_num",
        "imgname": "bar_num_386",
        "img": "./bar_chart_num/png/bar_num_386.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Number of charity organizations and donations in four states in 2021",
        "csv": "State \\t Charity Organizations \\t Donations(million) \\n Texas \\t 50 \\t 750 \\n California \\t 60 \\t 850 \\n New York \\t 70 \\t 800 \\n Florida \\t 80 \\t 950 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bar chart represents the number of charity organizations and the amount of donations they received in millions of dollars for four states in 2021. Texas is shown to have 50 charity organizations with donations totaling 750 million dollars. California has 60 organizations with donations amounting to 850 million. New York features 70 charities with 800 million in donations, while Florida leads with 80 organizations receiving the highest donations totaling 950 million dollars."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data\nState = [\"Texas\", \"California\", \"New York\", \"Florida\"]\nCharity_Organizations = [50, 60, 70, 80]\nDonations = [750, 850, 800, 950]\n\n# Set figure size\nfig = plt.figure(figsize=(8, 6))\n\n# Set up a subplot with 1 row and 1 column\nax = fig.add_subplot(1, 1, 1)\n\n# Set the width of each bar\nwidth = 0.4\n\n# Create a bar chart with Charity Organizations in the window\norg_bar = ax.bar(State, Charity_Organizations, width, color=\"green\")\n\n# Create a bar chart with Donations in the window\ndon_bar = ax.bar(State, Donations, width, color=\"blue\", bottom=Charity_Organizations)\n\n# Set the title of the figure\nplt.title(\"Number of charity organizations and donations in four states in 2021\")\n\n# Label the x-axis\nax.set_xlabel(\"State\")\n\n# Label the y-axis\nax.set_ylabel(\"Number\")\n\n# Set grid\nax.grid(True, axis='y', ls='--', lw=0.5, alpha=0.5)\n\n# Set the legend\nax.legend((org_bar, don_bar), (\"Charity Organizations\", \"Donations (million)\"))\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(len(State)) + width/2)\nax.set_xticklabels(State)\n\n# Set annotation\nfor org_bar, don_bar in zip(org_bar, don_bar):\n    ax.annotate(\"{0}\\n{1}\".format(org_bar.get_height(), don_bar.get_height()), xy=(org_bar.get_x() + org_bar.get_width() / 2, org_bar.get_height() + don_bar.get_height() / 2), xytext=(0, 3), textcoords=\"offset points\", ha='center', va='bottom')\n\n# Adjust figure size\nplt.tight_layout()\n\n# Save figure\nplt.savefig('Bar Chart/png/615.png')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much in donations did New York receive in millions?",
            "output": "800"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_298",
        "img": "./line_chart_num/png/line_num_298.png",
        "topic": "Retail and E-commerce",
        "title": " Comparison of Online and Retail Sales from January to June 2021",
        "csv": "Month \\t Online Sales(billion dollars) \\t Retail Sales(billion dollars) \\t Total Sales(billion dollars) \\n Jan \\t 500 \\t 800 \\t 1300 \\n Feb \\t 550 \\t 850 \\t 1400 \\n Mar \\t 600 \\t 900 \\t 1500 \\n Apr \\t 650 \\t 950 \\t 1600 \\n May \\t 700 \\t 1000 \\t 1700 \\n Jun \\t 750 \\t 1050 \\t 1800 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the comparison of online and retail sales over a six-month period from January to June 2021. In January, online sales were at 500 billion dollars, and retail sales at 800 billion, totaling 1300 billion dollars in sales. The chart shows a steady monthly increase in both online and retail sales, with online sales reaching 750 billion dollars and retail hitting 1050 billion dollars in June. Total sales rose from 1300 billion in January to 1800 billion dollars by June."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']\nonline_sales = [500, 550, 600, 650, 700, 750]\nretail_sales = [800, 850, 900, 950, 1000, 1050]\ntotal_sales = [1300, 1400, 1500, 1600, 1700, 1800]\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(111)\nax.plot(months, online_sales, label=\"Online Sales (billion dollars)\")\nax.plot(months, retail_sales, label=\"Retail Sales (billion dollars)\")\nax.plot(months, total_sales, label=\"Total Sales (billion dollars)\")\n\nax.set_title(\"Comparison of Online and Retail Sales from January to June 2021\")\n\nax.set_xticks(np.arange(len(months)))\nax.set_xticklabels(months)\n\nax.legend(loc='best')\n\nfor i, j in enumerate(online_sales):\n    ax.annotate(str(j), xy=(i, j+10))\nfor i, j in enumerate(retail_sales):\n    ax.annotate(str(j), xy=(i, j+10))\nfor i, j in enumerate(total_sales):\n    ax.annotate(str(j), xy=(i, j+10))\n\nfig.tight_layout()\nplt.savefig('line chart/png/186.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the total sales in June?",
            "output": "1800 billion dollars"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_274",
        "img": "./line_chart_num/png/line_num_274.png",
        "topic": "Social Media and the Web",
        "title": " Increase in social media users in the United States on April 15th, 2021",
        "csv": "Time \\t Number of Users \\n 00:00 \\t 1000000 \\n 01:00 \\t 1200000 \\n 02:00 \\t 1400000 \\n 03:00 \\t 1300000 \\n 04:00 \\t 1100000 \\n 05:00 \\t 1200000 \\n 06:00 \\t 1300000 \\n 07:00 \\t 1500000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the increase in social media users in the United States at different hours on April 15th, 2021. Starting at midnight, 1,000,000 users are logged in, which increases to 1,200,000 by 01:00. The number peaks at 1,500,000 by 07:00 after a gradual rise, with a slight decrease at 03:00 to 1,300,000 and a dip at 04:00 to 1,100,000 users. The trend shows fluctuating user activity during the early morning hours."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure before plotting, i.e., add_subplot() follows plt.figure()\nfig, ax = plt.subplots()\n\n# Plot the data with the type of line chart\ntime = [\"00:00\", \"01:00\", \"02:00\", \"03:00\", \"04:00\", \"05:00\", \"06:00\", \"07:00\"]\nuser = [1000000, 1200000, 1400000, 1300000, 1100000, 1200000, 1300000, 1500000]\nax.plot(time, user, color=\"blue\", linestyle=\"-\", marker=\"o\", label=\"Users\")\n\n# Using 'annotate' command to label the value of each data point directly on the figure\nfor i in range(len(time)):\n     ax.annotate(user[i], xy=(time[i], user[i]), xytext=(0,10), textcoords=\"offset points\")\n\n# Drawing techniques such as background grids can be used\nax.grid(color='black', linestyle='--', linewidth=0.3)\n\n# The positioning of the legend should not interfere with the chart and title\nax.legend(loc='upper left', frameon=False)\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# You must use xticks to prevent interpolation\nplt.xticks(time)\n\n# The title of the figure should be  Increase in social media users in the United States on April 15th, 2021\nplt.title(\"Increase in social media users in the United States on April 15th, 2021\")\n\n# The image must be saved as line chart/png/512.png\nplt.savefig(\"line chart/png/512.png\")\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "How many more users were there at 07:00 compared to 00:00?",
            "output": "500000"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_447",
        "img": "./line_chart_num/png/line_num_447.png",
        "topic": "Sports and Entertainment",
        "title": " Attendance and Income of Major Sports Events in 2021",
        "csv": "Month \\t Attendance(thousands) \\t Income(million dollars) \\n January \\t 750 \\t 20 \\n February \\t 800 \\t 25 \\n March \\t 900 \\t 30 \\n April \\t 1000 \\t 35 \\n May \\t 850 \\t 40 \\n June \\t 900 \\t 45 \\n July \\t 950 \\t 50 \\n August \\t 800 \\t 60 \\n September \\t 750 \\t 70 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates monthly attendance in thousands and income in million dollars for major sports events during 2021. Starting in January with 750 thousand attendees and an income of 20 million dollars, attendance rises to a peak of 1000 thousand in April before slightly decreasing and fluctuating, reaching 750 thousand in September. Simultaneously, income grows from that initial 20 million dollars, overcoming attendance growth, with a steady increase to 70 million dollars by September."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(20, 10))\n\nx = ['January', 'February', 'March', 'April','May', 'June', 'July', 'August', 'September'] \nattendance = [750, 800, 900, 1000, 850, 900, 950, 800, 750] \nincome = [20, 25, 30, 35, 40, 45, 50, 60, 70]\n\nax.plot(x, attendance, color='b', marker='o', linestyle='--', label='Attendance') \nax.plot(x, income, color='r', marker='o', linestyle='--', label='Income') \n  \nfor x_, y_ in zip(x, attendance): \n    label = \"{:.0f}\".format(y_)\n    ax.annotate(label, (x_, y_), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\nfor x_, y_ in zip(x, income): \n    label = \"{:.0f}\".format(y_)\n    ax.annotate(label, (x_, y_), textcoords=\"offset points\", xytext=(0,10), ha='center')\n    \nax.set_title('Attendance and Income of Major Sports Events in 2021') \nax.set_xlabel('Month') \nax.set_ylabel('Attendance/Income') \nax.legend(loc='lower right')\nax.set_xticks(x)\nplt.tight_layout() \nplt.savefig('line chart/png/373.png') \nplt.clf()"
        },
        "QA": {
            "input": "How much income was generated in March?",
            "output": "$30 million"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_475",
        "img": "./line_chart_num/png/line_num_475.png",
        "topic": "Law and Legal Affairs",
        "title": " US Court Cases from 2015 to 2020",
        "csv": "Year \\t Criminal Cases \\t Civil Cases \\t Family Cases \\n 2015 \\t 1000 \\t 2000 \\t 700 \\n 2016 \\t 1200 \\t 1700 \\t 750 \\n 2017 \\t 900 \\t 1900 \\t 800 \\n 2018 \\t 1100 \\t 1500 \\t 850 \\n 2019 \\t 950 \\t 1800 \\t 900 \\n 2020 \\t 1100 \\t 1600 \\t 950 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the count of different types of court cases in the US from 2015 to 2020. It presents data on criminal, civil, and family cases. In 2015, there were 1000 criminal, 2000 civil, and 700 family cases. Criminal cases rose in 2016 to 1200, then dropped to 900 in 2017 and fluctuated in subsequent years. Civil cases show a decreasing trend from 2000 cases in 2015 to 1600 in 2020. Family cases have been steadily increasing each year, starting at 700 cases in 2015 and reaching 950 cases by 2020."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10, 6))\nx=np.array([2015,2016,2017,2018,2019,2020])\ny1=np.array([1000,1200,900,1100,950,1100])\ny2=np.array([2000,1700,1900,1500,1800,1600])\ny3=np.array([700,750,800,850,900,950])\n\nplt.plot(x,y1,label='Criminal Cases')\nplt.plot(x,y2,label='Civil Cases')\nplt.plot(x,y3,label='Family Cases')\nplt.xticks(x,rotation=45)\nplt.title('US Court Cases from 2015 to 2020')\nplt.xlabel('Years')\nplt.ylabel('Cases')\nplt.legend()\n\nfor a,b in zip(x,y1):\n    plt.text(a,b+5,b,ha='center',va='bottom',fontsize=11)\nfor a,b in zip(x,y2):\n    plt.text(a,b+5,b,ha='center',va='bottom',fontsize=11)\nfor a,b in zip(x,y3):\n    plt.text(a,b+5,b,ha='center',va='bottom',fontsize=11)\n\nplt.tight_layout()\nplt.savefig('line chart/png/400.png')\nplt.cla()"
        },
        "QA": {
            "input": "How many family cases were there in total from 2015 to 2017?",
            "output": "2250"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_223",
        "img": "./line_chart_num/png/line_num_223.png",
        "topic": "Government and Public Policy",
        "title": " Changes in Tax Rate and Government Expenditures in the USA from 2019 to 2022",
        "csv": "Year \\t Tax Rate \\t Expenditure(billion dollars) \\t Savings(billion dollars) \\n 2019 \\t 25% \\t 2000 \\t 500 \\n 2020 \\t 27% \\t 2200 \\t 600 \\n 2021 \\t 30% \\t 2500 \\t 700 \\n 2022 \\t 32% \\t 2700 \\t 800 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates changes in tax rate and government financial metrics in the USA from 2019 to 2022. It shows the tax rate, government expenditure in billions of dollars, and savings in billions of dollars for each year. In 2019, the tax rate was 25%, with expenditures of 2000 billion dollars and savings of 500 billion dollars. By 2022, the tax rate had increased to 32%, government expenditures rose to 2700 billion dollars, and savings reached 800 billion dollars. Each year marks an increase across all three categories."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [[2019,25,2000,500],[2020,27,2200,600],[2021,30,2500,700],[2022,32,2700,800]]\n\nx = np.array([data[0][0],data[1][0],data[2][0],data[3][0]])\ny1 = np.array([data[0][1],data[1][1],data[2][1],data[3][1]])\ny2 = np.array([data[0][2],data[1][2],data[2][2],data[3][2]])\ny3 = np.array([data[0][3],data[1][3],data[2][3],data[3][3]])\n\nfig = plt.figure(figsize=(14, 10))\nax = fig.add_subplot(111)\nax.plot(x, y1, color='#FF9900', linestyle='-.', label='Tax Rate(%)', linewidth=3)\nax.plot(x, y2, color='#6699CC', linestyle='-', label='Expenditure(billion dollars)', linewidth=3)\nax.plot(x, y3, color='#CC0033', linestyle=':', label='Savings(billion dollars)', linewidth=3)\n\nax.set_title('Changes in Tax Rate and Government Expenditures in the USA from 2019 to 2022', fontsize=20)\nax.set_xlabel('Year', fontsize=15)\nax.set_xlim(2019, 2022)\nax.set_xticks(x)\nax.set_ylabel('Values', fontsize=15)\nax.set_ylim(0, 3000)\n\nax.grid(axis='y', linestyle='--', linewidth=1, alpha=0.5)\n\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=3)\n\nfor i in range(len(x)):\n    ax.annotate(str(data[i][1])+'%', xy=(x[i], y1[i]), xytext=(x[i], y1[i] + 100), fontsize=13, rotation=30, wrap=True)\n    ax.annotate(str(data[i][2]), xy=(x[i], y2[i]), xytext=(x[i], y2[i] + 100), fontsize=13, rotation=30, wrap=True)\n    ax.annotate(str(data[i][3]), xy=(x[i], y3[i]), xytext=(x[i], y3[i] - 100), fontsize=13, rotation=30, wrap=True)\n\nplt.tight_layout()\n\nplt.savefig('line chart/png/108.png', dpi=300)\n\nplt.clf()"
        },
        "QA": {
            "input": "By how much did government expenditure increase from 2019 to 2022?",
            "output": "$700 billion"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_150",
        "img": "./line_chart_num/png/line_num_150.png",
        "topic": "Technology and the Internet",
        "title": " Global Technology Device Sales from 2011 to 2015",
        "csv": "Year \\t Smartphone sales(million units) \\t Tablet sales(million units) \\t Computer sales(million units) \\n 2011 \\t 100 \\t 20 \\t 150 \\n 2012 \\t 140 \\t 50 \\t 110 \\n 2013 \\t 120 \\t 60 \\t 120 \\n 2014 \\t 160 \\t 70 \\t 90 \\n 2015 \\t 200 \\t 90 \\t 70 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart reflects global sales of technology devices, including smartphones, tablets, and computers, from 2011 to 2015. In 2011, smartphone sales were at 100 million units, tablet sales at 20 million units, and computer sales at 150 million units. By 2015, smartphone sales increased to 200 million units, tablet sales rose to 90 million units, while computer sales declined to 70 million units. Sales trends for each device category are plotted over the five-year period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nYear = [2011, 2012, 2013, 2014, 2015]\nSmartphone_sales = [100, 140, 120, 160, 200]\nTablet_sales = [20, 50, 60, 70, 90]\nComputer_sales = [150, 110, 120, 90, 70]\n\n# Create figure\nfig = plt.figure(figsize=(15, 8))\nax = fig.add_subplot()\n\n# Plot graph\nplt.plot(Year, Smartphone_sales, label=\"Smartphone sales\")\nplt.plot(Year, Tablet_sales, label=\"Tablet sales\")\nplt.plot(Year, Computer_sales, label=\"Computer sales\")\n\n# Set x-axis\nplt.xticks(Year, Year, rotation=45)\n\n# Labeling the points\nfor i, txt in enumerate(Smartphone_sales):\n    ax.annotate(txt, (Year[i], Smartphone_sales[i]))\nfor i, txt in enumerate(Tablet_sales):\n    ax.annotate(txt, (Year[i], Tablet_sales[i]))\nfor i, txt in enumerate(Computer_sales):\n    ax.annotate(txt, (Year[i], Computer_sales[i]))\n\n# Set legend\nplt.legend(loc='upper right')\n\n# Set title\nplt.title(\"Global Technology Device Sales from 2011 to 2015\")\n\n# Resize the image by tight_layout()\nplt.tight_layout()\n\n# Save figure\nplt.savefig(\"line chart/png/483.png\")\n\n# Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "How many Smartphone units were sold in 2013?",
            "output": "120 million units"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_211",
        "img": "./line_chart_num/png/line_num_211.png",
        "topic": "Arts and Culture",
        "title": " Growth of Art Institutions and Artworks in the US from 2001 to 2004",
        "csv": "Year \\t Number of Museums \\t Number of Art Galleries \\t Number of Paintings \\t Number of Sculptures \\n 2001 \\t 50 \\t 60 \\t 4000 \\t 400 \\n 2002 \\t 51 \\t 62 \\t 4500 \\t 420 \\n 2003 \\t 53 \\t 64 \\t 4700 \\t 440 \\n 2004 \\t 55 \\t 66 \\t 4800 \\t 460 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the growth of art institutions and artworks in the US from 2001 to 2004. Each year shows an increase in the number of museums, art galleries, paintings, and sculptures. In 2001, there were 50 museums, 60 art galleries, 4000 paintings, and 400 sculptures. By 2004, the numbers had grown to 55 museums, 66 art galleries, 4800 paintings, and 460 sculptures, indicating a positive trend across all categories within the art sector during these years."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10, 7))\n\n# create subplot\nax = plt.subplot()\n\n# set x,y axis\nx = [2001, 2002, 2003, 2004]\ny1 = [50, 51, 53, 55]\ny2 = [60, 62, 64, 66]\ny3 = [4000, 4500, 4700, 4800]\ny4 = [400, 420, 440, 460]\n\n# set x and y axis label\nax.set_xlabel('Year', fontsize=14)\nax.set_ylabel('Number', fontsize=14)\n\n# set title\nax.set_title('Growth of Art Institutions and Artworks in the US from 2001 to 2004', fontsize=14)\n\n# plot line chart\nax.plot(x, y1, marker='o', linestyle=\"--\", color='r', label='Museums')\nax.plot(x, y2, marker='o', linestyle=\"--\", color='b', label='Galleries')\nax.plot(x, y3, marker='o', linestyle=\"--\", color='g', label='Paintings')\nax.plot(x, y4, marker='o', linestyle=\"--\", color='y', label='Sculptures')\n\n# set xticks to prevent interpolation\nax.set_xticks(x)\n\n# set legend\nax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n\n# add annotations\nax.annotate('50', xy=(2001, 50))\nax.annotate('51', xy=(2002, 51))\nax.annotate('53', xy=(2003, 53))\nax.annotate('55', xy=(2004, 55))\nax.annotate('60', xy=(2001, 60))\nax.annotate('62', xy=(2002, 62))\nax.annotate('64', xy=(2003, 64))\nax.annotate('66', xy=(2004, 66))\nax.annotate('4000', xy=(2001, 4000))\nax.annotate('4500', xy=(2002, 4500))\nax.annotate('4700', xy=(2003, 4700))\nax.annotate('4800', xy=(2004, 4800))\nax.annotate('400', xy=(2001, 400))\nax.annotate('420', xy=(2002, 420))\nax.annotate('440', xy=(2003, 440))\nax.annotate('460', xy=(2004, 460))\n\n# draw grid\nax.grid(True, linestyle='dotted')\n\n# resize the image\nplt.tight_layout()\n\n# save image\nplt.savefig('line chart/png/335.png')\n\n# clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more sculptures were there in 2004 than in 2001?",
            "output": "60"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_378",
        "img": "./line_chart_num/png/line_num_378.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare utilization in the United States from 2020 to 2024",
        "csv": "Year \\t Hospitalizations \\t Emergency Room Visits \\t Primary Care Visits \\n 2020 \\t 1000 \\t 20000 \\t 50000 \\n 2021 \\t 1100 \\t 19000 \\t 51000 \\n 2022 \\t 1200 \\t 18000 \\t 52000 \\n 2023 \\t 1300 \\t 17000 \\t 53000 \\n 2024 \\t 1400 \\t 16000 \\t 54000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the trend of healthcare utilization in the United States over a five-year period from 2020 to 2024. It tracks the number of hospitalizations, emergency room visits, and primary care visits. In 2020, there were 1000 hospitalizations, 20,000 emergency room visits, and 50,000 primary care visits. By 2024, hospitalizations are shown to increase to 1400, emergency room visits decrease to 16,000, and primary care visits rise to 54,000. Each year, hospitalizations and primary care visits incrementally rise, while emergency room visits consistently decrease."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx=np.array([2020,2021,2022,2023,2024])\ny1=np.array([1000,1100,1200,1300,1400])\ny2=np.array([20000,19000,18000,17000,16000])\ny3=np.array([50000,51000,52000,53000,54000])\n\nfig=plt.figure(figsize=(8,6))\nax1=fig.add_subplot(111)\nax1.plot(x,y1,label='Hospitalizations')\nax1.plot(x,y2,label='Emergency Room Visits')\nax1.plot(x,y3,label='Primary Care Visits')\nax1.set_xlabel('Year')\nax1.xaxis.set_ticks(x)\nax1.set_ylabel('Utilization')\nax1.set_title('Healthcare utilization in the United States from 2020 to 2024')\nax1.legend(loc='best')\n\nfor a,b in zip(x,y1):\n    ax1.text(a,b+50,str(b))\nfor a,b in zip(x,y2):\n    ax1.text(a,b+50,str(b))\nfor a,b in zip(x,y3):\n    ax1.text(a,b+50,str(b),rotation=45,ha='center',va='bottom',wrap=True)\n\nplt.tight_layout()\nplt.savefig('line chart/png/54.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many hospitalizations are projected for the year 2024?",
            "output": "1400"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_234",
        "img": "./line_chart_num/png/line_num_234.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Donations for four charity organizations from 2010 to 2013",
        "csv": "Year \\t Donations A(million dollars) \\t Donations B(million dollars) \\t Donations C(million dollars) \\t Donations D \\n 2010 \\t 100 \\t 80 \\t 120 \\t 150 \\n 2011 \\t 120 \\t 90 \\t 110 \\t 160 \\n 2012 \\t 80 \\t 110 \\t 130 \\t 120 \\n 2013 \\t 150 \\t 120 \\t 140 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates yearly donations to four charity organizations, A, B, C, and D, over a period from 2010 to 2013, measured in million dollars. In 2010, donations to A were $100 million, B received $80 million, C got $120 million, and D had $150 million. The year 2011 shows A with $120 million, B with $90 million, C with $110 million, and D with $160 million. In 2012, donations decreased for A to $80 million and for D to $120 million, while B increased to $110 million and C to $130 million. By 2013, A's donations rose to $150 million, B's to $120 million, C's to $140 million, and D's decreased significantly to $80 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \n\ndata = [[2010,100,80,120,150],\n        [2011,120,90,110,160],\n        [2012,80,110,130,120],\n        [2013,150,120,140,80]]\n\nx = np.array(data)[:,0]\ny1 = np.array(data)[:,1]\ny2 = np.array(data)[:,2]\ny3 = np.array(data)[:,3]\ny4 = np.array(data)[:,4]\n\nfig = plt.figure(figsize=(20,10))\nax = fig.add_subplot(1,1,1)\nax.plot(x,y1,label='Donations A(million dollars)',marker='o',linestyle='--',color='r',markersize=10,linewidth=2)\nax.plot(x,y2,label='Donations B(million dollars)',marker='s',linestyle=':',color='b',markersize=10,linewidth=2)\nax.plot(x,y3,label='Donations C(million dollars)',marker='^',linestyle='-.',color='g',markersize=10,linewidth=2)\nax.plot(x,y4,label='Donations D(million dollars)',marker='d',linestyle='-',color='m',markersize=10,linewidth=2)\nplt.xticks(x)\nfor a,b in zip(x,y1):\n    ax.annotate('%.1f' % b,xy=(a,b),xytext=(a-0.2,b+1)) \nfor a,b in zip(x,y2):\n    ax.annotate('%.1f' % b,xy=(a,b),xytext=(a-0.2,b+1)) \nfor a,b in zip(x,y3):\n    ax.annotate('%.1f' % b,xy=(a,b),xytext=(a-0.2,b+1)) \nfor a,b in zip(x,y4):\n    ax.annotate('%.1f' % b,xy=(a,b),xytext=(a-0.2,b+1)) \nplt.title('Donations for four charity organizations from 2010 to 2013')\nplt.legend(loc='best')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig('line chart/png/271.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year did Donations C reach its highest value?",
            "output": "2013"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_309",
        "img": "./line_chart_num/png/line_num_309.png",
        "topic": "Manufacturing and Production",
        "title": " Production of four types of products in the past four years",
        "csv": "Year \\t Manufactured A(million units) \\t Manufactured B(million units) \\t Manufactured C(million units) \\t Manufactured D(million units) \\n 2001 \\t 100 \\t 80 \\t 120 \\t 150 \\n 2002 \\t 110 \\t 90 \\t 115 \\t 160 \\n 2003 \\t 90 \\t 110 \\t 130 \\t 120 \\n 2004 \\t 150 \\t 120 \\t 140 \\t 90 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the annual production numbers, in million units, for four different products - A, B, C, and D - over a four-year period from 2001 to 2004. In 2001, the production levels were 100 million for A, 80 million for B, 120 million for C, and 150 million for D. Each year, the production levels varied, with 2004 witnessing the highest production of A and B at 150 and 120 million units, respectively, while product D saw a decrease to 90 million units. Product C maintained an increasing trend until 2003 but saw a slight decline in 2004."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nfig = plt.figure(figsize=(12,9))\n\n# Data\nyear = [2001,2002,2003,2004]\nmanufactured_A = [100,110,90,150]\nmanufactured_B = [80,90,110,120]\nmanufactured_C = [120,115,130,140]\nmanufactured_D = [150,160,120,90]\n\n# Plot\nplt.plot(year, manufactured_A, label='Manufactured A (million units)', marker='o', color='blue', linewidth=3)\nplt.plot(year, manufactured_B, label='Manufactured B (million units)', marker='s', color='green', linewidth=3)\nplt.plot(year, manufactured_C, label='Manufactured C (million units)', marker='^', color='red', linewidth=3)\nplt.plot(year, manufactured_D, label='Manufactured D (million units)', marker='D', color='orange', linewidth=3)\n\n# Add legend\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.08), ncol=4, fontsize='large', fancybox=True, shadow=True)\n\n# Add title\nplt.title('Production of four types of products in the past four years', fontsize=20)\n\n# Set xticks\nplt.xticks(year)\n\n# Annotate\nfor i,j in zip(year, manufactured_A):\n    plt.annotate(str(j),xy=(i,j), xytext=(-20,10), textcoords='offset points', fontsize=12)\nfor i,j in zip(year, manufactured_B):\n    plt.annotate(str(j),xy=(i,j), xytext=(-20,10), textcoords='offset points', fontsize=12)\nfor i,j in zip(year, manufactured_C):\n    plt.annotate(str(j),xy=(i,j), xytext=(-20,10), textcoords='offset points', fontsize=12)\nfor i,j in zip(year, manufactured_D):\n    plt.annotate(str(j),xy=(i,j), xytext=(-20,10), textcoords='offset points', fontsize=12)\n\n# Save\nplt.tight_layout()\nplt.savefig('line chart/png/446.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much was the increase in the production of Manufactured A from 2001 to 2004?",
            "output": "50 million units"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_397",
        "img": "./line_chart_num/png/line_num_397.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Growth of Donations and Volunteers in Charity Organization from 2016 to 2020",
        "csv": "Year \\t Donations(million dollars) \\t Volunteers \\n 2016 \\t 300 \\t 5000 \\n 2017 \\t 450 \\t 6000 \\n 2018 \\t 500 \\t 7000 \\n 2019 \\t 600 \\t 8000 \\n 2020 \\t 700 \\t 9000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the growth of donations in million dollars and the number of volunteers in a charity organization from 2016 to 2020. In 2016, donations were at 300 million dollars with 5000 volunteers. Each year, both donations and volunteer numbers increased: 450 million dollars and 6000 volunteers in 2017, 500 million dollars and 7000 volunteers in 2018, 600 million dollars and 8000 volunteers in 2019, and by 2020, donations reached 700 million dollars with 9000 volunteers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(12,6))\nax=plt.subplot()\nax.set_title('Growth of Donations and Volunteers in Charity Organization from 2016 to 2020')\nax.set_xlabel('Year')\nax.set_ylabel('Amount')\nax.grid(True, color='gray', linestyle='--', linewidth=1, alpha=0.5)\nax.plot([2016,2017,2018,2019,2020], [300,450,500,600,700], color='red', linestyle='--', label='Donations')\nax.plot([2016,2017,2018,2019,2020], [5000,6000,7000,8000,9000], color='blue', linestyle='--', label='Volunteers')\nax.legend(loc='best')\nax.set_xticks([2016,2017,2018,2019,2020])\nax.annotate('300', xy=(2016, 300), xytext=(2016, 320), arrowprops=dict(facecolor='red'))\nax.annotate('450', xy=(2017, 450), xytext=(2017, 470), arrowprops=dict(facecolor='red'))\nax.annotate('500', xy=(2018, 500), xytext=(2018, 520), arrowprops=dict(facecolor='red'))\nax.annotate('600', xy=(2019, 600), xytext=(2019, 620), arrowprops=dict(facecolor='red'))\nax.annotate('700', xy=(2020, 700), xytext=(2020, 720), arrowprops=dict(facecolor='red'))\nax.annotate('5000', xy=(2016, 5000), xytext=(2016, 4800), arrowprops=dict(facecolor='blue'))\nax.annotate('6000', xy=(2017, 6000), xytext=(2017, 5800), arrowprops=dict(facecolor='blue'))\nax.annotate('7000', xy=(2018, 7000), xytext=(2018, 6800), arrowprops=dict(facecolor='blue'))\nax.annotate('8000', xy=(2019, 8000), xytext=(2019, 7800), arrowprops=dict(facecolor='blue'))\nax.annotate('9000', xy=(2020, 9000), xytext=(2020, 8800), arrowprops=dict(facecolor='blue'))\nplt.tight_layout()\nplt.savefig('line chart/png/294.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more volunteers were there in 2020 compared to 2016?",
            "output": "4000"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_16",
        "img": "./line_chart_num/png/line_num_16.png",
        "topic": "Science and Engineering",
        "title": " Renewable Energy Output in 2021",
        "csv": "Month \\t Solar Panel Output(kWh) \\t Wind Turbine Output(kWh) \\n January \\t 100 \\t 90 \\n February \\t 150 \\t 115 \\n March \\t 120 \\t 105 \\n April \\t 140 \\t 115 \\n May \\t 170 \\t 130 \\n June \\t 120 \\t 100 \\n July \\t 150 \\t 115 \\n August \\t 140 \\t 125 \\n September \\t 100 \\t 95 \\n October \\t 110 \\t 100 \\n November \\t 150 \\t 110 \\n December \\t 130 \\t 115 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the monthly renewable energy output from solar panels and wind turbines during 2021. Each month is represented by two lines indicating the respective outputs in kilowatt-hours (kWh). January starts with solar panels producing 100 kWh and wind turbines 90 kWh. Output from both sources fluctuates over the months, with solar panels peaking in May at 170 kWh and wind turbines reaching their highest in August with 125 kWh. The year ends with solar panels at 130 kWh and wind turbines at 115 kWh in December."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \n\nmonth = ['January','February','March','April','May','June','July','August','September','October','November','December']\nsolar_panel = [100,150,120,140,170,120,150,140,100,110,150,130]\nwind_turbine = [90,115,105,115,130,100,115,125,95,100,110,115]\n\nfig = plt.figure(figsize=(10,6)) \n\nax = fig.add_subplot() \n\nax.plot(month, solar_panel, label=\"Solar Panel Output(kWh)\", marker='o', linewidth=2, color='green')\nax.plot(month, wind_turbine, label=\"Wind Turbine Output(kWh)\", marker='^', linewidth=2, color='blue')\n\nax.set_title(\"Renewable Energy Output in 2021\", fontsize=20)\nax.set_xlabel(\"Month\", fontsize=18)\nax.set_ylabel(\"Output(kWh)\", fontsize=18)\n\nax.set_xticks(month)\nax.set_xticklabels(month, rotation=45, fontsize=14)\n\nax.legend(loc=\"best\", fontsize=14, bbox_to_anchor=(1.0,1.0))\n\nfor a,b,c in zip(month, solar_panel, wind_turbine):\n    ax.annotate(str(b)+\",\"+str(c), xy=(a, b), xytext=(-5,5),textcoords='offset points', fontsize=14)\n\nplt.tight_layout()\nplt.grid()\nplt.savefig('line chart/png/441.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the Solar Panel Output in September?",
            "output": "100"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_138",
        "img": "./line_chart_num/png/line_num_138.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Engagement and Retention Rate at XYZ Company",
        "csv": "Year \\t Employees(thousands) \\t New Hires(thousands) \\t Retention Rate(%) \\t Satisfaction Rating \\n 2020 \\t 3000 \\t 400 \\t 90 \\t 3.5 \\n 2021 \\t 3500 \\t 480 \\t 88 \\t 3.9 \\n 2022 \\t 4000 \\t 550 \\t 85 \\t 4.2 \\n 2023 \\t 4500 \\t 620 \\t 82 \\t 4.6 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates XYZ Company's employee engagement and retention rates over four years, focusing on the number of employees, new hires, retention rate, and satisfaction rating. In 2020, the company had 3000 employees, 400 new hires, a retention rate of 90%, and a satisfaction rating of 3.5. By 2021, the figures increased to 3500 employees and 480 new hires, with a slight decrease in retention to 88% and an improved satisfaction rate of 3.9. The upward trend continued through 2022 with 4000 employees, 550 new hires, 85% retention, and a satisfaction rating of 4.2. In 2023, there were 4500 employees, 620 new hires, an 82% retention rate, and the highest satisfaction rating of 4.6."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport pandas as pd \n\n# Read data \ndata = [[2020, 3000, 400, 90, 3.5], [2021, 3500, 480, 88, 3.9], [2022, 4000, 550, 85, 4.2], [2023, 4500, 620, 82, 4.6]] \ndf = pd.DataFrame(data, columns = ['Year', 'Employees (thousands)', 'New Hires (thousands)','Retention Rate (%)', 'Satisfaction Rating']) \n\n# Create figure and plot\nfig = plt.figure(figsize=(10, 6)) \nax = fig.add_subplot(111)\n\nax.plot(df['Year'], df['Employees (thousands)'], color ='blue', marker='o', linestyle='solid', label=\"Employees (thousands)\")\nax.plot(df['Year'], df['New Hires (thousands)'], color ='red', marker='o', linestyle='solid', label=\"New Hires (thousands)\")\nax.plot(df['Year'], df['Retention Rate (%)'], color ='green', marker='o', linestyle='solid', label=\"Retention Rate (%)\")\nax.plot(df['Year'], df['Satisfaction Rating'], color ='black', marker='o', linestyle='solid', label=\"Satisfaction Rating\")\n\nfor i, txt in enumerate(df['Employees (thousands)']):\n    ax.annotate(txt, (df['Year'][i], df['Employees (thousands)'][i]), xytext=(-20, 10), textcoords='offset points')\nfor i, txt in enumerate(df['New Hires (thousands)']):\n    ax.annotate(txt, (df['Year'][i], df['New Hires (thousands)'][i]), xytext=(-20, 10), textcoords='offset points')\nfor i, txt in enumerate(df['Retention Rate (%)']):\n    ax.annotate(txt, (df['Year'][i], df['Retention Rate (%)'][i]), xytext=(-20, 10), textcoords='offset points')\nfor i, txt in enumerate(df['Satisfaction Rating']):\n    ax.annotate(txt, (df['Year'][i], df['Satisfaction Rating'][i]), xytext=(-20, 10), textcoords='offset points')\n\nax.set_xticks([2020, 2021, 2022, 2023])\nax.set_title('Employee Engagement and Retention Rate at XYZ Company') \nax.legend()\nplt.tight_layout() \n\nplt.savefig(r'line chart/png/382.png', dpi=300) \nplt.clf()"
        },
        "QA": {
            "input": "What is the trend of the Retention Rate at XYZ Company from 2020 to 2023?",
            "output": "Decreasing"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_185",
        "img": "./line_chart_num/png/line_num_185.png",
        "topic": "Education and Academics",
        "title": " Changes in Enrollment, Graduation and Attrition Rates of University Students from 2011 to 2015",
        "csv": "Year \\t Enrollment Rate(%) \\t Graduation Rate(%) \\t Attrition Rate(%) \\n 2011 \\t 90 \\t 70 \\t 20 \\n 2012 \\t 88 \\t 75 \\t 15 \\n 2013 \\t 85 \\t 72 \\t 22 \\n 2014 \\t 80 \\t 77 \\t 18 \\n 2015 \\t 83 \\t 79 \\t 16 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart depicts the annual changes in university student enrollment, graduation, and attrition rates from 2011 to 2015. In 2011, enrollment rate was at 90%, graduation rate at 70%, and attrition rate at 20%. The enrollment rate decreased over the years, reaching 83% in 2015, while graduation rate improved, peaking at 79% in 2015. Attrition rate fluctuated, with the lowest at 15% in 2012 and the highest at 22% in 2013."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# prepare data\nyear = np.array([2011,2012,2013,2014,2015])\nenrollment_rate = np.array([90,88,85,80,83])\ngraduation_rate = np.array([70,75,72,77,79])\nattrition_rate = np.array([20,15,22,18,16])\n\n# figure\nfig = plt.figure(figsize=(15,8))\n\n# add subplot\nax1 = fig.add_subplot(111)\n\n# plot and annotate\nax1.plot(year,enrollment_rate,label='enrollment rate')\nfor a,b in zip(year,enrollment_rate):\n    ax1.annotate('%.1f'%b,xy=(a,b),xytext=(0,2),textcoords='offset points',rotation=45)\n\nax1.plot(year,graduation_rate,label='graduation rate')\nfor a,b in zip(year,graduation_rate):\n    ax1.annotate('%.1f'%b,xy=(a,b),xytext=(0,2),textcoords='offset points',rotation=45)\n\nax1.plot(year,attrition_rate,label='attrition rate')\nfor a,b in zip(year,attrition_rate):\n    ax1.annotate('%.1f'%b,xy=(a,b),xytext=(0,2),textcoords='offset points',rotation=45)\n\n# xticks\nplt.xticks(year)\n\n# legend\nplt.legend(loc=2, bbox_to_anchor=(1,1.03))\n\n# title\nplt.title('Changes in Enrollment, Graduation and Attrition Rates of University Students from 2011 to 2015')\n\n# save\nplt.tight_layout()\nplt.savefig('line chart/png/6.png')\n\n# clear current image\nplt.clf()"
        },
        "QA": {
            "input": "In which year was the attrition rate at its lowest between 2011 and 2015?",
            "output": "2012"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_411",
        "img": "./line_chart_num/png/line_num_411.png",
        "topic": "Real Estate and Housing Market",
        "title": " Average Home Prices and Rents in the US, 2001-2006",
        "csv": "Year \\t Average Home Price (thousands of dollars) \\t Average Rent (thousands of dollars) \\n 2001 \\t 220 \\t 14 \\n 2002 \\t 200 \\t 13 \\n 2003 \\t 180 \\t 12 \\n 2004 \\t 170 \\t 11 \\n 2005 \\t 190 \\t 13 \\n 2006 \\t 210 \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the average home prices and rents in the United States from 2001 to 2006. In this period, average home prices in thousands of dollars start at 220 in 2001 and fluctuate, reaching a low of 170 in 2004 before rising to 210 in 2006. Meanwhile, average rent costs in thousands of dollars begin at 14 in 2001, decreasing annually to a low of 11 by 2004, and then increase to 15 in 2006. The chart tracks these two variables over the six-year span, showing their progression over time."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib\nmatplotlib.use('agg')\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(12,6))\nax = plt.subplot()\nax.plot([2001,2002,2003,2004,2005,2006],[220,200,180,170,190,210],label=\"Average Home Price (thousands of dollars)\")\nax.plot([2001,2002,2003,2004,2005,2006],[14,13,12,11,13,15],label=\"Average Rent (thousands of dollars)\")\nplt.title(\"Average Home Prices and Rents in the US, 2001-2006\")\nax.set_xticks([2001,2002,2003,2004,2005,2006])\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Price/Rent (thousands of dollars)\")\nfor i,j in zip([2001,2002,2003,2004,2005,2006],[220,200,180,170,190,210]):\n    ax.annotate(str(j),xy=(i,j))\nfor i,j in zip([2001,2002,2003,2004,2005,2006],[14,13,12,11,13,15]):\n    ax.annotate(str(j),xy=(i,j))\nax.legend()\nplt.tight_layout()\nplt.savefig(\"line chart/png/48.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What was the average rent in the year 2005?",
            "output": "13"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_442",
        "img": "./line_chart_num/png/line_num_442.png",
        "topic": "Human Resources and Employee Management",
        "title": " Growth in Number of Employees and Training Hours at ABC Company",
        "csv": "Year \\t Number of Employees \\t Training Hours \\n 2011 \\t 500 \\t 100 \\n 2012 \\t 600 \\t 110 \\n 2013 \\t 650 \\t 115 \\n 2014 \\t 700 \\t 120 \\n 2015 \\t 750 \\t 125 \\n 2016 \\t 800 \\t 130 \\n 2017 \\t 850 \\t 135 \\n 2018 \\t 900 \\t 140 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the growth in both the number of employees and training hours at ABC Company over the period from 2011 to 2018. In 2011, the company had 500 employees with 100 training hours, which steadily increased each year reaching 900 employees and 140 training hours by 2018. Each year, the number of employees and the training hours appears to grow proportionally."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,5))\nax = plt.subplot()\nax.set_title('Growth in Number of Employees and Training Hours at ABC Company')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Employees/Training Hours')\nax.plot([2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018], [500, 600, 650, 700, 750, 800, 850, 900], linestyle='solid', label='Number of Employees')\nax.plot([2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018], [100, 110, 115, 120, 125, 130, 135, 140], linestyle='dashed', label='Training Hours')\nax.legend()\nax.grid(True, linestyle='dashed')\nfor x, y, z in zip([2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018], [500, 600, 650, 700, 750, 800, 850, 900], [100, 110, 115, 120, 125, 130, 135, 140]):\n    ax.annotate('{}/{}'.format(y,z), xy=(x, y), xytext=(20, 0), textcoords='offset points', rotation=45, ha='right')\nplt.xticks([2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018])\nplt.tight_layout()\nplt.savefig('line chart/png/16.png')\nplt.clf()"
        },
        "QA": {
            "input": "By how many hours did the training increase from 2011 to 2018?",
            "output": "40 hours"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_238",
        "img": "./line_chart_num/png/line_num_238.png",
        "topic": "Transportation and Logistics",
        "title": " Transportation of goods in China in 2021",
        "csv": "Month \\t Air Transport (million ton-km) \\t Railway (million ton-km) \\t Road (million ton-km) \\n January \\t 1000 \\t 3000 \\t 5000 \\n February \\t 1200 \\t 3500 \\t 4500 \\n March \\t 1400 \\t 4000 \\t 5500 \\n April \\t 1300 \\t 4200 \\t 6000 \\n May \\t 1500 \\t 3800 \\t 5500 \\n June \\t 1400 \\t 3600 \\t 6000 \\n July \\t 1600 \\t 3000 \\t 5500 \\n August \\t 1700 \\t 3500 \\t 6000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the transportation of goods in China across different modes of transport each month in 2021. It shows the millions of ton-kilometers for air transport, railways, and roads. In January, air transport accounts for 1000 million ton-km, railways for 3000 million ton-km, and road transport for 5000 million ton-km. Following months show fluctuations, with air transport peaking in August at 1700 million ton-km, railways reaching their highest in April with 4200 million ton-km, and roads hitting a peak of 6000 million ton-km in April, June, and August."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,6))\nplt.plot(['January','February','March','April','May','June','July','August'],[1000,1200,1400,1300,1500,1400,1600,1700],'b-o',label='Air Transport (million ton-km)')\nplt.plot(['January','February','March','April','May','June','July','August'],[3000,3500,4000,4200,3800,3600,3000,3500],'g-o',label='Railway (million ton-km)')\nplt.plot(['January','February','March','April','May','June','July','August'],[5000,4500,5500,6000,5500,6000,5500,6000],'r-o',label='Road (million ton-km)')\nplt.xticks(['January','February','March','April','May','June','July','August'])\nplt.title('Transportation of goods in China in 2021')\nplt.xlabel('Month')\nplt.ylabel('Ton-km (million)')\nplt.grid(True)\nplt.legend(loc='best')\nfor a,b in zip(['January','February','March','April','May','June','July','August'],[1000,1200,1400,1300,1500,1400,1600,1700]):\n    plt.text(a,b+50,b,ha='center',va='bottom',fontsize=10)\nfor a,b in zip(['January','February','March','April','May','June','July','August'],[3000,3500,4000,4200,3800,3600,3000,3500]):\n    plt.text(a,b+50,b,ha='center',va='bottom',fontsize=10)\nfor a,b in zip(['January','February','March','April','May','June','July','August'],[5000,4500,5500,6000,5500,6000,5500,6000]):\n    plt.text(a,b+50,b,ha='center',va='bottom',fontsize=10)\nplt.tight_layout()\nplt.savefig('line chart/png/428.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which mode of transportation shows an increase from January to August?",
            "output": "Air Transport"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_301",
        "img": "./line_chart_num/png/line_num_301.png",
        "topic": "Retail and E-commerce",
        "title": " Number of Customers Shopping Online in Four Retail Stores in 2021",
        "csv": "Month \\t Customer A \\t Customer B \\t Customer C \\t Customer D \\n January \\t 1000 \\t 800 \\t 900 \\t 1200 \\n February \\t 900 \\t 1200 \\t 1100 \\t 1500 \\n March \\t 700 \\t 1100 \\t 1300 \\t 1400 \\n April \\t 1200 \\t 1500 \\t 1400 \\t 1000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the number of customers shopping online at four different retail stores, labeled Customer A, B, C, and D, over four months in 2021. In January, Customer A had 1000 customers, B had 800, C had 900, and D had 1200. February showed Customer A with 900 customers, B with 1200, C with 1100, and D with 1500. Moving to March, Customer A saw 700, B had 1100, C had 1300, and D had 1400 customers. Finally, in April, Customer A's figure rose to 1200, Customer B reached 1500, Customer C had 1400, and Customer D saw a decrease to 1000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [[1000, 800, 900, 1200], [900, 1200, 1100, 1500], [700, 1100, 1300, 1400], [1200, 1500, 1400, 1000]]\nmonths = ['January', 'February', 'March', 'April']\nCustomer = ['Customer A','Customer B','Customer C','Customer D']\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\nfor i in range(len(data[0])):\n    ax.plot(months, [row[i] for row in data], label=Customer[i])\n\nfor i in range(len(data)):\n    for j in range(len(data[i])):\n        ax.annotate(str(data[i][j]), xy=(months[i], data[i][j]), xytext=(months[i], data[i][j]+100), fontsize=9, rotation=90)\n\nax.set_xlabel('Months')\nax.set_ylabel('Customer')\nax.set_title('Number of Customers Shopping Online in Four Retail Stores in 2021')\nax.legend()\n\nax.xaxis.set_ticks(months)\n\nplt.tight_layout()\nplt.savefig('line chart/png/342.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "Which month did Customer D have the lowest number of customers shopping online?",
            "output": "April"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_168",
        "img": "./line_chart_num/png/line_num_168.png",
        "topic": "Social Media and the Web",
        "title": " Online usage trend in the United States from 2019 to 2022",
        "csv": "Year \\t Social Networking Usage(percentage) \\t Online Shopping Usage(percentage) \\t Streaming Service Usage(percentage) \\n 2019 \\t 80 \\t 65 \\t 50 \\n 2020 \\t 82 \\t 70 \\t 60 \\n 2021 \\t 85 \\t 75 \\t 65 \\n 2022 \\t 87 \\t 80 \\t 70 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the trend of online usage rates in the United States for social networking, online shopping, and streaming services from 2019 to 2022. In 2019, social networking saw an 80% usage rate, online shopping was at 65%, and streaming services were used by 50% of the population. By 2020, these percentages increased to 82%, 70%, and 60% respectively. In 2021, usage rates grew further to 85% for social networking, 75% for online shopping, and 65% for streaming. The chart shows continuous growth by 2022, with social networking at 87%, online shopping hitting 80%, and streaming services reaching 70%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\ndata = [\n    [2019, 80, 65, 50], \n    [2020, 82, 70, 60],\n    [2021, 85, 75, 65], \n    [2022, 87, 80, 70]\n]\n\nyear = [row[0] for row in data] \nsocial_networking_usage = [row[1] for row in data] \nonline_shopping_usage = [row[2] for row in data]\nstreaming_service_usage = [row[3] for row in data]\n\nfig, ax = plt.subplots(figsize=(15, 8))\n\nax.plot(year, social_networking_usage, label='Social Networking Usage')\nax.plot(year, online_shopping_usage, label='Online Shopping Usage')\nax.plot(year, streaming_service_usage, label='Streaming Service Usage')\n\nfor i, txt in enumerate(social_networking_usage):\n    ax.annotate(txt, (year[i], social_networking_usage[i]))\n\nfor i, txt in enumerate(online_shopping_usage):\n    ax.annotate(txt, (year[i], online_shopping_usage[i]))\n\nfor i, txt in enumerate(streaming_service_usage):\n    ax.annotate(txt, (year[i], streaming_service_usage[i]))\n\nplt.xticks(year)\nplt.title('Online usage trend in the United States from 2019 to 2022')\nplt.xlabel('Year')\nplt.ylabel('Internet Usage Percentage')\nax.legend(loc=\"best\")\nplt.grid()\nplt.tight_layout()\nplt.savefig('line chart/png/516.png')\nplt.clf()"
        },
        "QA": {
            "input": "By what percentage did the usage of Streaming Services increase from 2019 to 2022?",
            "output": "20%"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_9",
        "img": "./line_chart_num/png/line_num_9.png",
        "topic": "Science and Engineering",
        "title": " Space shuttle's speed and altitude change during launch",
        "csv": "Time \\t Speed(km/h) \\t Altitude(km) \\n 00:00 \\t 500 \\t 0 \\n 01:00 \\t 400 \\t 2.5 \\n 02:00 \\t 350 \\t 5 \\n 03:00 \\t 300 \\t 7.5 \\n 04:00 \\t 250 \\t 10 \\n 05:00 \\t 200 \\t 12.5 \\n 06:00 \\t 150 \\t 15 \\n 07:00 \\t 100 \\t 17.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart represents the space shuttle's speed and altitude changes during launch, measured at hourly intervals. Initially, at 00:00, the speed is 500 km/h at sea level. By 01:00, speed decreases to 400 km/h as altitude rises to 2.5 km. At 02:00, the speed further drops to 350 km/h with the shuttle reaching 5 km in altitude. The trend continues, with speed reducing and altitude increasing; at 03:00, the speed is 300 km/h at 7.5 km, at 04:00, 250 km/h at 10 km, at 05:00, 200 km/h at 12.5 km, and by 06:00, the shuttle is at 150 km/h and 15 km high. At 07:00, the chart shows a speed of 100 km/h at an altitude of 17.5 km."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ntime = ['00:00','01:00','02:00','03:00','04:00','05:00','06:00','07:00']\nspeed = [500,400,350,300,250,200,150,100]\naltitude = [0,2.5,5,7.5,10,12.5,15,17.5]\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(1,1,1)\n\nax.plot(time,speed,color='red',label='Speed(km/h)')\nax.plot(time,altitude,color='blue',label='Altitude(km)')\n\nax.set_title('Space shuttle\\'s speed and altitude change during launch',fontsize=20)\nax.set_xlabel('Time',fontsize=15)\nax.set_ylabel('Value',fontsize=15)\n\nax.xaxis.set_major_locator(ticker.MultipleLocator(base=1))\nax.annotate('Speed:{} km/h'.format(speed[-1]),xy=(time[-1],speed[-1]),\n            xytext=(time[-1],speed[-1]+20),\n            arrowprops=dict(facecolor='red',shrink=0.05))\nax.annotate('Altitude:{} km'.format(altitude[-1]),xy=(time[-1],altitude[-1]),\n            xytext=(time[-1],altitude[-1]-5),\n            arrowprops=dict(facecolor='blue',shrink=0.05))\n\nax.legend(loc='upper left',fontsize=15)\n\nplt.tight_layout()\nplt.savefig('line chart/png/172.png')\nplt.clf()"
        },
        "QA": {
            "input": "At what time was the altitude of the space shuttle 10 kilometers?",
            "output": "04:00"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_215",
        "img": "./line_chart_num/png/line_num_215.png",
        "topic": "Law and Legal Affairs",
        "title": " Number of cases in a legal firm from 2010 to 2014",
        "csv": "Year \\t Cases Filed \\t Cases Resolved \\t Cases Pending \\n 2010 \\t 1000 \\t 400 \\t 600 \\n 2011 \\t 1200 \\t 500 \\t 700 \\n 2012 \\t 1400 \\t 550 \\t 850 \\n 2013 \\t 1600 \\t 600 \\t 1000 \\n 2014 \\t 1800 \\t 650 \\t 1150 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the yearly data for a legal firm from 2010 to 2014. It shows three sets of numbers: cases filed, cases resolved, and cases pending per year. The number of cases filed escalates annually, starting from 1000 in 2010 and increasing to 1800 by 2014. Simultaneously, the cases resolved go up from 400 to 650, while pending cases also rise, beginning at 600 in 2010 and swelling to 1150 by 2014. Each year steadily shows an increase in all three categories."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(8,6))\ndata = np.array([[2010,1000,400,600],[2011,1200,500,700],[2012,1400,550,850],[2013,1600,600,1000],[2014,1800,650,1150]])\nx = data[:, 0]\nfiled = data[:, 1]\nresolved = data[:, 2]\npending = data[:, 3]\nplt.plot(x, filed, label = 'Cases Filed')\nplt.plot(x, resolved, label = 'Cases Resolved')\nplt.plot(x, pending, label = 'Cases Pending')\nplt.xticks(x)\nplt.title('Number of cases in a legal firm from 2010 to 2014')\nplt.xlabel('Year')\nplt.ylabel('Number of cases')\nplt.legend()\nfor i, txt in enumerate(filed):\n    plt.annotate(txt, (x[i],filed[i]))\nfor i, txt in enumerate(resolved):\n    plt.annotate(txt, (x[i],resolved[i]))\nfor i, txt in enumerate(pending):\n    plt.annotate(txt, (x[i],pending[i]))\nplt.tight_layout()\nplt.savefig('line chart/png/332.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more cases were pending in 2014 compared to 2010?",
            "output": "550"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_414",
        "img": "./line_chart_num/png/line_num_414.png",
        "topic": "Business and Finance",
        "title": " Profit analysis of four business units from 2001 to 2004",
        "csv": "Year \\t Profits A(million dollars) \\t Profits B(million dollars) \\t Profits C(million dollars) \\t Profits D(million dollars) \\n 2001 \\t 200 \\t 150 \\t 250 \\t 300 \\n 2002 \\t 250 \\t 200 \\t 300 \\t 350 \\n 2003 \\t 150 \\t 250 \\t 350 \\t 300 \\n 2004 \\t 300 \\t 350 \\t 400 \\t 250 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the profit analysis of four business units, labeled A, B, C, and D, over four years from 2001 to 2004. Business unit A's profits range from 200 million dollars in 2001 to 300 million dollars in 2004. Unit B's profits start at 150 million dollars in 2001, peaking at 350 million dollars in 2004. Unit C shows a steady increase from 250 million dollars in 2001 to 400 million dollars in 2004, whereas unit D's profits fluctuate, starting at 300 million in 2001 and ending at 250 million in 2004."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\n\n# Draw line chart\nplt.figure(figsize=(8,6))\nax = plt.subplot()\nax.plot(['2001', '2002', '2003', '2004'], [200, 250, 150, 300], marker='o', label='Profits A(million dollars)')\nax.plot(['2001', '2002', '2003', '2004'], [150, 200, 250, 350], marker='o', label='Profits B(million dollars)')\nax.plot(['2001', '2002', '2003', '2004'], [250, 300, 350, 300], marker='o', label='Profits C(million dollars)')\nax.plot(['2001', '2002', '2003', '2004'], [300, 350, 400, 250], marker='o', label='Profits D(million dollars)')\nplt.xlabel('Year')\nplt.ylabel('Profits (million dollars)')\nplt.title('Profit analysis of four business units from 2001 to 2004')\nax.xaxis.set_major_locator(mtick.MaxNLocator(integer=True))\nplt.legend(loc='best', ncol=2)\nfor a, b in zip(['2001', '2002', '2003', '2004'], [200, 250, 150, 300]):\n    plt.text(a, b, b, ha='center', va='bottom', fontsize=10)\nfor a, b in zip(['2001', '2002', '2003', '2004'], [150, 200, 250, 350]):\n    plt.text(a, b, b, ha='center', va='bottom', fontsize=10)\nfor a, b in zip(['2001', '2002', '2003', '2004'], [250, 300, 350, 300]):\n    plt.text(a, b, b, ha='center', va='bottom', fontsize=10)\nfor a, b in zip(['2001', '2002', '2003', '2004'], [300, 350, 400, 250]):\n    plt.text(a, b, b, ha='center', va='bottom', fontsize=10)\nplt.grid(True, linestyle='--', linewidth=0.4)\n# Set figure size\nplt.tight_layout()\n# Save figure\nplt.savefig('line chart/png/549.png') \n# Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "What was the highest profit among the four business units in 2002?",
            "output": "Profits D with 350 million dollars"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_117",
        "img": "./line_chart_num/png/line_num_117.png",
        "topic": "Education and Academics",
        "title": " Number of Students and Average Class Size in a School in 2021",
        "csv": "Grade \\t Number of Students \\t Average Class Size \\n 1 \\t 50 \\t 20 \\n 2 \\t 60 \\t 25 \\n 3 \\t 55 \\t 22 \\n 4 \\t 45 \\t 17 \\n 5 \\t 50 \\t 21 \\n 6 \\t 60 \\t 25 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the number of students and the average class size for grades 1 through 6 in a school during 2021. Grade 1 has 50 students with an average class size of 20, while grade 2 has 60 students and an average class size of 25. Grade 3 shows 55 students and a class size average of 22. Grade 4 presents with 45 students and the smallest average class size of 17. Both grade 5 and grade 6 have 50 students with average class sizes of 21 and 25, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport matplotlib as mpl\nimport numpy as np\n\n# Create figure\nplt.figure(figsize=(15, 8))\n\n# Create data\ngrade = np.array([1,2,3,4,5,6])\nnumber_students = np.array([50,60,55,45,50,60])\naverage_class_size = np.array([20,25,22,17,21,25])\n\n# Plot line chart\nplt.plot(grade, number_students, label='Number of Students', color='red', marker='o', markersize=8)\nplt.plot(grade, average_class_size, label='Average Class Size', color='blue', marker='o', markersize=8)\n\n# Set axis labels\nplt.xlabel('Grade')\nplt.ylabel('Number')\n\n# Set title\nplt.title('Number of Students and Average Class Size in a School in 2021')\n\n# Show legend\nplt.legend(loc='best')\n\n# Set background grid\nplt.grid(True, axis='y', color='gray', linestyle='--', linewidth=1)\n\n#Label data points\nfor x, y in zip(grade, number_students):\n    plt.annotate(f'{y}', (x, y), xytext=(0, 10), textcoords='offset points')\n\nfor x, y in zip(grade, average_class_size):\n    plt.annotate(f'{y}', (x, y), xytext=(0, 10), textcoords='offset points')\n    \n# Set xticks\nplt.xticks(grade)\n\n# Resize image\nplt.tight_layout()\n\n# Save chart\nplt.savefig('line chart/png/278.png')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the total number of students across all grades according to the data?",
            "output": "320"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_331",
        "img": "./line_chart_num/png/line_num_331.png",
        "topic": "Transportation and Logistics",
        "title": " Monthly Travelers Statistics in Different Transportation Modes in 2021",
        "csv": "Month \\t Number of Train Travelers \\t Number of Plane Travelers \\t Number of Bus Travelers \\n January \\t 1000 \\t 2000 \\t 3000 \\n February \\t 1200 \\t 2500 \\t 3500 \\n March \\t 1400 \\t 3000 \\t 4000 \\n April \\t 1600 \\t 2700 \\t 3300 \\n May \\t 1800 \\t 2500 \\t 3500 \\n June \\t 2000 \\t 3000 \\t 3800 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the number of travelers using different modes of transportation each month in 2021. For train travelers, the numbers start at 1000 in January and rise to 2000 by June. Plane travelers begin at 2000 in January, peaking at 3000 in March and June with dips in April and May. Bus travelers show a consistent increase from 3000 in January to 3800 in June. Each transportation mode shows a distinct trend over the six-month period covered."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# create figure before plotting\nfig = plt.figure(figsize=(12,6)) \nax = fig.add_subplot(111)\n\n# plot the data\nx = np.arange(6)\nmonths = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\"]\ntrain_travelers = [1000,1200,1400,1600,1800,2000]\nplane_travelers = [2000,2500,3000,2700,2500,3000]\nbus_travelers = [3000,3500,4000,3300,3500,3800]\nax.plot(x,train_travelers,label=\"Train Travelers\",marker='o')\nax.plot(x,plane_travelers,label=\"Plane Travelers\",marker='o')\nax.plot(x,bus_travelers,label=\"Bus Travelers\",marker='o')\n\n# set the xticks\nplt.xticks(x,months)\n\n# add the value of each data point directly on the figure\nfor a,b in zip(x,train_travelers):\n    ax.annotate('{}'.format(b),xy=(a,b),xytext=(0,2),textcoords='offset points',fontsize=10)\nfor a,b in zip(x,plane_travelers):\n    ax.annotate('{}'.format(b),xy=(a,b),xytext=(0,2),textcoords='offset points',fontsize=10)\nfor a,b in zip(x,bus_travelers):\n    ax.annotate('{}'.format(b),xy=(a,b),xytext=(0,2),textcoords='offset points',fontsize=10)\n\n# set the background grids\nax.grid(linestyle='--',color='black',alpha=0.3)\n\n# set the title\nax.set_title(\"Monthly Travelers Statistics in Different Transportation Modes in 2021\")\n\n# set the legend\nax.legend(loc='upper left')\n\n# automatically resize the image\nplt.tight_layout()\n\n# save the figure\nplt.savefig(\"line chart/png/539.png\")\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in the number of travelers by bus between February and June?",
            "output": "300"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_374",
        "img": "./line_chart_num/png/line_num_374.png",
        "topic": "Environment and Sustainability",
        "title": " Increasing Pollutant Levels in the Atmosphere over the Next Three Years",
        "csv": "Year \\t CO2(PPM) \\t Ozone(PPB) \\t Nitrogen Dioxide(PPB) \\n 2020 \\t 400 \\t 275 \\t 30 \\n 2021 \\t 405 \\t 280 \\t 33 \\n 2022 \\t 410 \\t 285 \\t 35 \\n 2023 \\t 415 \\t 290 \\t 38 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the trends in atmospheric pollutant levels over three years, starting from 2020 up to 2023. It tracks the concentration of CO2 in parts per million (PPM), Ozone in parts per billion (PPB), and Nitrogen Dioxide in parts per billion (PPB). In 2020, levels were recorded at 400 PPM for CO2, 275 PPB for Ozone, and 30 PPB for Nitrogen Dioxide. Each successive year shows an increase, with CO2 levels reaching 415 PPM, Ozone climbing to 290 PPB, and Nitrogen Dioxide hitting 38 PPB by 2023."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# set fig size\nplt.figure(figsize=(10, 8)) \n\n# create and set axes\nax = plt.subplot()\n\n# plot data\nx = np.array([2020, 2021, 2022, 2023])\ny1 = np.array([400,405,410,415])\ny2 = np.array([275,280,285,290])\ny3 = np.array([30,33,35,38])\nax.plot(x, y1, label=\"CO2(PPM)\", color=\"#FFA500\")\nax.plot(x, y2, label=\"Ozone(PPB)\", color=\"#FF4500\")\nax.plot(x, y3, label=\"Nitrogen Dioxide(PPB)\", color=\"#DC143C\")\n\n# set axis limits\nax.set_xlim([2020, 2023])\nax.set_ylim([0, 450])\n\n# set axis labels\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Levels (ppm/ppb)\")\n\n# add title\nax.set_title(\"Increasing Pollutant Levels in the Atmosphere over the Next Three Years\")\n\n# add grid lines\nax.grid(linestyle=\"--\")\n\n# set ticks\nax.set_xticks(x)\n\n# add legend\nax.legend(loc=\"upper left\")\n\n# rotate x tick labels\nplt.xticks(rotation=45)\n\n# annotate each point of the line\nfor x, y1, y2, y3 in zip(x, y1, y2, y3):\n    ax.annotate('CO2: {}\\nOzone: {}\\nNitrogen Dioxide: {}'.format(y1, y2, y3),\n                xy=(x, y1),\n                xytext=(-20, 20),\n                textcoords='offset points',\n                rotation=45,\n                wrap=True\n                )\n\n# automatically resize the image\nplt.tight_layout()\n\n# save figure\nplt.savefig('line chart/png/199.png')\n\n# clear the current figure\nplt.clf()"
        },
        "QA": {
            "input": "By how much did Nitrogen Dioxide levels increase from 2020 to 2023?",
            "output": "8 PPB"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_325",
        "img": "./line_chart_num/png/line_num_325.png",
        "topic": "Retail and E-commerce",
        "title": " Comparison of Online and Store Sales in the Retail Industry",
        "csv": "Year \\t Online Sales (billion dollars) \\t Store Sales (billion dollars) \\n 2020 \\t 700 \\t 1200 \\n 2021 \\t 800 \\t 1100 \\n 2022 \\t 900 \\t 1300 \\n 2023 \\t 1000 \\t 1500 \\n 2024 \\t 1100 \\t 1600 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates a comparison of online and store sales in the retail industry over five years. It shows annual sales figures in billion dollars from 2020 to 2024. In 2020, online sales were at 700 billion dollars, and store sales were 1200 billion dollars. Over the years, online sales steadily increase from 800 billion in 2021 to 1100 billion dollars projected for 2024. Store sales dip to 1100 billion in 2021 but then rise each year, reaching 1500 billion in 2023 and an expected 1600 billion in 2024."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np \n\n# Create figure before plotting\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot()\n\n# Set x,y coordinates\nx = np.array([2020, 2021, 2022, 2023, 2024])\ny1 = np.array([700, 800, 900, 1000, 1100])\ny2 = np.array([1200, 1100, 1300, 1500, 1600])\n\n# Plot the data\nax.plot(x, y1, color='blue', linewidth=2.5, linestyle='solid', label='Online Sales')\nax.plot(x, y2, color='red', linewidth=2.5, linestyle='dashed', label='Store Sales')\n\n# Set the xticks to prevent interpolation\nplt.xticks(x)\n\n# Add a title, legend and grid\nax.set_title('Comparison of Online and Store Sales in the Retail Industry')\nax.legend(loc='upper center')\nax.grid(linestyle='--', linewidth=1)\n\n# Label the value of each data point directly on the figure\nfor a, b in zip(x, y1):\n    ax.text(a - 0.2, b + 20, b, fontsize=10)\nfor a, b in zip(x, y2):\n    ax.text(a + 0.1, b - 20, b, fontsize=10, rotation=90, wrap=True)\n    \n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('line chart/png/435.png')\n\n# Clear the figure\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in store sales between the years 2022 and 2023?",
            "output": "200 billion dollars"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_216",
        "img": "./line_chart_num/png/line_num_216.png",
        "topic": "Arts and Culture",
        "title": " Development of Cultural Facilities in the U.S. from 2001 to 2004",
        "csv": "Year \\t Number of Museums \\t Number of Art Galleries \\t Number of Performance Halls \\t Number of Libraries \\n 2001 \\t 100 \\t 80 \\t 50 \\t 60 \\n 2002 \\t 110 \\t 90 \\t 45 \\t 65 \\n 2003 \\t 120 \\t 80 \\t 55 \\t 60 \\n 2004 \\t 130 \\t 85 \\t 60 \\t 70 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the development of cultural facilities in the U.S. from 2001 to 2004. It tracks changes in the number of museums, art galleries, performance halls, and libraries. In 2001, there were 100 museums, 80 art galleries, 50 performance halls, and 60 libraries. By 2004, museums increased to 130, art galleries to 85, performance halls to 60, and libraries to 70."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\n# Create figure\nfig = plt.figure(figsize=(15, 8))\nax = fig.add_subplot(1, 1, 1)\n\n# Set data\nx_data = [2001, 2002, 2003, 2004] \nmuseums_data = [100, 110, 120, 130] \nart_galleries_data = [80, 90, 80, 85]\nperformance_halls_data = [50, 45, 55, 60]\nlibraries_data = [60, 65, 60, 70]\n\n# Plot line chart\nax.plot(x_data, museums_data, label = \"Number of Museums\", marker = 'o')\nax.plot(x_data, art_galleries_data, label = \"Number of Art Galleries\", marker = 'o')\nax.plot(x_data, performance_halls_data, label = \"Number of Performance Halls\", marker = 'o')\nax.plot(x_data, libraries_data, label = \"Number of Libraries\", marker = 'o')\n\n# Set legend\nax.legend()\n\n# Set labels\nplt.xlabel('Year', fontsize = 14) \nplt.ylabel('Number of Facilities', fontsize = 14)\n\n# Set title\nplt.title('Development of Cultural Facilities in the U.S. from 2001 to 2004', fontsize = 18)\n\n# Annotate\nfor x_val, y_val in zip(x_data, museums_data):\n    ax.annotate(str(y_val), xy = (x_val, y_val), xytext = (x_val + 0.2, y_val + 7), fontsize = 12)\n\nfor x_val, y_val in zip(x_data, art_galleries_data):\n    ax.annotate(str(y_val), xy = (x_val, y_val), xytext = (x_val + 0.2, y_val + 7), fontsize = 12)\n\nfor x_val, y_val in zip(x_data, performance_halls_data):\n    ax.annotate(str(y_val), xy = (x_val, y_val), xytext = (x_val + 0.2, y_val + 7), fontsize = 12)\n\nfor x_val, y_val in zip(x_data, libraries_data):\n    ax.annotate(str(y_val), xy = (x_val, y_val), xytext = (x_val + 0.2, y_val + 7), fontsize = 12)\n\n# Set xticks\nplt.xticks(x_data, fontsize = 12)\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save image\nplt.savefig('line chart/png/173.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which cultural facility saw the greatest increase in number from 2001 to 2004?",
            "output": "Museums"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_109",
        "img": "./line_chart_num/png/line_num_109.png",
        "topic": "Healthcare and Health",
        "title": " Weight and Height changes of people aged 18-24",
        "csv": "Age \\t Weight(kg) \\t Height(cm) \\n 18 \\t 75 \\t 180 \\n 19 \\t 72 \\t 175 \\n 20 \\t 80 \\t 182 \\n 21 \\t 78 \\t 179 \\n 22 \\t 77 \\t 178 \\n 23 \\t 76 \\t 177 \\n 24 \\t 74 \\t 176 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates weight and height changes for individuals aged 18 to 24. At age 18, individuals weigh 75 kg and have a height of 180 cm. By age 19, weight decreases to 72 kg while height is at 175 cm. As age increases to 20, weight rises to 80 kg, and height to 182 cm. At 21, there's a slight decrease with weight at 78 kg and height at 179 cm. Ages 22, 23, and 24 show weights of 77 kg, 76 kg, and 74 kg, with heights of 178 cm, 177 cm, and 176 cm respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nage = np.array([18, 19, 20, 21, 22, 23, 24])\nweight = np.array([75, 72, 80, 78, 77, 76, 74])\nheight = np.array([180, 175, 182, 179, 178, 177, 176])\n\n# Create figure\nplt.figure(figsize=(8, 6))\n\n# Plot\nplt.plot(age, weight, label=\"Weight (kg)\")\nplt.plot(age, height, label=\"Height (cm)\")\n\n# Annotate\nfor i, j in zip(age, weight):\n    plt.annotate(str(j), xy=(i, j))\nfor i, j in zip(age, height):\n    plt.annotate(str(j), xy=(i, j))\n\n# Label\nplt.title(\"Weight and Height changes of people aged 18-24\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Weight/Height (kg/cm)\")\n\n# xticks\nplt.xticks(age)\n\n# Legend\nplt.legend(loc='upper right', bbox_to_anchor=(1.25, 1.0))\n\n# Tight layout\nplt.tight_layout()\n\n# Save figure\nplt.savefig('line chart/png/555.png')\n\n# Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "At what age does the height peak according to the given data?",
            "output": "20"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_210",
        "img": "./line_chart_num/png/line_num_210.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Benefits and Salary Trends in a Large Company",
        "csv": "Year \\t Average Salary(dollars) \\t Vacation Days \\t Employees \\n 2019 \\t 60000 \\t 10 \\t 2500 \\n 2020 \\t 65000 \\t 15 \\t 3000 \\n 2021 \\t 70000 \\t 20 \\t 3500 \\n 2022 \\t 75000 \\t 25 \\t 4000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates trends in employee benefits and salaries within a large company over four years. Data from 2019 shows an average salary of $60,000, 10 vacation days, and a workforce of 2,500 employees. In 2020, the average salary increased to $65,000, vacation days to 15, and the number of employees to 3,000. For 2021, the average salary reached $70,000, vacation days at 20, and employees at 3,500. The 2022 data further shows an increase to a $75,000 average salary, 25 vacation days, and 4,000 employees."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport numpy as np\n\n# Create figure \nfig = plt.figure(figsize=(12,7))\n\n# Set x-axis\nx = np.arange(2019,2023)\n\n# Set y-axis\ny1 = [60000, 65000, 70000, 75000]\ny2 = [10, 15, 20, 25]\ny3 = [2500, 3000, 3500, 4000]\n\n# Draw line\nplt.plot(x, y1, label=\"Average Salary(dollars)\")\nplt.plot(x, y2, label=\"Vacation Days\")\nplt.plot(x, y3, label=\"Employees\")\n\n# Set x-axis, y-axis label\nplt.xlabel(\"Year\")\nplt.ylabel(\"Number\")\n\n# Set x-axis tick labels\nplt.xticks(x)\n\n# Set grid\nplt.grid(True, linestyle='-.')\n\n# Set title\nplt.title(\"Employee Benefits and Salary Trends in a Large Company\", fontsize = 16)\n\n# Display legend\nplt.legend(bbox_to_anchor=(1.05, 0.5), loc='center left', borderaxespad=0.)\n\n# Label value of each data point directly on the figure\nplt.annotate(\"60000\", xy=(2019, 60000), xytext=(2019.1, 62500), fontsize=10, arrowprops=dict(arrowstyle=\"->\"))\nplt.annotate(\"65000\", xy=(2020, 65000), xytext=(2020.1, 67500), fontsize=10, arrowprops=dict(arrowstyle=\"->\"))\nplt.annotate(\"70000\", xy=(2021, 70000), xytext=(2021.1, 72500), fontsize=10, arrowprops=dict(arrowstyle=\"->\"))\nplt.annotate(\"75000\", xy=(2022, 75000), xytext=(2022.1, 77500), fontsize=10, arrowprops=dict(arrowstyle=\"->\"))\nplt.annotate(\"10\", xy=(2019, 10), xytext=(2018.9, 10.5), fontsize=10, arrowprops=dict(arrowstyle=\"->\"))\nplt.annotate(\"15\", xy=(2020, 15), xytext=(2020, 15.5), fontsize=10, arrowprops=dict(arrowstyle=\"->\"))\nplt.annotate(\"20\", xy=(2021, 20), xytext=(2021, 20.5), fontsize=10, arrowprops=dict(arrowstyle=\"->\"))\nplt.annotate(\"25\", xy=(2022, 25), xytext=(2022, 25.5), fontsize=10, arrowprops=dict(arrowstyle=\"->\"))\nplt.annotate(\"2500\", xy=(2019, 2500), xytext=(2018.9, 2750), fontsize=10, arrowprops=dict(arrowstyle=\"->\"))\nplt.annotate(\"3000\", xy=(2020, 3000), xytext=(2020, 3250), fontsize=10, arrowprops=dict(arrowstyle=\"->\"))\nplt.annotate(\"3500\", xy=(2021, 3500), xytext=(2021, 3750), fontsize=10, arrowprops=dict(arrowstyle=\"->\"))\nplt.annotate(\"4000\", xy=(2022, 4000), xytext=(2022, 4250), fontsize=10, arrowprops=dict(arrowstyle=\"->\"))\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('line chart/png/113.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the average salary in the year 2021?",
            "output": "70000"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_461",
        "img": "./line_chart_num/png/line_num_461.png",
        "topic": "Tourism and Hospitality",
        "title": " Tourist arrivals and tourism revenue in the US in 2022",
        "csv": "Month \\t Tourist Arrivals (million) \\t Tourism Revenue (billion dollars) \\n January \\t 2.3 \\t 31.2 \\n February \\t 2.6 \\t 35.5 \\n March \\t 3.2 \\t 41.2 \\n April \\t 3.1 \\t 42.8 \\n May \\t 3.7 \\t 48.7 \\n June \\t 3.4 \\t 47.4 \\n July \\t 3.2 \\t 46.5 \\n August \\t 2.8 \\t 40.2 \\n September \\t 2.3 \\t 36.1 \\n October \\t 2.6 \\t 37.9 \\n November \\t 2.2 \\t 34.2 \\n December \\t 2.4 \\t 36.8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates tourist arrivals in millions and tourism revenue in billion dollars in the US for each month of 2022. January shows 2.3 million tourist arrivals with a revenue of $31.2 billion, while February sees 2.6 million arrivals and $35.5 billion revenue. March has an increase with 3.2 million arrivals and $41.2 billion revenue, and April has slightly fewer tourists at 3.1 million but more revenue at $42.8 billion. The trend continues with May having 3.7 million arrivals and the highest revenue of $48.7 billion, June with 3.4 million arrivals and $47.4 billion in revenue, and July similar to March in terms of arrivals but with slightly higher revenue at $46.5 billion. August sees a decline with 2.8 million arrivals and $40.2 billion revenue. In the fall, September marks 2.3 million arrivals and $36.1 billion in revenue, October slightly increases to 2.6 million arrivals and $37.9 billion, and November drops to 2.2 million arrivals with $34.2 billion revenue. December ends the year with 2.4 million tourist arrivals and $36.8 billion in revenue."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\ndata = [['January', 2.3, 31.2], \n        ['February', 2.6, 35.5], \n        ['March', 3.2, 41.2],\n        ['April', 3.1, 42.8],\n        ['May', 3.7, 48.7],\n        ['June', 3.4, 47.4],\n        ['July', 3.2, 46.5],\n        ['August', 2.8, 40.2],\n        ['September', 2.3, 36.1],\n        ['October', 2.6, 37.9],\n        ['November', 2.2, 34.2],\n        ['December', 2.4, 36.8]]\n\nmonth, tourist_arrivals, tourism_revenue = zip(*data)\n\nplt.figure(figsize=(10,6))\n\nplt.plot(month, tourist_arrivals, color='b', label='Tourist Arrivals (million)')\nplt.plot(month, tourism_revenue, color='r', label='Tourism Revenue (billion dollars)')\n\nplt.xlabel('Month')\nplt.xticks(month)\n\nplt.title('Tourist arrivals and tourism revenue in the US in 2022')\nplt.legend(loc='best')\n\nfor a, b in zip(month, tourist_arrivals): \n    plt.annotate(str(b),xy=(a,b))\n\nfor a, b in zip(month, tourism_revenue): \n    plt.annotate(str(b),xy=(a,b))\n\nplt.tight_layout()\nplt.savefig('line chart/png/143.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which month does the ratio of tourism revenue to tourist arrivals peak?",
            "output": "April"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_315",
        "img": "./line_chart_num/png/line_num_315.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Donations to Three Charities by Three Donors in 2020",
        "csv": "Donor \\t Donation Amount(USD) \\t Charity A \\t Charity B \\t Charity C \\n James \\t 1000 \\t 400 \\t 300 \\t 300 \\n Smith \\t 1200 \\t 500 \\t 200 \\t 500 \\n David \\t 1500 \\t 350 \\t 400 \\t 750 \\n Peter \\t 900 \\t 300 \\t 300 \\t 300 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates donation amounts distributed by four donors across three charities in 2020. James donated a total of $1000, dividing it with $400 to Charity A, $300 each to Charity B and C. Smith donated $1200, allocating $500 to Charity A, $200 to Charity B, and $500 to Charity C. David's donation amount was the highest at $1500, with $350 to Charity A, $400 to Charity B, and $750 to Charity C. Lastly, Peter contributed $900, equally split at $300 each among all three charities."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(14, 8))\n\ndonors = ['James', 'Smith', 'David', 'Peter']\n\nA = [400, 500, 350, 300]\nB = [300, 200, 400, 300]\nC = [300, 500, 750, 300]\n\nplt.plot(donors, A, label='Charity A', marker='o')\nplt.plot(donors, B, label='Charity B', marker='o')\nplt.plot(donors, C, label='Charity C', marker='o')\n\nplt.xlabel('Donor')\nplt.ylabel('Donation Amount(USD)')\nplt.title('Donations to Three Charities by Three Donors in 2020')\nplt.xticks(donors, donors, rotation=45)\n\nfor i, j in zip(donors, A):\n    plt.annotate(str(j), xy=(i, j+10))\n\nfor i, j in zip(donors, B):\n    plt.annotate(str(j), xy=(i, j+10))\n\nfor i, j in zip(donors, C):\n    plt.annotate(str(j), xy=(i, j+10))\n\nplt.legend()\nplt.tight_layout()\nplt.savefig('line chart/png/115.png')\nplt.clf()"
        },
        "QA": {
            "input": "Who donated the most to Charity B?",
            "output": "David"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_221",
        "img": "./line_chart_num/png/line_num_221.png",
        "topic": "Science and Engineering",
        "title": " Voltage, Current, and Power Relationship in a Circuit",
        "csv": "Voltage(V) \\t Current(A) \\t Power(W) \\n 0.5 \\t 0.2 \\t 0.1 \\n 1 \\t 0.4 \\t 0.4 \\n 1.5 \\t 0.6 \\t 0.9 \\n 2 \\t 0.8 \\t 1.6 \\n 2.5 \\t 1 \\t 2.5 \\n 3 \\t 1.2 \\t 3.6 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the relationship between voltage, current, and power in a circuit. Data points are plotted for voltages at 0.5V, 1V, 1.5V, 2V, 2.5V, and 3V. Correspondingly, the current values are 0.2A, 0.4A, 0.6A, 0.8A, 1A, and 1.2A, while the power values at these voltages are 0.1W, 0.4W, 0.9W, 1.6W, 2.5W, and 3.6W respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nvoltage, current, power = [0.5, 1.0, 1.5, 2.0, 2.5, 3.0], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], [0.1, 0.4, 0.9, 1.6, 2.5, 3.6]\n\nplt.figure(figsize=(10,7))\nplt.plot(voltage, current, color='g', linestyle='-', marker='o', label='Current')\nplt.plot(voltage, power, color='r', linestyle='-', marker='o', label='Power')\nplt.xlabel('Voltage (V)')\nplt.ylabel('Current (A) and Power (W)')\nplt.title('Voltage, Current, and Power Relationship in a Circuit')\nplt.legend(loc='upper left')\n\nfor a, b, c in zip(voltage, current, power):\n    plt.annotate(f'({a}, {b})', xy=(a, b), xytext=(a-0.15, b-0.1))\n    plt.annotate(f'({a}, {c})', xy=(a, c), xytext=(a+0.1, c+0.1))\nplt.xticks(voltage)\nplt.tight_layout()\nplt.savefig('line chart/png/31.png')\nplt.close()"
        },
        "QA": {
            "input": "What is the power when the current is 0.6A?",
            "output": "0.9W"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_476",
        "img": "./line_chart_num/png/line_num_476.png",
        "topic": "Transportation and Logistics",
        "title": " Comparison of Transportation Tickets Sold in the First Half of 2021",
        "csv": "Month \\t Airplane Tickets Sold \\t Train Tickets Sold \\t Bus Tickets Sold \\n January \\t 400 \\t 500 \\t 800 \\n February \\t 500 \\t 600 \\t 900 \\n March \\t 600 \\t 700 \\t 1000 \\n April \\t 700 \\t 800 \\t 1100 \\n May \\t 800 \\t 900 \\t 1200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart visualizes transportation ticket sales over the first five months of 2021. It tracks the number of airplane, train, and bus tickets sold each month. Starting in January, there were 400 airplane tickets, 500 train tickets, and 800 bus tickets sold. Each category shows a consistent increase in ticket sales over the months, peaking in May with 800 airplane tickets, 900 train tickets, and 1200 bus tickets sold."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nMonth = ['January', 'February', 'March', 'April', 'May']\nAirplane_Tickets_Sold = [400, 500, 600, 700, 800]\nTrain_Tickets_Sold = [500, 600, 700, 800, 900]\nBus_Tickets_Sold = [800, 900, 1000, 1100, 1200]\n\nplt.figure(figsize=(15, 8))\n\nplt.plot(Month, Airplane_Tickets_Sold, label=\"Airplane Tickets Sold\", color=\"b\", linestyle=\"-\", marker=\"o\")\nplt.plot(Month, Train_Tickets_Sold, label=\"Train Tickets Sold\", color=\"r\", linestyle=\"-\", marker=\"o\")\nplt.plot(Month, Bus_Tickets_Sold, label=\"Bus Tickets Sold\", color=\"g\", linestyle=\"-\", marker=\"o\")\n\nplt.title(\"Comparison of Transportation Tickets Sold in the First Half of 2021\")\nplt.xlabel(\"Month\")\nplt.ylabel(\"Tickets Sold\")\n\nplt.xticks(np.arange(len(Month)), Month)\nplt.legend(loc=\"upper left\")\n\nfor a, b, c in zip(Month, Airplane_Tickets_Sold, Train_Tickets_Sold):\n    plt.text(a, b, b, ha='center', va='bottom', fontsize=10, color=\"b\")\n    plt.text(a, c, c, ha='center', va='bottom', fontsize=10, color=\"r\")\n\nfor a, b, c in zip(Month, Train_Tickets_Sold, Bus_Tickets_Sold):\n    plt.text(a, b, b, ha='center', va='bottom', fontsize=10, color=\"r\")\n    plt.text(a, c, c, ha='center', va='bottom', fontsize=10, color=\"g\")\n\nplt.tight_layout()\nplt.savefig(\"line chart/png/463.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How many more bus tickets were sold than airplane tickets in April?",
            "output": "400"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_153",
        "img": "./line_chart_num/png/line_num_153.png",
        "topic": "Real Estate and Housing Market",
        "title": " Annual Housing Prices in a Major US City, 2017-2020",
        "csv": "Year \\t Average Home Price(thousand dollars) \\t Average Condo Price(thousand dollars) \\t Average Apartment Price(thousand dollars) \\n 2017 \\t 200 \\t 180 \\t 150 \\n 2018 \\t 220 \\t 190 \\t 160 \\n 2019 \\t 240 \\t 210 \\t 170 \\n 2020 \\t 260 \\t 230 \\t 180 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the annual housing prices in a major US city from 2017 to 2020, with three categories delineated: average home, condo, and apartment prices in thousand dollars. In 2017, the average home price was $200k, condo $180k, and apartment $150k. There is a year-over-year increase with home prices rising to $260k, condos to $230k, and apartments to $180k by 2020."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nyear = [2017,2018,2019,2020]\nhome_price = [200,220,240,260]\ncondo_price = [180,190,210,230]\napartment_price = [150,160,170,180]\n\nplt.figure(figsize=(9,7))\nax = plt.subplot()\nplt.plot(year, home_price, label='Home Price', marker='o', color='b')\nplt.plot(year, condo_price, label='Condo Price', marker='o', color='r')\nplt.plot(year, apartment_price, label='Apartment Price', marker='o', color='g')\n\nfor x, y, v in zip(year, home_price, home_price):\n    ax.annotate(v, xy=(x, y), xytext=(-10, 10),textcoords='offset points', size=12)\nfor x, y, v in zip(year, condo_price, condo_price):\n    ax.annotate(v, xy=(x, y), xytext=(-10, 10),textcoords='offset points', size=12)\nfor x, y, v in zip(year, apartment_price, apartment_price):\n    ax.annotate(v, xy=(x, y), xytext=(-10, 10),textcoords='offset points', size=12)\n\nplt.title('Annual Housing Prices in a Major US City, 2017-2020', fontsize=14)\nplt.xlabel('Year', fontsize=14)\nplt.ylabel('Average Price (thousand dollars)', fontsize=14)\nplt.xticks(year, rotation='vertical')\nplt.grid(True, linestyle='-', linewidth=1, color='#999999')\nplt.legend(loc=2, borderaxespad=0.)\nplt.tight_layout()\nplt.savefig('line chart/png/480.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year did the average apartment price see the smallest year-over-year increase?",
            "output": "2020"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_176",
        "img": "./line_chart_num/png/line_num_176.png",
        "topic": "Law and Legal Affairs",
        "title": " Lawmaking activity in the United States from 2001 to 2006",
        "csv": "Year \\t Number of Laws Passed \\t Number of Laws Rejected \\n 2001 \\t 500 \\t 50 \\n 2002 \\t 450 \\t 75 \\n 2003 \\t 475 \\t 65 \\n 2004 \\t 525 \\t 55 \\n 2005 \\t 480 \\t 60 \\n 2006 \\t 450 \\t 75 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the lawmaking activity in the United States from 2001 to 2006, tracking the number of laws passed and rejected each year. In 2001, 500 laws were passed and 50 rejected, while 2002 saw a decline with 450 laws passed and an increase to 75 rejected. The trend fluctuated, with 475 laws passed and 65 rejected in 2003, increasing to 525 passed and 55 rejected in 2004, then slightly dropping to 480 passed and 60 rejected in 2005, and returning to 450 passed and 75 rejected in 2006."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(12, 6))\n\nax = plt.subplot()\n\nax.plot([2001, 2002, 2003, 2004, 2005, 2006], [500, 450, 475, 525, 480, 450], label='Number of Laws Passed')\nax.plot([2001, 2002, 2003, 2004, 2005, 2006], [50, 75, 65, 55, 60, 75], label='Number of Laws Rejected')\n\nax.annotate('500', xy=(2001, 500))\nax.annotate('50', xy=(2001, 50))\nax.annotate('450', xy=(2002, 450))\nax.annotate('75', xy=(2002, 75))\nax.annotate('475', xy=(2003, 475))\nax.annotate('65', xy=(2003, 65))\nax.annotate('525', xy=(2004, 525))\nax.annotate('55', xy=(2004, 55))\nax.annotate('480', xy=(2005, 480))\nax.annotate('60', xy=(2005, 60))\nax.annotate('450', xy=(2006, 450))\nax.annotate('75', xy=(2006, 75))\n\nax.legend(loc='upper left')\n\nax.set_title('Lawmaking activity in the United States from 2001 to 2006')\nax.set_xlabel('Year')\nax.set_ylabel('Laws')\n\nax.set_xticks([2001, 2002, 2003, 2004, 2005, 2006])\n\nax.grid(True, ls = '--', color='0.75')\n\nplt.tight_layout()\n\nplt.savefig('line chart/png/404.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year was the difference between the number of laws passed and rejected the greatest?",
            "output": "2004"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_43",
        "img": "./line_chart_num/png/line_num_43.png",
        "topic": "Manufacturing and Production",
        "title": " Monthly production of four products in 2021",
        "csv": "Month \\t Production A(thousand units) \\t Production B(thousand units) \\t Production C(thousand units) \\t Production D(thousand units) \\n Jan \\t 200 \\t 250 \\t 150 \\t 100 \\n Feb \\t 180 \\t 300 \\t 170 \\t 90 \\n Mar \\t 220 \\t 200 \\t 180 \\t 110 \\n Apr \\t 240 \\t 220 \\t 190 \\t 120 \\n May \\t 260 \\t 250 \\t 200 \\t 130 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart depicts monthly production figures for four products (A, B, C, and D) in thousands of units during the first five months of 2021. In January, production of A was 200 thousand units, B was 250, C was 150, and D was 100. February saw a production increase for B to 300 thousand units but a decrease for A and D. By May, production for A increased to 260, B to 250, C to 200, and D to 130 thousand units. The chart displays the trends and changes in production levels for each product over the given timeframe.\n"
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as tck\n\nmonth_label = ['Jan', 'Feb', 'Mar', 'Apr', 'May']\nproductionA = [200,180,220,240,260]\nproductionB = [250,300,200,220,250]\nproductionC = [150,170,180,190,200]\nproductionD = [100,90,110,120,130]\n\n# Create a figure\nfig = plt.figure(figsize=(8,6))\n\n# Add an axe\nax = fig.add_subplot(1,1,1)\n\n# Plot line chart\nax.plot(month_label, productionA, label='Production A', marker='o', color='blue')\nax.plot(month_label, productionB, label='Production B', marker='s', color='red')\nax.plot(month_label, productionC, label='Production C', marker='^', color='green')\nax.plot(month_label, productionD, label='Production D', marker='*', color='black')\n\n# Set xticks\nax.xaxis.set_major_locator(tck.FixedLocator(range(0, len(month_label))))\nax.xaxis.set_major_formatter(tck.FixedFormatter(month_label))\n\n# Set title\nax.set_title(\"Monthly production of four products in 2021\")\n\n# Label each data point\nfor i in range(len(month_label)):\n    ax.annotate(productionA[i], xy=(i, productionA[i]), rotation=45)\n    ax.annotate(productionB[i], xy=(i, productionB[i]), rotation=45)\n    ax.annotate(productionC[i], xy=(i, productionC[i]), rotation=45)\n    ax.annotate(productionD[i], xy=(i, productionD[i]), rotation=45)\n\n# Set legend\nax.legend(loc='best', ncol=2, fontsize='large')\n\n# adjust figure\nfig.tight_layout()\n\n# save figure\nplt.savefig('line chart/png/481.png')\n\n# clear figure\nplt.clf()"
        },
        "QA": {
            "input": "How many thousand units more did Product B produce than Product D in February?",
            "output": "210 thousand units"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_469",
        "img": "./line_chart_num/png/line_num_469.png",
        "topic": "Energy and Utilities",
        "title": " Comparative Energy Output of Wind, Solar, and Hydro Sources in 2021",
        "csv": "Month \\t Wind Energy (MW) \\t Solar Energy (MW) \\t Hydro Energy (MW) \\n January \\t 1000 \\t 600 \\t 400 \\n February \\t 1200 \\t 700 \\t 500 \\n March \\t 1500 \\t 800 \\t 450 \\n April \\t 1300 \\t 650 \\t 600 \\n May \\t 1100 \\t 750 \\t 400 \\n June \\t 1400 \\t 850 \\t 550 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart represents the monthly energy output from wind, solar, and hydro sources in the first half of 2021. January's outputs were 1000 MW for wind, 600 MW for solar, and 400 MW for hydro energy. February saw an increase across all types, with wind at 1200 MW, solar at 700 MW, and hydro at 500 MW. In March, wind energy peaked at 1500 MW, solar at 800 MW, and hydro slightly decreased to 450 MW. April's figures were 1300 MW for wind, 650 MW for solar, and 600 MW for hydro. In May, wind energy output decreased to 1100 MW, solar increased to 750 MW, and hydro dropped to 400 MW. Finally, June saw wind energy at 1400 MW, solar at its highest at 850 MW, and hydro at 550 MW."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nmonth = ['January', 'February', 'March', 'April', 'May', 'June']\nwind_energy = [1000,1200,1500,1300,1100,1400]\nsolar_energy = [600,700,800,650,750,850]\nhydro_energy = [400,500,450,600,400,550]\n\nfig, ax = plt.subplots(figsize=(10,5))\nax.plot(month, wind_energy, label='Wind Energy (MW)', color='blue', marker='o')\nax.plot(month, solar_energy, label='Solar Energy (MW)', color='red', marker='o')\nax.plot(month, hydro_energy, label='Hydro Energy (MW)', color='green', marker='o')\n\nfor x, y in zip(month, wind_energy):\n    label = \"{:.0f}\".format(y)\n    ax.annotate(label, # this is the text\n                 (x,y), # this is the point to label\n                 textcoords=\"offset points\", # how to position the text\n                 xytext=(0,10), # distance from text to points (x,y)\n                 ha='center') # horizontal alignment can be left, right or center\n\nfor x, y in zip(month, solar_energy):\n    label = \"{:.0f}\".format(y)\n    ax.annotate(label, # this is the text\n                 (x,y), # this is the point to label\n                 textcoords=\"offset points\", # how to position the text\n                 xytext=(0,10), # distance from text to points (x,y)\n                 ha='center') # horizontal alignment can be left, right or center\n\nfor x, y in zip(month, hydro_energy):\n    label = \"{:.0f}\".format(y)\n    ax.annotate(label, # this is the text\n                 (x,y), # this is the point to label\n                 textcoords=\"offset points\", # how to position the text\n                 xytext=(0,10), # distance from text to points (x,y)\n                 ha='center') # horizontal alignment can be left, right or center\n\nax.set_title('Comparative Energy Output of Wind, Solar, and Hydro Sources in 2021')\nax.set_xlabel('Month')\nax.set_ylabel('Energy (MW)')\n\nplt.xticks(month)\nax.grid(linestyle=':')\nax.legend(loc='lower left')\nplt.tight_layout()\nplt.savefig('line chart/png/95.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the total energy output from wind, solar, and hydro sources in March?",
            "output": "2750 MW"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_474",
        "img": "./line_chart_num/png/line_num_474.png",
        "topic": "Manufacturing and Production",
        "title": " Production of four items in a manufacturing plant",
        "csv": "Year \\t Production A(units) \\t Production B(units) \\t Production C(units) \\t Production D(units) \\n 2001 \\t 100 \\t 200 \\t 300 \\t 400 \\n 2002 \\t 120 \\t 220 \\t 320 \\t 420 \\n 2003 \\t 110 \\t 210 \\t 310 \\t 410 \\n 2004 \\t 130 \\t 230 \\t 330 \\t 430 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the yearly production units of four items\u2014A, B, C, and D\u2014in a manufacturing plant from 2001 to 2004. In 2001, item A's production was 100 units, B was 200 units, C was 300 units, and D was 400 units. Production numbers generally increased by 2004, with item A reaching 130 units, B 230 units, C 330 units, and D 430 units. Each year shows a consistent increase across all items, except for a slight decrease in 2003 before rising again in 2004."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure and subplot, and set figsize\nfig = plt.figure(figsize=(10,6))\nax1 = fig.add_subplot(1,1,1)\n\n# Create data\ndata = np.array([[2001, 100, 200, 300, 400],\n                 [2002, 120, 220, 320, 420],\n                 [2003, 110, 210, 310, 410],\n                 [2004, 130, 230, 330, 430]])\n\n# Plot data\nax1.plot(data[:,0], data[:,1], 'r-', label = 'Production A(units)')\nax1.plot(data[:,0], data[:,2], 'b-', label = 'Production B(units)')\nax1.plot(data[:,0], data[:,3], 'g-', label = 'Production C(units)')\nax1.plot(data[:,0], data[:,4], 'y-', label = 'Production D(units)')\n\n# Add annotation\nfor i in range(len(data[:,0])):\n    ax1.annotate(str(data[i,1]), xy=(data[i,0], data[i,1]), xytext=(data[i,0], data[i,1]))\n    ax1.annotate(str(data[i,2]), xy=(data[i,0], data[i,2]), xytext=(data[i,0], data[i,2]))\n    ax1.annotate(str(data[i,3]), xy=(data[i,0], data[i,3]), xytext=(data[i,0], data[i,3]))\n    ax1.annotate(str(data[i,4]), xy=(data[i,0], data[i,4]), xytext=(data[i,0], data[i,4]))\n\n# Draw grid and legend\nax1.grid(True)\nax1.legend()\n\n# Set xticks\nplt.xticks(data[:,0])\n\n# Set title\nplt.title('Production of four items in a manufacturing plant')\n\n# Adjust image\nplt.tight_layout()\n\n# Save image\nplt.savefig('line chart/png/79.png')\n\n# Clear current image\nplt.clf()"
        },
        "QA": {
            "input": "What is the total increase in production units for Product D from 2001 to 2004?",
            "output": "30"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_413",
        "img": "./line_chart_num/png/line_num_413.png",
        "topic": "Government and Public Policy",
        "title": " Vaccination rate of selected countries in 2021",
        "csv": "Country \\t Vaccines administered (million doses) \\t Population (million people) \\n USA \\t 100 \\t 350 \\n Canada \\t 30 \\t 40 \\n Mexico \\t 20 \\t 130 \\n France \\t 80 \\t 70 \\n Germany \\t 90 \\t 90 \\n Brazil \\t 50 \\t 220 \\n India \\t 60 \\t 1350 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates vaccination rates in selected countries during 2021, depicting the total vaccines administered (in millions of doses) against the population size (in millions of people). The USA administered 100 million doses to a population of 350 million, Canada 30 million doses to 40 million people, and Mexico 20 million doses for 130 million people. France distributed 80 million doses among 70 million citizens, Germany 90 million doses to 90 million people, while Brazil provided 50 million doses for a population of 220 million. India administered 60 million doses to its large population of 1350 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ncountry = ['USA', 'Canada', 'Mexico', 'France', 'Germany', 'Brazil', 'India']\nvaccines_administered = [100, 30, 20, 80, 90, 50, 60]\npopulation = [350, 40, 130, 70, 90, 220, 1350]\n\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\nax.plot(country, vaccines_administered, 'b-o', label=\"Vaccines administered (million doses)\")\nax.plot(country, population, 'r-o', label=\"Population (million people)\")\nax.set_title('Vaccination rate of selected countries in 2021')\nax.set_xticks(country)\nax.set_ylabel('Number of doses/people')\nax.legend(loc='upper right')\n\nfor x, y1, y2 in zip(country, vaccines_administered, population):\n    ax.annotate('{:0.0f}\\n{:0.0f}'.format(y1, y2), (x, y1), xytext=(0, 4), textcoords='offset points', rotation=45)\n\nplt.tight_layout()\nplt.savefig('line chart/png/2.png', dpi=300)\nplt.clf()"
        },
        "QA": {
            "input": "How many vaccine doses were administered in Mexico?",
            "output": "20 million doses"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_441",
        "img": "./line_chart_num/png/line_num_441.png",
        "topic": "Social Media and the Web",
        "title": " Increase of Online User Numbers from 2010 to 2016",
        "csv": "Year \\t Number of Website Users(million) \\t Social Media Users(million) \\t Online Shopping Users(million) \\n 2010 \\t 1000 \\t 500 \\t 200 \\n 2011 \\t 1300 \\t 700 \\t 400 \\n 2012 \\t 1500 \\t 900 \\t 700 \\n 2013 \\t 1800 \\t 1100 \\t 1000 \\n 2014 \\t 2000 \\t 1300 \\t 1500 \\n 2015 \\t 2200 \\t 1500 \\t 1800 \\n 2016 \\t 2500 \\t 1900 \\t 2000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the growth in the number of website users, social media users, and online shopping users from 2010 to 2016, articulated in millions. The data indicates a consistent upward trend across all categories. In 2010, there were 1000 million website users, contrasted with 500 million social media users, and 200 million online shopping users. By 2016, website users had risen to 2500 million, social media users to 1900 million, and online shopping users to 2000 million. There's a clear increase in user numbers for each category over the reported years."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(10,7))\nax = fig.add_subplot(111)\nax.plot(['2010','2011','2012','2013','2014','2015','2016'],[1000,1300,1500,1800,2000,2200,2500],'b-',label='Website Users(million)')\nax.plot(['2010','2011','2012','2013','2014','2015','2016'],[500,700,900,1100,1300,1500,1900],'r-',label='Social Media Users(million)')\nax.plot(['2010','2011','2012','2013','2014','2015','2016'],[200,400,700,1000,1500,1800,2000],'g-',label='Online Shopping Users(million)')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Users (million)')\nax.set_title('Increase of Online User Numbers from 2010 to 2016')\nax.legend(loc='upper left',fontsize='medium')\nax.grid(True)\nfor x,y in zip(['2010','2011','2012','2013','2014','2015','2016'],[1000,1300,1500,1800,2000,2200,2500]):\n    ax.annotate(y,xy=(x,y),xytext=(-8,5),textcoords='offset points')\nfor x,y in zip(['2010','2011','2012','2013','2014','2015','2016'],[500,700,900,1100,1300,1500,1900]):\n    ax.annotate(y,xy=(x,y),xytext=(-8,5),textcoords='offset points')\nfor x,y in zip(['2010','2011','2012','2013','2014','2015','2016'],[200,400,700,1000,1500,1800,2000]):\n    ax.annotate(y,xy=(x,y),xytext=(-8,5),textcoords='offset points')\nax.set_xticks(['2010','2011','2012','2013','2014','2015','2016'])\nplt.tight_layout()\nplt.savefig('line chart/png/598.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many million more Online Shopping Users were there in 2016 compared to 2010?",
            "output": "1800 million"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_94",
        "img": "./line_chart_num/png/line_num_94.png",
        "topic": "Law and Legal Affairs",
        "title": " Number of legal cases in the US between 2018-2021",
        "csv": "Year \\t Traffic Violations(number) \\t Civil Suits(number) \\t Criminal Suits(number) \\n 2018 \\t 2000 \\t 500 \\t 800 \\n 2019 \\t 2500 \\t 600 \\t 900 \\n 2020 \\t 3000 \\t 700 \\t 1000 \\n 2021 \\t 3500 \\t 800 \\t 1100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart represents the number of legal cases in the US between 2018 and 2021. In 2018, there were 2000 traffic violations, 500 civil suits, and 800 criminal suits. The numbers steadily increase each year, with 2019 showing 2500 traffic violations, 600 civil suits, and 900 criminal suits. The trend continues with 3000 traffic violations, 700 civil suits, and 1000 criminal suits in 2020. In 2021, the numbers rise to 3500 traffic violations, 800 civil suits, and 1100 criminal suits."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data\nYear = np.array([2018,2019,2020,2021])\nTraffic_Violations = np.array([2000,2500,3000,3500])\nCivil_Suits = np.array([500,600,700,800])\nCriminal_Suits = np.array([800,900,1000,1100])\n\n# plot\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\nax.set_title('Number of legal cases in the US between 2018-2021')\nax.plot(Year, Traffic_Violations, label='Traffic Violations', marker='o')\nax.plot(Year, Civil_Suits, label='Civil Suits', marker='o')\nax.plot(Year, Criminal_Suits, label='Criminal Suits', marker='o')\nax.legend(loc='upper left', bbox_to_anchor=(1.0, 1.0))\nax.set_xlabel('Year')\nax.set_ylabel('Number of Cases')\nax.grid(axis='y', linestyle='--')\n\nfor x, y in zip(Year, Traffic_Violations):\n    ax.annotate(str(y), xy=(x, y), xycoords='data', xytext=(-20, 10), \n                textcoords='offset points', fontsize=10,\n                arrowprops=dict(arrowstyle=\"->\"))\n\nfor x, y in zip(Year, Civil_Suits):\n    ax.annotate(str(y), xy=(x, y), xycoords='data', xytext=(-20, 10), \n                textcoords='offset points', fontsize=10,\n                arrowprops=dict(arrowstyle=\"->\"))\n\nfor x, y in zip(Year, Criminal_Suits):\n    ax.annotate(str(y), xy=(x, y), xycoords='data', xytext=(-20, 10), \n                textcoords='offset points', fontsize=10,\n                arrowprops=dict(arrowstyle=\"->\"))\n\nax.set_xticks(Year)\nax.xaxis.set_tick_params(rotation=45)\nplt.tight_layout()\nplt.savefig('line chart/png/613.png')\nplt.cla()"
        },
        "QA": {
            "input": "How many traffic violations occurred in 2019?",
            "output": "2500"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_254",
        "img": "./line_chart_num/png/line_num_254.png",
        "topic": "Agriculture and Food Production",
        "title": " Yield and cost of production of maize in the USA from 2001 to 2006",
        "csv": "Year \\t Yield(tonnes) \\t Cost of production(dollars) \\n 2001 \\t 1000 \\t 100 \\n 2002 \\t 1200 \\t 125 \\n 2003 \\t 1100 \\t 150 \\n 2004 \\t 1300 \\t 175 \\n 2005 \\t 1400 \\t 200 \\n 2006 \\t 1500 \\t 225 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the trend of maize yield and production cost in the USA from 2001 to 2006. In 2001, the yield was 1000 tonnes at a production cost of $100. By 2002, yield increased to 1200 tonnes with a cost of $125. In 2003, a slight decrease to 1100 tonnes occurred despite the cost rising to $150. The upward trend resumed in 2004 with 1300 tonnes at $175, continuing to 1400 tonnes for $200 in 2005, and peaking at 1500 tonnes with a production cost of $225 in 2006."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nx = [2001, 2002, 2003, 2004, 2005, 2006]\ny1 = [1000, 1200, 1100, 1300, 1400, 1500]\ny2 = [100, 125, 150, 175, 200, 225]\nplt.figure(figsize=(10, 5))\nplt.plot(x, y1, label=\"Yield (tonnes)\")\nplt.plot(x, y2, label=\"Cost of production (dollars)\")\nplt.title('Yield and cost of production of maize in the USA from 2001 to 2006')\nplt.xlabel('Year')\nplt.ylabel('Yield and Cost')\nplt.legend(loc ='upper right')\nplt.xticks(x)\nfor a,b,c in zip(x,y1,y2):\n    plt.annotate('Yield:{} Cost:{}'.format(b,c),xy=(a,b))\nplt.grid()\nplt.tight_layout()\nplt.savefig('line chart/png/61.png')\nplt.clf()"
        },
        "QA": {
            "input": "What was the yield of maize in 2005?",
            "output": "1400 tonnes"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_257",
        "img": "./line_chart_num/png/line_num_257.png",
        "topic": "Science and Engineering",
        "title": " Average temperature and humidity in Tokyo, Japan in 2021",
        "csv": "Month \\t Temperature(degrees Celsius) \\t Humidity(percentage) \\n January \\t 25 \\t 60 \\n February \\t 27 \\t 65 \\n March \\t 30 \\t 70 \\n April \\t 32 \\t 75 \\n May \\t 34 \\t 80 \\n June \\t 35 \\t 85 \\n July \\t 37 \\t 88 \\n August \\t 38 \\t 90 \\n September \\t 37 \\t 87 \\n October \\t 36 \\t 85 \\n November \\t 31 \\t 75 \\n December \\t 28 \\t 68 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart plots the average temperature and humidity in Tokyo, Japan for each month of 2021. January starts with a temperature of 25\u00b0C and 60% humidity. A gradual increase in both temperature and humidity is observed, with February at 27\u00b0C and 65% humidity, leading up to August, which peaks at 38\u00b0C and 90% humidity. The trend reverses towards the end of the year, with December showing a decrease to 28\u00b0C and 68% humidity."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 6))\nax = plt.subplot()\n\nmonth = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'] \ntemp = [25, 27, 30, 32, 34, 35, 37, 38, 37, 36, 31, 28]\nhumidity = [60, 65, 70, 75, 80, 85, 88, 90, 87, 85, 75, 68]\n\nax.plot(month, temp, color='b', label='Temperature')\nax.plot(month, humidity, color='r', label='Humidity')\n\nax.set_title('Average temperature and humidity in Tokyo, Japan in 2021')\nax.set_xlabel('Month')\nax.set_ylabel('Average temperature/humidity')\n\nax.legend()\n\nfor a,b in zip(month, temp):\n    ax.annotate(str(b), xy=(a, b), xytext=(0,5), textcoords='offset points')\nfor c,d in zip(month, humidity):\n    ax.annotate(str(d), xy=(c, d), xytext=(0,5), textcoords='offset points')\n\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.savefig('line chart/png/45.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the temperature in July compared to January?",
            "output": "12 degrees Celsius"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_240",
        "img": "./line_chart_num/png/line_num_240.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Growth in charity donations and volunteers for non-profit organizations",
        "csv": "Year \\t Donations(million dollars) \\t Volunteers \\n 2001 \\t 200 \\t 500 \\n 2002 \\t 150 \\t 400 \\n 2003 \\t 180 \\t 450 \\n 2004 \\t 220 \\t 500 \\n 2005 \\t 190 \\t 420 \\n 2006 \\t 210 \\t 480 \\n 2007 \\t 220 \\t 510 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the annual growth in charity donations in million dollars alongside the number of volunteers for non-profit organizations from 2001 to 2007. In 2001, donations were at 200 million with 500 volunteers, decreasing in 2002 to 150 million and 400 volunteers. A rise is noted in 2003 with 180 million and 450 volunteers, followed by an increase to 220 million with 500 volunteers in 2004. Donations dipped to 190 million in 2005 with 420 volunteers. The years 2006 and 2007 both show a rise, with donations at 210 and 220 million, and volunteers numbering 480 and 510, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(12,6))\nax = fig.add_subplot()\n\n# Set data\nyear = np.array([2001,2002,2003,2004,2005,2006,2007])\ndonations = np.array([200,150,180,220,190,210,220])\nvolunteers = np.array([500,400,450,500,420,480,510])\n\n# Plot line chart\nplt.plot(year, donations, color='b', linestyle='-', marker='o',label='Donations (million dollars)')\nplt.plot(year, volunteers, color='r', linestyle='-', marker='o',label='Volunteers')\n\n# Set title, legend, x/y ticks, labels\nplt.title('Growth in charity donations and volunteers for non-profit organizations', fontsize=14)\nplt.legend(loc='upper right', fontsize=11)\nplt.xticks(year, fontsize=11, rotation=90)\nplt.yticks(fontsize=11)\nplt.xlabel('Year', fontsize=12)\nplt.ylabel('Amount', fontsize=12)\n\n# Annotate value of each data point\nfor x, y1, y2 in zip(year, donations, volunteers):\n    plt.annotate(f'{y1}m', xy=(x, y1), xytext=(x-0.2, y1+2), fontsize=10)\n    plt.annotate(f'{y2}', xy=(x, y2), xytext=(x+0.2, y2+2), fontsize=10)\n\n# Set background grids\nplt.grid(linestyle = '-.')\n\n# Adjust image by tight_layout()\nplt.tight_layout()\n\n# Save and close image\nplt.savefig('line chart/png/203.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many volunteers were there in the year 2004?",
            "output": "500"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_262",
        "img": "./line_chart_num/png/line_num_262.png",
        "topic": "Energy and Utilities",
        "title": " Renewable Energy Growth in the US from 2016 to 2020",
        "csv": "Year \\t Solar Energy(GW) \\t Wind Energy(GW) \\t Hydro Energy(GW) \\n 2016 \\t 80 \\t 100 \\t 150 \\n 2017 \\t 90 \\t 120 \\t 170 \\n 2018 \\t 100 \\t 140 \\t 190 \\n 2019 \\t 130 \\t 150 \\t 210 \\n 2020 \\t 180 \\t 200 \\t 250 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the growth of renewable energy in the US from 2016 to 2020. It tracks the progression in gigawatts (GW) for solar energy, wind energy, and hydro energy over five years. In 2016, solar energy started at 80 GW, wind energy at 100 GW, and hydro energy at 150 GW. By 2020, the figures had risen to 180 GW for solar, 200 GW for wind, and 250 GW for hydro. Each type of renewable energy shows a consistent increase year over year in the period represented."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set figure size & title\nplt.figure(figsize=(14,7))\nplt.title('Renewable Energy Growth in the US from 2016 to 2020')\n\n# Plot the data\nx = np.arange(2016, 2021)\nplt.plot(x, [80, 90, 100, 130, 180], label='Solar Energy(GW)')\nplt.plot(x, [100, 120, 140, 150, 200], label='Wind Energy(GW)')\nplt.plot(x, [150, 170, 190, 210, 250], label='Hydro Energy(GW)')\n\n# Set x-axis\nplt.xticks(x, x)\n\n# Add legend\nplt.legend(loc='best', fontsize=14)\n\n# Annotate the data\nfor a, b, c, d in zip(x, [80, 90, 100, 130, 180], [100, 120, 140, 150, 200], [150, 170, 190, 210, 250]):\n    plt.text(a, b+2, '%s' % b, ha='center', va='bottom', fontsize=12)\n    plt.text(a, c+2, '%s' % c, ha='center', va='bottom', fontsize=12)\n    plt.text(a, d+2, '%s' % d, ha='center', va='bottom', fontsize=12)\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('line chart/png/258.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much did the solar energy capacity increase from 2016 to 2020?",
            "output": "100 GW"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_472",
        "img": "./line_chart_num/png/line_num_472.png",
        "topic": "Human Resources and Employee Management",
        "title": " Overtime hours and salaries of employees in different age groups",
        "csv": "Age \\t Salary(in dollars) \\t Overtime Hours \\n 20-30 \\t 40000 \\t 6 \\n 30-40 \\t 45000 \\t 7 \\n 40-50 \\t 50000 \\t 9 \\n 50-60 \\t 60000 \\t 10 \\n 60-70 \\t 40000 \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart portrays the relationship between age groups, their corresponding average salaries in dollars, and the number of overtime hours they work. Individuals aged between 20-30 earn $40,000 and work 6 hours of overtime. Those in the 30-40 age bracket earn $45,000 with 7 overtime hours. The 40-50 age group sees an increase to $50,000 in salary and 9 hours of overtime. Employees aged 50-60 have the highest salary at $60,000 and work 10 overtime hours. Finally, the 60-70 age group's salary drops to $40,000, with 5 hours of overtime."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nplt.figure(figsize=(10,6)) \nplt.plot(['20-30', '30-40', '40-50','50-60', '60-70'], [40000,45000,50000,60000,40000], color='red', marker='o', linestyle='solid') \nplt.plot(['20-30', '30-40', '40-50','50-60', '60-70'], [6,7,9,10,5], color='green', marker='o', linestyle='solid') \nplt.xlabel('Age') \nplt.ylabel('Salary & Overtime Hours') \nplt.title('Overtime hours and salaries of employees in different age groups') \nplt.xticks(['20-30', '30-40', '40-50','50-60', '60-70'], rotation=45) \nplt.legend(['Salary (in dollars)', 'Overtime Hours'], loc='upper right', fontsize='large') \nplt.annotate('Salary ($40000)', xy=('20-30', 40000), xytext=('20-30', 42000), fontsize='large', arrowprops={'arrowstyle': '->'})\nplt.annotate('Overtime Hours (6)', xy=('20-30', 6), xytext=('20-30', 8), fontsize='large', arrowprops={'arrowstyle': '->'})\nplt.annotate('Salary ($45000)', xy=('30-40', 45000), xytext=('30-40', 47000), fontsize='large', arrowprops={'arrowstyle': '->'})\nplt.annotate('Overtime Hours (7)', xy=('30-40', 7), xytext=('30-40', 9), fontsize='large', arrowprops={'arrowstyle': '->'})\nplt.annotate('Salary ($50000)', xy=('40-50', 50000), xytext=('40-50', 52000), fontsize='large', arrowprops={'arrowstyle': '->'})\nplt.annotate('Overtime Hours (9)', xy=('40-50', 9), xytext=('40-50', 11), fontsize='large', arrowprops={'arrowstyle': '->'})\nplt.annotate('Salary ($60000)', xy=('50-60', 60000), xytext=('50-60', 62000), fontsize='large', arrowprops={'arrowstyle': '->'})\nplt.annotate('Overtime Hours (10)', xy=('50-60', 10), xytext=('50-60', 12), fontsize='large', arrowprops={'arrowstyle': '->'})\nplt.annotate('Salary ($40000)', xy=('60-70', 40000), xytext=('60-70', 42000), fontsize='large', arrowprops={'arrowstyle': '->'})\nplt.annotate('Overtime Hours (5)', xy=('60-70', 5), xytext=('60-70', 7), fontsize='large', arrowprops={'arrowstyle': '->'})\nplt.grid(True, color='grey', linestyle='-.', linewidth=0.5)\nplt.tight_layout()\nplt.savefig('line chart/png/46.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the salary difference between employees in the age groups 40-50 and 50-60?",
            "output": "$10000"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_60",
        "img": "./line_chart_num/png/line_num_60.png",
        "topic": "Law and Legal Affairs",
        "title": " Increase in legal cases and legal profession in the United States from 2000 to 2004",
        "csv": "Year \\t Number of Cases \\t Number of Judges \\t Number of Lawyers \\n 2000 \\t 1000 \\t 20 \\t 200 \\n 2001 \\t 1200 \\t 25 \\t 220 \\n 2002 \\t 1500 \\t 30 \\t 250 \\n 2003 \\t 1300 \\t 35 \\t 280 \\n 2004 \\t 1800 \\t 40 \\t 300 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the increase in legal cases and the growth of the legal profession in the United States from 2000 to 2004. For each year, the following data is plotted: the number of cases starts at 1000 in 2000 and rises to 1800 by 2004. The number of judges and lawyers also increases, with judges growing from 20 to 40 and lawyers from 200 to 300 in the same timeframe."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nfig = plt.figure(figsize=(9, 6))\nax = fig.add_subplot()\n\n# Set data\nx = np.arange(2000, 2005)\ny1 = [1000, 1200, 1500, 1300, 1800]\ny2 = [20, 25, 30, 35, 40]\ny3 = [200, 220, 250, 280, 300]\n\n# Draw line chart\nax.plot(x, y1, label = 'Number of Cases', linewidth = 2)\nax.plot(x, y2, label = 'Number of Judges', linewidth = 2)\nax.plot(x, y3, label = 'Number of Lawyers', linewidth = 2)\n\n# Set labels\nax.set_title('Increase in legal cases and legal profession in the United States from 2000 to 2004')\nax.set_xlabel('Year')\nax.set_ylabel('Number')\n\n# Set xticks\nxticks_labels = [str(i) for i in x]\nax.set_xticks(x)\nax.set_xticklabels(xticks_labels)\n\n# Set grids\nax.grid(axis='y', linestyle='-.', alpha=0.4, linewidth=1)\n\n# Set legend\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=3)\n\n# Annotate data points\nfor a,b in zip(x,y1):\n    ax.annotate(str(b),xy=(a,b))\nfor c,d in zip(x,y2):\n    ax.annotate(str(d),xy=(c,d))\nfor e,f in zip(x,y3):\n    ax.annotate(str(f),xy=(e,f))\n\n# Resize the figure\nfig.tight_layout()\n\n# Save the figure\nplt.savefig('line chart/png/145.png')\n\n# Clear current image\nplt.clf()"
        },
        "QA": {
            "input": "How many more cases were there in 2004 than in 2000?",
            "output": "800"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_122",
        "img": "./line_chart_num/png/line_num_122.png",
        "topic": "Social Media and the Web",
        "title": " Social Media Users Growth in 2021",
        "csv": "Month \\t Facebook Users (million) \\t Twitter Users (million) \\t Instagram Users (million) \\n January 2021 \\t 2.80 \\t 330 \\t 1000 \\n February 2021 \\t 2.83 \\t 335 \\t 1020 \\n March 2021 \\t 2.86 \\t 340 \\t 1040 \\n April 2021 \\t 2.90 \\t 345 \\t 1060 \\n May 2021 \\t 2.93 \\t 350 \\t 1080 \\n June 2021 \\t 2.96 \\t 355 \\t 1100 \\n July 2021 \\t 2.99 \\t 360 \\t 1120 \\n August 2021 \\t 3.02 \\t 365 \\t 1140 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart is set to depict the growth of social media users across Facebook, Twitter, and Instagram over the months of January to August 2021. User numbers are presented in millions. In January, the user base is illustrated as 2.80 million for Facebook, 330 million for Twitter, and 1,000 million for Instagram. A steady growth is visible with Facebook reaching 3.02 million, Twitter at 365 million, and Instagram users growing to 1,140 million by August 2021."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [[2.80, 330, 1000], [2.83, 335, 1020], [2.86, 340, 1040], [2.90, 345, 1060], [2.93, 350, 1080], [2.96, 355, 1100], [2.99, 360, 1120], [3.02, 365, 1140]]\nmonths = ['January 2021', 'February 2021', 'March 2021', 'April 2021', 'May 2021', 'June 2021', 'July 2021', 'August 2021']\n\nfig = plt.figure(figsize=(12, 6))\nax = fig.add_subplot(1, 1, 1)\nax.plot(months, [x[0] for x in data], label='Facebook Users (million)', color='r', marker='o')\nax.plot(months, [x[1] for x in data], label='Twitter Users (million)', color='b', marker='o')\nax.plot(months, [x[2] for x in data], label='Instagram Users (million)', color='g', marker='o')\n\nax.set_title('Social Media Users Growth in 2021')\nax.set_xlabel('Month')\nax.set_ylabel('Users (million)')\nax.legend(loc='best')\nax.grid(linestyle='-.', linewidth=0.5)\nax.set_xticks(months)\nfor i, txt in enumerate(data):\n    ax.annotate(txt, (months[i], data[i][0]+1))\nplt.tight_layout()\nplt.savefig('line chart/png/325.png', dpi=300)\nplt.clf()"
        },
        "QA": {
            "input": "How many Instagram users were there in January 2021 (in millions)?",
            "output": "1000"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_101",
        "img": "./line_chart_num/png/line_num_101.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Donations to International Charities from 2001 to 2005",
        "csv": "Country \\t Number of Donors \\t Donation Amount(dollars) \\n US \\t 5000 \\t 20000 \\n UK \\t 7000 \\t 25000 \\n France \\t 3000 \\t 10000 \\n Canada \\t 8000 \\t 30000 \\n Germany \\t 4000 \\t 15000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the number of donors and the corresponding donation amounts (in dollars) from five countries to international charities between 2001 and 2005. The US had 5000 donors contributing $20000, the UK with 7000 donors giving $25000, and France saw 3000 donors providing $10000. Canada stands out with 8000 donors donating $30000, while Germany had 4000 donors contributing $15000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(15, 8))\n\n# Data\ncountries = ['US', 'UK', 'France', 'Canada', 'Germany']\ndonors = [5000, 7000, 3000, 8000, 4000]\ndonation_amount = [20000, 25000, 10000, 30000, 15000]\n\n# Create the plot\nax = fig.add_subplot(1, 1, 1)\nax.plot(countries, donors, label=\"Number of Donors\")\nax.plot(countries, donation_amount, label=\"Donation Amount(dollars)\")\n\n# Label values on the plot\nfor i, j in enumerate(donors):\n    ax.annotate(str(j), xy=(i, j + 500))\n\nfor i, j in enumerate(donation_amount):\n    ax.annotate(str(j), xy=(i, j - 1000))\n\n# Setting X and Y axis labels\nax.set_xlabel('Country')\nax.set_ylabel('Donations')\n\n# Setting plot title\nax.set_title('Donations to International Charities from 2001 to 2005')\n\n# Formatting the legend\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1),\n          fancybox=True, shadow=True, ncol=5)\n\n# Set the x ticks\nplt.xticks(np.arange(len(countries)), countries, rotation=45, ha='right')\n\n# Automatically adjust subplot parameters to give specified padding\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('line chart/png/114.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the donation amount from Germany?",
            "output": "15000"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_361",
        "img": "./line_chart_num/png/line_num_361.png",
        "topic": "Human Resources and Employee Management",
        "title": " Job Satisfaction and Work Hours of Employees aged 20-45",
        "csv": "Age Group \\t Employees(number) \\t Job Satisfaction(percentage) \\t Work Hours \\n 20-25 \\t 50 \\t 83 \\t 45 \\n 26-30 \\t 80 \\t 90 \\t 50 \\n 31-35 \\t 70 \\t 75 \\t 55 \\n 36-40 \\t 60 \\t 60 \\t 60 \\n 41-45 \\t 40 \\t 80 \\t 55 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the relationship between job satisfaction and work hours across different age groups, ranging from 20 to 45 years old. For the age group 20-25, there are 50 employees with an 83% job satisfaction rating and an average of 45 work hours per week. The 26-30 age group has 80 employees, enjoys a 90% satisfaction rate, and works 50 hours weekly. Employees aged 31-35 are 70 in number with a 75% satisfaction rate and 55 work hours. The 36-40 group has 60 employees, a 60% satisfaction rate, and 60 work hours, while the 41-45 group has 40 employees, an 80% satisfaction rate, and 55 work hours."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot()\n\nx = np.arange(5)\nage_group = np.array(['20-25', '26-30', '31-35', '36-40', '41-45'])\nemployees = np.array([50, 80, 70, 60, 40])\nsatisfaction = np.array([83, 90, 75, 60, 80])\nhours = np.array([45, 50, 55, 60, 55])\n\nax.plot(x, satisfaction, label='Job Satisfaction', color='green', marker='.', linestyle='--')\nax.plot(x, hours, label='Work Hours', color='orange', marker='.', linestyle='--')\n\nax.set_title('Job Satisfaction and Work Hours of Employees aged 20-45')\nax.set_xticks(x)\nax.set_xticklabels(age_group)\nax.set_ylabel('percentage/hours')\nax.legend(loc='upper right')\n\nfor i, (satisfaction, hours) in enumerate(zip(satisfaction, hours)):\n    ax.annotate(str(satisfaction)+'%'+ '\\n' + str(hours) + 'h', xy=(x[i], satisfaction+2), \n                ha='center', va='bottom', fontsize=10)\n    \nplt.tight_layout()\nplt.savefig('line chart/png/588.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which age group has the highest number of employees?",
            "output": "26-30"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_276",
        "img": "./line_chart_num/png/line_num_276.png",
        "topic": "Tourism and Hospitality",
        "title": " Increase in Travel and Accommodation in the USA from 2001 to 2004",
        "csv": "Year \\t Hotels(thousand) \\t B&Bs(thousand) \\t Attractions \\t Tourists(million) \\n 2001 \\t 3 \\t 2 \\t 10 \\t 1 \\n 2002 \\t 4 \\t 2.5 \\t 11 \\t 1.2 \\n 2003 \\t 3.5 \\t 3 \\t 12 \\t 1.5 \\n 2004 \\t 4.5 \\t 3.5 \\t 13 \\t 1.8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the increase in travel and accommodation in the USA from 2001 to 2004. It tracks the progression of hotels, B&Bs (both in thousands), attractions, and tourists (in millions). In 2001, there were 3 thousand hotels, 2 thousand B&Bs, 10 attractions, and 1 million tourists. By 2004, hotels increased to 4.5 thousand, B&Bs to 3.5 thousand, attractions to 13, and tourists to 1.8 million. Each category shows a significant growth over the four-year period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# set data\nYear = [2001, 2002, 2003, 2004]\nHotels = [3, 4, 3.5, 4.5]\nBnBs = [2, 2.5, 3, 3.5]\nAttractions = [10, 11, 12, 13]\nTourists = [1, 1.2, 1.5, 1.8]\n\n# create figure\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\n\n# plot line chart\nax.plot(Year, Hotels, label=\"Hotels(thousand)\", color='blue')\nax.plot(Year, BnBs, label=\"B&Bs(thousand)\", color='green')\nax.plot(Year, Attractions, label=\"Attractions\", color='cyan')\nax.plot(Year, Tourists, label=\"Tourists(million)\", color='red')\n\n# set x ticks\nplt.xticks(Year)\n\n# annotate value of each data point\nfor i in range(len(Year)):\n    ax.annotate(int(Hotels[i]), (Year[i], Hotels[i]))\n    ax.annotate(int(BnBs[i]), (Year[i], BnBs[i]))\n    ax.annotate(int(Attractions[i]), (Year[i], Attractions[i]))\n    ax.annotate(int(Tourists[i]), (Year[i], Tourists[i]))\n\n# set title and legend\nax.set_title(\"Increase in Travel and Accommodation in the USA from 2001 to 2004\")\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)\n\n# make image more clear\nplt.tight_layout()\n\n# save image\nplt.savefig('line_276.png')\n\n# clear image\nplt.clf()"
        },
        "QA": {
            "input": "By how much did the number of tourists increase from 2001 to 2004?",
            "output": "0.8 million"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_14",
        "img": "./line_chart_num/png/line_num_14.png",
        "topic": "Social Media and the Web",
        "title": " Trend of Social Media Users in 2011-2016",
        "csv": "Year \\t Twitter Users(million) \\t Instagram Users(million) \\t Facebook Users(million) \\n 2011 \\t 10 \\t 3 \\t 500 \\n 2012 \\t 20 \\t 5 \\t 700 \\n 2013 \\t 40 \\t 10 \\t 900 \\n 2014 \\t 50 \\t 15 \\t 1100 \\n 2015 \\t 70 \\t 20 \\t 1300 \\n 2016 \\t 90 \\t 25 \\t 1500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the growth trends in user numbers for Twitter, Instagram, and Facebook over the years 2011 to 2016. Twitter's user base increased from 10 million in 2011 to 90 million in 2016. Instagram saw a rise from 3 million users to 25 million in the same period. Facebook, already at 500 million users in 2011, expanded to 1.5 billion by 2016. The visual trend lines would show a consistent growth in user numbers for each social media platform through these years."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \n\nyear = [2011,2012,2013,2014,2015,2016]\ntwitter_users =[10,20,40,50,70,90]\ninstagram_users = [3,5,10,15,20,25]\nfacebook_users = [500,700,900,1100,1300,1500]\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(111)\nax.plot(year, twitter_users, label='Twitter Users(million)')\nax.plot(year, instagram_users, label='Instagram Users(million)')\nax.plot(year, facebook_users, label='Facebook Users(million)')\nax.set_xlabel('Year')\nax.set_ylabel('Users(million)')\nax.set_title('Trend of Social Media Users in 2011-2016')\nax.legend(loc='upper left', frameon=False)\nax.grid(linestyle='dotted')\n\nfor x,y in zip(year,twitter_users):\n    label = '{}'.format(y) \n    ax.annotate(label,xy=(x,y),xytext=(-5,5),textcoords='offset points')\nfor x,y in zip(year,instagram_users):\n    label = '{}'.format(y) \n    ax.annotate(label,xy=(x,y),xytext=(-5,5),textcoords='offset points')\nfor x,y in zip(year,facebook_users):\n    label = '{}'.format(y) \n    ax.annotate(label,xy=(x,y),xytext=(-5,5),textcoords='offset points')\n\nax.set_xticks(year)\nplt.tight_layout()\nplt.savefig('line chart/png/391.png')\nplt.clf()"
        },
        "QA": {
            "input": "By how many millions did the number of Instagram users increase from 2011 to 2016?",
            "output": "22 million"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_100",
        "img": "./line_chart_num/png/line_num_100.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Nonprofit Organization Contributions and Activities in the US from 2020 to 2023",
        "csv": "Year \\t Donations(million dollars) \\t Volunteer Hours \\t Number of Projects \\n 2020 \\t 1000 \\t 20000 \\t 100 \\n 2021 \\t 1200 \\t 25000 \\t 120 \\n 2022 \\t 1500 \\t 30000 \\t 150 \\n 2023 \\t 1800 \\t 35000 \\t 200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates data on contributions and activities for a nonprofit organization in the US over a four-year period, from 2020 to 2023. It shows donations in million dollars, volunteer hours, and the number of projects per year. Donations increased from 1000 million dollars in 2020 to 1800 million dollars in 2023. Volunteer hours grew from 20,000 in 2020 to 35,000 in 2023. The number of projects also rose from 100 in 2020 to 200 in 2023."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size\nplt.figure(figsize=(9, 6))\n\n# Set up the data\nyear = [2020, 2021, 2022, 2023]\ndonations = [1000, 1200, 1500, 1800]\nhours = [20000, 25000, 30000, 35000]\nprojects = [100, 120, 150, 200]\n\n# Plot the Donation Line Chart\nax1 = plt.subplot()\nax1.plot(year, donations, color='b', label='Donations(million dollars)')\nax1.set_xlabel('Year')\nax1.set_ylabel('Donations(million dollars)')\n\n# Plot the Hours Line Chart\nax2 = ax1.twinx()\nax2.plot(year, hours, color='g', label='Volunteer Hours')\nax2.set_ylabel('Volunteer Hours')\n\n# Plot the Projects Line Chart\nax3 = ax1.twinx()\nax3.plot(year, projects, color='r', label='Number of Projects')\nax3.set_ylabel('Number of Projects')\n\n# Annotate the data points\nfor i, txt in enumerate(donations):\n    ax1.annotate(txt, (year[i], donations[i]), rotation=15, fontsize=14)\nfor i, txt in enumerate(hours):\n    ax2.annotate(txt, (year[i], hours[i]), rotation=15, fontsize=14)\nfor i, txt in enumerate(projects):\n    ax3.annotate(txt, (year[i], projects[i]), rotation=15, fontsize=14)\n\n# Add legend\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\n# Add title\nplt.title('Nonprofit Organization Contributions and Activities in the US from 2020 to 2023', fontsize=18)\n\n# Automatically adjust subplot parameters to give specified padding\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('line chart/png/19.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many millions of dollars in donations were made in 2021?",
            "output": "1200"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_466",
        "img": "./line_chart_num/png/line_num_466.png",
        "topic": "Technology and the Internet",
        "title": " Data Transfer Rate of a Network on March 19, 2023",
        "csv": "Time \\t Data Transfer Rate (Gbps) \\n 00:00 \\t 10 \\n 01:00 \\t 15 \\n 02:00 \\t 20 \\n 03:00 \\t 30 \\n 04:00 \\t 25 \\n 05:00 \\t 20 \\n 06:00 \\t 15 \\n 07:00 \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the data transfer rates of a network measured in Gbps over time on March 19, 2023. Starting from 00:00, with a rate of 10 Gbps, it shows an increase to 15 Gbps at 01:00, 20 Gbps at 02:00, and peaks at 30 Gbps by 03:00. Afterward, the rate declines to 25 Gbps at 04:00, reduces further to 20 Gbps at 05:00, and continues to decrease to 15 Gbps at 06:00, ending at 10 Gbps by 07:00."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nfig=plt.figure(figsize=(10,5))\nax=fig.add_subplot()\nax.plot([0,1,2,3,4,5,6,7], [10,15,20,30,25,20,15,10], \n        color='blue', linestyle='dashed', marker='o',\n        markerfacecolor='red', markersize=8)\nax.set_xticks([0,1,2,3,4,5,6,7])\nax.set_title(\"Data Transfer Rate of a Network on March 19, 2023\")\nax.set_xlabel('Time')\nax.set_ylabel('Data Transfer Rate (Gbps)')\nfor a,b in zip([0,1,2,3,4,5,6,7], [10,15,20,30,25,20,15,10]):\n    ax.annotate(str(b),xy=(a,b),xycoords='data')\nplt.tight_layout()\nplt.savefig('line chart/png/362.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the Data Transfer Rate at 03:00?",
            "output": "30 Gbps"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_371",
        "img": "./line_chart_num/png/line_num_371.png",
        "topic": "Food and Beverage Industry",
        "title": " Trend of Sales in the Food and Beverage Industry from 2000 to 2004",
        "csv": "Year \\t Frozen Food Sales (billion dollars) \\t Organic Food Sales (billion dollars) \\t Convenience Food Sales (billion dollars) \\n 2000 \\t 50 \\t 20 \\t 30 \\n 2001 \\t 60 \\t 30 \\t 40 \\n 2002 \\t 70 \\t 40 \\t 50 \\n 2003 \\t 80 \\t 50 \\t 60 \\n 2004 \\t 90 \\t 60 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the sales trends in the food and beverage industry, specifically for frozen, organic, and convenience foods from 2000 to 2004. The data captures an increase in sales across all categories over these years. Frozen food sales started at $50 billion in 2000 and climbed to $90 billion by 2004. Organic food sales doubled from $20 billion to $60 billion, while convenience food sales increased from $30 billion to $80 billion during the same period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(12,8))\nax = plt.subplot()\nax.plot([2000,2001,2002,2003,2004], [50,60,70,80,90], label='Frozen Food Sales (billion dollars)', marker='o')\nax.plot([2000,2001,2002,2003,2004], [20,30,40,50,60], label='Organic Food Sales (billion dollars)', marker='o')\nax.plot([2000,2001,2002,2003,2004], [30,40,50,60,80], label='Convenience Food Sales (billion dollars)', marker='o')\nplt.xlabel('Year')\nplt.ylabel('Sales (billion dollars)')\nplt.title('Trend of Sales in the Food and Beverage Industry from 2000 to 2004')\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nax.xaxis.set_ticks(range(2000, 2005, 1))\nplt.xticks(rotation=45, wrap=True)\nax.text(2000, 50, '50', ha='center', va='bottom')\nax.text(2001, 60, '60', ha='center', va='bottom')\nax.text(2002, 70, '70', ha='center', va='bottom')\nax.text(2003, 80, '80', ha='center', va='bottom')\nax.text(2004, 90, '90', ha='center', va='bottom')\nplt.tight_layout()\nplt.savefig('line chart/png/464.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much did Convenience Food Sales increase by from 2000 to 2004?",
            "output": "50 billion dollars"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_164",
        "img": "./line_chart_num/png/line_num_164.png",
        "topic": "Energy and Utilities",
        "title": " Energy production from renewable sources in the USA in 2021",
        "csv": "Month \\t Solar Energy(kWh) \\t Wind Energy(kWh) \\t Hydro Energy(kWh) \\t Nuclear Energy(kWh) \\n Jan \\t 1000 \\t 900 \\t 1200 \\t 1500 \\n Feb \\t 1200 \\t 900 \\t 1100 \\t 1600 \\n Mar \\t 800 \\t 1100 \\t 1300 \\t 1200 \\n Apr \\t 1500 \\t 1200 \\t 1400 \\t 800 \\n May \\t 1300 \\t 1000 \\t 1400 \\t 1200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates monthly energy production figures from renewable sources and nuclear energy in the USA for 2021. It shows the kilowatt-hours (kWh) generated from solar, wind, hydro, and nuclear energy. January's recorded energy production stands at 1000 kWh for solar, 900 kWh for wind, 1200 kWh for hydro, and 1500 kWh for nuclear. Moving through the months, there are fluctuations in production: solar energy peaks in April at 1500 kWh, wind in April at 1200 kWh, hydro energy in April at 1400 kWh, and nuclear energy in February at 1600 kWh."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n#Create figure\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot()\n\n#Create x and y axis\nx = ['Jan', 'Feb', 'Mar', 'Apr', 'May']\ny1 = [1000, 1200, 800, 1500, 1300]\ny2 = [900, 900, 1100, 1200, 1000]\ny3 = [1200, 1100, 1300, 1400, 1400]\ny4 = [1500, 1600, 1200, 800, 1200]\n\n#plot line chart\nax.plot(x, y1, marker='o', label='Solar Energy(kWh)')\nax.plot(x, y2, marker='o', label='Wind Energy(kWh)')\nax.plot(x, y3, marker='o', label='Hydro Energy(kWh)')\nax.plot(x, y4, marker='o', label='Nuclear Energy(kWh)')\n\n#Set title\nplt.title('Energy production from renewable sources in the USA in 2021')\n\n#Set xticks\nplt.xticks(x)\n\n#Label each point\nfor i,j in zip(x,y1):\n    ax.annotate(str(j),xy=(i,j))\nfor i,j in zip(x,y2):\n    ax.annotate(str(j),xy=(i,j))\nfor i,j in zip(x,y3):\n    ax.annotate(str(j),xy=(i,j))\nfor i,j in zip(x,y4):\n    ax.annotate(str(j),xy=(i,j))\n\n#Set legend\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.2), shadow=True, ncol=2)\n\n#Auto adjust image\nplt.tight_layout()\n\n#Save image\nplt.savefig('line chart/png/17.png')\n\n#Clear current image\nplt.clf()"
        },
        "QA": {
            "input": "In which month was wind energy production the highest?",
            "output": "April"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_344",
        "img": "./line_chart_num/png/line_num_344.png",
        "topic": "Business and Finance",
        "title": " GDP and GNP from 2001 to 2005",
        "csv": "Year \\t Gross Domestic Product(GDP)(trillion dollars) \\t Gross National Product(GNP)(trillion dollars) \\n 2001 \\t 14.5 \\t 15 \\n 2002 \\t 14.6 \\t 16 \\n 2003 \\t 13.7 \\t 14 \\n 2004 \\t 15.2 \\t 17 \\n 2005 \\t 15.7 \\t 18 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the Gross Domestic Product (GDP) and Gross National Product (GNP) from 2001 to 2005 in trillions of dollars. In 2001, the GDP was 14.5 trillion dollars and GNP was 15 trillion dollars. The following year, GDP increased to 14.6 trillion, and GNP rose to 16 trillion dollars. In 2003, there was a dip in GDP to 13.7 trillion, while GNP dropped to 14 trillion dollars. Both metrics then trend upward with the GDP reaching 15.2 trillion dollars and GNP at 17 trillion dollars in 2004, and by 2005, GDP stood at 15.7 trillion and GNP at 18 trillion dollars."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(12,6))\nplt.plot([2001,2002,2003,2004,2005],[14.5,14.6,13.7,15.2,15.7],label='GDP')\nplt.plot([2001,2002,2003,2004,2005],[15,16,14,17,18],label='GNP')\nplt.title('GDP and GNP from 2001 to 2005')\nplt.xlabel('Year')\nplt.ylabel('Value(trillion dollars)')\nplt.xticks([2001,2002,2003,2004,2005])\nplt.grid(True)\nfor x,y in zip([2001,2002,2003,2004,2005],[14.5,14.6,13.7,15.2,15.7]):\n    plt.annotate('(%s, %s)' % (x,y),xy=(x,y), xytext=(x-0.1,y+0.5))\nfor x,y in zip([2001,2002,2003,2004,2005],[15,16,14,17,18]):\n    plt.annotate('(%s, %s)' % (x,y),xy=(x,y), xytext=(x-0.1,y+0.5))\nplt.legend(loc='best')\nplt.tight_layout()\nplt.savefig('line chart/png/424.png')\nplt.clf()"
        },
        "QA": {
            "input": "By how much did the GNP exceed the GDP in 2004?",
            "output": "$1.8 trillion"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_271",
        "img": "./line_chart_num/png/line_num_271.png",
        "topic": "Technology and the Internet",
        "title": " Change in Average Number of Hours on the Internet in 2021",
        "csv": "Month \\t Average Number of Hours on the Internet \\n Jan \\t 6 \\n Feb \\t 7 \\n Mar \\t 8 \\n Apr \\t 9 \\n May \\t 10 \\n June \\t 11 \\n July \\t 12 \\n Aug \\t 11 \\n Sep \\t 10 \\n Oct \\t 9 \\n Nov \\t 8 \\n Dec \\t 7 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the change in the average number of hours spent on the Internet each month in 2021. Starting at 6 hours in January, there's a progressive increase, peaking at 12 hours in July. The chart then shows a decrease back to 6 hours by December, following the same pattern but in reverse. Each month is displayed sequentially on the x-axis with the corresponding average hours on the y-axis."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(20,10))\nax = plt.subplot()\n\nmonth = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\nhours = [6, 7, 8, 9, 10, 11, 12, 11, 10, 9, 8, 7]\n\nplt.plot(month, hours, marker='o', linestyle='-', color='b')\nplt.title('Change in Average Number of Hours on the Internet in 2021')\nplt.xlabel('Month')\nplt.ylabel('Average Number of Hours on the Internet')\n\nfor i, txt in enumerate(hours):\n    ax.annotate(txt, (month[i],hours[i]), rotation=45, horizontalalignment='right', verticalalignment='bottom')\n\nplt.xticks(month)\nplt.tight_layout()\n\nplt.savefig('line chart/png/356.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the average number of hours on the internet in September?",
            "output": "10"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_241",
        "img": "./line_chart_num/png/line_num_241.png",
        "topic": "Social Media and the Web",
        "title": " Growth of Social Media Platforms Users in 2021",
        "csv": "Month \\t Facebook Users(million) \\t Twitter Users(million) \\t Instagram Users(million) \\n January \\t 2 \\t 1.5 \\t 1 \\n February \\t 2.2 \\t 1.6 \\t 1.2 \\n March \\t 2.4 \\t 1.7 \\t 1.4 \\n April \\t 2.6 \\t 1.8 \\t 1.6 \\n May \\t 2.8 \\t 2 \\t 1.8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the growth of user bases for three social media platforms\u2014Facebook, Twitter, and Instagram\u2014over five months in 2021. In January, Facebook had 2 million users, Twitter 1.5 million, and Instagram 1 million. By May, the number of users increased for Facebook to 2.8 million, for Twitter to 2 million, and for Instagram to 1.8 million. Each platform shows a steady uptrend in the number of users as the months progress from January to May."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure\nplt.figure(figsize=(8, 4))\n\n# Plot data\nx = np.arange(5)\nplt.plot(x, [2, 2.2, 2.4, 2.6, 2.8], marker='o', label='Facebook')\nplt.plot(x, [1.5, 1.6, 1.7, 1.8, 2], marker='o', label='Twitter')\nplt.plot(x, [1, 1.2, 1.4, 1.6, 1.8], marker='o', label='Instagram')\n\n# Setting up the labels\nplt.xticks(x, ('January', 'February', 'March', 'April', 'May'))\nplt.title(\"Growth of Social Media Platforms Users in 2021\")\nplt.xlabel('Month')\nplt.ylabel('Users(million)')\n\n# Setting up the legend position and label for each point\nplt.legend(loc='upper left')\nfor a, b in zip(x, [2, 2.2, 2.4, 2.6, 2.8]):\n    plt.text(a, b, b, ha='center', va='bottom', fontsize=10)\nfor a, b in zip(x, [1.5, 1.6, 1.7, 1.8, 2]):\n    plt.text(a, b, b, ha='center', va='bottom', fontsize=10)\nfor a, b in zip(x, [1, 1.2, 1.4, 1.6, 1.8]):\n    plt.text(a, b, b, ha='center', va='bottom', fontsize=10)\n\n# Drawing background grids\nplt.grid(linestyle = '--', axis = 'y')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('line chart/png/425.png')\n\n# Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "How many millions of users did Facebook gain from January to May?",
            "output": "0.8 million"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_367",
        "img": "./line_chart_num/png/line_num_367.png",
        "topic": "Technology and the Internet",
        "title": " Global Internet Users from 2011 to 2015",
        "csv": "Year \\t Desktop Users(million) \\t Mobile Users(million) \\t Tablet Users(million) \\n 2011 \\t 100 \\t 50 \\t 20 \\n 2012 \\t 120 \\t 60 \\t 30 \\n 2013 \\t 150 \\t 80 \\t 40 \\n 2014 \\t 200 \\t 100 \\t 50 \\n 2015 \\t 250 \\t 120 \\t 60 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the growth of global internet users across desktop, mobile, and tablet platforms from 2011 to 2015. Desktop users increased from 100 million to 250 million, mobile users rose from 50 million to 120 million, and tablet users expanded from 20 million to 60 million over the five-year span. The data showcases the trends in device usage for internet access during this period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([2011, 2012, 2013, 2014, 2015])\nDesktop_Users = np.array([100, 120, 150, 200, 250])\nMobile_Users = np.array([50, 60, 80, 100, 120])\nTablet_Users = np.array([20, 30, 40, 50, 60])\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(1,1,1)\n\nax.plot(x, Desktop_Users, label='Desktop Users(million)', color='green', marker='o', linestyle='--', linewidth=2, markersize=6)\nax.plot(x, Mobile_Users, label='Mobile Users(million)', color='blue', marker='^', linestyle='-', linewidth=2, markersize=6)\nax.plot(x, Tablet_Users, label='Tablet Users(million)', color='red', marker='s', linestyle='-.', linewidth=2, markersize=6)\n\nplt.title('Global Internet Users from 2011 to 2015', fontsize=15)\nplt.xlabel('Year', fontsize=12)\nplt.ylabel('Users(million)', fontsize=12)\n\nplt.xticks(x)\nplt.legend(loc='best')\n\nfor a,b,c in zip(x,Desktop_Users,Mobile_Users):\n    ax.annotate(str(b)+','+str(c),xy=(a,b),rotation=45,va=\"bottom\",ha=\"center\",fontsize=10)\n\nfor a,b,c in zip(x,Desktop_Users,Tablet_Users):\n    ax.annotate(str(b)+','+str(c),xy=(a,b),rotation=45,va=\"top\",ha=\"center\",fontsize=10)\n\nfor a,b,c in zip(x,Mobile_Users,Tablet_Users):\n    ax.annotate(str(b)+','+str(c),xy=(a,b),rotation=45,va=\"bottom\",ha=\"center\",fontsize=10)\n\nplt.tight_layout()\nplt.savefig('line chart/png/467.png')\nplt.clf()"
        },
        "QA": {
            "input": "By how many millions did the number of mobile users increase from 2011 to 2015?",
            "output": "70 million"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_420",
        "img": "./line_chart_num/png/line_num_420.png",
        "topic": "Food and Beverage Industry",
        "title": " Revenues of the Food and Beverage Industry in the US from 2018 to 2022",
        "csv": "Year \\t Fast Food Revenues (billion dollars) \\t Restaurant Revenues (billion dollars) \\t Grocery Store Revenues (billion dollars) \\n 2018 \\t 550 \\t 800 \\t 1200 \\n 2019 \\t 600 \\t 900 \\t 1300 \\n 2020 \\t 650 \\t 1000 \\t 1200 \\n 2021 \\t 700 \\t 1100 \\t 1400 \\n 2022 \\t 750 \\t 1200 \\t 1500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the annual revenues of the Fast Food, Restaurant, and Grocery Store sectors of the Food and Beverage Industry in the US from 2018 to 2022. Fast Food revenues increased from $550 billion in 2018 to $750 billion in 2022. Restaurant revenues saw growth from $800 billion in 2018 to $1200 billion in 2022. Grocery Store revenues started at $1200 billion in 2018, dipped in 2020, and rose to $1500 billion by 2022. The data presents a year-over-year upward trend for each sector, with occasional fluctuations."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#Define data\nyear = np.array(['2018','2019','2020','2021','2022'])\nfast_food_rev = np.array([550, 600, 650, 700, 750])\nrestaurant_rev = np.array([800, 900, 1000, 1100, 1200])\ngrocery_store_rev = np.array([1200, 1300, 1200, 1400, 1500])\n\n#Create figure\nfig=plt.figure(figsize=(14, 8))\nax=fig.add_subplot(1,1,1)\n\n#Plot line chart\nax.plot(year, fast_food_rev, label='Fast Food Revenues', marker=\"o\", linestyle=\"-\")\nax.plot(year, restaurant_rev, label='Restaurant Revenues', marker=\"o\", linestyle=\"-\")\nax.plot(year, grocery_store_rev, label='Grocery Store Revenues', marker=\"o\", linestyle=\"-\")\n\n#Label data points\nfor x, y in zip(year, fast_food_rev):\n    ax.annotate(\"%.0f\" % y, xy=(x, y), xytext=(-5, 5), textcoords=\"offset points\")\nfor x, y in zip(year, restaurant_rev):\n    ax.annotate(\"%.0f\" % y, xy=(x, y), xytext=(-5, 5), textcoords=\"offset points\")\nfor x, y in zip(year, grocery_store_rev):\n    ax.annotate(\"%.0f\" % y, xy=(x, y), xytext=(-5, 5), textcoords=\"offset points\")\n\n#Set x_ticks\nplt.xticks(year, rotation=45)\n\n#Add legend\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=3, frameon=False)\n\n#Add title\nplt.title('Revenues of the Food and Beverage Industry in the US from 2018 to 2022')\n\n#Automatic resizing image\nplt.tight_layout()\n\n#Save image\nplt.savefig('line chart/png/543.png')\n\n#Clear image state\nplt.clf()"
        },
        "QA": {
            "input": "How much did fast food revenues increase from 2018 to 2022?",
            "output": "200 billion dollars"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_330",
        "img": "./line_chart_num/png/line_num_330.png",
        "topic": "Science and Engineering",
        "title": " Investment in four research fields from 2015 to 2020",
        "csv": "Year \\t Research A(million dollars) \\t Research B(million dollars) \\t Research C(million dollars) \\t Research D(million dollars) \\n 2015 \\t 500 \\t 600 \\t 400 \\t 300 \\n 2016 \\t 550 \\t 620 \\t 450 \\t 320 \\n 2017 \\t 600 \\t 630 \\t 420 \\t 340 \\n 2018 \\t 625 \\t 650 \\t 425 \\t 360 \\n 2019 \\t 650 \\t 670 \\t 450 \\t 380 \\n 2020 \\t 675 \\t 690 \\t 475 \\t 400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates investment trends in four research fields over six years, from 2015 to 2020. The chart tracks the annual investment in million dollars for Research A ranging from 500 to 675, Research B increasing from 600 to 690, Research C varying between 400 and 475, and Research D steadily rising from 300 to 400. Each year marks a data point for the respective amount allocated to these research areas."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport numpy as np\n\ndata=[(2015,500,600,400,300),(2016,550,620,450,320),(2017,600,630,420,340),(2018,625,650,425,360),(2019,650,670,450,380),(2020,675,690,475,400)]\nyear=[x[0] for x in data]\nresearch_a=[x[1] for x in data]\nresearch_b=[x[2] for x in data]\nresearch_c=[x[3] for x in data]\nresearch_d=[x[4] for x in data]\n\n# Create figure\nfig=plt.figure(figsize=(15,7))\n\n# Plot data\nplt.plot(year, research_a, label='Research A(million dollars)', marker='o')\nplt.plot(year, research_b, label='Research B(million dollars)', marker='+')\nplt.plot(year, research_c, label='Research C(million dollars)', marker='*')\nplt.plot(year, research_d, label='Research D(million dollars)', marker='^')\n\n# set the x axis\nplt.xticks(year, rotation=45)\n\n# Add annotations\nfor i,j in zip(year,research_a):\n    plt.annotate(str(j),xy=(i,j), fontsize=12)\n\nfor i,j in zip(year,research_b):\n    plt.annotate(str(j),xy=(i,j), fontsize=12)\n\nfor i,j in zip(year,research_c):\n    plt.annotate(str(j),xy=(i,j), fontsize=12)\n\nfor i,j in zip(year,research_d):\n    plt.annotate(str(j),xy=(i,j), fontsize=12)\n\n# Add legend and title\nplt.legend(loc='best')\nplt.title(\"Investment in four research fields from 2015 to 2020\")\n\n# Resize the figure\nplt.tight_layout()\n\n# Save figure\nplt.savefig('line chart/png/273.png')\n\n# Clear the current figure state\nplt.clf()"
        },
        "QA": {
            "input": "By how much did the investment in Research D increase from 2015 to 2020?",
            "output": "100 million dollars"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_118",
        "img": "./line_chart_num/png/line_num_118.png",
        "topic": "Energy and Utilities",
        "title": " Comparison of Renewable and Fossil Energy Consumption in 2021",
        "csv": "Month \\t Renewable Energy Consumption(kWh) \\t Fossil Energy Consumption(kWh) \\n Jan \\t 600 \\t 800 \\n Feb \\t 650 \\t 900 \\n Mar \\t 700 \\t 1000 \\n Apr \\t 800 \\t 1100 \\n May \\t 850 \\t 1200 \\n Jun \\t 900 \\t 1400 \\n Jul \\t 950 \\t 1500 \\n Aug \\t 1000 \\t 1600 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the comparison of renewable versus fossil energy consumption over eight months in 2021. Starting in January with 600kWh of renewable and 800kWh of fossil energy, consumption patterns demonstrate an increasing trend. February shows a renewable consumption of 650kWh and fossil at 900kWh. This trend continues progressively with March displaying 700kWh renewable and 1000kWh fossil, leading up to August where renewable consumption hits 1000kWh and fossil reaches 1600kWh."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(10,6))\n\nmonths = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\"]\nrenewable = [600, 650, 700, 800, 850, 900, 950, 1000]\nfossil = [800, 900, 1000, 1100, 1200, 1400, 1500, 1600]\n\nplt.plot(months, renewable, label=\"Renewable Energy Consumption (kWh)\", linestyle=\"dashed\")\nplt.plot(months, fossil, label=\"Fossil Energy Consumption (kWh)\")\n\nplt.title(\"Comparison of Renewable and Fossil Energy Consumption in 2021\")\nplt.xlabel(\"Month\")\nplt.ylabel(\"Energy Consumption (kWh)\")\n\nplt.legend()\nplt.grid()\n\nfor x,y in zip(months, renewable):\n    plt.annotate(str(y), xy=(x,y), xytext=(-20,10), textcoords=\"offset points\")\n\nfor x,y in zip(months, fossil):\n    plt.annotate(str(y), xy=(x,y), xytext=(-20,10), textcoords=\"offset points\")\n\nplt.xticks(months)\n\nplt.tight_layout()\nplt.savefig('line chart/png/106.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference between fossil and renewable energy consumption in March?",
            "output": "300 kWh"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_460",
        "img": "./line_chart_num/png/line_num_460.png",
        "topic": "Science and Engineering",
        "title": " Climate Change in the Arctic Circle from 2001 to 2007",
        "csv": "Year \\t Average Temperature(degrees Celsius) \\t Snowfall(inches) \\t Sea Level(inches) \\n 2001 \\t 10 \\t 36 \\t 200 \\n 2002 \\t 11 \\t 38 \\t 201 \\n 2003 \\t 13 \\t 40 \\t 203 \\n 2004 \\t 14 \\t 42 \\t 205 \\n 2005 \\t 15 \\t 44 \\t 208 \\n 2006 \\t 12 \\t 46 \\t 210 \\n 2007 \\t 14 \\t 48 \\t 212 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates climate-related data in the Arctic Circle from 2001 to 2007. Each year shows a set of three numeric values: average temperature in degrees Celsius, snowfall in inches, and sea level in inches. In 2001, the average temperature was 10\u00b0C, snowfall reached 36 inches, and the sea level was measured at 200 inches. The data points for subsequent years indicate a gradual increase in all three metrics, with temperatures rising to 15\u00b0C, snowfall to 44 inches, and sea level to 208 inches by 2005, followed by a slight variation in the last two years."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nyear = [2001, 2002, 2003, 2004, 2005, 2006, 2007]\navg_temp = [10, 11, 13, 14, 15, 12, 14]\nsnowfall = [36, 38, 40, 42, 44, 46, 48]\nsea_level = [200, 201, 203, 205, 208, 210, 212]\n\nfig = plt.figure(figsize=(10, 8))\nax1 = fig.add_subplot(111)\n\nax1.plot(year, avg_temp, label='Average Temperature (degrees Celsius)', color='b', marker='o')\nax1.plot(year, snowfall, label='Snowfall (inches)', color='r', marker='o')\nax1.plot(year, sea_level, label='Sea Level (inches)', color='g', marker='o')\n\nplt.xticks(year)\nplt.xlabel('Year')\nplt.ylabel('Data')\nplt.title('Climate Change in the Arctic Circle from 2001 to 2007')\nax1.legend()\n\nplt.tight_layout()\nfor x, y in zip(year, avg_temp):\n    ax1.annotate('%.2f' % y, xy=(x, y), xytext=(0, 5), textcoords='offset points',rotation=90, ha='center', va='bottom')\nfor x, y in zip(year, snowfall):\n    ax1.annotate('%.2f' % y, xy=(x, y), xytext=(0, 5), textcoords='offset points',rotation=90, ha='center', va='bottom')\nfor x, y in zip(year, sea_level):\n    ax1.annotate('%.2f' % y, xy=(x, y), xytext=(0, 5), textcoords='offset points',rotation=90, ha='center', va='bottom')\n\nplt.savefig('line chart/png/524.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the total increase in the average temperature from the year 2001 to the year 2007?",
            "output": "4 degrees Celsius"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_388",
        "img": "./line_chart_num/png/line_num_388.png",
        "topic": "Social Media and the Web",
        "title": " Growth of Social Media Users from 2015 to 2019",
        "csv": "Year \\t Facebook Users(million) \\t Instagram Users(million) \\t Twitter Users(million) \\t YouTube Users(million) \\n 2015 \\t 500 \\t 100 \\t 250 \\t 350 \\n 2016 \\t 550 \\t 150 \\t 300 \\t 400 \\n 2017 \\t 650 \\t 200 \\t 350 \\t 500 \\n 2018 \\t 750 \\t 250 \\t 400 \\t 550 \\n 2019 \\t 850 \\t 300 \\t 450 \\t 600 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the growth of social media users across four platforms\u2014Facebook, Instagram, Twitter, and YouTube\u2014from 2015 to 2019. In 2015, Facebook had 500 million users, Instagram 100 million, Twitter 250 million, and YouTube 350 million. By 2019, these numbers had increased, with Facebook reaching 850 million users, Instagram 300 million, Twitter 450 million, and YouTube 600 million. The chart tracks the rising trajectory of user populations for each social media platform over the five-year period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(13,8))\n\nyear=[2015,2016,2017,2018,2019]\nfacebook_user=[500,550,650,750,850]\ninstagram_user=[100,150,200,250,300]\ntwitter_user=[250,300,350,400,450]\nyoutube_user=[350,400,500,550,600]\n\nplt.plot(year,facebook_user,label='Facebook Users',marker='o',markersize=7,color='b')\nplt.plot(year,instagram_user,label='Instagram Users',marker='x',markersize=7,color='g')\nplt.plot(year,twitter_user,label='Twitter Users',marker='s',markersize=7,color='r')\nplt.plot(year,youtube_user,label='Youtube Users',marker='d',markersize=7,color='m')\n\nplt.xlabel('Year')\nplt.ylabel('Users (million)')\nplt.title('Growth of Social Media Users from 2015 to 2019')\nplt.legend(loc='upper left')\n\nplt.xticks(year)\nplt.grid(axis='both',linestyle='--')\n\nfor i,j in zip(year,facebook_user):\n    plt.annotate(str(j),xy=(i,j+15),rotation=45,ha='center',va='bottom')\nfor i,j in zip(year,instagram_user):\n    plt.annotate(str(j),xy=(i,j+15),rotation=45,ha='center',va='bottom')\nfor i,j in zip(year,twitter_user):\n    plt.annotate(str(j),xy=(i,j+15),rotation=45,ha='center',va='bottom')\nfor i,j in zip(year,youtube_user):\n    plt.annotate(str(j),xy=(i,j+15),rotation=45,ha='center',va='bottom')\n\nplt.tight_layout()\nplt.savefig('line chart/png/459.png',dpi=200)\nplt.clf()"
        },
        "QA": {
            "input": "In what year did Instagram Users(million) reach half the number of Facebook Users(million)?",
            "output": "2017"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_293",
        "img": "./line_chart_num/png/line_num_293.png",
        "topic": "Technology and the Internet",
        "title": " Growth of Technology Usage and Connection Speed in the US from 2001 to 2005",
        "csv": "Year \\t Number of Users \\t Number of Connections \\t Average Connection Speed(Mbps) \\n 2001 \\t 1000 \\t 200 \\t 5 \\n 2002 \\t 4000 \\t 400 \\t 10 \\n 2003 \\t 8000 \\t 800 \\t 15 \\n 2004 \\t 12000 \\t 1200 \\t 20 \\n 2005 \\t 15000 \\t 1400 \\t 25 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart depicts the growth of technology usage and connection speed in the US from 2001 to 2005. It shows that in 2001 there were 1000 users, 200 connections, and an average connection speed of 5 Mbps. In 2002, the number of users increased to 4000, with 400 connections at 10 Mbps average speed. By 2003, users doubled to 8000, connections reached 800, and speed increased to 15 Mbps. Growth continued in 2004 with 12000 users, 1200 connections, and a 20 Mbps average speed, culminating in 2005 with 15000 users, 1400 connections, and a 25 Mbps average connection speed."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,6))\nplt.subplot(1,1,1)\nx = [2001, 2002, 2003, 2004, 2005]\ny1 = [1000, 4000, 8000, 12000, 15000]\ny2 = [200, 400, 800, 1200, 1400]\ny3 = [5, 10, 15, 20, 25]\nplt.plot(x, y1, '-o', color='blue', label='Number of Users')\nplt.plot(x, y2, '-o', color='red', label='Number of Connections')\nplt.plot(x, y3, '-o', color='green', label='Average Connection Speed(Mbps)')\nplt.xticks(x)\nplt.xlabel('Year')\nplt.ylabel('Number of Users/Connections/Speed')\nplt.title('Growth of Technology Usage and Connection Speed in the US from 2001 to 2005')\nplt.legend(loc='upper left', bbox_to_anchor=(1,1))\nfor x, y1, y2, y3 in zip(x, y1, y2, y3):\n    plt.annotate(f'{y1}/{y2}/{y3}', (x, y1), xytext=(x-0.1, y1+400))\nplt.tight_layout()\nplt.savefig('line chart/png/189.png')\nplt.clf()"
        },
        "QA": {
            "input": "What was the average connection speed in 2003?",
            "output": "15 Mbps"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_222",
        "img": "./line_chart_num/png/line_num_222.png",
        "topic": "Sports and Entertainment",
        "title": " Performance comparison between Football and Baseball teams in 2015-2018",
        "csv": "Year \\t Football Team A \\t Football Team B \\t Baseball Team A \\t Baseball Team B \\n 2015 \\t 20 \\t 18 \\t 15 \\t 30 \\n 2016 \\t 30 \\t 20 \\t 20 \\t 35 \\n 2017 \\t 25 \\t 25 \\t 25 \\t 30 \\n 2018 \\t 35 \\t 30 \\t 30 \\t 40 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the performance comparison between two football teams and two baseball teams over four years, from 2015 to 2018. Football Team A's performance points increased from 20 in 2015 to 35 in 2018, while Football Team B's points went from 18 to 30 in the same period. For Baseball Team A, points rose from 15 in 2015 to 30 in 2018. Baseball Team B started with 30 points in 2015 and peaked at 40 in 2018. The chart tracks the year-on-year performance of these teams."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot(111)\n\nx = np.array([2015, 2016, 2017, 2018])\ny1 = np.array([20, 30, 25, 35])\ny2 = np.array([18, 20, 25, 30])\ny3 = np.array([15, 20, 25, 30])\ny4 = np.array([30, 35, 30, 40])\n\nax.plot(x, y1, '-', label='Football Team A')\nax.plot(x, y2, '--', label='Football Team B')\nax.plot(x, y3, '-.', label='Baseball Team A')\nax.plot(x, y4, ':', label='Baseball Team B')\n\nplt.title('Performance comparison between Football and Baseball teams in 2015-2018')\nplt.xlabel('Year')\nplt.ylabel('Performance')\nplt.xticks(x)\n\nfor a, b in zip(x, y1):\n    plt.text(a, b, b, ha='center', va='bottom', fontsize=10)\nfor a, b in zip(x, y2):\n    plt.text(a, b, b, ha='center', va='bottom', fontsize=10)\nfor a, b in zip(x, y3):\n    plt.text(a, b, b, ha='center', va='bottom', fontsize=10)\nfor a, b in zip(x, y4):\n    plt.text(a, b, b, ha='center', va='bottom', fontsize=10)\n\nax.legend(loc='best')\nplt.tight_layout()\n\nplt.savefig('line chart/png/64.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year did Baseball Team A score the least points?",
            "output": "2015"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_186",
        "img": "./line_chart_num/png/line_num_186.png",
        "topic": "Energy and Utilities",
        "title": " Renewable energy sources production in the USA, 2021",
        "csv": "Month \\t Wind Energy(TWh) \\t Solar Energy(TWh) \\t Hydro Energy(TWh) \\t Nuclear Energy(TWh) \\n January \\t 50 \\t 10 \\t 20 \\t 30 \\n February \\t 60 \\t 20 \\t 25 \\t 35 \\n March \\t 65 \\t 30 \\t 30 \\t 40 \\n April \\t 70 \\t 25 \\t 30 \\t 50 \\n May \\t 75 \\t 35 \\t 35 \\t 45 \\n June \\t 80 \\t 20 \\t 40 \\t 50 \\n July \\t 85 \\t 10 \\t 45 \\t 55 \\n August \\t 90 \\t 30 \\t 50 \\t 60 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates monthly renewable energy production across four different types in the USA during 2021. The data, measured in terawatt-hours (TWh), spans from January to August. In January, wind energy production was 50 TWh, solar at 10 TWh, hydro at 20 TWh, and nuclear at 30 TWh. Production generally increases over the months, with wind energy reaching 90 TWh and nuclear 60 TWh by August. Solar energy sees its highest production in May at 35 TWh, while hydro energy's peak at 50 TWh occurs in August."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nmonth = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August']\nWind = [50, 60, 65, 70, 75, 80, 85, 90]\nSolar = [10, 20, 30, 25, 35, 20, 10, 30]\nHydro = [20, 25, 30, 30, 35, 40, 45, 50]\nNuclear = [30, 35, 40, 50, 45, 50, 55, 60]\n\nplt.figure(figsize=(10, 6))\nplt.plot(month, Wind, color='red', marker='o',label='Wind Energy(TWh)')\nplt.plot(month, Solar, color='orange', marker='o',label='Solar Energy(TWh)')\nplt.plot(month, Hydro, color='blue', marker='o',label='Hydro Energy(TWh)')\nplt.plot(month, Nuclear, color='green', marker='o',label='Nuclear Energy(TWh)')\n\nplt.xlabel('Month', fontsize=12)\nplt.ylabel('Energy Output(TWh)', fontsize=12)\nplt.title('Renewable energy sources production in the USA, 2021')\nplt.xticks(np.arange(len(month)), month, fontsize=10, rotation=45)\nplt.legend(loc='upper left')\n\nfor x, y in zip(month, Wind):\n    label = \"{:.2f}\".format(y)\n    plt.annotate(label, # this is the text\n                 (x,y), # this is the point to label\n                 textcoords=\"offset points\", # how to position the text\n                 xytext=(-3,3), # distance from text to points (x,y)\n                 ha='right') # horizontal alignment can be left, right or center\n\nfor x, y in zip(month, Solar):\n    label = \"{:.2f}\".format(y)\n    plt.annotate(label, # this is the text\n                 (x,y), # this is the point to label\n                 textcoords=\"offset points\", # how to position the text\n                 xytext=(-3,3), # distance from text to points (x,y)\n                 ha='right') # horizontal alignment can be left, right or center\n\nfor x, y in zip(month, Hydro):\n    label = \"{:.2f}\".format(y)\n    plt.annotate(label, # this is the text\n                 (x,y), # this is the point to label\n                 textcoords=\"offset points\", # how to position the text\n                 xytext=(-3,3), # distance from text to points (x,y)\n                 ha='right') # horizontal alignment can be left, right or center\n\nfor x, y in zip(month, Nuclear):\n    label = \"{:.2f}\".format(y)\n    plt.annotate(label, # this is the text\n                 (x,y), # this is the point to label\n                 textcoords=\"offset points\", # how to position the text\n                 xytext=(-3,3), # distance from text to points (x,y)\n                 ha='right') # horizontal alignment can be left, right or center\n\nplt.tight_layout()\nplt.savefig('line chart/png/127.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much wind energy was produced in January?",
            "output": "50 TWh"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_484",
        "img": "./line_chart_num/png/line_num_484.png",
        "topic": "Government and Public Policy",
        "title": " Voting Patterns in the General Election in the USA from 2000-2015",
        "csv": "Year \\t Votes for Party A \\t Votes for Party B \\n 2000 \\t 56000 \\t 48000 \\n 2005 \\t 62000 \\t 50000 \\n 2010 \\t 40000 \\t 60000 \\n 2015 \\t 70000 \\t 55000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the voting patterns for Party A and Party B in the general elections of the USA across four elections from 2000 to 2015. In 2000, votes for Party A numbered 56,000 while Party B had 48,000. In 2005, Party A received 62,000 votes, and Party B got 50,000. By 2010, Party A's votes decreased to 40,000, while Party B surpassed it with 60,000 votes. The 2015 election saw Party A at 70,000 votes and Party B at 55,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = [[2000, 56000, 48000], [2005, 62000, 50000],\n        [2010, 40000, 60000], [2015, 70000, 55000]]\n\ndf = pd.DataFrame(data, columns=['Year', 'Votes for Party A', 'Votes for Party B'])\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\nax.plot(df['Year'], df['Votes for Party A'], linestyle='-', marker='o',\n        color='#ff6600', label='Party A')\nax.plot(df['Year'], df['Votes for Party B'], linestyle='-', marker='o',\n        color='#00ccff', label='Party B')\n\nfor a, b in zip(df['Year'], df['Votes for Party A']):\n    ax.annotate(str(b), xy=(a, b))\nfor a, b in zip(df['Year'], df['Votes for Party B']):\n    ax.annotate(str(b), xy=(a, b))\n\nax.set_title('Voting Patterns in the General Election in the USA from 2000-2015')\nax.legend(loc='upper right')\nax.grid(True, linestyle='-.')\n\nplt.xticks(df['Year'], rotation=45, wrap=True)\nplt.tight_layout()\nplt.savefig('line chart/png/458.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year did Party A receive the highest number of votes?",
            "output": "2015"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_495",
        "img": "./line_chart_num/png/line_num_495.png",
        "topic": "Technology and the Internet",
        "title": " Technology usage among consumers in the past decade",
        "csv": "Year \\t Smartphone Usage(%) \\t Computer Usage(%) \\t Tablet Usage(%) \\n 2010 \\t 20 \\t 50 \\t 2 \\n 2011 \\t 30 \\t 55 \\t 4 \\n 2012 \\t 45 \\t 60 \\t 7 \\n 2013 \\t 55 \\t 70 \\t 9 \\n 2014 \\t 65 \\t 75 \\t 11 \\n 2015 \\t 75 \\t 80 \\t 13 \\n 2016 \\t 85 \\t 85 \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the percentage of technology usage among consumers over several years. It represents the increase in usage of smartphones, computers, and tablets starting from 2010 to 2016. In 2010, smartphone usage was at 20%, computer usage at 50%, and tablet usage at 2%. By 2016, these figures had grown to 85% for smartphones, 85% for computers, and 15% for tablets, showing a steady upward trend in the adoption of these technologies over the given period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\n# Set figsize for a larger size to avoid cropping\nplt.figure(figsize=(10,6))\n\n# Create a subplot\nax = plt.subplot()\n\n# Add a title\nax.set_title(\"Technology usage among consumers in the past decade\")\n\n# Create x axis from year data\nyears = [2010, 2011, 2012, 2013, 2014, 2015, 2016]\n\n# Create y axis from data\nsmartphone_usage = [20, 30, 45, 55, 65, 75, 85]\ncomputer_usage = [50, 55, 60, 70, 75, 80, 85]\ntablet_usage = [2, 4, 7, 9, 11, 13, 15]\n\n# Plot line graph\nplt.plot(years, smartphone_usage, label=\"Smartphone Usage(%)\")\nplt.plot(years, computer_usage, label=\"Computer Usage(%)\")\nplt.plot(years, tablet_usage, label=\"Tablet Usage(%)\")\n\n# Use xticks to prevent interpolation\nplt.xticks(years)\n\n# Add a legend\nplt.legend(loc=\"upper left\")\n\n# Add data labels directly on the figure\nfor a,b in zip(years, smartphone_usage):\n    plt.annotate(str(b), xy=(a,b))\nfor a,b in zip(years, computer_usage):\n    plt.annotate(str(b), xy=(a,b))\nfor a,b in zip(years, tablet_usage):\n    plt.annotate(str(b), xy=(a,b))\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"line chart/png/290.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "In which year was the Computer Usage exactly 15% greater than the Smartphone Usage?",
            "output": "2016"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_399",
        "img": "./line_chart_num/png/line_num_399.png",
        "topic": "Technology and the Internet",
        "title": " Trends of Device Ownership Rate in the U.S. from 2011-2017",
        "csv": "Year \\t Smartphone Ownership Rate(%) \\t Tablet Ownership Rate(%) \\t Desktop Computer Ownership Rate(%) \\n 2011 \\t 20 \\t 10 \\t 50 \\n 2012 \\t 25 \\t 15 \\t 45 \\n 2013 \\t 30 \\t 20 \\t 40 \\n 2014 \\t 35 \\t 25 \\t 35 \\n 2015 \\t 40 \\t 30 \\t 30 \\n 2016 \\t 45 \\t 35 \\t 25 \\n 2017 \\t 50 \\t 40 \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the trends in device ownership rates in the U.S. from 2011 to 2017. It outlines the percentage of individuals who own smartphones, tablets, and desktop computers over the years. In 2011, 20% owned smartphones, 10% owned tablets, and 50% owned desktop computers. By 2017, smartphone ownership increased to 50%, tablet ownership to 40%, and desktop computer ownership decreased to 20%. The data shows a steady increase in smartphone and tablet ownership over these years, while desktop computer ownership exhibited a gradual decline."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# set up figure\nfig = plt.figure(figsize=(15,7))\nax = fig.add_subplot(111)\n\n# set up data\ndata = np.array([[2011, 20, 10, 50], \n                 [2012, 25, 15, 45], \n                 [2013, 30, 20, 40],\n                 [2014, 35, 25, 35],\n                 [2015, 40, 30, 30],\n                 [2016, 45, 35, 25],\n                 [2017, 50, 40, 20]])\n\n# plot data\nx = data[:,0]\nax.plot(x, data[:,1], label='Smartphone Ownership Rate(%)', linestyle='-', marker='o', markersize=7)\nax.plot(x, data[:,2], label='Tablet Ownership Rate(%)', linestyle='-', marker='s', markersize=7)\nax.plot(x, data[:,3], label='Desktop Computer Ownership Rate(%)', linestyle='-', marker='^', markersize=7)\n\n# set up the labels\nax.set_xlabel('Year')\nax.set_ylabel('Ownership Rate(%)')\nax.set_title('Trends of Device Ownership Rate in the U.S. from 2011-2017')\nax.grid(True, linestyle='--', color='black', alpha=0.2)\nax.legend(loc='lower right')\n\n# annotate data points\nfor i, txt in enumerate(data[:,1]):\n    ax.annotate(txt, (x[i],data[i,1]), xytext=(x[i]+0.2,data[i,1]), fontsize=10)\n\nfor i, txt in enumerate(data[:,2]):\n    ax.annotate(txt, (x[i],data[i,2]), xytext=(x[i]+0.2,data[i,2]), fontsize=10)\n\nfor i, txt in enumerate(data[:,3]):\n    ax.annotate(txt, (x[i],data[i,3]), xytext=(x[i]+0.2,data[i,3]), fontsize=10)\n\n# set up x ticks\nplt.xticks(x)\nplt.tight_layout()\n\n# save the figure\nplt.savefig('line chart/png/122.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the increase in tablet ownership rate from 2011 to 2017?",
            "output": "30%"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_202",
        "img": "./line_chart_num/png/line_num_202.png",
        "topic": "Healthcare and Health",
        "title": " Health and Satisfaction Index of Different Age Groups in 2021",
        "csv": "Age \\t Health Index \\t Satisfaction Index \\n 18-25 \\t 50 \\t 75 \\n 26-35 \\t 60 \\t 80 \\n 36-45 \\t 70 \\t 85 \\n 46-55 \\t 75 \\t 90 \\n 56-65 \\t 85 \\t 95 \\n 66-75 \\t 95 \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the 'Health Index' and 'Satisfaction Index' across various age groups in 2021. The age groups range from 18-25 to 66-75 years. For the youngest group, 18-25, the Health Index is at 50 and Satisfaction Index is at 75. As age increases, both indices generally show an upward trend. The 26-35 age group scores a Health Index of 60 and Satisfaction Index of 80; 36-45 years old have a Health Index of 70 and Satisfaction Index of 85. Those aged 46-55 show a Health Index of 75 and Satisfaction Index of 90, 56-65 years score 85 and 95 respectively, and the 66-75 age group tops with a Health Index of 95 and Satisfaction Index of 100."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure before plotting\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\n\n# Plot the data\nage = ['18-25','26-35','36-45','46-55','56-65','66-75']\nhealth = [50,60,70,75,85,95]\nsatisfaction = [75,80,85,90,95,100]\n\nax.plot(age, health, color='b', label='Health Index', marker='o')\nax.plot(age, satisfaction, color='r', label='Satisfaction Index', marker='o')\n\n# Label the value of each data point directly on the figure\nfor x, y in zip(age, health):\n    ax.annotate(y, xy=(x, y), xytext=(-2,2), textcoords='offset points', fontsize=12)\nfor x, y in zip(age, satisfaction):\n    ax.annotate(y, xy=(x, y), xytext=(-2,2), textcoords='offset points', fontsize=12)\n\n# Add legend and title\nax.legend(loc='best')\nplt.title(\"Health and Satisfaction Index of Different Age Groups in 2021\")\n\n# Prevent interpolation\nplt.xticks(age)\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save figure\nplt.savefig(\"line chart/png/447.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the Satisfaction Index for the age group 26-35?",
            "output": "80"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_136",
        "img": "./line_chart_num/png/line_num_136.png",
        "topic": "Energy and Utilities",
        "title": " Energy consumption in the US from 2001 to 2005",
        "csv": "Year \\t Renewable Energy (TWh) \\t Coal Energy (TWh) \\t Gas Energy (TWh) \\n 2001 \\t 150 \\t 500 \\t 400 \\n 2002 \\t 200 \\t 450 \\t 460 \\n 2003 \\t 250 \\t 400 \\t 480 \\n 2004 \\t 290 \\t 350 \\t 520 \\n 2005 \\t 320 \\t 300 \\t 540 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the energy consumption in the United States from 2001 to 2005, split into three categories: Renewable Energy, Coal Energy, and Gas Energy, measured in terawatt-hours (TWh). In 2001, renewable energy usage was at 150 TWh, coal energy at 500 TWh, and gas energy at 400 TWh. By 2005, renewable energy increased to 320 TWh, coal energy decreased to 300 TWh, and gas energy rose to 540 TWh, indicating shifts in energy consumption patterns over the five-year period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data \nyear = [2001, 2002, 2003, 2004, 2005]\nRenewable_Energy = [150, 200, 250, 290, 320]\nCoal_Energy = [500, 450, 400, 350, 300]\nGas_Energy = [400, 460, 480, 520, 540]\n\n# create figure\nfig = plt.figure(figsize=(10,8))\n\n# plot line chart\nplt.plot(year, Renewable_Energy, label=\"Renewable Energy (TWh)\")\nplt.plot(year, Coal_Energy, label=\"Coal Energy (TWh)\")\nplt.plot(year, Gas_Energy, label=\"Gas Energy (TWh)\")\n\n# add title and legend\nplt.title(\"Energy consumption in the US from 2001 to 2005\")\nplt.legend(loc=\"upper left\")\n\n# annotate each data point\nfor i in range(len(year)):\n    plt.annotate(Renewable_Energy[i], xy=(year[i], Renewable_Energy[i]))\n    plt.annotate(Coal_Energy[i], xy=(year[i], Coal_Energy[i]))\n    plt.annotate(Gas_Energy[i], xy=(year[i], Gas_Energy[i]))\n\n# label axes\nplt.xlabel(\"Year\")\nplt.ylabel(\"Energy Consumption (TWh)\")\n\n# set xticks\nplt.xticks(year)\n\n# adjust grids\nplt.grid(axis=\"y\", color=\"grey\", linestyle=\"--\", linewidth=1)\nplt.grid(axis=\"x\")\n\n# adjust layout\nplt.tight_layout()\n\n# save figure\nplt.savefig(\"line chart/png/49.png\")\n\n# clear state of figure\nplt.clf()"
        },
        "QA": {
            "input": "In which year was Gas Energy consumption closest to the consumption of Renewable Energy?",
            "output": "2005"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_166",
        "img": "./line_chart_num/png/line_num_166.png",
        "topic": "Transportation and Logistics",
        "title": " Sales of Cars, Trains and Bikes Worldwide from 2018-2023",
        "csv": "Year \\t Car Sales(million) \\t Train Sales(million) \\t Bike Sales(million) \\n 2018 \\t 10 \\t 1 \\t 5 \\n 2019 \\t 12 \\t 2 \\t 7 \\n 2020 \\t 14 \\t 3 \\t 9 \\n 2021 \\t 16 \\t 4 \\t 11 \\n 2022 \\t 18 \\t 5 \\t 13 \\n 2023 \\t 20 \\t 6 \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart outlines the sales of cars, trains, and bikes worldwide from 2018 to 2023. In 2018, car sales were at 10 million, train sales at 1 million, and bike sales at 5 million. Over the years, all three categories show an increase. By 2023, the data indicates car sales at 20 million, train sales at 6 million, and bike sales at 15 million. The trend suggests a consistent upward trajectory for each mode of transportation's sales figures across the six-year span."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#set data \nx = np.array([2018, 2019, 2020, 2021, 2022, 2023]) \ny1 = np.array([10,12,14,16,18,20]) \ny2 = np.array([1,2,3,4,5,6]) \ny3 = np.array([5,7,9,11,13,15])\n\n# create figure\nfig = plt.figure(figsize=(10,6))\n\n# create subplot \nax = fig.add_subplot(111)\n\n# plot line chart\nax.plot(x, y1, color = 'green', marker='o', linestyle='--',label='Car Sales(million)') \nax.plot(x, y2, color = 'blue', marker='o', linestyle='--',label='Train Sales(million)') \nax.plot(x, y3, color = 'red', marker='o', linestyle='--',label='Bike Sales(million)')\n\n# set title \nax.set_title('Sales of Cars, Trains and Bikes Worldwide from 2018-2023')\n\n# set x and y labels \nax.set_xlabel('Year') \nax.set_ylabel('Sales (million)') \n\n\n# add grids\nax.grid(color='#95a5a6', linestyle='--', linewidth=1, axis='both',alpha=0.4)\n\n# set legend\nax.legend(loc='upper left')\n\n#save image\nfig.tight_layout()\nplt.savefig('line_166.png')\n\n# clear image\nplt.clf()"
        },
        "QA": {
            "input": "What was the difference in sales between cars and trains in 2021?",
            "output": "12 million"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_279",
        "img": "./line_chart_num/png/line_num_279.png",
        "topic": "Science and Engineering",
        "title": " Climate Change in the Arctic Region: Average Windspeed, Solar Radiation, and Temperature Variations from 2019-2023",
        "csv": "Year \\t Windspeed (m/s) \\t Solar Radiation (hundred W/m2) \\t Temperature (Celsius) \\n 2019 \\t 5 \\t 8 \\t 15 \\n 2020 \\t 6 \\t 9 \\t 17 \\n 2021 \\t 7 \\t 10 \\t 19 \\n 2022 \\t 8 \\t 11 \\t 21 \\n 2023 \\t 9 \\t 12 \\t 23 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart titled \"Climate Change in the Arctic Region: Average Windspeed, Solar Radiation, and Temperature Variations from 2019-2023\" represents three variables over a five-year period. Windspeed progressively increases from 5 m/s in 2019 to 9 m/s in 2023. Concurrently, solar radiation intensifies from 800 W/m^2 to 1200 W/m^2, and the average temperature climbs from 15 to 23 degrees Celsius. Each year, the chart plots a point for these three climate metrics, connected by lines to illustrate the trends."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(14, 8))\n\nyear = np.array([2019, 2020, 2021, 2022, 2023])\nwindspeed = np.array([5, 6, 7, 8, 9])\nsolar_radiation = np.array([8, 9, 10, 11, 12])\ntemperature = np.array([15, 17, 19, 21, 23])\n\nplt.plot(year, windspeed, label=\"Windspeed (m/s)\")\nplt.plot(year, solar_radiation, label=\"Solar Radiation (hundred W/m2)\")\nplt.plot(year, temperature, label=\"Temperature (Celsius)\")\nplt.xticks(year)\nplt.title(\"Climate Change in the Arctic Region: Average Windspeed, Solar Radiation, and Temperature Variations from 2019-2023\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Value\")\nplt.legend(loc='upper left')\nfor a, b, c in zip(year, windspeed, solar_radiation): \n    plt.annotate(str(b) + \" m/s\", xy=(a, b))\nfor a, b, c in zip(year, solar_radiation, temperature):\n    plt.annotate(str(c) + \" W/m2\", xy=(a, c))\nfor a, b, c in zip(year, windspeed, temperature):\n    plt.annotate(str(c) + \" \u00b0C\", xy=(a, c))\nplt.tight_layout()\nplt.savefig(\"line_279.png\")\nplt.clf()"
        },
        "QA": {
            "input": "By how many Celsius degrees did the average temperature increase from 2019 to 2023 in the Arctic Region?",
            "output": "8 degrees Celsius"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_354",
        "img": "./line_chart_num/png/line_num_354.png",
        "topic": "Law and Legal Affairs",
        "title": " Cases Filed in U.S. Courts from 2011-2015",
        "csv": "Year \\t Criminal Cases Filed \\t Civil Cases Filed \\t Total Cases Filed \\n 2011 \\t 10000 \\t 15000 \\t 25000 \\n 2012 \\t 11000 \\t 14000 \\t 25000 \\n 2013 \\t 12000 \\t 15000 \\t 27000 \\n 2014 \\t 13000 \\t 14000 \\t 27000 \\n 2015 \\t 14000 \\t 15000 \\t 29000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the annual trend in cases filed within U.S. courts from 2011 to 2015. In 2011, there were 10,000 criminal cases and 15,000 civil cases, totaling 25,000 cases filed. Over the years, the number of criminal cases increased steadily, reaching 14,000 by 2015, while civil cases alternated between 14,000 and 15,000. The total number of cases filed each year showed a slight increase, from 25,000 cases in 2011 to 29,000 in 2015."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\nyear=['2011','2012','2013','2014','2015']\ncrim=[10000,11000,12000,13000,14000]\ncivil=[15000,14000,15000,14000,15000]\ntotal=[25000,25000,27000,27000,29000]\n\nplt.figure(figsize=(8,4))\nax=plt.subplot()\nplt.plot(year,crim,label='Criminal Cases Filed',color='r')\nplt.plot(year,civil,label='Civil Cases Filed',color='b')\nplt.plot(year,total,label='Total Cases Filed',color='g')\n\nax.xaxis.set_major_locator(ticker.MultipleLocator(1))\nplt.xticks(year)\nplt.title(\"Cases Filed in U.S. Courts from 2011-2015\")\nplt.xlabel('Year')\nplt.ylabel('Cases Filed')\nplt.legend(loc=0)\n\nfor i,j in zip(year,total):\n    ax.annotate(str(j),xy=(i,j))\n\nplt.tight_layout()\nplt.savefig('line chart/png/306.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year did the number of criminal cases filed reach 13,000?",
            "output": "2014"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_162",
        "img": "./line_chart_num/png/line_num_162.png",
        "topic": "Manufacturing and Production",
        "title": " Change in Manufacturing Output and Raw Material Cost during 2021",
        "csv": "Month \\t Manufacturing Output(units) \\t Raw Material Cost(dollars) \\n January \\t 10000 \\t 500 \\n February \\t 15000 \\t 550 \\n March \\t 13000 \\t 450 \\n April \\t 20000 \\t 700 \\n May \\t 18000 \\t 650 \\n June \\t 12000 \\t 400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the change in manufacturing output measured in units alongside the raw material cost in dollars over a six-month period during 2021. In January, the manufacturing output was 10,000 units with a raw material cost of $500. February saw an increase to 15,000 units and $550 in costs. March's output decreased slightly to 13,000 units, with a lower cost of $450. April had the highest output at 20,000 units and the highest cost at $700. In May, the output was 18,000 units with a cost of $650, and in June, the output dropped to 12,000 units with the lowest cost at $400."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [['January', 10000, 500], ['February', 15000, 550], ['March', 13000, 450], ['April', 20000, 700], ['May', 18000, 650], ['June', 12000, 400]]\n\nmonth = [x[0] for x in data]\nManufacturing_Output = [x[1] for x in data]\nRaw_Material_Cost = [x[2] for x in data]\n\nfig = plt.figure(figsize=(15,7))\nax = fig.add_subplot(111)\n\nax.plot(month, Manufacturing_Output, label=\"Manufacturing Output(units)\", color=\"red\")\nax.plot(month, Raw_Material_Cost, label=\"Raw Material Cost(dollars)\", color=\"blue\")\n\nax.set_title(\"Change in Manufacturing Output and Raw Material Cost during 2021\")\nax.set_xlabel(\"Month\")\n\nax.set_xticks(np.arange(len(month)), minor=False)\nax.set_xticklabels(month, rotation=45, fontsize=14)\n\nax.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.15), ncol=3, fancybox=True, shadow=True, fontsize=14)\nax.grid(True, linestyle='-.',which='major', color='grey', alpha=0.3)\n\nfor i in range(len(month)):\n    ax.annotate(Manufacturing_Output[i], xy=(i, Manufacturing_Output[i]), xytext=(i+0.1, Manufacturing_Output[i]+500))\n    ax.annotate(Raw_Material_Cost[i], xy=(i, Raw_Material_Cost[i]), xytext=(i+0.1, Raw_Material_Cost[i]+50))\n\nplt.tight_layout()\nplt.savefig('line chart/png/99.png')\nplt.clf()"
        },
        "QA": {
            "input": "What was the manufacturing output in the month of April?",
            "output": "20000"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_464",
        "img": "./line_chart_num/png/line_num_464.png",
        "topic": "Human Resources and Employee Management",
        "title": " Changes in Employment rate, Average Salary and Working Hours of Employees in the US from 2010 to 2014",
        "csv": "Year \\t Average Salary(thousand dollars) \\t Average Working Hours \\t Employment Rate \\n 2010 \\t 40 \\t 40 \\t 75 \\n 2011 \\t 42 \\t 38 \\t 80 \\n 2012 \\t 44 \\t 37 \\t 85 \\n 2013 \\t 46 \\t 36 \\t 90 \\n 2014 \\t 48 \\t 35 \\t 95 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the trends in the average salary (in thousands of dollars), average working hours, and employment rate for employees in the US from 2010 to 2014. In 2010, the average salary was $40k with 40 working hours and a 75% employment rate. The data for subsequent years show an upward trend in the average salary increasing to $42k in 2011, $44k in 2012, $46k in 2013, and $48k in 2014, with average working hours decreasing from 38 in 2011 to 35 in 2014. Meanwhile, the employment rate grew consistently from 80% in 2011 to 95% in 2014."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport pandas as pd \n\n#create figure\nfig = plt.figure(figsize = (10,8))\nax = fig.add_subplot() \n\n#load data \ndata={'Year':[2010,2011,2012,2013,2014],\n    'Average Salary(thousand dollars)':[40,42,44,46,48],\n    'Average Working Hours':[40,38,37,36,35],\n    'Employment Rate':[75,80,85,90,95]} \n\n#plot\nax.plot(data['Year'],data['Average Salary(thousand dollars)'],label='Average Salary(thousand dollars)',marker='o')\nax.plot(data['Year'],data['Average Working Hours'],label='Average Working Hours',marker='o')\nax.plot(data['Year'],data['Employment Rate'],label='Employment Rate',marker='o')\n\n#add labels\nfor i, txt in enumerate(data['Average Salary(thousand dollars)']):\n    ax.annotate(txt, (data['Year'][i], data['Average Salary(thousand dollars)'][i]), rotation=45, wrap=True)\nfor i, txt in enumerate(data['Average Working Hours']):\n    ax.annotate(txt, (data['Year'][i], data['Average Working Hours'][i]), rotation=45, wrap=True)\nfor i, txt in enumerate(data['Employment Rate']):\n    ax.annotate(txt, (data['Year'][i], data['Employment Rate'][i]), rotation=45, wrap=True)\n\n#configure plot\nax.grid(True)\nax.set_title('Changes in Employment rate, Average Salary and Working Hours of Employees in the US from 2010 to 2014')\nax.legend(loc = 'best')\nax.set_xlabel('Year')\nax.set_ylabel('Employment rate/Average Salary(thousand dollars)/Average Working Hours')\nax.set_xticks(data['Year'])\n\n#resize\nplt.tight_layout()\n\n#save\nplt.savefig('line_464.png')\n\n#clear\nplt.clf()"
        },
        "QA": {
            "input": "By how many thousand dollars did the average salary increase from 2010 to 2014?",
            "output": "8 thousand dollars"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_23",
        "img": "./line_chart_num/png/line_num_23.png",
        "topic": "Arts and Culture",
        "title": " Cultural Events Trend in the Last Four Years",
        "csv": "Year \\t Number of Art Exhibitions \\t Number of Music Festivals \\t Number of Theater Plays \\n 2016 \\t 20 \\t 10 \\t 15 \\n 2017 \\t 25 \\t 12 \\t 20 \\n 2018 \\t 17 \\t 14 \\t 18 \\n 2019 \\t 30 \\t 15 \\t 25 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the trend in the number of cultural events\u2014namely art exhibitions, music festivals, and theater plays\u2014over the last four years. In 2016, there were 20 art exhibitions, 10 music festivals, and 15 theater plays. The next year, 2017, saw an increase to 25 art exhibitions, 12 music festivals, and 20 theater plays. In 2018, the numbers slightly varied with 17 art exhibitions, 14 music festivals, and 18 theater plays. Finally, 2019 marked the highest increase, with 30 art exhibitions, 15 music festivals, and 25 theater plays."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create figure\nfig = plt.figure(figsize=(20, 10))\n\n# Set the data\nx = [2016, 2017, 2018, 2019]\ny1 = [20, 25, 17, 30]\ny2 = [10, 12, 14, 15]\ny3 = [15, 20, 18, 25]\n\n# Plot the data\nplt.plot(x, y1, marker='o', linestyle='-', color='r', label='Number of Art Exhibitions')\nplt.plot(x, y2, marker='o', linestyle='-', color='b', label='Number of Music Festivals')\nplt.plot(x, y3, marker='o', linestyle='-', color='g', label='Number of Theater Plays')\n\n# Label the data points\nfor i, j in zip(x, y1):\n    plt.annotate(str(j), xy=(i, j+0.5))\nfor i, j in zip(x, y2):\n    plt.annotate(str(j), xy=(i, j+0.5))\nfor i, j in zip(x, y3):\n    plt.annotate(str(j), xy=(i, j+0.5))\n\n# Set the title\nplt.title('Cultural Events Trend in the Last Four Years')\n\n# Set the legend\nplt.legend(loc='best')\n\n# Set the x-ticks\nplt.xticks(x)\n\n# Set the background grid\nplt.grid()\n\n# Resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('line chart/png/164.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many art exhibitions were there in 2018?",
            "output": "17"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_406",
        "img": "./line_chart_num/png/line_num_406.png",
        "topic": "Government and Public Policy",
        "title": " Tax Revenues in the USA from 2000 to 2004",
        "csv": "Year \\t Local Tax Revenue(million dollars) \\t State Tax Revenue(million dollars) \\t Federal Tax Revenue(million dollars) \\n 2000 \\t 600 \\t 1000 \\t 2000 \\n 2001 \\t 800 \\t 1200 \\t 3000 \\n 2002 \\t 1000 \\t 1500 \\t 4000 \\n 2003 \\t 1200 \\t 1800 \\t 3000 \\n 2004 \\t 1400 \\t 2000 \\t 2000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the progression of tax revenues in the USA from 2000 to 2004, divided into local, state, and federal levels. In 2000, local tax revenue was $600 million, state tax revenue stood at $1000 million, and federal tax revenue was at $2000 million. By 2004, these figures grew to $1400 million for local, $2000 million for state, and showed a decrease at the federal level to $2000 million after peaking at $4000 million in 2002. The trend over the five years shows an increase in local and state revenues, with federal revenue fluctuating."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set figure size\nplt.figure(figsize=(12, 8))\n\n# Set Subplot\nax = plt.subplot()\n\n# Set x and y axis\nx_axis = np.array([2000, 2001, 2002, 2003, 2004])\ny_axis_1 = np.array([600, 800, 1000, 1200, 1400])\ny_axis_2 = np.array([1000, 1200, 1500, 1800, 2000])\ny_axis_3 = np.array([2000, 3000, 4000, 3000, 2000])\n\n# Plot three lines\nax.plot(x_axis, y_axis_1, label=\"Local Tax Revenue(million dollars)\")\nax.plot(x_axis, y_axis_2, label=\"State Tax Revenue(million dollars)\")\nax.plot(x_axis, y_axis_3, label=\"Federal Tax Revenue(million dollars)\")\n\n# Set x and y ticks\nplt.xticks(x_axis)\nplt.yticks(np.arange(0, 5000, 1000))\n\n# Set title and legend\nax.set_title(\"Tax Revenues in the USA from 2000 to 2004\")\nax.legend(loc=\"best\")\n\n# Set grid\nax.grid()\n\n# Set annotation\nfor x, y_1, y_2, y_3 in zip(x_axis, y_axis_1, y_axis_2, y_axis_3):\n    ax.annotate('{},{},{}'.format(y_1, y_2, y_3), (x, y_1), \n                xytext=(-20, 10), textcoords='offset points', \n                rotation=45, wrap=True)\n\n# Adjust figure\nplt.tight_layout()\n\n# Save figure\nplt.savefig('line chart/png/286.png')\n\n# Clean figure\nplt.cla()"
        },
        "QA": {
            "input": "How much did the Local Tax Revenue increase from 2000 to 2004?",
            "output": "$800 million"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_409",
        "img": "./line_chart_num/png/line_num_409.png",
        "topic": "Manufacturing and Production",
        "title": " Production of three items in a factory in 2020",
        "csv": "Month \\t Production A(units) \\t Production B(units) \\t Production C(units) \\n January \\t 500 \\t 800 \\t 1000 \\n February \\t 600 \\t 700 \\t 1100 \\n March \\t 700 \\t 900 \\t 1300 \\n April \\t 800 \\t 1000 \\t 1500 \\n May \\t 900 \\t 1200 \\t 1800 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the monthly production figures for three products, labeled A, B, and C, by a factory in 2020. In January, Production A is at 500 units, B at 800 units, and C at 1000 units. February shows an increase with Production A at 600 units, B decreasing slightly to 700 units, and C at 1100 units. In March, the numbers rise further with Product A at 700 units, B at 900 units, and C at 1300 units. April's production continues the upward trend with A at 800 units, B at 1000 units, and C at 1500 units. By May, Production A reaches 900 units, B peaks at 1200 units, and C at 1800 units."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nmonths = [\"January\", \"February\", \"March\", \"April\", \"May\"]\nproduction_A = [500, 600, 700, 800, 900]\nproduction_B = [800, 700, 900, 1000, 1200]\nproduction_C = [1000, 1100, 1300, 1500, 1800]\n\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(1,1,1)\nax.plot(months, production_A, marker='o', linestyle='-', color='blue', label='Production A')\nax.plot(months, production_B, marker='o', linestyle='-', color='red', label='Production B')\nax.plot(months, production_C, marker='o', linestyle='-', color='green', label='Production C')\nax.legend(loc='upper left', fontsize='large')\n\nfor x, y in zip(months, production_A):\n    ax.annotate(str(y), xy=(x,y), xytext=(-5, 5), textcoords='offset points')\nfor x, y in zip(months, production_B):\n    ax.annotate(str(y), xy=(x,y), xytext=(-5, 5), textcoords='offset points')\nfor x, y in zip(months, production_C):\n    ax.annotate(str(y), xy=(x,y), xytext=(-5, 5), textcoords='offset points')\n\nplt.xticks(np.arange(len(months)), months, rotation=45)\nplt.title(\"Production of three items in a factory in 2020\")\nplt.tight_layout()\nplt.savefig(\"line chart/png/220.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How many units of Production C were manufactured in March?",
            "output": "1300"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_322",
        "img": "./line_chart_num/png/line_num_322.png",
        "topic": "Government and Public Policy",
        "title": " Changes in Tax Rate and Government Spending in the US from 2010 to 2016",
        "csv": "Year \\t Tax Rate \\t Government Spending(billion dollars) \\n 2010 \\t 25% \\t 600 \\n 2011 \\t 27% \\t 650 \\n 2012 \\t 28% \\t 700 \\n 2013 \\t 29% \\t 750 \\n 2014 \\t 30% \\t 800 \\n 2015 \\t 32% \\t 850 \\n 2016 \\t 33% \\t 900 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the changes in the tax rate and government spending in the US from 2010 to 2016. In 2010, the tax rate was 25% with government spending at 600 billion dollars. Each subsequent year shows an increase in both the tax rate and government spending, with figures reaching 27% and 650 billion in 2011, 28% and 700 billion in 2012, and so forth, culminating in a tax rate of 33% and government spending of 900 billion dollars by 2016."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(111)\nax.plot(['2010','2011','2012','2013','2014','2015','2016'],[25,27,28,29,30,32,33],marker='o',label='Tax Rate')\nax.plot(['2010','2011','2012','2013','2014','2015','2016'],[600,650,700,750,800,850,900],marker='o',label='Government Spending(billion dollars)')\nax.legend(loc='upper left', bbox_to_anchor=(1,1))\nfor a,b in zip(['2010','2011','2012','2013','2014','2015','2016'],[25,27,28,29,30,32,33]): \n    ax.annotate(str(b)+'%',xy=(a,b))\nfor c,d in zip(['2010','2011','2012','2013','2014','2015','2016'],[600,650,700,750,800,850,900]): \n    ax.annotate(str(d)+'$',xy=(c,d))\nax.set_xticks(['2010','2011','2012','2013','2014','2015','2016'])\nax.set_xlabel('Year')\nax.set_title('Changes in Tax Rate and Government Spending in the US from 2010 to 2016')\nplt.tight_layout()\nplt.savefig('line chart/png/89.png')\nplt.clf()"
        },
        "QA": {
            "input": "What was the government spending in 2014?",
            "output": "800 billion dollars"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_205",
        "img": "./line_chart_num/png/line_num_205.png",
        "topic": "Food and Beverage Industry",
        "title": " Global Fast Food vs Traditional Food Consumption Over Time",
        "csv": "Year \\t Fast Food Consumption(in billion) \\t Traditional Food Consumption(in billion) \\n 2001 \\t 120 \\t 200 \\n 2002 \\t 130 \\t 220 \\n 2003 \\t 140 \\t 250 \\n 2004 \\t 160 \\t 270 \\n 2005 \\t 180 \\t 300 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the global consumption trends of fast foods versus traditional foods over a five-year period, from 2001 to 2005. Fast food consumption steadily increases from 120 billion in 2001 to 180 billion in 2005. Meanwhile, traditional food consumption also rises from 200 billion to 300 billion within the same time frame. Both categories show a clear upward trend in consumption."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [[2001,120,200],[2002,130,220],[2003,140,250],[2004,160,270],[2005,180,300]]\n\nx = np.array([x[0] for x in data])\ny1 = np.array([x[1] for x in data])\ny2 = np.array([x[2] for x in data])\n\nplt.figure(figsize=(12,6))\nax = plt.subplot()\nax.plot(x,y1,label='Fast Food Consumption(in billion)')\nax.plot(x,y2,label='Traditional Food Consumption(in billion)')\nplt.title('Global Fast Food vs Traditional Food Consumption Over Time', fontsize=14)\nplt.xlabel('Year', fontsize=14)\nplt.ylabel('Consumption(in billion)', fontsize=14)\nax.xaxis.set_major_locator(plt.MaxNLocator(5))\nax.set_xticklabels(x,rotation=45, fontsize=12, ha=\"right\", va=\"top\") \nax.legend(frameon=True, fontsize=12)\nax.grid(linestyle='--', linewidth=0.7)\nfor i,j in zip(x,y1):\n    ax.annotate('{}'.format(j),xy=(i,j), xytext=(0,-9),textcoords=\"offset points\", ha='center', va='top', fontsize=12)\nfor i,j in zip(x,y2):\n    ax.annotate('{}'.format(j),xy=(i,j), xytext=(0,8),textcoords=\"offset points\", ha='center', va='bottom', fontsize=12)\nplt.tight_layout()\nplt.savefig('line chart/png/444.png')\nplt.clf()"
        },
        "QA": {
            "input": "By how much did traditional food consumption increase from 2001 to 2005?",
            "output": "100 billion"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_449",
        "img": "./line_chart_num/png/line_num_449.png",
        "topic": "Food and Beverage Industry",
        "title": " Organic and GMO Food Sales in the US from 2020 to 2024",
        "csv": "Year \\t Organic Food Sales(billion dollars) \\t GMO Food Sales(billion dollars) \\n 2020 \\t 300 \\t 400 \\n 2021 \\t 320 \\t 410 \\n 2022 \\t 340 \\t 420 \\n 2023 \\t 360 \\t 430 \\n 2024 \\t 380 \\t 440 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the sales of organic and GMO foods in the US, measured in billion dollars, from 2020 to 2024. The sales of organic foods start at $300 billion in 2020 and rise steadily by $20 billion each year, reaching $380 billion by 2024. Conversely, GMO food sales begin at $400 billion in 2020, with a consistent $10 billion annual increase, culminating at $440 billion in 2024. The data show an upward trend in both categories over the five-year period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size\nplt.figure(figsize=(10,6))\n\n# Get the data\ndata = np.array([[2020, 300, 400],\n                [2021, 320, 410],\n                [2022, 340, 420],\n                [2023, 360, 430],\n                [2024, 380, 440]])\n\n# Get the x and y values\nx = data[:, 0]\ny1 = data[:, 1]\ny2 = data[:, 2]\n\n# Add a subplot\nax = plt.subplot()\n\n# Plot the line chart\nax.plot(x, y1, label=\"Organic Food Sales(billion dollars)\", color=\"#f08080\")\nax.plot(x, y2, label=\"GMO Food Sales(billion dollars)\", color=\"#20b2aa\")\n\n# Set the title\nax.set_title(\"Organic and GMO Food Sales in the US from 2020 to 2024\")\n\n# Set the x ticks \nax.set_xticks(x)\n\n# Set the legend\nax.legend(loc=\"best\")\n\n# Set the labels\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Sales(billion dollars)\")\n\n# Annotate\nfor i,j in zip(x,y1):\n    ax.annotate(str(j),xy=(i,j))\nfor i,j in zip(x,y2):\n    ax.annotate(str(j),xy=(i,j))\n\n# Adjust the layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"line chart/png/201.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "By how much did the sales of organic food increase from 2020 to 2024?",
            "output": "$80 billion"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_169",
        "img": "./line_chart_num/png/line_num_169.png",
        "topic": "Tourism and Hospitality",
        "title": " Bookings of tourism and hospitality sector in the USA, 2021",
        "csv": "Month \\t Hotel Bookings(thousands) \\t Restaurant Bookings(thousands) \\t Tourist Attractions Bookings(thousands) \\n January \\t 200 \\t 150 \\t 50 \\n February \\t 220 \\t 220 \\t 55 \\n March \\t 210 \\t 225 \\t 60 \\n April \\t 250 \\t 215 \\t 70 \\n May \\t 210 \\t 220 \\t 75 \\n June \\t 220 \\t 230 \\t 80 \\n July \\t 240 \\t 235 \\t 85 \\n August \\t 210 \\t 240 \\t 90 \\n September \\t 200 \\t 205 \\t 95 \\n October \\t 220 \\t 210 \\t 100 \\n November \\t 195 \\t 215 \\t 105 \\n December \\t 215 \\t 220 \\t 110 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart presents monthly booking data for the tourism and hospitality sector in the USA for the year 2021, separating hotel bookings, restaurant bookings, and tourist attractions bookings, all in thousands. January starts with 200 hotel bookings, 150 restaurant bookings, and 50 tourist attractions bookings. Monthly fluctuations are seen, such as hotel bookings peaking in April at 250 and tourist attractions bookings growing consistently, reaching 110 in December. Restaurant bookings display a high in August at 240, showing varied patterns throughout the year. Each sector exhibits a distinct trend line over the 12 months."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\nhotel_bookings = [200, 220, 210, 250, 210, 220, 240, 210, 200, 220, 195, 215]\nrestaurant_bookings = [150, 220, 225, 215, 220, 230, 235, 240, 205, 210, 215, 220]\ntourist_bookings = [50, 55, 60, 70, 75, 80, 85, 90, 95, 100, 105, 110]\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot()\n\nplt.title('Bookings of tourism and hospitality sector in the USA, 2021')\nplt.plot(months, hotel_bookings, color='blue', label='Hotel Bookings (thousands)')\nplt.plot(months, restaurant_bookings, color='red', label='Restaurant Bookings (thousands)')\nplt.plot(months, tourist_bookings, color='green', label='Tourist Attractions Bookings (thousands)')\n\nplt.grid()\n\nax.xaxis.set_ticks(np.arange(len(months)))\nax.xaxis.set_ticklabels(months, rotation=90, fontsize=10)\n\nplt.legend(loc='lower right', fontsize=10)\nplt.xticks(rotation=90)\n\nfor a,b,c in zip(months, hotel_bookings, restaurant_bookings): \n    plt.annotate(str(b)+','+str(c), xy=(a, b), xytext=(-2, 15), textcoords='offset points')\n\nplt.tight_layout()\nplt.savefig('line chart/png/357.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which month did the hotel bookings peak?",
            "output": "April"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_232",
        "img": "./line_chart_num/png/line_num_232.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee growth and salary changes in a company from 2020 to 2023",
        "csv": "Year \\t Number of employees \\t Average salary (thousand dollars) \\t Average hiring rate \\n 2020 \\t 100 \\t 40 \\t 25 \\n 2021 \\t 150 \\t 45 \\t 30 \\n 2022 \\t 200 \\t 50 \\t 35 \\n 2023 \\t 250 \\t 55 \\t 40 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart presents the growth in the number of employees and changes in average salary and hiring rates for a company from 2020 to 2023. In 2020, there were 100 employees with an average salary of 40 thousand dollars and a hiring rate of 25%. These figures increased each year, ending with 250 employees in 2023, an average salary of 55 thousand dollars, and a hiring rate of 40%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\nx = np.arange(2020, 2024, 1)\ny1 = np.array([100,150,200,250])\ny2 = np.array([40,45,50,55])\ny3 = np.array([25,30,35,40])\nplt.xticks(x, x, rotation=0)\nplt.title(\"Employee growth and salary changes in a company from 2020 to 2023\")\nplt.plot(x, y1, label=\"Number of employees\")\nplt.plot(x, y2, label=\"Average salary (thousand dollars)\")\nplt.plot(x, y3, label=\"Average hiring rate\", color='black')\nplt.ylabel('Data')\nplt.xlabel('Year')\nfor a, b in zip(x, y1):\n    plt.text(a, b, b, ha='left', va='bottom', fontsize=8)\nfor a, b in zip(x, y2):\n    plt.text(a, b, b, ha='left', va='bottom', fontsize=8)\nfor a, b in zip(x, y3):\n    plt.text(a, b, b, ha='left', va='bottom', fontsize=8)\nplt.legend(bbox_to_anchor=(1.0, 1.0))\nplt.tight_layout()\nplt.savefig(\"line_232.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How much did the average salary increase from 2020 to 2023?",
            "output": "15"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_54",
        "img": "./line_chart_num/png/line_num_54.png",
        "topic": "Tourism and Hospitality",
        "title": " Tourist Visitor in the USA from 2017 to 2021",
        "csv": "Year \\t International Visitor \\t Domestic Visitor \\n 2017 \\t 3000 \\t 2500 \\n 2018 \\t 3500 \\t 2700 \\n 2019 \\t 4000 \\t 3000 \\n 2020 \\t 4500 \\t 3300 \\n 2021 \\t 5000 \\t 3700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the trend in tourist numbers in the USA from 2017 to 2021, distinguishing between international and domestic visitors. In 2017, there were 3000 international and 2500 domestic visitors. The subsequent years show a growth in both categories: 3500 international and 2700 domestic in 2018, 4000 international and 3000 domestic in 2019, 4500 international and 3300 domestic in 2020, culminating in 5000 international and 3700 domestic visitors in 2021."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# set the figure size\nplt.figure(figsize=(12,8))\n\n# set the data\nYear = np.array([2017, 2018, 2019, 2020, 2021])\nInternationalVisitor = np.array([3000, 3500, 4000, 4500, 5000])\nDomesticVisitor = np.array([2500, 2700, 3000, 3300, 3700])\n\n# plotting the line chart\nplt.plot(Year, InternationalVisitor, color=\"red\", label=\"International Visitor\")\nplt.plot(Year, DomesticVisitor, color=\"blue\", label=\"Domestic Visitor\")\n\n# set the x ticks\nplt.xticks(Year, Year, rotation='vertical')\n\n# set the title\nplt.title(\"Tourist Visitor in the USA from 2017 to 2021\")\n\n# set the legend\nplt.legend(loc=\"upper right\")\n\n# add the labels\nfor a, b in zip(Year, InternationalVisitor):\n    plt.annotate('{}'.format(b), xy=(a, b), xytext=(a-0.1, b+100))\nfor a, b in zip(Year, DomesticVisitor):\n    plt.annotate('{}'.format(b), xy=(a, b), xytext=(a-0.1, b+100))\n\n# set the tight layout\nplt.tight_layout()\n\n# save the image\nplt.savefig('line chart/png/254.png')\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more Domestic Visitors were there in 2021 compared to 2017?",
            "output": "1200"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_267",
        "img": "./line_chart_num/png/line_num_267.png",
        "topic": "Tourism and Hospitality",
        "title": " Growth of Tourists in the USA from 2016 to 2020",
        "csv": "Year \\t Domestic Tourists(millions) \\t International Tourists(millions) \\n 2016 \\t 120 \\t 150 \\n 2017 \\t 125 \\t 165 \\n 2018 \\t 135 \\t 180 \\n 2019 \\t 140 \\t 190 \\n 2020 \\t 150 \\t 200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the growth of tourism in the USA from 2016 to 2020. It tracks the change in the number of domestic tourists, which increased from 120 million in 2016 to 150 million in 2020, as well as the number of international tourists, which rose from 150 million in 2016 to 200 million in 2020. Each year, both domestic and international tourist numbers show an upward trend."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,6))\nax = plt.gca()\nax.plot(['2016','2017','2018','2019','2020'],[120,125,135,140,150], label=\"Domestic Tourists (millions)\", color='purple', marker='o')\nax.plot(['2016','2017','2018','2019','2020'],[150,165,180,190,200], label=\"International Tourists (millions)\", color='orange', marker='o')\nax.set_title(\"Growth of Tourists in the USA from 2016 to 2020\")\nfor x,y in zip(['2016','2017','2018','2019','2020'],[120,125,135,140,150]):\n    plt.annotate(str(y),xy=(x,y), xytext=(0,5), textcoords='offset points')\nfor x,y in zip(['2016','2017','2018','2019','2020'],[150,165,180,190,200]):\n    plt.annotate(str(y),xy=(x,y), xytext=(0,5), textcoords='offset points')\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05), shadow=True, ncol=2)\nax.set_xticks(['2016','2017','2018','2019','2020'])\nplt.xticks(rotation=45)\nax.text(0.5, 0.5, 'Growth of Tourists in the USA from 2016 to 2020', ha='center', va='center', transform=ax.transAxes)\nplt.tight_layout()\nplt.savefig('line chart/png/518.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year did the number of domestic tourists reach 140 million?",
            "output": "2019"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_213",
        "img": "./line_chart_num/png/line_num_213.png",
        "topic": "Environment and Sustainability",
        "title": " Progress on Renewable Energy and Energy Efficiency in the US",
        "csv": "Year \\t Electricity Consumption(kWh) \\t Renewable Energy Sources(%) \\t Energy Efficiency Index \\n 2020 \\t 10000 \\t 40 \\t 80 \\n 2021 \\t 11000 \\t 50 \\t 90 \\n 2022 \\t 12000 \\t 60 \\t 85 \\n 2023 \\t 13000 \\t 70 \\t 90 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart outlines the progression of electricity consumption in kWh, the percentage of renewable energy sources, and the energy efficiency index over four years in the US. In 2020, electricity consumption was recorded at 10,000 kWh, with renewables at 40% and an efficiency index of 80. By 2021, consumption increased to 11,000 kWh, with a 50% renewable share and efficiency at 90. The trend continues upward in 2022, with 12,000 kWh consumed, 60% renewable sources, and an efficiency index dropping slightly to 85. In 2023, consumption reached 13,000 kWh, with renewables at 70% and efficiency index back at 90."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([2020, 2021, 2022, 2023])\ny1 = np.array([10000, 11000, 12000, 13000])\ny2 = np.array([40, 50, 60, 70])\ny3 = np.array([80, 90, 85, 90])\n\nplt.figure(figsize=(10,8))\nplt.grid(linestyle='--')\nplt.plot(x, y1, label='Electricity Consumption(kWh)', color='red', marker='o')\nplt.plot(x, y2, label='Renewable Energy Sources(%)', color='blue', marker='o')\nplt.plot(x, y3, label='Energy Efficiency Index', color='green', marker='o')\n\nplt.xticks(x)\nplt.legend(loc='best', fontsize=12)\nplt.title('Progress on Renewable Energy and Energy Efficiency in the US', fontsize=14)\n\n\nplt.tight_layout()\nplt.savefig('line_213.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year was the Energy Efficiency Index the same as in 2023?",
            "output": "2021"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_278",
        "img": "./line_chart_num/png/line_num_278.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Donation and volunteerism in US states in 2021",
        "csv": "State \\t Donation Amount (million dollars) \\t Total Volunteers \\t Number of Charities \\n California \\t 100 \\t 1900 \\t 2500 \\n New York \\t 150 \\t 1200 \\t 3000 \\n Texas \\t 130 \\t 1400 \\t 3500 \\n Florida \\t 120 \\t 1700 \\t 4000 \\n Illinois \\t 140 \\t 1500 \\t 3700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the donation amount in million dollars, the total number of volunteers, and the number of charities across five US states in 2021. California reported donations of $100 million, with 1,900 volunteers and 2,500 charities. New York figures show $150 million in donations, 1,200 volunteers, and 3,000 charities. Texas has a donation amount of $130 million, with 1,400 volunteers and 3,500 charities. Florida's data indicates $120 million in donations, 1,700 volunteers, and 4,000 charities. Finally, Illinois has $140 million in donations, alongside 1,500 volunteers and 3,700 charities."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\ndata = [['California', 100, 1900, 2500], ['New York', 150, 1200, 3000], ['Texas', 130, 1400, 3500],\n        ['Florida', 120, 1700, 4000], ['Illinois', 140, 1500, 3700]]\n\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\nax.set_title('Donation and volunteerism in US states in 2021')\nax.set_xlabel('State')\nax.set_ylabel('Total Amount')\nax.plot([data[0][0], data[1][0],data[2][0],data[3][0],data[4][0]],[data[0][1], data[1][1],data[2][1],data[3][1],data[4][1]], marker='o', color='b', label='Donation Amount (million dollars)')\nax.plot([data[0][0], data[1][0],data[2][0],data[3][0],data[4][0]],[data[0][2], data[1][2],data[2][2],data[3][2],data[4][2]], marker='o', color='r', label='Total Volunteers')\nax.plot([data[0][0], data[1][0],data[2][0],data[3][0],data[4][0]],[data[0][3], data[1][3],data[2][3],data[3][3],data[4][3]], marker='o', color='g', label='Number of Charities')\nfor i in range(len(data)):\n    ax.annotate(data[i][1], xy=(data[i][0], data[i][1]))\n    ax.annotate(data[i][2], xy=(data[i][0], data[i][2]))\n    ax.annotate(data[i][3], xy=(data[i][0], data[i][3]))\n\nax.xaxis.set_ticks([x[0] for x in data])\nax.legend(loc='best', ncol=1, frameon=False)\nplt.tight_layout()\nplt.savefig('line_278.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more charities are there in Florida compared to California?",
            "output": "1500"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_338",
        "img": "./line_chart_num/png/line_num_338.png",
        "topic": "Retail and E-commerce",
        "title": " Comparison of Retail and E-commerce Sales in the US, 2021",
        "csv": "Month \\t Retail Sales(million USD) \\t E-commerce Sales(million USD) \\n January \\t 2250 \\t 650 \\n February \\t 2400 \\t 700 \\n March \\t 2700 \\t 800 \\n April \\t 2500 \\t 750 \\n May \\t 2450 \\t 850 \\n June \\t 2650 \\t 1000 \\n July \\t 3000 \\t 1100 \\n August \\t 2800 \\t 950 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the monthly comparison between retail sales and e-commerce sales in the US for 2021, in millions of USD. Starting in January with 2250 million USD in retail and 650 million in e-commerce, sales fluctuate across months. Retail sales peak at 3000 million in July, while e-commerce sales hit their highest at 1100 million in the same month. The progression of sales is shown for the first eight months of the year, ending in August with retail at 2800 million and e-commerce at 950 million USD."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt \nimport numpy as np \n\ndata = [['January',2250,650],\n        ['February',2400,700],\n        ['March',2700,800],\n        ['April',2500,750],\n        ['May',2450,850],\n        ['June',2650,1000],\n        ['July',3000,1100],\n        ['August',2800,950]]\n\nmonth, retail, ecommerce = np.array(data).T\n\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot(1,1,1)\nax.plot(month, retail, marker='o', label='Retail Sales')\nax.plot(month, ecommerce, marker='o', label='E-commerce Sales')\n\nfor x, y, label in zip(month, retail, retail):\n    plt.annotate(label,\n                 (x,y),\n                 textcoords=\"offset points\",\n                 xytext=(0,10),\n                 ha='center')\n\nfor x, y, label in zip(month, ecommerce, ecommerce):\n    plt.annotate(label,\n                 (x,y),\n                 textcoords=\"offset points\",\n                 xytext=(0,10),\n                 ha='center')\n\nplt.title('Comparison of Retail and E-commerce Sales in the US, 2021')\nplt.xlabel('Month')\nplt.ylabel('Sales(million USD)')\nplt.xticks(month, rotation='vertical') \nplt.legend(loc='upper left')\nplt.tight_layout()\nplt.savefig('line chart/png/596.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the total of e-commerce sales in the first quarter (January to March)?",
            "output": "2150 million USD"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_366",
        "img": "./line_chart_num/png/line_num_366.png",
        "topic": "Social Sciences and Humanities",
        "title": " Changes in migration, unemployment and wage in USA from 2010-2015",
        "csv": "Year \\t Migration rate(%) \\t Unemployment rate(%) \\t Average wage(USD) \\n 2010 \\t 3.2 \\t 7.8 \\t 25000 \\n 2011 \\t 3.5 \\t 7.4 \\t 26000 \\n 2012 \\t 3.7 \\t 7.1 \\t 27000 \\n 2013 \\t 4.0 \\t 7.2 \\t 28000 \\n 2014 \\t 4.2 \\t 7.4 \\t 29000 \\n 2015 \\t 4.5 \\t 7.5 \\t 30000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates changes in the migration rate, unemployment rate, and average wage in the USA from 2010 to 2015. The migration rate gradually increases from 3.2% in 2010 to 4.5% in 2015. The unemployment rate experiences a slight decrease from 7.8% in 2010 to a low of 7.1% in 2012, followed by fluctuations, and settles at 7.5% in 2015. The average wage shows a steady growth from $25,000 in 2010 to $30,000 in 2015. Each year is marked by a data point for the respective rates and wages, forming three lines on the chart to represent the trends."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\n\nyear = [2010, 2011, 2012, 2013, 2014, 2015]\nmigration_rate = [3.2, 3.5, 3.7, 4.0, 4.2, 4.5]\nunemployment_rate = [7.8, 7.4, 7.1, 7.2, 7.4, 7.5]\naverage_wage = [25000, 26000, 27000, 28000, 29000, 30000]\n\nfig = plt.figure(figsize=(10, 6))\nax1 = fig.add_subplot(111)\nax1.set_title('Changes in migration, unemployment and wage in USA from 2010-2015') \nax1.set_xlabel('Year')\nax1.set_ylabel('Rate')\n\nax1.plot(year, migration_rate, label = 'Migration Rate(%)', color = 'b', marker = 'o')\nax1.plot(year, unemployment_rate, label = 'Unemployment Rate(%)', color = 'k', marker = 'o')\nax1.plot(year, average_wage, label = 'Average Wage(USD)', color = 'g', marker = 'o')\n\nax1.set_xticks(year)\nax1.legend(loc = 'best')\n\nfor i, txt in enumerate(migration_rate):\n    ax1.annotate(txt, (year[i], migration_rate[i]), rotation = 45)\nfor i, txt in enumerate(unemployment_rate):\n    ax1.annotate(txt, (year[i], unemployment_rate[i]), rotation = 45, wrap = True)\nfor i, txt in enumerate(average_wage):\n    ax1.annotate(txt, (year[i], average_wage[i]), rotation = 45)\n\nplt.tight_layout()\nplt.savefig('line chart/png/360.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year was the migration rate in the USA the highest from 2010 to 2015?",
            "output": "2015"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_249",
        "img": "./line_chart_num/png/line_num_249.png",
        "topic": "Business and Finance",
        "title": " Changes in GDP and Unemployment Rate in the US from 2020-2025",
        "csv": "Year \\t GDP (billion dollars) \\t Unemployment Rate (%) \\n 2020 \\t 20 \\t 3.5 \\n 2021 \\t 25 \\t 3.2 \\n 2022 \\t 30 \\t 2.8 \\n 2023 \\t 35 \\t 2.5 \\n 2024 \\t 40 \\t 2.2 \\n 2025 \\t 45 \\t 2.0 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the changes in GDP and Unemployment Rate in the US from 2020 to 2025. It plots GDP in billions of dollars and Unemployment Rate in percentages over a six-year period. In 2020, the GDP was 20 billion dollars with an Unemployment Rate of 3.5%. By 2021, GDP increased to 25 billion and Unemployment decreased to 3.2%. The upward trend of GDP continues, reaching 30 billion in 2022 with Unemployment further dropping to 2.8%. Data for 2023 shows a GDP of 35 billion and 2.5% Unemployment. The forecast for 2024 is a 40 billion GDP and 2.2% Unemployment, and for 2025, the GDP is projected to be 45 billion dollars with a 2.0% Unemployment Rate."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(1,1,1)\n\nx = [2020, 2021, 2022, 2023, 2024, 2025]\ny1 = [20, 25, 30, 35, 40, 45]\ny2 = [3.5, 3.2, 2.8, 2.5, 2.2, 2.0]\n\nax.plot(x, y1, label=\"GDP (billion dollars)\", marker='o', color='blue', linestyle='-')\nax.plot(x, y2, label=\"Unemployment Rate (%)\", marker='o', color='orange', linestyle='-')\n\nplt.xticks(np.arange(min(x), max(x)+1, 1.0))\nax.grid()\nax.legend(loc='best')\nax.set_title(\"Changes in GDP and Unemployment Rate in the US from 2020-2025\")\n\nfor i,j in zip(x,y1):\n    ax.annotate(str(j),xy=(i,j), color='blue')\nfor i,j in zip(x,y2):\n    ax.annotate(str(j),xy=(i,j), color='orange')\n\nplt.tight_layout()\nplt.savefig('line chart/png/485.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year did the GDP of the US reach 35 billion dollars?",
            "output": "2023"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_281",
        "img": "./line_chart_num/png/line_num_281.png",
        "topic": "Science and Engineering",
        "title": " Renewable Energy Production in the US from 2017 to 2021",
        "csv": "Year \\t Solar Energy(kW/hr) \\t Wind Energy (kW/hr) \\t Hydro Energy(kW/hr) \\n 2017 \\t 1000 \\t 500 \\t 1500 \\n 2018 \\t 1100 \\t 800 \\t 1300 \\n 2019 \\t 1300 \\t 900 \\t 1400 \\n 2020 \\t 1500 \\t 1100 \\t 1600 \\n 2021 \\t 1800 \\t 1300 \\t 1700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart visualizes the United States' renewable energy production from 2017 to 2021. It depicts the annual energy output in kilowatt-hours for three types: solar, wind, and hydro. In 2017, solar energy production was at 1000 kW/hr, wind at 500 kW/hr, and hydro leading with 1500 kW/hr. By 2021, solar energy increased to 1800 kW/hr, wind energy to 1300 kW/hr, and hydro energy peaked at 1700 kW/hr, showing a growth in renewable energy sources over the five-year period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size\nplt.figure(figsize=(10, 6))\n\n# Set the title\nplt.title(\"Renewable Energy Production in the US from 2017 to 2021\")\n\n# Set the x-axis\nx_data = np.array([2017, 2018, 2019, 2020, 2021])\n\n# Set the y-axis\ny_data_solar = np.array([1000, 1100, 1300, 1500, 1800])\ny_data_wind = np.array([500, 800, 900, 1100, 1300])\ny_data_hydro = np.array([1500, 1300, 1400, 1600, 1700])\n\n# Draw the line chart\nplt.plot(x_data, y_data_solar, label=\"Solar Energy(kW/hr)\", color=\"red\", linewidth=1.5, marker='o')\nplt.plot(x_data, y_data_wind, label=\"Wind Energy(kW/hr)\", color=\"green\", linewidth=1.5, marker='o')\nplt.plot(x_data, y_data_hydro, label=\"Hydro Energy(kW/hr)\", color=\"blue\", linewidth=1.5, marker='o')\n\n# Set the xticks\nplt.xticks(x_data)\n\n# Set the legend position\nplt.legend(loc='upper left')\n\n# Label each data point\nfor x_point, y_point_solar, y_point_wind, y_point_hydro in zip(x_data, y_data_solar, y_data_wind, y_data_hydro):\n    plt.annotate(f'{y_point_solar}/{y_point_wind}/{y_point_hydro}', xy=(x_point, y_point_solar), xytext=(0, 5), textcoords=\"offset points\", fontsize=9)\n\n# Set the background grid\nplt.grid(True, linewidth=0.2)\n\n# Save the figure\nplt.savefig(r'line chart/png/42.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "By how much did solar energy production increase from 2017 to 2021?",
            "output": "800 kW/hr"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_402",
        "img": "./line_chart_num/png/line_num_402.png",
        "topic": "Sports and Entertainment",
        "title": " Entertainment and Sports Ticket Sales in the US from 2019 to 2022",
        "csv": "Year \\t Movie Tickets(million) \\t Concert Tickets(million) \\t Sports Tickets(million) \\n 2019 \\t 800 \\t 600 \\t 400 \\n 2020 \\t 900 \\t 700 \\t 500 \\n 2021 \\t 1000 \\t 900 \\t 600 \\n 2022 \\t 1100 \\t 1000 \\t 700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart illustrates the sales of entertainment and sports tickets in the US from 2019 to 2022. In 2019, movie tickets sold were 800 million, concert tickets were 600 million, and sports tickets were 400 million. The following year saw an increase with 900 million movie tickets, 700 million concert tickets, and 500 million sports tickets sold. Sales continued to rise in 2021, with 1000 million movie tickets, 900 million concert tickets, and 600 million sports tickets. The trend persisted into 2022, with 1100 million movie tickets, 1000 million concert tickets, and 700 million sports tickets sold."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \n\nyear = [2019, 2020, 2021, 2022]\nmovie_tickets = [800,900,1000,1100]\nconcert_tickets = [600,700,900,1000]\nsports_tickets = [400,500,600,700]\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(111)\nax.plot(year, movie_tickets, label='Movie Tickets', marker='o', color='red')\nax.plot(year, concert_tickets, label='Concert Tickets', marker='o', color='blue')\nax.plot(year, sports_tickets, label='Sports Tickets', marker='o', color='green')\n\nax.set_title('Entertainment and Sports Ticket Sales in the US from 2019 to 2022')\nax.set_xlabel('Year')\nax.set_ylabel('Tickets (million)')\n\nax.set_xticks(year)\nax.legend()\n\nfor a,b,c,d in zip(year, movie_tickets, concert_tickets, sports_tickets):\n    ax.annotate('movie={}'.format(b), xy = (a,b), xytext=(a+0.1, b-20) )\n    ax.annotate('concert={}'.format(c), xy = (a,c), xytext=(a+0.1, c-20) )\n    ax.annotate('sports={}'.format(d), xy = (a,d), xytext=(a+0.1, d-20) )\n\nplt.tight_layout()\nplt.savefig('line chart/png/226.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much did concert ticket sales increase from 2019 to 2022?",
            "output": "400 million"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_62",
        "img": "./line_chart_num/png/line_num_62.png",
        "topic": "Government and Public Policy",
        "title": " Changes in Tax Rates in the United States from 2011-2014",
        "csv": "Year \\t Tax Rate A(%) \\t Tax Rate B(%) \\t Tax Rate C(%) \\t Tax Rate D(%) \\n 2011 \\t 35 \\t 25 \\t 20 \\t 30 \\n 2012 \\t 30 \\t 20 \\t 25 \\t 35 \\n 2013 \\t 25 \\t 20 \\t 35 \\t 30 \\n 2014 \\t 30 \\t 35 \\t 20 \\t 25 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart depicts the changes in four different tax rates (A, B, C, and D) in the United States over the period from 2011 to 2014. In 2011, Tax Rate A was at 35%, B at 25%, C at 20%, and D at 30%. By 2012, Rate A decreased to 30%, B to 20%, C increased to 25%, and D rose to 35%. In 2013, Tax Rate A further dropped to 25%, B remained at 20%, C surged to 35%, and D fell to 30%. In 2014, Rate A and D swapped values at 30% and 25%, respectively, while B increased to 35% and C decreased to 20%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# create figure\nplt.figure(figsize=(8,6))\n\n# draw line\nplt.plot([2011,2012,2013,2014],[35,30,25,30],label='Tax Rate A(%)',marker='o',color='red')\nplt.plot([2011,2012,2013,2014],[25,20,20,35],label='Tax Rate B(%)',marker='o',color='blue')\nplt.plot([2011,2012,2013,2014],[20,25,35,20],label='Tax Rate C(%)',marker='o',color='green')\nplt.plot([2011,2012,2013,2014],[30,35,30,25],label='Tax Rate D(%)',marker='o',color='purple')\n\n# add grid\nplt.grid(True, linestyle = \"-.\", color = \"gray\", linewidth = \"0.5\") \n\n# add legend\nplt.legend(loc='best')\n\n# add title\nplt.title('Changes in Tax Rates in the United States from 2011-2014')\n\n# add x,y label\nplt.xlabel('Year')\nplt.ylabel('Tax Rate (%)')\n\n# set xticks \nplt.xticks(np.arange(2011,2015,1))\n\n# add annotation\nplt.annotate('Tax Rate A(%)', xy=(2011, 35), xytext=(2012, 40),arrowprops=dict(facecolor='red',shrink=0.05))\nplt.annotate('Tax Rate B(%)', xy=(2011, 25), xytext=(2012, 30),arrowprops=dict(facecolor='blue',shrink=0.05))\nplt.annotate('Tax Rate C(%)', xy=(2011, 20), xytext=(2012, 25),arrowprops=dict(facecolor='green',shrink=0.05))\nplt.annotate('Tax Rate D(%)', xy=(2011, 30), xytext=(2012, 35),arrowprops=dict(facecolor='purple',shrink=0.05))\n\n# set layout\nplt.tight_layout()\n\n# save\nplt.savefig('line chart/png/74.png')\n\n# clear\nplt.clf()"
        },
        "QA": {
            "input": "What was the Tax Rate for A in 2013?",
            "output": "25%"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_347",
        "img": "./line_chart_num/png/line_num_347.png",
        "topic": "Arts and Culture",
        "title": " Price of Paintings in the Art Market from 1950 to 1980",
        "csv": "Year \\t Painting A Price($) \\t Painting B Price($) \\t Painting C Price($) \\t Painting D Price($) \\n 1950 \\t 1000 \\t 800 \\t 1200 \\t 1500 \\n 1960 \\t 1200 \\t 900 \\t 1100 \\t 1600 \\n 1970 \\t 800 \\t 1100 \\t 1300 \\t 1200 \\n 1980 \\t 1500 \\t 1200 \\t 1400 \\t 800 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the changing prices of four paintings in the art market from 1950 to 1980. In 1950, Painting A is priced at $1000, Painting B at $800, Painting C at $1200, and Painting D at $1500. By 1960, the prices rise for A to $1200 and B to $900, while C drops to $1100, and D increases to $1600. In 1970, A decreases to $800, B goes up to $1100, C to $1300, and D declines severely to $1200. The last year shown, 1980, sees A is at $1500, B at $1200, C at $1400, and D at $800."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(10, 6))\n\nyear = [1950, 1960, 1970, 1980]\npainting_A = [1000, 1200, 800, 1500]\npainting_B = [800, 900, 1100, 1200]\npainting_C = [1200, 1100, 1300, 1400]\npainting_D = [1500, 1600, 1200, 800]\n\nplt.plot(year, painting_A, label='Painting A', color='red', marker='o')\nplt.plot(year, painting_B, label='Painting B', color='gold', marker='o')\nplt.plot(year, painting_C, label='Painting C', color='blue', marker='o')\nplt.plot(year, painting_D, label='Painting D', color='green', marker='o')\n\nplt.xticks(year)\nplt.title('Price of Paintings in the Art Market from 1950 to 1980')\nplt.xlabel('Year')\nplt.ylabel('Price ($)')\nplt.legend(loc='best')\n\nfor x, y in zip(year, painting_A):\n    plt.annotate(y, xy=(x, y), xytext=(x+0.2, y+100), fontsize=8)\n    \nfor x, y in zip(year, painting_B):\n    plt.annotate(y, xy=(x, y), xytext=(x+0.2, y+100), fontsize=8)\n    \nfor x, y in zip(year, painting_C):\n    plt.annotate(y, xy=(x, y), xytext=(x+0.2, y+100), fontsize=8)\n    \nfor x, y in zip(year, painting_D):\n    plt.annotate(y, xy=(x, y), xytext=(x+0.2, y+100), fontsize=8)\n\nplt.tight_layout()\nplt.savefig('line chart/png/24.png', dpi=300)\nplt.clf()"
        },
        "QA": {
            "input": "Which painting had the highest price increase from 1950 to 1980?",
            "output": "Painting D"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_40",
        "img": "./line_chart_num/png/line_num_40.png",
        "topic": "Law and Legal Affairs",
        "title": " Changes in Crime Rate, Unemployment Rate and Average Salary in the U.S. from 2000 to 2004",
        "csv": "Year \\t Crime Rate (per 1000 people) \\t Unemployment Rate (percentage) \\t Average Salary (hundred USD) \\n 2000 \\t 2.5 \\t 3.2 \\t 50 \\n 2001 \\t 2.3 \\t 3.5 \\t 45 \\n 2002 \\t 2.6 \\t 3.3 \\t 48 \\n 2003 \\t 2.4 \\t 3.4 \\t 52 \\n 2004 \\t 2.7 \\t 3.6 \\t 55 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This line chart illustrates the changes in crime rate, unemployment rate, and average salary in the U.S. from 2000 to 2004. For the years listed, crime rates per 1000 people fluctuate between 2.3 and 2.7, with unemployment rates ranging from 3.2% to 3.6%. Average salaries in hundred USD show a progressive increase from 50 in 2000 to 55 in 2004."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# prepare data\ndata = [[2000,2001,2002,2003,2004],\n        [2.5,2.3,2.6,2.4,2.7],\n        [3.2,3.5,3.3,3.4,3.6],\n        [50,45,48,52,55]]\n\n# create figure\nplt.figure(figsize=(10,6))\n\n# plot line chart\nplt.plot(data[0], data[1], label='Crime Rate (per 1000 people)')\nplt.plot(data[0], data[2], label='Unemployment Rate (percentage)')\nplt.plot(data[0], data[3], label='Average Salary (hundred USD)')\n\n# set xticks\nplt.xticks(data[0])\n\n# set legend\nplt.legend(loc='upper left')\n\n# set title\nplt.title('Changes in Crime Rate, Unemployment Rate and Average Salary in the U.S. from 2000 to 2004')\n\n# set labels\nplt.xlabel('Year')\n\n# annotate\n\n\n# resize figure\nplt.tight_layout()\n\n# save fig\nplt.savefig('line_40.png')\n\n# clear\nplt.clf()"
        },
        "QA": {
            "input": "How much did the average salary (in hundred USD) increase from the year 2000 to the year 2004?",
            "output": "5 hundred USD"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_282",
        "img": "./line_chart_num/png/line_num_282.png",
        "topic": "Science and Engineering",
        "title": " Changes in Energy Production from Renewable and Non-Renewable Sources in the US from 2015-2019",
        "csv": "Year \\t Solar Power Output(GWh) \\t Wind Power Output(GWh) \\t Hydro Power Output(GWh) \\t Nuclear Power Output(GWh) \\n 2015 \\t 200 \\t 800 \\t 100 \\t 400 \\n 2016 \\t 300 \\t 900 \\t 150 \\t 500 \\n 2017 \\t 400 \\t 1100 \\t 200 \\t 600 \\n 2018 \\t 500 \\t 1300 \\t 250 \\t 700 \\n 2019 \\t 600 \\t 1500 \\t 300 \\t 800 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart represents the trend in energy production from different sources in the US from 2015 to 2019. It shows solar power output increasing from 200 GWh in 2015 to 600 GWh in 2019. Wind power output grew from 800 GWh to 1500 GWh, hydro power output from 100 GWh to 300 GWh, and nuclear power output from 400 GWh to 800 GWh within the same period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(14,6))\nax=plt.subplot()\n\nx=['2015','2016','2017','2018','2019']\nSolar=[200,300,400,500,600]\nWind=[800,900,1100,1300,1500]\nHydro=[100,150,200,250,300]\nNuclear=[400,500,600,700,800]\n\nplt.plot(x,Solar,marker='o',label='Solar')\nplt.plot(x,Wind,marker='o',label='Wind')\nplt.plot(x,Hydro,marker='o',label='Hydro')\nplt.plot(x,Nuclear,marker='o',label='Nuclear')\n\nplt.xticks(x)\nplt.title('Changes in Energy Production from Renewable and Non-Renewable Sources in the US from 2015-2019')\nplt.xlabel('Year')\nplt.ylabel('Output(GWh)')\nplt.legend(loc='upper left')\n\nfor x,y in zip(x,Solar):\n    label='{:.0f}'.format(y)\n    plt.annotate(label,(x,y),textcoords='offset points',xytext=(0,10),ha='center')\nfor x,y in zip(x,Wind):\n    label='{:.0f}'.format(y)\n    plt.annotate(label,(x,y),textcoords='offset points',xytext=(0,10),ha='center')\nfor x,y in zip(x,Hydro):\n    label='{:.0f}'.format(y)\n    plt.annotate(label,(x,y),textcoords='offset points',xytext=(0,10),ha='center')\nfor x,y in zip(x,Nuclear):\n    label='{:.0f}'.format(y)\n    plt.annotate(label,(x,y),textcoords='offset points',xytext=(0,10),ha='center')\n\nplt.tight_layout()\nplt.savefig('line chart/png/75.png')\nplt.clf()"
        },
        "QA": {
            "input": "What was the total power output from Wind and Nuclear sources in 2018?",
            "output": "2000 GWh"
        }
    },
    {
        "chart_type": "line_chart_num",
        "imgname": "line_num_55",
        "img": "./line_chart_num/png/line_num_55.png",
        "topic": "Technology and the Internet",
        "title": " Adoption of Latest Technologies in the Last Decade",
        "csv": "Year \\t Technology A \\t Technology B \\t Technology C \\n 2010 \\t 20 \\t 15 \\t 10 \\n 2011 \\t 30 \\t 18 \\t 15 \\n 2012 \\t 40 \\t 22 \\t 20 \\n 2013 \\t 50 \\t 25 \\t 25 \\n 2014 \\t 60 \\t 30 \\t 30 \\n 2015 \\t 65 \\t 35 \\t 35 \\n 2016 \\t 70 \\t 40 \\t 40 \\n 2017 \\t 75 \\t 45 \\t 45 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The line chart visualizes the adoption trends of three technologies, labeled A, B, and C, over a period from 2010 to 2017. In 2010, Technology A starts at 20, B at 15, and C at 10, gradually increasing each year. By 2017, Technology A reaches 75, B hits 45, and C climbs to 45, showcasing incremental adoption of each technology over the eight-year span."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Initialize Figure\nplt.figure(figsize=(14,7))\n\n# Create the data\nyear = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017]\ntechA = [20, 30, 40, 50, 60, 65, 70, 75]\ntechB = [15, 18, 22, 25, 30, 35, 40, 45]\ntechC = [10, 15, 20, 25, 30, 35, 40, 45]\n\n# Plotting\nplt.plot(year, techA, label=\"Technology A\", color='red')\nplt.plot(year, techB, label=\"Technology B\", color='blue')\nplt.plot(year, techC, label=\"Technology C\", color='green')\n\n# Setting Labels\nplt.xlabel(\"Year\", fontsize=14)\nplt.ylabel(\"Adoption (%)\", fontsize=14)\nplt.title(\"Adoption of Latest Technologies in the Last Decade\", fontsize=16)\n\n# Setting Ticks\nplt.xticks(year)\n\n# Setting Legend\nplt.legend(loc=\"upper left\", fontsize=14)\n\n# Setting Grids\nplt.grid(True)\n\n# Adding Labels to Data Points\nfor i, j in zip(year, techA):\n    plt.annotate(str(j), xy=(i, j+1), fontsize=14)\nfor i, j in zip(year, techB):\n    plt.annotate(str(j), xy=(i, j+1), fontsize=14)\nfor i, j in zip(year, techC):\n    plt.annotate(str(j), xy=(i, j+1), fontsize=14)\n\n# Resize the plot\nplt.tight_layout()\n\n# Save the plot\nplt.savefig(\"line chart/png/476.png\")\n\n# Clear the plot\nplt.clf()"
        },
        "QA": {
            "input": "How much did the adoption of Technology A increase from 2010 to 2015?",
            "output": "45"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_136",
        "img": "./rings/png/rings_136.png",
        "topic": "Energy and Utilities",
        "title": " Energy and Utilities Industry Overview - 2023",
        "csv": "Category \\t ratio \\n Renewable Energy Sources \\t 19% \\n Oil and Gas \\t 35% \\n Nuclear Energy \\t 23% \\n Coal \\t 13% \\n Investments \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rings chart provides an overview of the Energy and Utilities industry in 2023, detailing the distribution of energy sources by ratio. Renewable Energy Sources account for 19%, Oil and Gas make up the largest share with 35%, Nuclear Energy constitutes 23%, Coal represents 13%, and Investments in the industry total 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Renewable Energy Sources','Oil and Gas','Nuclear Energy','Coal','Investments']\ndata = np.array([19,35,23,13,10])\nline_labels = ['Category','ratio']\n\nfig = plt.figure(figsize=(20,10))\nax = fig.add_subplot(111)\nax.pie(data, labels=data_labels, autopct='%1.1f%%', startangle=90, counterclock=False)\ncentre_circle = plt.Circle((0,0), 0.75, color='white', fc='white',linewidth=1.25)\nax.add_artist(centre_circle)\nax.legend(data_labels, loc=\"upper right\")\nplt.title('Energy and Utilities Industry Overview - 2023')\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_91.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the ratio for Renewable Energy Sources?",
            "output": "19%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_16",
        "img": "./rings/png/rings_16.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing and Production Output Overview - 2023",
        "csv": "Category \\t ratio \\n Quality Control \\t 23% \\n Automation \\t 30% \\n Development \\t 17% \\n Raw Materials \\t 20% \\n Logistics \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart provides a visual breakdown of different categories contributing to manufacturing and production output in 2023. Quality Control constitutes 23% of the output, Automation accounts for 30%, and Development represents 17%. Raw Materials have a 20% share, while Logistics makes up the remaining 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle\n\ndata_labels = [\"Quality Control\", \"Automation\", \"Development\", \"Raw Materials\", \"Logistics\"] \ndata = [23, 30, 17, 20, 10]\nline_labels = [\"Category\", \"ratio\"]\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111)\n\n# Plot data\nax.pie(data, startangle=90, counterclock=False, colors=['#00AEFF', '#FFD43B', '#2F4858', '#2F9DB5', '#FF3D3D'], wedgeprops={\"edgecolor\":\"k\",'linewidth': 1, 'linestyle': 'solid', 'antialiased': True})\n\n# Create white center circle\ncenter_circle = Circle((0, 0), 0.70, fc='white')\nax.add_artist(center_circle)\n\n# Set title\nax.set_title(\"Manufacturing and Production Output Overview - 2023\", fontsize=14)\n\n# Set legend\nax.legend(data_labels, loc=\"upper right\")\n\n# Configure axis\nax.axis('equal')\nax.set_xticks([])\nax.set_yticks([])\n\n# Display\nplt.tight_layout()\nplt.savefig(\"./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_25.png\")\nplt.close()"
        },
        "QA": {
            "input": "What is the combined ratio of Quality Control and Raw Materials in the Manufacturing and Production Output Overview for 2023?",
            "output": "43%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_9",
        "img": "./rings/png/rings_9.png",
        "topic": "Transportation and Logistics",
        "title": " Transportation and Logistics Performance - 2023",
        "csv": "Type \\t ratio \\n Cargo Delivery \\t 45% \\n Logistics Management \\t 30% \\n Fleet Management \\t 15% \\n Shipping Management \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The \"Transportation and Logistics Performance - 2023\" chart showcases the ratios of various functions within the sector. Represented in a ring format, it illustrates that Cargo Delivery makes up 45% of the services, followed by Logistics Management at 30%. Fleet Management constitutes 15%, while Shipping Management accounts for the remaining 10% of the industry's performance metrics."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\ndata_labels = ['Cargo Delivery', 'Logistics Management', 'Fleet Management', 'Shipping Management']\ndata = [45, 30, 15, 10]\nline_labels = ['Type', 'ratio']\n\n# Create figure\nfig, ax = plt.subplots(figsize=(12, 12))\n\n\n\n# Plot the pie chart\nax.pie(data, labels=data_labels, \n       autopct='%1.1f%%', startangle=90, \n       counterclock=False, labeldistance=1.1,\n       pctdistance=0.8)\n# Create a circle in the center of the plot\ncircle = plt.Circle((0, 0), 0.7, color='white')\nax.add_artist(circle)\n\n# Add legend\nax.legend(data_labels, loc=\"best\")\n\n# Set title\nplt.title('Transportation and Logistics Performance - 2023')\n\n# Automatically adjust the layout\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_15.png')\n\n# Clear current figure\nplt.clf()"
        },
        "QA": {
            "input": "What is the ratio for Cargo Delivery?",
            "output": "45%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_113",
        "img": "./rings/png/rings_113.png",
        "topic": "Transportation and Logistics",
        "title": " Transport and Logistics Network - 2023",
        "csv": "Mode \\t ratio \\n Air \\t 20% \\n Rail \\t 15% \\n Road \\t 45% \\n Sea \\t 20% \\n Other \\t 0% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rings chart presents the distribution of transportation modes within the Transport and Logistics Network in 2023. Air transport accounts for 20% of the ratio, equaling that of sea transport. Rail is slightly less, at 15%, while road transport constitutes the largest portion with 45%. Other modes of transport are not represented, standing at 0%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Air', 'Rail', 'Road', 'Sea', 'Other']\ndata = [20, 15, 45, 20, 0]\nline_labels = ['Mode', 'ratio']\n\nfig = plt.figure(figsize=(6, 5))\nax = fig.add_subplot(111)\n\nexplode = (0, 0, 0.1, 0, 0)\nax.pie(data, labels=data_labels, autopct='%1.1f%%', startangle=90, counterclock=False, explode=explode)\ninner_circle = plt.Circle((0,0),0.70,fc='white')\nax.add_artist(inner_circle)\nax.legend(data_labels, loc=\"lower right\")\nax.axis('equal')\nax.grid(linestyle = '--')\nplt.title('Transport and Logistics Network - 2023')\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_64.png')\nplt.close()"
        },
        "QA": {
            "input": "What percentage of transport is accounted for by Road mode?",
            "output": "45%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_132",
        "img": "./rings/png/rings_132.png",
        "topic": "Food and Beverage Industry",
        "title": " Food and Beverage Industry Overview - 2023",
        "csv": "Category \\t ratio \\n Product Quality \\t 35% \\n Production Efficiency \\t 16% \\n Consumer Awareness \\t 9% \\n Brand Reputation \\t 20% \\n Sales Volume \\t 20% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart provides an overview of the Food and Beverage Industry in 2023 by illustrating the ratio of different categories affecting the sector. Product Quality accounts for 35% of the chart, making it the largest segment. Production Efficiency represents 16%, while Consumer Awareness is at 9%. Brand Reputation and Sales Volume each constitute 20% of the chart."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform data into variables\ndata_labels = [\"Product Quality\",\"Production Efficiency\",\"Consumer Awareness\",\"Brand Reputation\",\"Sales Volume\"]\nline_labels = [\"Category\"]\ndata = [35,16,9,20,20]\n\n# Plot data\nplt.figure(figsize=(7,7))\nax = plt.subplot()\nax.pie(data, startangle=90, counterclock=False, autopct='%1.1f%%')\ncircle = plt.Circle((0,0), 0.7, color='white')\nax.add_artist(circle)\nplt.legend(data_labels, loc=\"upper right\")\nplt.title(\"Food and Beverage Industry Overview - 2023\")\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_84.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the ratio of Production Efficiency in the Food and Beverage Industry Overview for 2023?",
            "output": "16%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_17",
        "img": "./rings/png/rings_17.png",
        "topic": "Tourism and Hospitality",
        "title": "Tourism and Hospitality - 2023",
        "csv": "Category \\t ratio \\n Customer Ratings \\t 19% \\n Tourism Services \\t 20% \\n Hospitality Services \\t 20% \\n Travel Options \\t 13% \\n Tourist Attractions \\t 28% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This ring chart visualizes the distribution of various tourism and hospitality categories in 2023. Customer Ratings represent 19% of the total, Tourism Services account for 20%, closely followed by Hospitality Services at 20%. Travel Options constitute 13%, while Tourist Attractions represent the largest segment with 28%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels=['Customer Ratings','Tourism Services','Hospitality Services','Travel Options','Tourist Attractions']\ndata=np.array([19,20,20,13,28])\nline_labels=['Category','ratio']\n\nfig=plt.figure(figsize=(8,8))\nax=fig.add_subplot()\nax.pie(data, labels=data_labels, startangle=90, counterclock=False, colors=['#36A2EB','#FF6384','#FFCE56','#c9daf8','#E7E9ED'])\ncentre_circle=plt.Circle((0,0),0.70,fc='white')\nax.add_artist(centre_circle)\nax.legend(data_labels, loc='upper left')\nax.set_title('Tourism and Hospitality - 2023')\nplt.tight_layout()\n\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_27.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "What percentage does Tourist Attractions represent?",
            "output": "28%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_7",
        "img": "./rings/png/rings_7.png",
        "topic": "Education and Academics",
        "title": " Academic Excellence in Education - 2023",
        "csv": "Area \\t ratio \\n Knowledge Acquisition \\t 25% \\n Critical Thinking \\t 15% \\n Research Skills \\t 35% \\n Problem Solving \\t 12% \\n Communication \\t 13% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart illustrates the distribution of academic excellence areas in education for the year 2023. Knowledge Acquisition makes up 25% of the chart, Critical Thinking contributes 15%, Research Skills represent the largest portion at 35%, Problem Solving accounts for 12%, and Communication constitutes 13% of the academic emphasis.\n"
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport numpy as np\n\ndata_labels = ['Knowledge Acquisition','Critical Thinking','Research Skills','Problem Solving','Communication']\ndata = [[25,15,35,12,13]]\nline_labels = ['Area']\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.set_title('Academic Excellence in Education - 2023')\nax.pie(data[0], labels=data_labels, startangle=45,counterclock=False, wedgeprops={'edgecolor': 'k'})\ncenter_circle = plt.Circle((0,0), 0.7, color='white', ec='k', lw=2)\nax.add_artist(center_circle)\nax.legend(data_labels, loc=\"upper right\", bbox_to_anchor=(1, 0., 0.5, 0.5), fontsize=12, \n           bbox_transform=ax.transAxes, borderaxespad=0., frameon=False)\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_13.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which area has the highest ratio in Academic Excellence in 2023?",
            "output": "Research Skills"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_21",
        "img": "./rings/png/rings_21.png",
        "topic": "Sports and Entertainment",
        "title": " Sports and Entertainment Revenue - 2023",
        "csv": "Category \\t ratio \\n Ticket Sales \\t 30% \\n Broadcasting Rights \\t 25% \\n Marketing \\t 15% \\n Sponsorship \\t 20% \\n Merchandise \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart visualizes the revenue distribution for sports and entertainment in 2023 across different categories. Ticket sales constitute 30% of revenues, while broadcasting rights account for 25%. Sponsorship brings in 20% of the total income, marketing contributes 15%, and merchandise sales make up the remaining 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Ticket Sales', 'Broadcasting Rights', 'Marketing', 'Sponsorship', 'Merchandise']\ndata = [30, 25, 15, 20, 10]\nline_labels = ['Category', 'ratio']\n\nfig=plt.figure(figsize=(14, 8))\nax = fig.add_subplot(111)\nwedges, texts, autotexts = ax.pie(data, wedgeprops=dict(width=0.5), startangle=-40, counterclock=False,\n                                 autopct=lambda pct: '{:.1f}%'.format(pct))\n\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\nkw = dict(arrowprops=dict(arrowstyle=\"-\"), bbox=bbox_props, zorder=0, va=\"center\")\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    connectionstyle = \"angle,angleA=0,angleB={}\".format(ang)\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    ax.annotate(data_labels[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.4*y),\n                horizontalalignment=horizontalalignment, **kw)\n\ncentre_circle = plt.Circle((0, 0), 0.70, fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\nax.set_title('Sports and Entertainment Revenue - 2023')\nax.legend(data_labels, loc=\"upper right\", bbox_to_anchor=(1.2, 0.95))\nax.grid(True)\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_32.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined percentage ratio of Marketing and Sponsorship?",
            "output": "35%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_131",
        "img": "./rings/png/rings_131.png",
        "topic": "Food and Beverage Industry",
        "title": " Food and Beverage Industry Performance - 2023",
        "csv": "Category \\t ratio \\n Raw Ingredients \\t 14% \\n Distribution \\t 13% \\n Storage \\t 4% \\n Product Development \\t 22% \\n Production \\t 14% \\n Marketing \\t 33% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart illustrates the performance distribution of various sectors within the Food and Beverage Industry in 2023. It shows the percentage ratio of six categories: Raw Ingredients at 14%, Distribution at 13%, Storage at 4%, Product Development at 22%, Production also at 14%, and Marketing commanding the highest ratio with 33%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Raw Ingredients', 'Distribution', 'Storage', 'Product Development',\n               'Production', 'Marketing']\nline_labels = ['Category', 'ratio']\ndata = np.array([14, 13, 4, 22, 14, 33])\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111)\nax.pie(data, startangle=90, counterclock=False, wedgeprops={'width': 0.3})\ncentre_circle = plt.Circle((0, 0), 0.5, color='white')\nax.add_artist(centre_circle)\nax.legend(data_labels)\nax.set_title('Food and Beverage Industry Performance - 2023')\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_82.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage difference between Marketing and Raw Ingredients in the Food and Beverage Industry Performance in 2023?",
            "output": "19%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_230",
        "img": "./rings/png/rings_230.png",
        "topic": "Agriculture and Food Production",
        "title": " Agricultural Output and Food Production - 2023",
        "csv": "Category \\t ratio \\n Crop Yields \\t 30% \\n Irrigation \\t 15% \\n Soil Quality \\t 35% \\n Pesticide Use \\t 10% \\n Productivity \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rings chart visualizes the proportional representation of factors contributing to agricultural output and food production in 2023. Crop Yields constitute 30% of the chart, followed by Soil Quality at 35%, which is the largest segment. Irrigation accounts for 15%, while Pesticide Use and Productivity each make up 10% of the chart, the smallest portions depicted."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = ['Crop Yields','Irrigation','Soil Quality','Pesticide Use','Productivity']\ndata = [30,15,35,10,10]\nline_labels = ['Category','ratio']\n\n# Plot the data with the type of rings chart\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111)\nax.pie(data, startangle=90, counterclock=False, autopct='%1.1f%%', colors=['#ffb732','#cef442','#2cef45','#2cef8d','#2c9efb'])\n\n# To change the pie chart into a ring chart in your code\ninner_circle = plt.Circle((0, 0), 0.5, color='white')\nax.add_artist(inner_circle)\n\n# Create only one pie chart using the `ax.pie()` method and setting the `startangle` and `counterclock` parameters for better layout.\nax.legend(data_labels,loc='lower left', bbox_to_anchor=(-0.1, -0.1))\n\n# Drawing techniques such as background grids can be used.\nax.grid(linestyle='--', linewidth=0.5, color='black', alpha=0.3)\n\n# The title of the figure should be  Agricultural Output and Food Production - 2023.\nplt.title('Agricultural Output and Food Production - 2023', fontsize=15)\nplt.tight_layout()\n\n# The image must be saved as ./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-075221_95.png.\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-075221_95.png')\n\n# Clear the current image state at the end of the code.\nplt.clf()"
        },
        "QA": {
            "input": "What is the ratio of Soil Quality in agricultural output and food production?",
            "output": "35%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_19",
        "img": "./rings/png/rings_19.png",
        "topic": "Social Sciences and Humanities",
        "title": " Social Sciences and Humanities Overview - 2023",
        "csv": "Domain \\t ratio \\n Education \\t 40% \\n Arts \\t 20% \\n Humanities \\t 15% \\n Social Sciences \\t 25% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rings chart titled \"Social Sciences and Humanities Overview - 2023\" represents the distribution of a certain metric across four domains. Education holds the largest ratio at 40%. Arts follows at 20%, with Social Sciences close behind at 25%. Humanities has the smallest representation at 15%. Each domain's share is visually depicted with concentric rings, illustrating the proportions relative to each other."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle\n\ndata_labels = ['Education','Arts','Humanities','Social Sciences']\ndata = [0.4, 0.2, 0.15, 0.25]\nline_labels = ['Domain']\n\nfig = plt.figure(figsize=(7, 7))\nax = fig.add_subplot(111)\n\nwedges, texts = ax.pie(data, colors=['#FFC62F','#F25F5C','#247BA0','#70C1B3'], startangle=90, counterclock=False, labels=data_labels, wedgeprops={'linewidth': 1})\ncircle = Circle((0, 0), 0.6, color='white', fc='white', linewidth=0)\nax.add_artist(circle)\nax.legend(data_labels, loc='upper right')\nax.set_title('Social Sciences and Humanities Overview - 2023', fontsize=14)\n\nfor i in range(len(wedges)):\n    wedges[i].set_linewidth(1)\n    wedges[i].set_edgecolor('black')\n\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_3.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined ratio of Arts and Humanities?",
            "output": "35%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_84",
        "img": "./rings/png/rings_84.png",
        "topic": "Sports and Entertainment",
        "title": " Sports and Entertainment Industry Performance - 2023",
        "csv": "Category \\t ratio \\n Sponsorship \\t 17% \\n Attendance \\t 20% \\n Merchandise \\t 24% \\n Broadcast \\t 22% \\n Media Exposure \\t 17% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart illustrates the performance distribution across different categories in the Sports and Entertainment Industry for the year 2023. Sponsorship and Media Exposure each account for 17% of the performance ratio, Attendance makes up 20%, Merchandise represents 24%, and Broadcast contributes 22%. Each category's ratio is represented as a section of the concentric rings, showcasing the proportions relative to the industry's overall performance."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \n\ndata_labels = ['Sponsorship','Attendance','Merchandise','Broadcast','Media Exposure'] \ndata = np.array([17,20,24,22,17]) \nline_labels = ['Category'] \n\nfig = plt.figure(figsize=(8,8)) \nax = fig.add_subplot(111) \nax.pie(data, labels=data_labels, startangle=90, counterclock=False, colors = ['blue','orange','green','red','purple']) \ncentre_circle = plt.Circle((0,0), 0.6, color='white', fc='white',linewidth=0) \nax.add_artist(centre_circle) \nax.set_title('Sports and Entertainment Industry Performance - 2023') \nax.legend(data_labels, bbox_to_anchor=(1.2, 0.7)) \nplt.tight_layout() \nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_23.png') \nplt.clf()"
        },
        "QA": {
            "input": "What is the ratio for merchandise sales?",
            "output": "24%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_40",
        "img": "./rings/png/rings_40.png",
        "topic": "Sports and Entertainment",
        "title": " Popular Entertainment Trends - 2023",
        "csv": "Type \\t ratio \\n Sports \\t 35% \\n Music \\t 15% \\n Movies \\t 20% \\n Gaming \\t 25% \\n Art \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart illustrates the popularity of different entertainment trends in 2023 by displaying their ratios. Sports lead with a 35% ratio, followed by Gaming at 25%, Movies at 20%, and Music at 15%. Art holds the smallest share at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle\n\ndata_labels = ['Sports', 'Music', 'Movies', 'Gaming', 'Art']\ndata = [0.35, 0.15, 0.2, 0.25, 0.05]\nline_labels = ['Type', 'Ratio']\n\nfig = plt.figure(figsize=(15,7))\nax = fig.add_subplot(111)\nax.pie(data, startangle=90, counterclock=False, colors=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd'])\ncenter_circle = Circle((0,0), 0.7, color='white')\nax.add_artist(center_circle)\nax.set_title('Popular Entertainment Trends - 2023')\nax.legend(data_labels, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_5.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much more popular is Gaming compared to Music in the 2023 entertainment trends data?",
            "output": "10%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_68",
        "img": "./rings/png/rings_68.png",
        "topic": "Sports and Entertainment",
        "title": " Sports and Entertainment Performance - 2023",
        "csv": "Category \\t ratio \\n Viewership \\t 35% \\n Participation \\t 22% \\n Media Coverage \\t 21% \\n Sponsorship \\t 15% \\n Revenues \\t 7% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart illustrates the performance distribution in the sports and entertainment sector for 2023 across five categories. Viewership leads with a 35% ratio, followed by Participation at 22%, and Media Coverage at 21%. Sponsorship accounts for 15% of the performance metrics, while Revenues make up the smallest portion at 7%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels. Data_labels represents the labels of each column except the first column. Line_labels represents the labels of each row except the first row. Data represent the numerical array in the data.\ndata_labels = ['Viewership','Participation','Media Coverage','Sponsorship', 'Revenues']\nline_labels = ['Category']\ndata = np.array([35, 22, 21, 15, 7])\n\n# Plot the data with the type of rings chart. Create figure before plotting, i.e., add_subplot() follows plt.figure().\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# The plottig of different data lines should use different colors and do not use the white color.\ncolors = ['#F35F36', '#FFCA2A', '#8EC741', '#1D7A9A', '#3A3B98']\n\n# Create only one pie chart using the `ax.pie()` method and setting the `startangle` and `counterclock` parameters for better layout.\nax.pie(data, startangle=90, counterclock=False, colors=colors)\n\n# To change the pie chart into a ring chart in your code, you need to correctly add a white circle to the center of the pie chart. After creating the circle with `plt.Circle`, you must add this circle to the axes using `ax.add_artist()`.\ninner_circle = plt.Circle((0, 0), 0.5, color='white')\nax.add_artist(inner_circle)\n\n# For the plot of legend, do not plot the legend of gridlines or the legend of ax.fill output, only the data_labels are needed to provide the legend, i.e., ax.legend(data_labels). The positioning of the legend should not interfere with the chart and title.\nplt.legend(data_labels, loc=\"best\")\n\n# Drawing techniques such as background grids can be used.\nax.grid(False)\n\n# The title of the figure should be  Sports and Entertainment Performance - 2023.\nplt.title('Sports and Entertainment Performance - 2023')\n\n# If the text length of the label is too long, use the method of adding the parameter \"rotation\" or display label on separate lines seting \u201cwrap=true\u201d.\nplt.tight_layout()\n\n# The image must be saved as ./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_136.png.\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_136.png')\n\n# Clear the current image state at the end of the code.\nplt.cla()"
        },
        "QA": {
            "input": "Which category has the least ratio in Sports and Entertainment Performance for 2023?",
            "output": "Revenues"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_26",
        "img": "./rings/png/rings_26.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare Impact Assessment - 2023",
        "csv": "Category \\t ratio \\n Disease Prevention \\t 35% \\n Vaccine Administration \\t 20% \\n Healthcare Accessibility \\t 25% \\n Treatment Quality \\t 10% \\n Patients' Awareness \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart showcases the Healthcare Impact Assessment for 2023, broken down into five categories. \"Disease Prevention\" is the largest segment, constituting 35% of the assessment. \"Vaccine Administration\" comes next at 20%, followed by \"Healthcare Accessibility\" with 25%. Finally, \"Treatment Quality\" and \"Patients' Awareness\" are equal, each representing 10% of the overall assessment."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport numpy as np\n\ndata_labels = [\"Disease Prevention\", \"Vaccine Administration\", \"Healthcare Accessibility\", \"Treatment Quality\", \"Patients' Awareness\"]\ndata = [35, 20, 25, 10, 10]\nline_labels = [\"Category\", \"ratio\"]\n\nmpl.rcParams[\"font.size\"] = \"12\"\nmpl.rcParams[\"font.family\"] = \"Arial\"\nfig = plt.figure(figsize=(10,10)) \nax = fig.add_subplot(111)\nax.pie(data, colors=['red', 'orange', 'yellow', 'green', 'blue'], startangle=90, counterclock=False)\nax.set_title(\"Healthcare Impact Assessment - 2023\")\ncircle = plt.Circle((0,0), 0.7, color='white')\nax.add_artist(circle)\nax.legend(data_labels, loc=\"center left\", bbox_to_anchor=(1.2, 0.5))\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_37.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the Healthcare Impact Assessment is attributed to Healthcare Accessibility?",
            "output": "25%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_6",
        "img": "./rings/png/rings_6.png",
        "topic": "Transportation and Logistics",
        "title": " Logistics Performance Assessment - 2023",
        "csv": "Category \\t ratio \\n Delivery Efficiency \\t 33% \\n Fuel Efficiency \\t 7% \\n Vehicle Maintenance \\t 15% \\n Safety \\t 20% \\n Staff Performance \\t 25% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rings chart represents a Logistics Performance Assessment for several categories in 2023. Delivery Efficiency is depicted at a 33% ratio, which is the highest among the categories shown. Following are Staff Performance at 25%, Safety at 20%, and Vehicle Maintenance at 15%. Fuel Efficiency has the lowest ratio at 7%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np\n\ndata_labels = ['Delivery Efficiency', 'Fuel Efficiency', 'Vehicle Maintenance', 'Safety', 'Staff Performance']\ndata = [33,7,15,20,25]\nline_labels = ['Category', 'Ratio']\n\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111)\nwedges, texts = ax.pie(data, startangle=90, counterclock=False, colors=['dodgerblue', 'royalblue', 'navy', 'teal', 'mediumseagreen'], \n                        wedgeprops={'linewidth': 2, 'edgecolor': 'white'}, \n                        textprops={'fontsize': 12, 'color': 'white'})\ncentre_circle = plt.Circle((0,0),0.7,color='white', fc='white',linewidth=2)\nax.add_artist(centre_circle)\nax.set_title('Logistics Performance Assessment - 2023', fontsize=16, fontweight='bold')\nax.legend(data_labels, fancybox=True, shadow=True, bbox_to_anchor=(0.9,0.9), fontsize=14)\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_12.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the Logistics Performance Assessment is attributed to Vehicle Maintenance?",
            "output": "15%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_141",
        "img": "./rings/png/rings_141.png",
        "topic": "Social Media and the Web",
        "title": " Social Media and Web Performance Overview - 2023",
        "csv": "Category \\t ratio \\n Website Traffic \\t 30% \\n User Engagement \\t 20% \\n Online Advertising \\t 25% \\n Social Media Presence \\t 15% \\n App Usage \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart provides a Social Media and Web Performance Overview for 2023, outlining the distribution of different metrics by percentage. Website Traffic constitutes 30% of the chart, User Engagement accounts for 20%, Online Advertising holds a 25% share, Social Media Presence takes up 15%, and App Usage represents the remaining 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = [\"Website Traffic\", \"User Engagement\", \"Online Advertising\", \"Social Media Presence\", \"App Usage\"]\ndata = [30, 20, 25, 15, 10]\nline_labels = [\"Category\", \"Ratio\"]\n\n# Plot the data with the type of rings chart\nfig, ax = plt.subplots(figsize=(10, 8))\nax.pie(data, startangle=90, counterclock=False, autopct='%1.1f%%')\n\n# Change the pie chart into a ring chart\ninner_circle = plt.Circle((0, 0), 0.7, color='white', fc='white', linewidth=2)\nax.add_artist(inner_circle)\n\n# Set the legend\nax.legend(data_labels, loc=\"center\", bbox_to_anchor=(0.5, -0.1), fontsize=14)\n\n# Set the title\nax.set_title(\"Social Media and Web Performance Overview - 2023\", fontsize=16, fontweight='bold')\n\n# Adjust the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-075221_10.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What category has the smallest ratio according to the provided data?",
            "output": "App Usage"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_162",
        "img": "./rings/png/rings_162.png",
        "topic": "Government and Public Policy",
        "title": " Government and Public Policy Results - 2023",
        "csv": "Category \\t ratio \\n Infrastructure \\t 22% \\n Public Services \\t 24% \\n Environment \\t 8% \\n Social Welfare \\t 24% \\n Taxation \\t 22% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart illustrates the proportions of focus in different categories of Government and Public Policy Results for 2023. Infrastructure and Taxation both constitute 22% each, while Public Services and Social Welfare are the largest segments at 24% each. The Environment category is the smallest segment, accounting for 8% of the policy focus."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = np.array(['Infrastructure', 'Public Services', 'Environment', 'Social Welfare', 'Taxation'])\ndata = np.array([22, 24, 8, 24, 22])\nline_labels = np.array(['Category', 'ratio'])\n\n# Create figure\nfig = plt.figure(figsize=(10, 5))\n\n# Plotting data\nax = fig.add_subplot(111)\nax.pie(data, startangle=90, counterclock=False, colors=['#F78A25', '#9F9FAD', '#FFCA79', '#6DBCEB', '#FFCA79'])\n\n# Create white circle\ncenter_circle = plt.Circle((0, 0), 0.7, color='white')\n\n# Add white circle to center of the pie chart\nax.add_artist(center_circle)\n\n# Set title\nax.set_title('Government and Public Policy Results - 2023')\n\n# Add legend\nax.legend(data_labels, loc='upper center', bbox_to_anchor=(0.5, -0.05), shadow=True, ncol=5, fontsize='small')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-075221_134.png', dpi=300)\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the ratio for Public Services in 2023?",
            "output": "24%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_95",
        "img": "./rings/png/rings_95.png",
        "topic": "Government and Public Policy",
        "title": " Government and Public Policy Impact - 2023",
        "csv": "Category \\t ratio \\n Education \\t 23% \\n Infrastructure \\t 17% \\n Social Welfare \\t 15% \\n Economy \\t 35% \\n Security \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart visualizes the impact distribution across different categories in government and public policy for the year 2023. Education holds a 23% ratio, followed by infrastructure at 17%, social welfare at 15%, and security at 10%. The economy represents the largest segment with a 35% ratio."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = np.array(['Education', 'Infrastructure', 'Social Welfare', 'Economy', 'Security'])\ndata = [23, 17, 15, 35, 10]\nline_labels = np.array(['Education', 'Infrastructure', 'Social Welfare', 'Economy', 'Security'])\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111)\n\ncolors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral', 'red']\nexplode = (0.05, 0.05, 0.05, 0.05, 0.05)\nax.pie(data, labels=line_labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90, counterclock=False, explode=explode)\n\n# create a white circle for the center of the pie chart\ncentre_circle = plt.Circle((0, 0), 0.6, color='white')\nax.add_artist(centre_circle)\n\n# create a legend\nax.legend(data_labels, loc='upper right')\nax.set_title('Government and Public Policy Impact - 2023')\nfig.tight_layout()\n\nfig.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_37.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much more does the Economy category cover compared to the Education category in the Government and Public Policy Impact chart?",
            "output": "12%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_192",
        "img": "./rings/png/rings_192.png",
        "topic": "Real Estate and Housing Market",
        "title": " Real Estate and Housing Market Trends - 2023",
        "csv": "Category \\t ratio \\n Home Prices \\t 45% \\n Mortgage Rates \\t 20% \\n Supply \\t 15% \\n Demand \\t 20% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This rings chart, titled \"Real Estate and Housing Market Trends - 2023,\" illustrates the breakdown of factors within the housing market. Home Prices constitute the largest segment at 45%, followed by Mortgage Rates and Demand, both at 20%. Supply accounts for the smallest portion at 15%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Home Prices','Mortgage Rates','Supply','Demand']\nline_labels = ['Category']\ndata = np.array([[45,20,15,20]])\n\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(111)\nax.pie(data.flatten(), labels=data_labels, startangle=90, counterclock=False, autopct='%.2f%%', colors=['#ff7f0e','#1f77b4','#2ca02c','#d62728'])\n\ncircle = plt.Circle((0,0), 0.6, color='white')\nax.add_artist(circle)\n\nax.legend(data_labels, loc='best')\nplt.title('Real Estate and Housing Market Trends - 2023')\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-075221_4.png')\nplt.cla()"
        },
        "QA": {
            "input": "What is the ratio for Mortgage Rates in the Real Estate and Housing Market Trends - 2023?",
            "output": "20%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_43",
        "img": "./rings/png/rings_43.png",
        "topic": "Environment and Sustainability",
        "title": " Environmental Sustainability Measurement in 2023",
        "csv": "Category \\t ratio \\n Renewable Energy Usage \\t 50% \\n Waste Management \\t 15% \\n Air Quality \\t 15% \\n Water Quality \\t 15% \\n Carbon Emission \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart illustrates the proportions of different environmental sustainability measures in 2023. Renewable Energy Usage dominates at 50%, while Waste Management, Air Quality, and Water Quality each constitute 15% of the measures. Carbon Emission accounts for the smallest ratio at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\ndata_labels=['Renewable Energy Usage','Waste Management','Air Quality','Water Quality','Carbon Emission']\ndata=[50,15,15,15,5]\nline_labels=['Category']\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot()\nax.pie(data, colors=['#b2df8a', '#33a02c', '#a6cee3', '#1f78b4', '#e31a1c'], \n       startangle=90, counterclock=False, autopct='%1.1f%%')\nax.set_title('Environmental Sustainability Measurement in 2023', fontsize=16)\n\ncircle = plt.Circle((0, 0), 0.7, color='white')\nax.add_artist(circle)\n\nax.legend(data_labels, bbox_to_anchor=(1.0, 1.0))\nax.axis('equal')\nplt.tight_layout()\nplt.savefig(os.path.join('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_9.png'))\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined ratio for Air Quality and Water Quality?",
            "output": "30%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_33",
        "img": "./rings/png/rings_33.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare Quality Evaluation - 2023",
        "csv": "Category \\t ratio \\n Treatment Quality \\t 48% \\n Patient Care \\t 25% \\n Clinical Outcomes \\t 13% \\n Cost Management \\t 14% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart illustrates the evaluation of healthcare quality in 2023 across four categories. Treatment Quality has the highest ratio at 48%, followed by Patient Care at 25%. Clinical Outcomes and Cost Management are depicted with lower percentages at 13% and 14% respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Treatment Quality','Patient Care','Clinical Outcomes','Cost Management']\ndata = np.array([48,25,13,14])\nline_labels = ['Category']\n\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(111)\nax.pie(data, labels=data_labels, autopct='%1.1f%%', startangle=90, counterclock=False, colors=['coral','gold','lightblue','pink'])\ncircle = plt.Circle((0,0), 0.6, color='white')\nax.add_artist(circle)\nax.set_title('Healthcare Quality Evaluation - 2023')\nax.legend(data_labels,loc='lower right')\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_43.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the ratio for Clinical Outcomes in the Healthcare Quality Evaluation of 2023?",
            "output": "13%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_59",
        "img": "./rings/png/rings_59.png",
        "topic": "Sports and Entertainment",
        "title": " Sports and Entertainment Industry Profitability - 2023",
        "csv": "Category \\t ratio \\n Ticket Sales \\t 40% \\n Broadcast Revenue \\t 15% \\n Sponsorship \\t 30% \\n Merchandise \\t 10% \\n Other \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart illustrates the profit distribution within the Sports and Entertainment Industry for 2023. The categories show different income sources with their corresponding ratios: Ticket Sales account for 40%, Sponsorship for 30%, Broadcast Revenue for 15%, Merchandise for 10%, and Other income sources for 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Transform the given data into three variables: data_labels, data, line_labels. \ndata_labels = ['Ticket Sales','Broadcast Revenue','Sponsorship','Merchandise','Other']\ndata = [40, 15, 30, 10, 5]\nline_labels = ['Category','ratio']\n\n# Plot the data with the type of rings chart\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Plot the pie chart\nax.pie(data, startangle=90, counterclock=False, labeldistance=1.2,\n       wedgeprops={'linewidth': 1.5, 'edgecolor': 'black'},\n       textprops={'fontsize': 14}, autopct='%1.1f%%')\n\n# Create a white circle\ncentre_circle = plt.Circle((0, 0), 0.70, fc='white')\nax.add_artist(centre_circle)\n\n# Label the pie chart\nax.legend(data_labels, fontsize=14, loc='upper left')\n\n# Adjust the radius of the inner circle to create different ring widths.\ncentre_circle.set_radius(0.5)\n\n# Set the title of the figure\nax.set_title(\"Sports and Entertainment Industry Profitability - 2023\", fontsize=16)\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_124.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the second largest category contributing to sports and entertainment industry profitability?",
            "output": "Sponsorship"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_121",
        "img": "./rings/png/rings_121.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing & Production Performance - 2023",
        "csv": "Category \\t ratio \\n Product Quality \\t 20% \\n Production Speed \\t 30% \\n Resource Utilization \\t 15% \\n Delivery Performance \\t 20% \\n Cost Management \\t 15% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rings chart illustrates the distribution of different performance metrics in manufacturing & production for the year 2023. It shows that Production Speed holds the largest share at 30%, followed by Product Quality and Delivery Performance at 20% each. Resource Utilization and Cost Management both account for 15% of the performance metrics within the manufacturing sector."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = [\"Product Quality\", \"Production Speed\", \"Resource Utilization\", \"Delivery Performance\", \"Cost Management\"]\ndata = [20, 30, 15, 20, 15]\nline_labels = [\"Category\", \"ratio\"]\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111)\nax.pie(data, startangle=90, counterclock=False, colors=['red','orange','green','blue','purple'])\ncircle = plt.Circle(xy=(0, 0), radius=0.5, edgecolor='white', facecolor='white')\nax.add_artist(circle)\nax.legend(data_labels, loc='upper left')\nplt.title(\"Manufacturing & Production Performance - 2023\")\nplt.tight_layout()\nplt.savefig(\"./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_72.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined ratio for Cost Management and Resource Utilization?",
            "output": "30%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_18",
        "img": "./rings/png/rings_18.png",
        "topic": "Healthcare and Health",
        "title": " Overall Health Status - 2023",
        "csv": "Category \\t ratio \\n Mental Health \\t 44% \\n Physical Health \\t 31% \\n Nutrition \\t 9% \\n Exercise \\t 16% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart illustrates the distribution of overall health status in 2023 across four categories. Mental Health constitutes the largest share with 44%, followed by Physical Health at 31%, Exercise at 16%, and Nutrition at 9%. Each segment of the chart represents the ratio of focus or concern dedicated to its respective category."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle\n\ndata_labels = ['Mental Health','Physical Health','Nutrition','Exercise']\ndata = [44,31,9,16]\nline_labels = ['Category']\n\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111)\n\nax.pie(data, labels=data_labels, startangle=90, counterclock=False, colors=['red', 'green', 'blue', 'yellow'])\n\ncentre_circle = Circle((0,0), 0.70, color='white')\nax.add_artist(centre_circle)\n\nax.set_title('Overall Health Status - 2023')\nax.legend(data_labels, loc='best')\n\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_29.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the focus on Mental Health compared to Exercise in 2023?",
            "output": "28%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_42",
        "img": "./rings/png/rings_42.png",
        "topic": "Technology and the Internet",
        "title": " Technology and the Internet Trends - 2023",
        "csv": "Category \\t ratio \\n Connectivity \\t 26% \\n Security \\t 7% \\n Data Traffic \\t 25% \\n Innovation \\t 13% \\n User Experience \\t 29% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart shows the distribution of various technology and internet trends in 2023 by category. Connectivity accounts for 26%, Security for 7%, Data Traffic for 25%, Innovation for 13%, and User Experience commands the largest proportion at 29%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Connectivity','Security','Data Traffic','Innovation','User Experience']\nline_labels = ['Category','ratio']\ndata = np.array([[26,7,25,13,29]])\n\nfig = plt.figure(figsize=(10,7))\nax = fig.add_subplot(111, aspect='equal')\n\ncolors = plt.cm.tab10(np.arange(5))\n\nax.pie(data[0], labels=data_labels, autopct='%1.1f%%', startangle=90, counterclock=False, colors=colors)\n\ncentre_circle = plt.Circle((0,0),0.7,fc='white')\nax.add_artist(centre_circle)\n\nax.legend(data_labels,loc='upper left')\n\nplt.title('Technology and the Internet Trends - 2023')\n\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_6.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage ratio of Innovation in the Technology and the Internet Trends?",
            "output": "13%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_98",
        "img": "./rings/png/rings_98.png",
        "topic": "Real Estate and Housing Market",
        "title": " Real Estate and Housing Market Trends - 2023",
        "csv": "Category \\t ratio \\n Home Prices \\t 45% \\n Construction Activity \\t 17% \\n Homeownership Rate \\t 20% \\n Rental Rates \\t 15% \\n Foreclosures \\t 3% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This ring chart depicts the proportions of various aspects of the Real Estate and Housing Market in 2023. Home Prices constitute the largest share at 45%, followed by Homeownership Rate at 20%, Construction Activity at 17%, and Rental Rates at 15%. Foreclosures represent the smallest segment at 3%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels=['Home Prices','Construction Activity','Homeownership Rate','Rental Rates','Foreclosures']\ndata=[45,17,20,15,3]\nline_labels=['Category']\n\nfig=plt.figure(figsize=(10,7))\nax=fig.add_subplot()\nax.pie(data,labels=data_labels,autopct='%1.1f%%',startangle=90,counterclock=False,colors = ['red', 'green', 'blue','yellow','purple'])\ncircle=plt.Circle(xy=(0,0),radius=0.7,facecolor='white')\nax.add_artist(circle)\nax.set_title('Real Estate and Housing Market Trends - 2023')\nplt.tight_layout()\nax.legend(data_labels)\n\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_43.png')\nplt.cla()"
        },
        "QA": {
            "input": "By how much do Home Prices exceed the sum of Rental Rates and Foreclosures?",
            "output": "27%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_87",
        "img": "./rings/png/rings_87.png",
        "topic": "Education and Academics",
        "title": " Academic Excellence - 2023",
        "csv": "Category \\t ratio \\n Performance \\t 30% \\n Student Engagement \\t 20% \\n Curriculum Quality \\t 25% \\n Resources Availability \\t 15% \\n Teacher Quality \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rings chart illustrates the distribution of factors contributing to academic excellence in 2023. Each ring represents a percentage of the whole. Performance is the dominant category at 30%. Student Engagement follows at 20%, and Curriculum Quality at 25%. Resources Availability is next at 15%, with Teacher Quality being the smallest category at 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Performance', 'Student Engagement', 'Curriculum Quality', 'Resources Availability', 'Teacher Quality']\ndata = np.array([30,20,25,15,10])\nline_labels = ['Category', 'Ratio']\n\nfig = plt.figure(figsize=(7,7))\nax = fig.add_subplot(111)\nax.pie(data, labels=data_labels, startangle=90, counterclock=False, autopct='%1.1f%%', colors=['#19A979','#2E86C1','#F4C724','#D980FA','#C0392B'])\ncircle = plt.Circle((0,0),0.7, color='white')\nax.add_artist(circle)\nax.set_title('Academic Excellence - 2023')\nax.legend(data_labels, loc='upper center', bbox_to_anchor=(0.5, -0.05), ncol=2, fontsize=9, frameon=False)\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_26.png')\nplt.clf()"
        },
        "QA": {
            "input": "What category has the lowest ratio according to the data?",
            "output": "Teacher Quality"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_134",
        "img": "./rings/png/rings_134.png",
        "topic": "Real Estate and Housing Market",
        "title": "Real Estate and Housing Market Overview - 2023",
        "csv": "Category \\t ratio \\n Home Affordability \\t 30% \\n Property Quality \\t 23% \\n Mortgage Rates \\t 12% \\n Market Activity \\t 25% \\n Rental Market \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart offers an overview of different aspects related to the Real Estate and Housing Market in 2023. It displays five categories with corresponding ratios: Home Affordability stands at 30%, Property Quality at 23%, Mortgage Rates at 12%, Market Activity at 25%, and the Rental Market at 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata_labels = ['Home Affordability','Property Quality','Mortgage Rates','Market Activity','Rental Market']\ndata = np.array([30, 23, 12, 25, 10])\nline_labels = ['Category', 'Ratio']\n\nfig = plt.figure(figsize=(15,7))\nax = fig.add_subplot(1,1,1)\nax.pie(data,labels=data_labels,autopct='%1.1f%%',startangle=90,counterclock=False)\ncircle = plt.Circle((0,0), 0.7, color='white')\nax.add_artist(circle)\nax.legend(data_labels,loc=\"best\")\nplt.title('Real Estate and Housing Market Overview - 2023')\nax.axis('equal')\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_89.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the Home Affordability ratio compared to the Mortgage Rates ratio?",
            "output": "18%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_213",
        "img": "./rings/png/rings_213.png",
        "topic": "Science and Engineering",
        "title": " Science and Engineering Performance - 2023",
        "csv": "Category \\t ratio \\n Research and Development \\t 25% \\n Quality Assurance \\t 20% \\n Production Efficiency \\t 30% \\n Waste Reduction \\t 10% \\n Innovation \\t 15% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rings chart, titled \"Science and Engineering Performance - 2023,\" illustrates the percentage ratio of five different categories within a company or sector. Research and Development accounts for 25%, Quality Assurance makes up 20%, and Production Efficiency leads with 30%. Meanwhile, Waste Reduction represents a smaller share at 10%, and Innovation contributes 15% to the overall performance metrics for the year."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Research and Development','Quality Assurance','Production Efficiency','Waste Reduction','Innovation']\ndata = [0.25, 0.20, 0.30, 0.10, 0.15]\nline_labels = ['Category', 'ratio']\n\nfig, ax = plt.subplots(figsize=(8,8))\nwedges, texts, autotexts = ax.pie(data, startangle=90, counterclock=False, autopct='%1.1f%%')\nplt.setp(autotexts, size=14, weight=\"bold\")\nc = plt.Circle((0,0), 0.7, color='white')\nax.add_artist(c)\nax.legend(data_labels, loc='upper left')\nax.set_title('Science and Engineering Performance - 2023', fontsize=16)\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-075221_67.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the total is represented by Innovation and Waste Reduction combined in 2023?",
            "output": "25%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_25",
        "img": "./rings/png/rings_25.png",
        "topic": "Human Resources and Employee Management",
        "title": " Human Resources Management Trends - 2021",
        "csv": "Category \\t ratio \\n Performance Evaluation \\t 25% \\n Talent Acquisition \\t 23% \\n Workplace Environment \\t 14% \\n Training & Development \\t 22% \\n Productivity \\t 16% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart illustrates the ratio of five human resources management trends in 2021. Performance Evaluation is the largest category at 25%, closely followed by Talent Acquisition at 23%, and Training & Development at 22%. Productivity accounts for 16%, while Workplace Environment is represented with a 14% ratio in the trends of human resources management for that year."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Performance Evaluation', 'Talent Acquisition', 'Workplace Environment', 'Training & Development', 'Productivity']\ndata = [25, 23, 14, 22, 16]\nline_labels = ['Category','ratio']\n\nfig, ax = plt.subplots(figsize=(12,8))\nexplode = np.zeros(len(data_labels))\nexplode[0] = 0.1\nwedges, texts, autotexts = ax.pie(data, explode=explode, counterclock=False, startangle=90, autopct='%.0f%%')\nax.set_title(\"Human Resources Management Trends - 2021\")\nax.legend(data_labels, loc=\"upper left\")\ncentre_circle = plt.Circle((0,0), 0.6, color='white', fc='white',linewidth=0)\nax.add_artist(centre_circle)\nplt.setp(autotexts, size=15, weight=\"bold\")\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_36.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which category has a higher ratio, Productivity or Workplace Environment?",
            "output": "Workplace Environment"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_15",
        "img": "./rings/png/rings_15.png",
        "topic": "Education and Academics",
        "title": " Education Quality Index - 2023",
        "csv": "Area \\t ratio \\n Academic Performance \\t 25% \\n Teacher Quality \\t 35% \\n Student Engagement \\t 15% \\n Technology Adoption \\t 10% \\n Facility Quality \\t 15% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart visualizes the Education Quality Index for 2023, breaking down the components by percentage. Academic Performance contributes 25% to the Index, while Teacher Quality has a larger share at 35%. Student Engagement and Facility Quality are both set at 15%, and Technology Adoption makes up the smallest portion at 10%. Each ring segment corresponds to the area's ratio within the overall Index."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels.\ndata_labels = ['Academic Performance', 'Teacher Quality', 'Student Engagement', 'Technology Adoption', 'Facility Quality']\ndata = [25, 35, 15, 10, 15]\nline_labels = ['Area', 'Ratio']\n\n# Plot the data with the type of rings chart\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111)\n\n# Create only one pie chart using the ax.pie() method and setting the startangle and counterclock parameters for better layout.\ncmap = plt.get_cmap(\"tab20c\")\nouter_colors = cmap(np.arange(5)*4)\ninner_colors = cmap(np.array([1, 2, 5, 6, 9]))\nax.pie(data, radius=1.2, colors=outer_colors, startangle=90, counterclock=False,\n       wedgeprops=dict(width=0.5, edgecolor='w'))\n\n# To change the pie chart into a ring chart in your code, you need to correctly add a white circle to the center of the pie chart.\ncenter_circle = plt.Circle((0,0),0.75,color='white')\nax.add_artist(center_circle)\n\n# Plot the legend of data labels\nhandles = []\nfor i in range(5):\n    patch = mpatches.Patch(color=outer_colors[i], label=data_labels[i])\n    handles.append(patch)\nax.legend(handles=handles, loc='upper left')\n\n# Drawing techniques such as background grids can be used.\nplt.grid(True)\n\n# The title of the figure should be Education Quality Index - 2023.\nplt.title('Education Quality Index - 2023')\n\n# Automatically resize the image by tight_layout().\nplt.tight_layout()\n\n# The image must be saved as ./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_24.png.\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_24.png')\n\n# Clear the current image state at the end of the code.\nplt.clf()"
        },
        "QA": {
            "input": "What is the ratio for Facility Quality in the Education Quality Index - 2023?",
            "output": "15%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_65",
        "img": "./rings/png/rings_65.png",
        "topic": "Law and Legal Affairs",
        "title": " Legal System Trends - 2023",
        "csv": "Variable \\t ratio \\n Court Cases \\t 45% \\n Lawsuits \\t 15% \\n Legislation \\t 12% \\n Contracts \\t 21% \\n Appeals \\t 7% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This rings chart (often referred to as a donut chart), titled \"Legal System Trends - 2023,\" illustrates the distribution of different aspects of the legal system by percentage. Court Cases occupy 45% of the chart, followed by Contracts at 21%. Lawsuits are represented by 15%, while Legislation takes up 12%. Appeals have the smallest share at 7%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.lines as mlines\n\ndata_labels = ['Court Cases', 'Lawsuits', 'Legislation', 'Contracts', 'Appeals']\ndata = np.array([45, 15, 12, 21, 7])\nline_labels = ['Variable','Ratio']\n\nfig = plt.figure(figsize = (8, 8))\nax = fig.add_subplot(111)\npatches, texts, autotexts = ax.pie(data, labels=data_labels, startangle=90, counterclock=False, autopct='%1.1f%%')\nax.set_title(\"Legal System Trends - 2023\")\n\n# Adjust the radius of the inner circle to create different ring widths.\ncentre_circle = plt.Circle((0,0),0.8,fc='white')\n\nfor text in texts:\n    text.set_rotation(0)\n    text.set_wrap(True)\n\n# Add the white circle to the center of the pie chart.\nax.add_artist(centre_circle)\nax.legend(data_labels, labelspacing=1, loc='upper left')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_133.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which category represents the smallest proportion in the Legal System Trends?",
            "output": "Appeals"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_166",
        "img": "./rings/png/rings_166.png",
        "topic": "Food and Beverage Industry",
        "title": " Food and Beverage Industry Performance - 2023",
        "csv": "Category \\t ratio \\n Production Efficiency \\t 19% \\n Quality Control \\t 15% \\n Supply Chain \\t 7% \\n Customer Satisfaction \\t 32% \\n Branding \\t 27% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This ring chart represents different performance categories within the Food and Beverage Industry in 2023. Production Efficiency accounts for a 19% ratio, Quality Control for 15%, Supply Chain for 7%, Customer Satisfaction for 32%, and Branding for 27%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \n\ndata_labels = ['Production Efficiency', 'Quality Control', 'Supply Chain', 'Customer Satisfaction', 'Branding']\ndata = [19,15,7,32,27]\nline_labels = ['Category', 'Ratio']\n\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot()\nax.pie(data, startangle=90, counterclock=False, colors=['#6A9BFF', '#FF6F6F', '#A0FF68', '#FFF66D', '#B4B4FF'], autopct='%1.1f%%')\ncircle = plt.Circle((0,0), 0.70, color='white')\nax.add_artist(circle)\nax.axis('equal')\nax.legend(data_labels, loc='upper right', bbox_to_anchor=(1.3, 1))\nax.set_title('Food and Beverage Industry Performance - 2023')\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-075221_139.png')\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of the Food and Beverage Industry Performance does Branding represent in 2023?",
            "output": "27%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_39",
        "img": "./rings/png/rings_39.png",
        "topic": "Real Estate and Housing Market",
        "title": " Real Estate and Housing Market - 2023",
        "csv": "Category \\t ratio \\n Home Prices \\t 30% \\n Rental Rates \\t 20% \\n Vacancy Rates \\t 13% \\n Building Permits \\t 14% \\n Property Taxes \\t 23% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart illustrates the distribution of various real estate and housing market categories in 2023. Home Prices constitute 30% of the chart, Rental Rates are 20%, and Property Taxes 23%. Vacancy Rates and Building Permits represent a smaller portion, at 13% and 14%, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = [\"Home Prices\",\"Rental Rates\",\"Vacancy Rates\",\"Building Permits\",\"Property Taxes\"]\ndata = [30,20,13,14,23]\nline_labels = [\"Category\", \"ratio\"]\n\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111)\n\ncolors = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\"]\nax.pie(data, labels=data_labels, autopct='%1.1f%%', startangle=90, colors=colors)\ncircle = plt.Circle((0,0), 0.70, color='white')\nax.add_artist(circle)\n\nax.legend(data_labels, loc=\"upper left\", bbox_to_anchor=(1,0.8))\nax.set_title(\"Real Estate and Housing Market - 2023\")\n\nplt.tight_layout()\nplt.savefig(\"./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_49.png\")\nplt.clf()"
        },
        "QA": {
            "input": "By how much does the ratio for Property Taxes exceed the ratio for Vacancy Rates?",
            "output": "10%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_81",
        "img": "./rings/png/rings_81.png",
        "topic": "Energy and Utilities",
        "title": " Energy Utilization in 2023",
        "csv": "Category \\t ratio \\n Renewable Energy \\t 39% \\n Fossil Fuels \\t 21% \\n Nuclear Power \\t 7% \\n Hydroelectricity \\t 33% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart illustrates the energy utilization ratios for different categories in 2023. Renewable Energy accounts for 39% of the utilization, while Fossil Fuels make up 21%. Nuclear Power represents a smaller segment at 7%, and Hydroelectricity comprises 33% of the energy utilization."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Renewable Energy','Fossil Fuels','Nuclear Power','Hydroelectricity']\ndata = np.array([39,21,7,33])\nline_labels = ['Category', 'Ratio']\n\nfig = plt.figure(figsize=(10,7))\nax = fig.add_subplot(111)\n\nax.pie(data, explode=(0,0,0,0), labels=data_labels, startangle=45, counterclock=False, colors=['#FF0000','#00FF00','#0000FF','#FFFF00'])\nplt.Circle((0,0), 0.7, color='white')\nax.add_artist(plt.Circle((0,0), 0.7, color='white'))\n\nax.legend(data_labels, loc=\"best\")\nax.set_title(\"Energy Utilization in 2023\", fontsize=20)\n\nplt.tight_layout()\n\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_16.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage of Fossil Fuels in the energy utilization?",
            "output": "21%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_45",
        "img": "./rings/png/rings_45.png",
        "topic": "Energy and Utilities",
        "title": " Energy and Utilities - 2023 Overview",
        "csv": "Category \\t ratio \\n Renewable Energy \\t 30% \\n Fossil Fuels \\t 20% \\n Nuclear Power \\t 10% \\n Hydroelectric Power \\t 15% \\n Natural Gas \\t 25% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart presents the distribution of different energy sources in 2023. Renewable Energy accounts for 30% of the chart, Fossil Fuels represent 20%, and Nuclear Power makes up 10%. Hydroelectric Power is shown at 15%, while Natural Gas holds a 25% share. Each ring segment reflects the proportion of these categories in the energy mix."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \n\n# Transform the given data into three variables: data_labels, data, line_labels \ndata_labels = ['Renewable Energy', 'Fossil Fuels', 'Nuclear Power', 'Hydroelectric Power', 'Natural Gas'] \ndata = [30, 20, 10, 15, 25] \nline_labels = ['Category', 'ratio'] \n\n# Plot the data with the type of rings chart \nfig = plt.figure(figsize=(10, 6)) \nax = fig.add_subplot(111) \nax.pie(data, labels=data_labels, startangle=90, counterclock=False, autopct='%.1f%%') \n\n# To change the pie chart into a ring chart in your code, you need to correctly add a white circle to the center of the pie chart \ncentre_circle = plt.Circle((0, 0), 0.4, color='white') \nax.add_artist(centre_circle) \n\n# Create only one pie chart using the `ax.pie()` method and setting the `startangle` and `counterclock` parameters for better layout \nax.legend(data_labels,loc='upper center', bbox_to_anchor=(0.5, -0.1)) \n\n# Adjust the radius of the inner circle to create different ring widths \ninner_circle = plt.Circle((0, 0), 0.2, color='white') \nax.add_artist(inner_circle) \n\n# For the plot of legend, do not plot the legend of gridlines or the legend of ax.fill output, only the data_labels are needed to provide the legend, i.e., ax.legend(data_labels) \nax.set_title(\"Energy and Utilities - 2023 Overview\") \n\n# Automatically resize the image by tight_layout() \nplt.tight_layout() \n\n# The image must be saved as ./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_106.png \nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_106.png') \n\n# Clear the current image state at the end of the code \nplt.clf()"
        },
        "QA": {
            "input": "Which energy source has a higher ratio, Hydroelectric Power or Natural Gas?",
            "output": "Natural Gas"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_107",
        "img": "./rings/png/rings_107.png",
        "topic": "Law and Legal Affairs",
        "title": " Law and Legal Affairs Overview - 2023",
        "csv": "Category \\t ratio \\n Legal Compliance \\t 37% \\n Regulatory Framework \\t 23% \\n Risk Management \\t 16% \\n Compliance Enforcement \\t 17% \\n Professional Ethics \\t 7% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This ring chart presents the distribution of five distinct categories within the realm of law and legal affairs for the year 2023. Legal Compliance dominates the chart with a 37% ratio, followed by Regulatory Framework at 23%. Risk Management and Compliance Enforcement contribute similar proportions to the chart, with 16% and 17% respectively. The smallest segment is Professional Ethics, making up 7% of the chart."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport math\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = ['Legal Compliance', 'Regulatory Framework', 'Risk Management', 'Compliance Enforcement', 'Professional Ethics']\ndata = np.array([37, 23, 16, 17, 7])\nline_labels = ['Category', 'ratio']\n\n# Plot the data with the type of rings chart\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Create only one pie chart using the `ax.pie()` method\nax.pie(data, startangle=90, counterclock=False, labels=data_labels, \n       autopct='%1.1f%%', pctdistance=0.8, labeldistance=1.1)\n\n# Change the pie chart into a ring chart in your code\ninner_circle = plt.Circle((0,0),0.7, color='white')\nax.add_artist(inner_circle)\n\n# For the plot of legend\nax.legend(data_labels, loc='upper center', bbox_to_anchor=(0.5, -0.1),\n          fancybox=True, shadow=True, ncol=2)\n\n# Drawing techniques such as background grids can be used\nax.grid(True)\n\n# The title of the figure \nax.set_title('Law and Legal Affairs Overview - 2023', fontsize=20)\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_58.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined ratio of Risk Management and Professional Ethics?",
            "output": "23%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_225",
        "img": "./rings/png/rings_225.png",
        "topic": "Law and Legal Affairs",
        "title": " Law and Legal Affairs Overview - 2023",
        "csv": "Area \\t ratio \\n Criminal \\t 32% \\n Civil \\t 17% \\n Corporate \\t 13% \\n Regulatory \\t 20% \\n Tax \\t 18% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This ring chart illustrates the distribution of legal affairs cases by category in 2023. Criminal cases account for 32% of the cases, while civil cases make up 17%. Corporate law is at 13%, followed by regulatory matters at 20%, and tax-related cases constitute 18% of the total cases represented in the chart."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \n\ndata_labels = [\"Criminal\",\"Civil\",\"Corporate\",\"Regulatory\",\"Tax\"]\ndata = np.array([32,17,13,20,18])\nline_labels = [\"Area\",\"ratio\"]\n\nfig = plt.figure(figsize=(8,8)) \nax = fig.add_subplot(111)\nplt.title(\"Law and Legal Affairs Overview - 2023\")\nax.pie(data, labels=data_labels, startangle=90,counterclock=False,autopct='%1.1f%%') \ncentre_circle = plt.Circle((0,0),0.5,fc='white')\nfig = plt.gcf() \nax.add_artist(centre_circle) \nplt.legend(data_labels, loc=\"lower right\",bbox_to_anchor=(1.1,0.5)) \nplt.tight_layout()\nplt.savefig(r\"./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-075221_87.png\")\nplt.cla()"
        },
        "QA": {
            "input": "What is the percentage ratio for Corporate Law affairs in 2023?",
            "output": "13%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_75",
        "img": "./rings/png/rings_75.png",
        "topic": "Retail and E-commerce",
        "title": " Retail & E-commerce Performance in 2023",
        "csv": "Category \\t ratio \\n Online Sales \\t 44% \\n Store Sales \\t 32% \\n Returns \\t 11% \\n Delivery Efficiency \\t 9% \\n Customer Satisfaction \\t 4% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rings chart illustrates the performance breakdown of retail and e-commerce in 2023 across five categories. Online Sales dominate with a 44% ratio, followed by Store Sales at 32%. Returns make up 11% of the chart, while Delivery Efficiency accounts for 9%. Customer Satisfaction is represented with the smallest ratio at 4%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndata_labels = ['Online Sales','Store Sales','Returns','Delivery Efficiency','Customer Satisfaction']\ndata = np.array([44,32,11,9,4])\nline_labels = ['Category','ratio']\n\nfig, ax = plt.subplots(figsize=(10, 8))\nwedges, texts, autotexts = ax.pie(data, startangle=90, counterclock=False, autopct='%1.1f%%', pctdistance=0.8)\n\nplt.Circle((0,0),0.5, color='white')\nax.add_artist(plt.Circle((0,0),0.5, color='white'))\nax.legend(data_labels, loc=\"upper left\")\nplt.title(\"Retail & E-commerce Performance in 2023\")\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_143.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined ratio of Returns and Delivery Efficiency?",
            "output": "20%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_5",
        "img": "./rings/png/rings_5.png",
        "topic": "Education and Academics",
        "title": " Education and Academics in 2023",
        "csv": "Area \\t ratio \\n Academic Performance \\t 28% \\n Enrollment Rate \\t 20% \\n Student Satisfaction \\t 35% \\n Teacher Performance \\t 10% \\n Graduation Rate \\t 7% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart illustrates the breakdown of various metrics within education and academics in 2023. Academic Performance constitutes 28% of the chart, while Enrollment Rate is at 20%. Student Satisfaction is the largest segment at 35%. Teacher Performance and Graduation Rate are smaller portions, comprising 10% and 7% respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables\ndata_labels = [\"Academic Performance\", \"Enrollment Rate\", \"Student Satisfaction\", \n               \"Teacher Performance\", \"Graduation Rate\"]\ndata = [0.28, 0.20, 0.35, 0.10, 0.07]\nline_labels = [\"Area\", \"Ratio\"]\n\n# Plot the data with the type of rings chart\nfig, ax = plt.subplots(figsize=(10, 6))\nax.set_title('Education and Academics in 2023')\n\n# Create only one pie chart\nax.pie(data, startangle=90, counterclock=False, colors=['#98FB98', '#9370DB', '#FF4500', '#ADFF2F', '#DCDCDC'])\n\n# Add a white circle to the center of the pie chart\ncentre_circle = plt.Circle((0, 0), 0.7, fc='white')\nax.add_artist(centre_circle)\n\n# Add legend\nax.legend(data_labels, loc=\"best\", bbox_to_anchor=(1, 0.5))\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_11.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the combined ratio percentage for Teacher Performance and Graduation Rate?",
            "output": "17%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_2",
        "img": "./rings/png/rings_2.png",
        "topic": "Arts and Culture",
        "title": " Arts and Culture Development - 2023",
        "csv": "Category \\t ratio \\n Artistic Expression \\t 28% \\n Cultural Heritage \\t 19% \\n Arts Education \\t 17% \\n Artist Support \\t 20% \\n Quality Artworks \\t 16% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart represents the distribution of various categories within Arts and Culture Development in 2023. It shows that 28% of the focus is on Artistic Expression, 19% on Cultural Heritage, 17% on Arts Education, 20% on Artist Support, and 16% is dedicated to Quality Artworks. The chart provides a visual representation of the emphasis placed on each category in the context of arts and culture."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport matplotlib.patches as mpatches \n\ndata_labels = ['Artistic Expression','Cultural Heritage','Arts Education','Artist Support','Quality Artworks']\ndata = [0.28, 0.19, 0.17, 0.20, 0.16]\nline_labels = ['Category', 'ratio']\n\nfig, ax = plt.subplots(figsize=(7,7))\n\nax.pie(data, startangle=90, counterclock=False, wedgeprops=dict(width=0.4))\ninner_circle = mpatches.Circle(xy=(0,0), radius=0.6, facecolor='white')\nax.add_artist(inner_circle)\nax.legend(data_labels, loc='upper left', bbox_to_anchor=(1.0,0.5))\n\nax.set_title('Arts and Culture Development - 2023')\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122217_3.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage ratio for Artist Support?",
            "output": "20%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_206",
        "img": "./rings/png/rings_206.png",
        "topic": "Tourism and Hospitality",
        "title": " Tourism and Hospitality Performance Overview - 2023",
        "csv": "Category \\t ratio \\n Popularity \\t 25% \\n Quality of Service \\t 20% \\n Customer Satisfaction \\t 17% \\n Revenue \\t 26% \\n Infrastructure \\t 12% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rings chart provides an overview of the performance in tourism and hospitality for 2023, broken down into five categories. Popularity accounts for 25% of the overview, followed closely by revenue which represents 26%. Quality of Service is valued at 20%, while Customer Satisfaction makes up 17% of the performance metrics. Infrastructure has the smallest share at 12%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\ndata_labels = [\"Popularity\",\"Quality of Service\",\"Customer Satisfaction\",\"Revenue\",\"Infrastructure\"]\ndata = [25,20,17,26,12]\nline_labels = [\"Category\", \"Ratio\"]\n\nfig, ax = plt.subplots(figsize=(20,10))\nax.pie(data, counterclock=False, startangle=90, autopct='%1.1f%%',\n       colors=['red','green','blue','orange','purple'])\n\ncircle = plt.Circle((0,0), 0.7, color='white')\nax.add_artist(circle)\nax.legend(data_labels)\nax.set_title('Tourism and Hospitality Performance Overview - 2023')\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-075221_6.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the lowest ratio in the Tourism and Hospitality Performance Overview?",
            "output": "Infrastructure"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_4",
        "img": "./rings/png/rings_4.png",
        "topic": "Real Estate and Housing Market",
        "title": " Real Estate and Housing Market Overview - 2023",
        "csv": "Category \\t ratio \\n Average Price \\t 29% \\n Home Sales \\t 17% \\n Mortgage Rates \\t 14% \\n Investment Yields \\t 18% \\n Vacancy Rates \\t 22% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This ring chart presents an overview of the real estate and housing market in 2023 by illustrating the distribution of several categories. Average Price constitutes 29% of the chart, Home Sales represent 17%, and Mortgage Rates account for 14%. Investment Yields follow closely with 18%, while Vacancy Rates make up 22% of the chart."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Average Price','Home Sales','Mortgage Rates','Investment Yields','Vacancy Rates']\ndata = [29,17,14,18,22]\nline_labels = ['Category','ratio']\n\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111)\n\ncmap = plt.get_cmap(\"tab20c\")\nouter_colors = cmap(np.arange(5)*4)\n\nax.pie(data, colors=outer_colors,\n       labels=data_labels,\n       startangle=120,\n       counterclock=False,\n       wedgeprops=dict(width=0.5, edgecolor='w'))\n\ninner_circle = plt.Circle((0, 0), 0.5, color='white')\nax.add_artist(inner_circle)\n\nax.set_title('Real Estate and Housing Market Overview - 2023', fontsize=20)\nax.legend(data_labels, loc=\"upper left\", bbox_to_anchor=(1.1, 0.7))\nax.axis('equal')\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122217_5.png')\nplt.cla()"
        },
        "QA": {
            "input": "Which category has the lowest ratio according to the data?",
            "output": "Mortgage Rates"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_51",
        "img": "./rings/png/rings_51.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Management - 2021",
        "csv": "Category \\t ratio \\n Staff Retention \\t 25% \\n Recruitment \\t 20% \\n Training \\t 25% \\n Career Progression \\t 15% \\n Workplace Safety \\t 15% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart illustrates the distribution of five categories within employee management for 2021. Staff Retention and Training each make up 25% of the chart, suggesting a significant focus on these areas. Recruitment accounts for 20%, while both Career Progression and Workplace Safety constitute 15% apiece. The visual representation shows the proportional emphasis placed on each aspect of employee management."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Staff Retention', 'Recruitment', 'Training', 'Career Progression', 'Workplace Safety']\ndata = [25, 20, 25, 15, 15]\nline_labels = ['Category', 'Ratio']\n\nfig, ax = plt.subplots(figsize=(10,7))\nax.pie(data, startangle=90, counterclock=False, autopct='%1.1f%%')\ncircle = plt.Circle((0, 0), 0.7, color='white')\nax.add_artist(circle)\nax.set_title(\"Employee Management - 2021\")\nax.legend(data_labels, loc='center left', bbox_to_anchor=(1, 0, 0.5, 1))\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_112.png')\nplt.close()"
        },
        "QA": {
            "input": "What percentage of the focus is on Staff Retention and Training combined?",
            "output": "50%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_130",
        "img": "./rings/png/rings_130.png",
        "topic": "Law and Legal Affairs",
        "title": " Legal System Overview - 2023",
        "csv": "Category \\t ratio \\n Judicial Decisions \\t 33% \\n Administrative Regulations \\t 27% \\n Legislation \\t 30% \\n Case Law \\t 10% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The ring chart provides an overview of the legal system's composition in 2023, showing the distribution of various sources of law. Judicial decisions account for 33%, administrative regulations make up 27%, legislation represents 30%, and case law comprises 10% of the system."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import Circle, Wedge\n\ndata_labels = [\"Judicial Decisions\", \"Administrative Regulations\", \"Legislation\", \"Case Law\"]\ndata = np.array([33, 27, 30, 10])\nline_labels = [\"Category\", \"ratio\"]\n\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\n\nouter_colors = [\"#0099CC\", \"#FF9900\", \"#66AA00\", \"#FF3300\"]\nwedges, texts, autotexts = ax.pie(data,\n                                  labels=data_labels,\n                                  colors=outer_colors,\n                                  startangle=90,\n                                  counterclock=False,\n                                  autopct=\"%1.1f%%\")\n\ncircle = plt.Circle((0, 0), 0.7, color='white')\nax.add_artist(circle)\n\nax.legend(data_labels, loc=\"upper right\", bbox_to_anchor=(1.2, 0.8))\nax.set_title(\"Legal System Overview - 2023\")\n\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_81.png', dpi=200, bbox_inches='tight')\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the smallest ratio in the Legal System Overview for 2023?",
            "output": "Case Law"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_218",
        "img": "./rings/png/rings_218.png",
        "topic": "Healthcare and Health",
        "title": " Health and Wellbeing in 2023",
        "csv": "Category \\t ratio \\n Vaccination Coverage \\t 17% \\n Nutrition Education \\t 15% \\n Mental Health Support \\t 25% \\n Healthcare Accessibility \\t 25% \\n Disease Prevention \\t 18% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rings chart titled \"Health and Wellbeing in 2023\" illustrates the distribution of percentages across five categories. Vaccination Coverage is represented by a 17% ratio, Nutrition Education by 15%, and Mental Health Support and Healthcare Accessibility both share a 25% ratio. Disease Prevention accounts for an 18% ratio. Each category reflects a component of health and wellbeing for the year 2023.\n"
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata_labels = [\"Vaccination Coverage\", \"Nutrition Education\", \"Mental Health Support\", \"Healthcare Accessibility\", \"Disease Prevention\"]\ndata = [17, 15, 25, 25, 18]\nline_labels = [\"Category\", \"ratio\"]\n\nfig, ax = plt.subplots(figsize=(10, 8))\nax.pie(data, startangle=90, counterclock=False, labels=data_labels, autopct='%1.1f%%')\nax.set_title(\"Health and Wellbeing in 2023\")\n\nc = plt.Circle((0, 0), 0.7, color='white')\nax.add_artist(c)\n\nax.legend(data_labels, bbox_to_anchor=(1, 0.8))\n\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-075221_75.png', bbox_inches='tight')\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the highest ratio in the Health and Wellbeing chart for 2023?",
            "output": "Mental Health Support and Healthcare Accessibility are the highest, both at 25%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_8",
        "img": "./rings/png/rings_8.png",
        "topic": "Human Resources and Employee Management",
        "title": " Human Resources and Employee Management - 2023",
        "csv": "Category \\t ratio \\n Employee Retention \\t 41% \\n Training and Development \\t 12% \\n Performance Evaluation \\t 11% \\n Hiring and Recruitment \\t 19% \\n Benefits Management \\t 17% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This ring chart represents the distribution of different aspects of human resources and employee management in 2023. Employee Retention is the largest category with a 41% ratio. On a smaller scale, Training and Development make up 12%, while Performance Evaluation stands at 11%. Hiring and Recruitment processes account for 19%, and Benefits Management represents 17% of the chart."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = [\"Employee Retention\", \"Training and Development\", \"Performance Evaluation\", \"Hiring and Recruitment\", \"Benefits Management\"]\ndata = [41, 12, 11, 19, 17]\nline_labels = [\"Category\", \"ratio\"]\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111)\n\nax.pie(data, labels=data_labels, startangle=90, counterclock=False)\ncenter_circle = plt.Circle((0,0), 0.70, color='white')\nax.add_artist(center_circle)\nax.axis('equal')\nax.set_title(\"Human Resources and Employee Management - 2023\")\nax.legend(data_labels, loc=\"upper left\", bbox_to_anchor=(-0.1, 1.))\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_14.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage difference between Training and Development and Hiring and Recruitment?",
            "output": "7%"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_23",
        "img": "./rings/png/rings_23.png",
        "topic": "Arts and Culture",
        "title": " Arts and Culture Appreciation - 2023",
        "csv": "Category \\t ratio \\n Music and Dance \\t 20% \\n Theatre and Drama \\t 25% \\n Art and Design \\t 15% \\n Literature \\t 20% \\n Performing Arts \\t 20% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rings chart titled \"Arts and Culture Appreciation - 2023\" illustrates the distribution of interest in various cultural categories reflected in percentage ratios. 'Music and Dance' and 'Literature' each hold a 20% ratio, 'Theatre and Drama' is slightly higher at 25%, 'Performing Arts' also accounts for 20%, and 'Art and Design' has the smallest share, with a 15% ratio."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Music and Dance', 'Theatre and Drama', 'Art and Design', 'Literature', 'Performing Arts']\ndata = [20, 25, 15, 20, 20]\nline_labels = ['Category', 'ratio']\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111)\nax.pie(data, labels=data_labels, startangle=90, counterclock=False, colors=['red', 'green', 'blue', 'orange', 'purple'])\ncircle = plt.Circle((0, 0), 0.7, color='white')\nax.add_artist(circle)\nax.legend(data_labels)\nplt.title('Arts and Culture Appreciation - 2023')\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231225-122818_34.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the highest ratio according to the data provided?",
            "output": "Theatre and Drama"
        }
    },
    {
        "chart_type": "rings",
        "imgname": "rings_129",
        "img": "./rings/png/rings_129.png",
        "topic": "Social Media and the Web",
        "title": " Impact of Social Media and the Web on Businesses -2023",
        "csv": "Category \\t ratio \\n Social Media Engagement \\t 41% \\n Online Traffic \\t 20% \\n Web Design \\t 22% \\n User Experience \\t 12% \\n Digital Advertising \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rings chart illustrates the proportions of various categories that impact businesses in 2023. Social Media Engagement leads with a 41% ratio, followed by Online Traffic at 20%, and Web Design at 22%. User Experience accounts for 12%, and Digital Advertising comprises the smallest portion at 5%. The visualization indicates the distribution of factors with Social Media Engagement having the most substantial impact."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = ['Social Media Engagement', 'Online Traffic', 'Web Design', 'User Experience', 'Digital Advertising']\ndata = np.array([41, 20, 22, 12, 5])\nline_labels = ['Category', 'Ratio']\n\n# Create figure before plotting, i.e., add_subplot() follows plt.figure()\nfig, ax = plt.subplots(figsize=(7, 7))\n\n# Plot the data with the type of rings chart\nax.pie(data, startangle=90, counterclock=False, labels=data_labels, autopct='%.1f%%', colors=['b', 'g', 'r', 'purple', 'orange'])\n\n# Change the pie chart into a ring chart \ncircle = plt.Circle(xy=(0, 0), radius=0.7, color='white')\nax.add_artist(circle)\n\n# Plot the legend\nax.legend(data_labels, loc='upper left', bbox_to_anchor=(1, 0.5))\n\n# Set the title\nplt.title('Impact of Social Media and the Web on Businesses -2023', fontsize=18)\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rings/png/20231227-021402_80.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is Social Media Engagement's impact compared to User Experience?",
            "output": "29%"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_141",
        "img": "./rose/png/rose_141.png",
        "topic": "Business and Finance",
        "title": " Investment Allocation in Business and Finance in 2021",
        "csv": "Investment Type \\t Value \\n Stocks \\t 85 \\n Bonds \\t 50 \\n Mutual Funds \\t 60 \\n Real Estate \\t 90 \\n Forex \\t 20 \\n Options \\t 30 \\n Commodities \\t 75 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the allocation of investments in various categories within business and finance in 2021. It shows investment values in Stocks (85), Bonds (50), Mutual Funds (60), Real Estate (90), Forex (20), Options (30), and Commodities (75). The rose chart provides a visual comparison between the different types of investments based on their values."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels.\ndata_labels = ['Stocks', 'Bonds', 'Mutual Funds', 'Real Estate', 'Forex', 'Options', 'Commodities']\ndata = [85, 50, 60, 90, 20, 30, 75]\nline_labels = ['Investment Type', 'Amount']\n\n# Plot the data with the type of rose chart\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, projection='polar')\n\n# Calculate the sector angle\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\n# Draw sectors corresponding to different categories\nfor i in range(num_categories):\n    ax.bar(sector_angle * i, data[i], width=sector_angle, alpha=0.5, color=plt.cm.Set3(i), label=data_labels[i])\n\n# Set the title\nax.set_title('Investment Allocation in Business and Finance in 2021')\n\n# Set the ticks and labels for each category\nax.set_xticks(np.linspace(0, 2 * np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, fontsize=12, wrap=True)\n\n# Reposition the legend so that it does not cover any part of the chart\nax.legend(data_labels, bbox_to_anchor=(1.25, 1.1))\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-075144_16.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the total value of investment in Stocks, Bonds, and Mutual Funds?",
            "output": "195"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_5",
        "img": "./rose/png/rose_5.png",
        "topic": "Human Resources and Employee Management",
        "title": " Number of Employees Involved in Each Human Resources Category in 2021",
        "csv": "HR Category \\t Value \\n Hiring \\t 120 \\n Onboarding \\t 96 \\n Training and Development \\t 80 \\n Performance Management \\t 64 \\n Benefits and Compensation \\t 48 \\n Employee Relations \\t 32 \\n Termination \\t 16 \\n Diversity and Inclusion \\t 0 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the number of employees involved in various Human Resources categories in 2021. 'Hiring' has the highest value at 120, followed by 'Onboarding' at 96, and 'Training and Development' at 80. 'Performance Management' registers 64, 'Benefits and Compensation' at 48, 'Employee Relations' at 32, and 'Termination' at 16. 'Diversity and Inclusion' records the lowest with a value of 0."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform data into three variables\ndata_labels = ['Hiring', 'Onboarding', 'Training and Development', 'Performance Management', \n               'Benefits and Compensation', 'Employee Relations', 'Termination', 'Diversity and Inclusion']\ndata = [120, 96, 80, 64, 48, 32, 16, 0]\nline_labels = ['HR Category', 'Number']\n\n# Create figure\nfig = plt.figure(figsize=(12.8, 9.6))\nax = fig.add_subplot(111, projection='polar')\n\n# Set up axes in polar coordinates\nax.set_theta_direction(-1)\nax.set_theta_zero_location('N')\n\n# Calculate sector angle\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\n# Plot data\nfor i, d in enumerate(data):\n    ax.bar(sector_angle * i, d, width=sector_angle, label=data_labels[i])\n\n# Set ticks\nax.set_xticks(np.linspace(0, 2*np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels)\n\n# Set title\nax.set_title('Number of Employees Involved in Each Human Resources Category in 2021', fontsize=20)\n\n# Set legend\nax.legend(bbox_to_anchor=(1, 1), loc='upper left')\n\n# Save image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231225-125808_11.png')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which HR Category has the least number of employees involved?",
            "output": "Diversity and Inclusion"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_11",
        "img": "./rose/png/rose_11.png",
        "topic": "Tourism and Hospitality",
        "title": " Number of Tourists Visiting Each Region in 2021",
        "csv": "Region \\t Value \\n North America \\t 450 \\n South America \\t 250 \\n Europe \\t 800 \\n Africa \\t 300 \\n Asia \\t 700 \\n Australia \\t 100 \\n Antarctica \\t 50 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This rose chart illustrates the number of tourists visiting each region in 2021. North America received 450 tourists, while South America saw 250 tourists. Europe had the highest number of visitors with 800 tourists, followed by Asia with 700. Africa welcomed 300 tourists, and Australia had 100 tourists. Antarctica, being the least visited region, had only 50 tourists."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels. \ndata_labels = [\"North America\",\"South America\",\"Europe\",\"Africa\",\"Asia\",\"Australia\",\"Antarctica\"]\ndata = [450,250,800,300,700,100,50]\nline_labels = [\"Number of Tourists\"]\n\n# Plot the data with the type of rose chart.\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111, projection='polar')\nnum_categories = len(data)\nsector_angle = (2 * np.pi) / num_categories\n\n# Create sectors for each category\nfor i, value in enumerate(data):\n    ax.bar(sector_angle * i, value, width=sector_angle, label=data_labels[i])\n\n# Create legend and adjust its position\nax.legend(bbox_to_anchor=(1.2,1), loc='upper right', labels=data_labels)\n\n# Set the number of ticks\nax.set_xticks(np.linspace(0, 2*np.pi, num_categories, endpoint=False))\n\n# Set the labels of each tick\nax.set_xticklabels(data_labels, rotation=15)\n\n# Set the title of the figure\nplt.title(\"Number of Tourists Visiting Each Region in 2021\")\n\n# Resize the figure\nplt.tight_layout()\n\n#Save the figure\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231225-125808_19.png')\n\n#Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which region had the highest number of tourists in 2021?",
            "output": "Europe"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_106",
        "img": "./rose/png/rose_106.png",
        "topic": "Food and Beverage Industry",
        "title": " Prevalence of Food and Beverage Categories in 2021",
        "csv": "Category \\t Value \\n Fast Food \\t 50 \\n Beverages \\t 40 \\n Bakery \\t 30 \\n Dairy Products \\t 20 \\n Organic Products \\t 10 \\n Frozen Food \\t 5 \\n Seafood \\t 8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This rose chart illustrates the prevalence of different food and beverage categories in 2021. The categories displayed are Fast Food with a value of 50, Beverages at 40, Bakery items at 30, Dairy Products at 20, Organic Products at 10, Frozen Food at 5, and Seafood at 8. Each \"petal\" represents a category with its corresponding prevalence value."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Fast Food', 'Beverages', 'Bakery', 'Dairy Products', 'Organic Products', 'Frozen Food', 'Seafood']\nline_labels = ['Number']\ndata = [50, 40, 30, 20, 10, 5, 8]\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\nfig = plt.figure(figsize=(8,8))\nax = fig.add_subplot(111, polar=True)\n\nfor i in range(num_categories):\n    ax.bar(i * sector_angle, data[i], width=sector_angle, label=data_labels[i], color=plt.cm.Dark2(i))\n\nax.set_theta_direction(-1)\nax.set_theta_zero_location('N')\nax.set_xticks(np.linspace(0, 2*np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, rotation=90)\nax.set_title('Prevalence of Food and Beverage Categories in 2021')\nax.grid(alpha=0.3)\nax.legend(bbox_to_anchor=(1.1,1.1))\n\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-054203_2.png')\nplt.clf()"
        },
        "QA": {
            "input": "What are the total combined values for Dairy Products, Organic Products, and Frozen Food?",
            "output": "35"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_50",
        "img": "./rose/png/rose_50.png",
        "topic": "Energy and Utilities",
        "title": " Utilization of Energy and Utility Resources in the US in 2021",
        "csv": "Category \\t Value \\n Electricity \\t 90 \\n Natural Gas \\t 80 \\n Nuclear \\t 70 \\n Renewable \\t 60 \\n Oil \\t 50 \\n Coal \\t 40 \\n Water \\t 30 \\n Telecommunications \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart represents the utilization of various energy and utility resources in the US in 2021. Electricity leads with a value of 90, followed by natural gas at 80, and nuclear energy at 70. Renewable resources stand at 60, while oil has a value of 50. Coal and water are at 40 and 30 respectively, and telecommunications has the lowest value, shown at 20."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels\n\ndata_labels = ['Electricity', 'Natural Gas', 'Nuclear', 'Renewable', 'Oil', 'Coal', 'Water', 'Telecommunications']\ndata = [90, 80, 70, 60, 50, 40, 30, 20]\nline_labels = ['Category','Number']\n\n# Plot the data with the type of rose chart\n\nfig = plt.figure(figsize=(14, 8))\nax = fig.add_subplot(111, projection='polar') \n\nnum_categories = len(data)\nsector_angle = (2 * np.pi) / num_categories \n\nfor i in range(num_categories):\n    ax.bar(i * sector_angle, data[i], width=sector_angle, color=plt.cm.Set1(i), label=data_labels[i])\n\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n\nax.set_xticks(np.linspace(0, 2*np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, fontsize=14, ha='center', wrap=True)\n\nfig.suptitle('Utilization of Energy and Utility Resources in the US in 2021', fontsize=20)\n\nplt.grid(color='gray', linestyle='--', linewidth=1)\n\nplt.tight_layout()\n\n# save the image\n\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_142.png')\n\n# Clear the current image state\n\nplt.clf()"
        },
        "QA": {
            "input": "What is the utilization value for Telecommunications?",
            "output": "20"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_20",
        "img": "./rose/png/rose_20.png",
        "topic": "Energy and Utilities",
        "title": " Number of Utilities Using Different Types of Energy in 2021",
        "csv": "Type of Energy \\t Value \\n Renewable Energy \\t 80 \\n Fossil Fuels \\t 60 \\n Nuclear Energy \\t 40 \\n Hydroelectricity \\t 20 \\n Natural Gas \\t 15 \\n Solar Energy \\t 10 \\n Wind Energy \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the number of utilities using various types of energy in 2021. Renewable Energy leads with a value of 80, followed by Fossil Fuels at 60, and Nuclear Energy at 40. Hydroelectricity is represented with a value of 20, while Natural Gas and Solar Energy have values of 15 and 10 respectively. Wind Energy has the smallest representation, with a value of 5."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#Transform the given data into three variables: data_labels, data, line_labels.\ndata_labels = ['Renewable Energy', 'Fossil Fuels', 'Nuclear Energy', 'Hydroelectricity', 'Natural Gas', 'Solar Energy', 'Wind Energy']\ndata = [80, 60, 40, 20, 15, 10, 5]\nline_labels = ['Type of Energy', 'Number of Utilities']\n\n#Plot the data with the type of rose chart. \nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot(111, polar=True) # Create figure before plotting, i.e., add_subplot() follows plt.figure(). Modify the axes to use polar coordinates with `polar=True` or 'projection='polar'.\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\nfor i, data_label in enumerate(data_labels):\n    ax.bar(sector_angle * i, data[i], width=sector_angle, label=data_label, color=np.random.rand(3)) #Different sectors represent different categories with the same angle, whose radius is proportional to the corresponding value, and the angles of these sectors must add up to 360 degrees, i.e., use \"sector_angle = (2 * np.pi) / num_categories\" to calculate the sector angle and draw sectors corresponding to different categories by making the width parameter in \"ax.bar\" sector_angle.\n\nax.set_xticks(np.arange(0, 2*np.pi, sector_angle)) #Ensure that the number of ticks set with `ax.set_xticks()` matches exactly the number of categories or labels you have in `data_labels`.\nax.set_xticklabels(data_labels, ha='center') #Make sure each category label is correctly positioned at the center of its corresponding sector. \nax.set_title(\"Number of Utilities Using Different Types of Energy in 2021\") #Set the title of the figure.\nax.legend(loc='upper right', bbox_to_anchor=(1.3, 0.9)) #Reposition the legend so that it does not cover any part of the chart.\n\nplt.tight_layout() # Automatically resize the image by tight_layout().\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231225-125808_8.png') #Save the image.\nplt.clf() #Clear the current image state."
        },
        "QA": {
            "input": "How many more utilities are using renewable energy compared to hydroelectricity?",
            "output": "60"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_159",
        "img": "./rose/png/rose_159.png",
        "topic": "Education and Academics",
        "title": " Number of Students at Different Education Levels in 2021",
        "csv": "Level of Education \\t Value \\n Primary School \\t 500 \\n Secondary School \\t 400 \\n Undergraduate \\t 300 \\n Graduate \\t 200 \\n Postgraduate \\t 100 \\n Doctoral \\t 50 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the number of students at various education levels in 2021. Starting from the base, primary school enrollment stands at 500 students. This number decreases as education advances, with 400 in secondary school, 300 undergraduates, 200 graduate students, and 100 postgraduates. The smallest group is doctoral students, totaling just 50."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Primary School', 'Secondary School', 'Undergraduate', 'Graduate', 'Postgraduate', 'Doctoral']\ndata = [500, 400, 300, 200, 100, 50]\nline_labels = ['Level of Education','Number of Students']\n\nfig = plt.figure(figsize=(8, 5))\nax = fig.add_subplot(111, projection='polar')\n\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\nfor i in range(num_categories):\n    ax.bar(sector_angle * i, data[i], width=sector_angle,\n           label=data_labels[i], edgecolor='black', color=plt.cm.get_cmap('Set2')(i))\n\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\nax.set_xticks(sector_angle * np.arange(num_categories))\nax.set_xticklabels(data_labels, rotation=90)\nax.set_title('Number of Students at Different Education Levels in 2021')\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-075144_5.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more students are at the secondary school level compared to the undergraduate level?",
            "output": "100"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_15",
        "img": "./rose/png/rose_15.png",
        "topic": "Agriculture and Food Production",
        "title": " Global Production of Agricultural Products in 2021",
        "csv": "Crop Type \\t Value \\n Cereals \\t 98 \\n Fruits \\t 80 \\n Vegetables \\t 95 \\n Dairy \\t 88 \\n Livestock \\t 60 \\n Poultry \\t 78 \\n Fisheries \\t 50 \\n Forestry \\t 30 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the global production values of various agricultural products in 2021. Cereals lead with a value of 98, followed by vegetables at 95 and dairy at 88. Fruits have a production value of 80, while poultry is at 78. Livestock production is registered at 60, with fisheries at 50, and forestry shows the lowest value of 30. The data points represent the relative production values of each crop type."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Cereals', 'Fruits', 'Vegetables', 'Dairy', 'Livestock', 'Poultry', 'Fisheries', 'Forestry']\ndata = [98, 80, 95, 88, 60, 78, 50, 30]\nline_labels = ['Production Rate']\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(1, 1, 1, projection='polar')\n\nsector_angle = (2 * np.pi) / len(data_labels)\n\nfor i, datum in enumerate(data):\n    ax.bar(sector_angle * i, datum, width=sector_angle, alpha=0.6, label=data_labels[i], color=plt.cm.Set1(i))\n\nax.set_xticks(np.arange(0, 2 * np.pi, sector_angle))\nax.set_xticklabels(data_labels, rotation=90, wrap=True)\nax.legend(bbox_to_anchor=(1.05, 1), loc=\"upper left\", borderaxespad=0.0)\nax.set_title(\"Global Production of Agricultural Products in 2021\")\n\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231225-125808_22.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "What is the production value of Fruits?",
            "output": "80"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_87",
        "img": "./rose/png/rose_87.png",
        "topic": "Technology and the Internet",
        "title": " Popular Technologies in 2020",
        "csv": "Technology Category \\t Value \\n Cloud Computing \\t 25 \\n Network Security \\t 37 \\n Artificial Intelligence \\t 44 \\n Mobile Application \\t 14 \\n Big Data \\t 63 \\n Cyber Security \\t 23 \\n Internet of Things \\t 33 \\n Augmented Reality \\t 8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the popularity of various technology categories in 2020. Big Data leads with a value of 63, followed by Artificial Intelligence at 44 and Network Security at 37. Internet of Things holds a value of 33, with Cloud Computing just behind at 25. Cyber Security is represented with a value of 23, Mobile Application at 14, and Augmented Reality as the least popular category, with a value of 8."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = np.array([\"Cloud Computing\", \"Network Security\", \"Artificial Intelligence\", \"Mobile Application\", \"Big Data\", \"Cyber Security\", \"Internet of Things\", \"Augmented Reality\"])\ndata = np.array([25, 37, 44, 14, 63, 23, 33, 8])\nline_labels = np.array([\"Technology Category\", \"Number\"])\n\n# Plot the data with the type of rose chart\nfig = plt.figure(figsize=(20,10))\nax = fig.add_subplot(111, projection='polar')\n\n# Create sectors corresponding to different categories\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\nfor i in range(num_categories):\n    ax.bar(sector_angle * i, data[i], width=sector_angle, label=data_labels[i], color=plt.cm.tab20(i))\n\n# Set labels and ticks\nax.set_xticks(np.linspace(0, 2 * np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, fontsize=13, fontweight='bold', wrap=True)\n\n# Set legend and title\nax.set_title('Popular Technologies in 2020', fontsize=20, fontweight='bold')\nax.legend(loc='upper right', bbox_to_anchor=(1.25, 1.1))\n\n# Automatically adjust the image size\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_72.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the value assigned to the Network Security technology category? ",
            "output": "37"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_65",
        "img": "./rose/png/rose_65.png",
        "topic": "Retail and E-commerce",
        "title": " Number of Retailers for Different Product Categories in 2021",
        "csv": "Category \\t Value \\n Clothing \\t 90 \\n Electronics \\t 67 \\n Home Appliances \\t 50 \\n Furniture \\t 35 \\n Grocery \\t 25 \\n Pet Supplies \\t 10 \\n Sporting Goods \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the number of retailers for various product categories in 2021. The categories and their corresponding retailer numbers are as follows: Clothing retailers are at 90, Electronics at 67, Home Appliances at 50, Furniture at 35, Grocery at 25, Pet Supplies at 10, and Sporting Goods at the lowest with 5 retailers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels.\ndata_labels = ['Clothing', 'Electronics', 'Home Appliances', 'Furniture', 'Grocery', 'Pet Supplies', 'Sporting Goods']\ndata = [90, 67, 50, 35, 25, 10, 5]\nline_labels = ['Category', 'Number']\n\n# Plot the data with the type of rose chart.\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, projection='polar')\n\n# Calculate sector angle.\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\n# Draw sectors corresponding to different categories by making the width parameter in \"ax.bar\" sector_angle.\nfor i in range(num_categories):\n    ax.bar(i * sector_angle, data[i], width=sector_angle, label=data_labels[i])\n\n# Set category labels.\nax.set_xticks(np.linspace(0, 2 * np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, fontsize=12)\n\n# Position the legend where it does not overlap with the chart.\nax.legend(bbox_to_anchor=(1.15, 1.0))\n\n# Set title.\nax.set_title('Number of Retailers for Different Product Categories in 2021')\n\n# Automatically resize the image.\nplt.tight_layout()\n\n# Save the image.\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_29.png')\n\n# Clear the current image state.\nplt.clf()"
        },
        "QA": {
            "input": "What is the number of retailers for Electronics?",
            "output": "67"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_142",
        "img": "./rose/png/rose_142.png",
        "topic": "Food and Beverage Industry",
        "title": " Food and Beverage Consumption in 2020",
        "csv": "Type of Food \\t Value \\n Fast Food \\t 120 \\n Delicacies \\t 80 \\n Desserts \\t 30 \\n Street Food \\t 40 \\n Beverages \\t 20 \\n Ethnic Cuisine \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates food and beverage consumption types in 2020. Fast Food leads with a value of 120, followed by Delicacies at 80, Street Food at 40, and Desserts at 30. Beverages are noted at a value of 20, while Ethnic Cuisine has the lowest value of 10. Each category's value likely represents consumption volume or preference metrics, although the exact unit of measurement is not specified in the csv data provided."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables\ndata_labels = ['Fast Food', 'Delicacies', 'Desserts', 'Street Food', 'Beverages', 'Ethnic Cuisine']\ndata = [120, 80, 30, 40, 20, 10]\nline_labels = ['Type of Food', 'Number']\n\n# Plot the data with the type of rose chart\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, polar=True)\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\n# Create sectors corresponding to different categories\nfor i in range(num_categories):\n    ax.bar(sector_angle * i, data[i], width=sector_angle, \n           color=plt.cm.Set1(i / num_categories), label=data_labels[i])\n\n# Position the legend, make sure the legend is visible and not overlap with the chart\nax.legend(data_labels, bbox_to_anchor=(1.2, 1.05))\n\n# Set the ticks and labels for the categories\nax.set_xticks(np.linspace(0, 2 * np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, fontsize=15)\n\n# Set the title of the figure\nplt.title('Food and Beverage Consumption in 2020', fontsize=20)\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-075144_2.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the value for Ethnic Cuisine consumption in 2020?",
            "output": "10"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_131",
        "img": "./rose/png/rose_131.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Number of Nonprofit Organizations Supporting Different Causes",
        "csv": "Category \\t Value \\n Hunger \\t 20 \\n Education \\t 30 \\n Health \\t 50 \\n Environment \\t 40 \\n Poverty \\t 15 \\n Animal Rights \\t 10 \\n Homelessness \\t 25 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart provides an overview of the number of nonprofit organizations supporting various causes. Hunger is represented with 20 organizations, Education with 30, Health with 50, the Environment with 40, Poverty with 15, Animal Rights with 10, and Homelessness with 25."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Hunger', 'Education', 'Health', 'Environment', 'Poverty', 'Animal Rights', 'Homelessness']\ndata = [20, 30, 50, 40, 15, 10, 25]\nline_labels = ['Category','Number of Organizations']\n\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\nfig = plt.figure(figsize=(14,14))\nax = fig.add_subplot(111, projection='polar')\nax.set_theta_direction(-1)\nax.set_theta_zero_location('N')\nax.set_title('Number of Nonprofit Organizations Supporting Different Causes')\n\n# Plotting each sector\nfor i in range(num_categories):\n    ax.bar([sector_angle * i], [data[i]], width=sector_angle, edgecolor='k', linewidth=1, label=data_labels[i])\n\n# Setting the angle and labels of x-axis\nax.set_xticks(np.linspace(0, 2 * np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels)\n\n# Setting the legend\nax.legend(data_labels,bbox_to_anchor=(1.45, 0.6))\n\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-075144_14.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the value difference between Poverty and Homelessness?",
            "output": "10"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_1",
        "img": "./rose/png/rose_1.png",
        "topic": "Energy and Utilities",
        "title": " Energy Usage by Type of Source in 2021",
        "csv": "Type of Energy \\t Value \\n Solar Power \\t 87 \\n Wind Power \\t 66 \\n Hydroelectric \\t 48 \\n Natural Gas \\t 35 \\n Petroleum \\t 21 \\n Nuclear \\t 12 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart outlines the energy usage by different sources in 2021. Solar Power leads with a value of 87, followed by Wind Power at 66, Hydroelectric at 48, Natural Gas at 35, Petroleum at 21, and Nuclear at the lowest with a value of 12. Each 'petal' of the rose chart represents the magnitude of energy usage for these sources, visually illustrating their relative contribution within the dataset."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Solar Power', 'Wind Power', 'Hydroelectric', 'Natural Gas', 'Petroleum', 'Nuclear']\ndata = [87, 66, 48, 35, 21, 12]\nline_labels = ['Type of Energy', 'Number of Customers']\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, projection='polar')\n\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\nfor i in range(num_categories):\n    ax.bar(x=i * sector_angle, \n           width=sector_angle, \n           bottom=0.0, \n           height=data[i],\n           color=plt.cm.Set1(i / num_categories),\n           label=data_labels[i])\n\nax.legend(bbox_to_anchor=(1.2, 1.0))\nax.set_xticks(np.linspace(0, 2 * np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, fontsize=12, rotation=90)\nax.set_title('Energy Usage by Type of Source in 2021', fontsize=14)\nplt.tight_layout()\n\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/1.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the Solar Power usage value compared to the Hydroelectric usage value?",
            "output": "39"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_79",
        "img": "./rose/png/rose_79.png",
        "topic": "Manufacturing and Production",
        "title": " Number of Units Manufactured in 2021",
        "csv": "Product Type \\t Value \\n Furniture \\t 90 \\n Electronics \\t 150 \\n Toys \\t 50 \\n Clothing \\t 80 \\n Appliances \\t 60 \\n Automobiles \\t 120 \\n Textiles \\t 90 \\n Machinery \\t 70 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This rose chart illustrates the number of units manufactured for various product types in 2021. Furniture production stands at 90 units, while Electronics show a higher production of 150 units. Toys account for 50 units, with Clothing slightly higher at 80 units. Appliances are exhibited at 60 units, and Automobiles reach 120 units. Production for Textiles ties with Furniture at 90 units, and Machinery is depicted at 70 units."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Furniture', 'Electronics', 'Toys', 'Clothing', 'Appliances', 'Automobiles', 'Textiles', 'Machinery']\ndata = [90, 150, 50, 80, 60, 120, 90, 70]\nline_labels = ['Product Type', 'Number of Units']\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, projection='polar')\nsector_angle = (2 * np.pi) / len(data_labels)\n\nfor i in range(len(data_labels)):\n    ax.bar(i * sector_angle, data[i], width=sector_angle, label=data_labels[i], color=plt.cm.Set2(i))\n\nax.set_xticks(np.arange(len(data_labels)) * sector_angle + sector_angle / 2)\nax.set_xticklabels(data_labels, fontsize=15, rotation=90)\nax.legend(bbox_to_anchor=(1.1, 1.1))\nax.set_title('Number of Units Manufactured in 2021', fontsize=20, y=1.1)\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_52.png')\nplt.clf()"
        },
        "QA": {
            "input": "What are the manufactured units of Automobiles according to the dataset?",
            "output": "120"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_72",
        "img": "./rose/png/rose_72.png",
        "topic": "Transportation and Logistics",
        "title": " Number of Trips Taken Using Different Modes of Transportation in 2021",
        "csv": "Mode of Transportation \\t Value \\n Air \\t 400.0 \\n Rail \\t 350.0 \\n Water \\t 300.0 \\n Road \\t 250.0 \\n Pipeline \\t 200.0 \\n Space \\t 150.0 \\n  \\t  \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This rose chart illustrates the number of trips taken using different modes of transportation in 2021. Air transportation accounts for 400.0 trips, rail for 350.0, water for 300.0, road for 250.0, pipeline for 200.0, and space for 150.0. The visual representation spreads out from the center, showing the comparative volume of trips for each transportation mode in a radial format."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Air','Rail','Water','Road','Pipeline','Space']\ndata = [400, 350, 300, 250, 200, 150]\nline_labels = ['Number of Trips']\n\nfig = plt.figure(figsize=(8,8))\nax = fig.add_subplot(111, projection='polar')\nax.set_title('Number of Trips Taken Using Different Modes of Transportation in 2021')\nsector_angle = (2 * np.pi) / len(data_labels)\n\nfor i in range(len(data_labels)):\n    ax.bar(i * sector_angle, data[i], width=sector_angle, label=data_labels[i])\n\nax.legend(bbox_to_anchor=(1.25, 0.5))\nax.set_xticks(np.arange(0, 2*np.pi, sector_angle))\nax.set_xticklabels(data_labels,ha='center',rotation_mode='anchor')\nax.grid(alpha=0.3)\nplt.tight_layout()\nfig.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_40.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which mode of transportation had the least number of trips in 2021?",
            "output": "Space"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_39",
        "img": "./rose/png/rose_39.png",
        "topic": "Retail and E-commerce",
        "title": " Number of Retail Stores Selling Different Products in 2021",
        "csv": "Category \\t Value \\n Grocery \\t 100 \\n Clothing \\t 90 \\n Electronics \\t 80 \\n Furniture \\t 70 \\n Home Appliances \\t 60 \\n Household Items \\t 50 \\n Beauty and Health \\t 40 \\n Sports and Outdoors \\t 30 \\n Books and Toys \\t 20 \\n Music and Movies \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the number of retail stores selling different products in 2021. Categories include Grocery with 100 stores, Clothing with 90, Electronics with 80, Furniture with 70, Home Appliances with 60, Household Items with 50, Beauty and Health with 40, Sports and Outdoors with 30, Books and Toys with 20, and Music and Movies with 10."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \n\ndata_labels = ['Grocery','Clothing','Electronics','Furniture','Home Appliances','Household Items','Beauty and Health','Sports and Outdoors','Books and Toys','Music and Movies']\ndata = np.array([[100,90,80,70,60,50,40,30,20,10]])\nline_labels = ['Number']\n\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\nfig = plt.figure(figsize=(8,8))\nax = fig.add_subplot(111,projection='polar')\n\nfor i in range(num_categories):\n    ax.bar(sector_angle * i, data[0,i], width=sector_angle, label=data_labels[i])\n\nax.legend(bbox_to_anchor=(1.1,1), loc=\"upper left\", ncol=1, labels=data_labels, fontsize=10)\nax.set_title('Number of Retail Stores Selling Different Products in 2021', fontsize=14)\nax.set_xticks(np.linspace(0,2*np.pi,num_categories,endpoint=False))\nax.set_xticklabels(data_labels, fontsize=10, rotation=0, wrap=True)\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_127.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the product category with the least number of retail stores selling it in 2021?",
            "output": "Music and Movies"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_40",
        "img": "./rose/png/rose_40.png",
        "topic": "Social Media and the Web",
        "title": " Frequency of Online Activities in 2021",
        "csv": "Category \\t Value \\n Online Shopping \\t 87 \\n Social Networking \\t 97 \\n Online Advertising \\t 67 \\n Online Video Streaming \\t 83 \\n Online Dating \\t 77 \\n Online Payments \\t 48 \\n Online Gaming \\t 50 \\n Online Music Streaming \\t 36 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the frequency of various online activities in 2021. The activities displayed are Online Shopping with a value of 87, Social Networking at 97, Online Advertising at 67, Online Video Streaming at 83, Online Dating scoring 77, Online Payments at 48, Online Gaming with a value of 50, and Online Music Streaming at 36. The values likely represent a percentage or index of frequency for each activity."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = [\"Online Shopping\", \"Social Networking\", \"Online Advertising\", \"Online Video Streaming\", \"Online Dating\", \"Online Payments\", \"Online Gaming\", \"Online Music Streaming\"]\ndata = [87, 97, 67, 83, 77, 48, 50, 36]\nline_labels = [\"Category\", \"Number\"]\n\nnum_categories = len(data)\nsector_angle = (2 * np.pi) / num_categories\n\nfig = plt.figure()\nax = fig.add_subplot(111, polar=True)\n\n# draw the sectors with different colors\nfor i in range(num_categories):\n    ax.bar(i * sector_angle, data[i], width=sector_angle, label=data_labels[i])\n\n# set the axis labels\nax.set_xticks(np.linspace(0, 2 * np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, fontsize=8, wrap=True)\n\n# set the legend outside the chart\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=8)\n\n# set the title\nax.set_title(\"Frequency of Online Activities in 2021\", fontsize=10)\n\n# set the figure size\nfig.set_figwidth(8)\nfig.set_figheight(8)\n\n# set figure display\nplt.tight_layout()\n\n# save the figure\nfig.savefig(\"./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_129.png\")\n\n# clear the current figure\nplt.clf()"
        },
        "QA": {
            "input": "How much is the frequency value for Online Payments?",
            "output": "48"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_92",
        "img": "./rose/png/rose_92.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Number of Nonprofit Organizations in Each Area",
        "csv": "Category \\t Value \\n Health \\t 100 \\n Education \\t 90 \\n Animal Welfare \\t 75 \\n Poverty \\t 60 \\n Human Rights \\t 50 \\n Environment \\t 45 \\n Arts \\t 30 \\n International Aid \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart represents the number of nonprofit organizations across different categories. Health-related nonprofits lead with a value of 100, followed by those in education at 90. Animal Welfare organizations are represented with a value of 75, with Poverty-related nonprofits at 60. Human Rights groups stand at a value of 50, while organizations focusing on the Environment are at 45. The Arts category has a value of 30, and International Aid has the least, with a value of 20."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform data\ndata_labels = [\"Health\",\"Education\",\"Animal Welfare\",\"Poverty\",\"Human Rights\",\"Environment\",\"Arts\",\"International Aid\"]\ndata = [100,90,75,60,50,45,30,20]\nline_labels = [\"Category\",\"Number of Organizations\"]\n\n# Create figure and polar axis\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, polar=True)\n\n# Create rose chart\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\nfor i in range(num_categories):\n    ax.bar(i * sector_angle, data[i], width=sector_angle, bottom=0.0, label=data_labels[i], color=np.random.rand(3,))\n\n# Set the ticks\nax.set_xticks(np.linspace(0, 2 * np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, fontsize=12, wrap=True, rotation=90)\n\n# Set legend\nax.legend(bbox_to_anchor=(1.2, 1.0))\n\n# Set title\nax.set_title('Number of Nonprofit Organizations in Each Area', fontsize=20)\n\n# Adjust the margins\nfig.tight_layout()\n\n# Save the figure\nplt.savefig(\"./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_8.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the highest number of nonprofit organizations according to the data?",
            "output": "Health"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_24",
        "img": "./rose/png/rose_24.png",
        "topic": "Technology and the Internet",
        "title": " Popularity of Technology and Internet Fields in 2021",
        "csv": "Category \\t Value \\n Network Security \\t 86.0 \\n Artificial Intelligence \\t 34.0 \\n Cloud Computing \\t 64.0 \\n Data Analytics \\t 47.0 \\n Mobile App Development \\t 90.0 \\n Web Design \\t 29.0 \\n Internet of Things \\t 19.0 \\n Augmented Reality \\t 12.0 \\n  \\t  \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the popularity of various technology and internet fields in 2021. Network Security leads with a value of 86.0, followed by Mobile App Development at 90.0. Cloud Computing has a value of 64.0, whereas Data Analytics stands at 47.0. Artificial Intelligence and Web Design have values of 34.0 and 29.0, respectively. The Internet of Things and Augmented Reality are less popular, with values of 19.0 and 12.0, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data Transformation \ndata_labels = ['Network Security', 'Artificial Intelligence', 'Cloud Computing', 'Data Analytics', 'Mobile App Development', 'Web Design', 'Internet of Things', 'Augmented Reality']\nline_labels = ['Category', 'Number']\ndata = np.array([[86, 34, 64, 47, 90, 29, 19, 12]])\n\n# Plot\nplt.figure(figsize=(10,10))\nax = plt.subplot(111, projection='polar')\nax.set_title('Popularity of Technology and Internet Fields in 2021')\n\n# Calculate sector angle\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\n# Plot Sectors\nfor i, cat in enumerate(data_labels):\n    ax.bar(sector_angle*i, data[0][i], width=sector_angle, label=cat, color = plt.cm.Set1(i/num_categories))\n\n# Add Legend\nax.legend(bbox_to_anchor=(1.12, 1), loc='upper left', labelspacing=1)\n\n# Set Ticks\nax.set_xticks(np.linspace(0, (2*np.pi), num_categories, endpoint=False))\nax.set_xticklabels(data_labels, fontdict={'fontsize': 10}, rotation=45)\n\n# Resize Image\nplt.tight_layout()\n\n# Save Image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_103.png')\n\n# Clear Image State\nplt.clf()"
        },
        "QA": {
            "input": "How popular is Cloud Computing compared to other fields?",
            "output": "64.0"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_98",
        "img": "./rose/png/rose_98.png",
        "topic": "Food and Beverage Industry",
        "title": " Popularity of Various Cuisines in the Food and Beverage Industry",
        "csv": "Category \\t Value \\n Fast Food \\t 110 \\n Chinese Cuisine \\t 120 \\n Italian Cuisine \\t 100 \\n Japanese Cuisine \\t 90 \\n French Cuisine \\t 80 \\n American Cuisine \\t 70 \\n Mexican Cuisine \\t 60 \\n Indian Cuisine \\t 50 \\n Seafood \\t 40 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the popularity of various cuisines in the food and beverage industry. Fast Food leads with a value of 110, followed closely by Chinese Cuisine at 120. Italian Cuisine is rated at a value of 100, with Japanese Cuisine slightly lower at 90. French Cuisine and American Cuisine have values of 80 and 70 respectively, while Mexican Cuisine is rated at 60. Indian Cuisine has a value of 50 and Seafood is at 40, indicating its position on the lower end of the popularity spectrum among the listed cuisines."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \n\n# Transform the given data into three variables \ndata_labels = [\"Fast Food\", \"Chinese Cuisine\", \"Italian Cuisine\", \"Japanese Cuisine\", \"French Cuisine\", \"American Cuisine\", \"Mexican Cuisine\", \"Indian Cuisine\", \"Seafood\"]\nline_labels = [\"Number\"]\ndata = np.array([[110, 120, 100, 90, 80, 70, 60, 50, 40]])\n\n# Create figure before plotting \nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(projection='polar')\n\n# Plot the data with the type of rose chart\nsector_angle = (2 * np.pi) / len(data_labels)\n\n# Create sectors corresponding to different categories\nfor i, value in enumerate(data[0]):\n    ax.bar(i * sector_angle, value, width=sector_angle, label=data_labels[i])\n\n# Add legend to chart \nax.legend(data_labels, bbox_to_anchor=(1.5, 0.75), loc=\"center\")\n\n# Set ticks on chart \nax.set_xticks([sector_angle * i for i in range(len(data_labels))])\nax.set_xticklabels(data_labels, rotation=90)\n\n# Set title\nax.set_title(\"Popularity of Various Cuisines in the Food and Beverage Industry\", fontsize=16)\n\n# Tight layout and save the figure \nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_9.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in popularity value between Mexican Cuisine and Seafood?",
            "output": "20"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_27",
        "img": "./rose/png/rose_27.png",
        "topic": "Social Media and the Web",
        "title": " Usage of Online Technologies in 2021",
        "csv": "Category \\t Value \\n Social Media \\t 90 \\n Web Development \\t 80 \\n Digital Marketing \\t 70 \\n Online Advertising \\t 60 \\n Search Engine Optimization \\t 50 \\n Web Design \\t 40 \\n E-Commerce \\t 30 \\n Network Security \\t 20 \\n Cyber Security \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart depicts the usage levels of various online technologies in 2021 across eight categories. Social Media is the highest with a value of 90, followed by Web Development at 80, and Digital Marketing at 70. Online Advertising comes next with a value of 60, then Search Engine Optimization at 50, and Web Design at 40. E-Commerce and Network Security are on the lower end with values of 30 and 20, respectively, while Cyber Security has the lowest usage value at 10."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#transform data\ndata_labels = ['Social Media','Web Development','Digital Marketing','Online Advertising','Search Engine Optimization','Web Design','E-Commerce','Network Security','Cyber Security']\ndata = [90,80,70,60,50,40,30,20,10]\nline_labels = ['Category','Number']\n\n#create figure\nfig = plt.figure(figsize=(15,15))\nax = fig.add_subplot(111, projection='polar')\n\n#plot data\ncolors = ['#ff9999','#ffcc99','#66b3ff','#99ff99','#ffb3e6','#c2c2f0','#ffb3e6','#ff6666','#ffff99']\nsector_angle = (2 * np.pi) / len(data_labels)\n\nfor i, label in enumerate(data_labels):\n    ax.bar(i*sector_angle, data[i], width=sector_angle, color=colors[i], label=label)\n\n#set tick label\nax.set_xticks(np.arange(0, 2*np.pi, sector_angle))\nax.set_xticklabels(data_labels, fontsize=20)\n\n#legend\nax.legend(data_labels, bbox_to_anchor=(1.1, 1.1))\n\n#title\nplt.title(\"Usage of Online Technologies in 2021\", fontsize=20)\n\n#tight layout\nplt.tight_layout()\n\n#save\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_109.png')\n\n#clear\nplt.clf()"
        },
        "QA": {
            "input": "What category has the highest usage according to the data?",
            "output": "Social Media"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_23",
        "img": "./rose/png/rose_23.png",
        "topic": "Environment and Sustainability",
        "title": " Greenhouse Gas Emissions in 2021",
        "csv": "Pollutant \\t Value \\n Carbon Dioxide \\t 10 \\n Methane \\t 8 \\n Nitrogen Oxides \\t 6 \\n Chlorofluorocarbons \\t 3 \\n Volatile Organic Compounds \\t 1 \\n Ozone \\t 2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart presents the greenhouse gas emissions recorded in 2021, detailing the values for six types of pollutants. Carbon Dioxide leads with a value of 10. Methane follows with an 8, Nitrogen Oxides are at 6, and Chlorofluorocarbons register a value of 3. Volatile Organic Compounds and Ozone have the lowest values at 1 and 2, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the data\ndata_labels = [\"Carbon Dioxide\", \"Methane\", \"Nitrogen Oxides\", \"Chlorofluorocarbons\", \"Volatile Organic Compounds\", \"Ozone\"]\ndata = [10, 8, 6, 3, 1, 2]\nline_labels = [\"Pollutant\", \"Amount\"]\n\n# Create figure\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111, projection='polar')\n\n# Set the number of categories\nnum_categories = len(data_labels)\n\n# Calculate the sector angle\nsector_angle = (2 * np.pi) / num_categories\n\n# Plot the data\nfor i in range(num_categories):\n    ax.bar(sector_angle * i, data[i], width=sector_angle, bottom=0.0, label=data_labels[i], color=plt.cm.Set1(i))\n\n# Add a legend\nax.legend(data_labels, loc=\"upper right\", bbox_to_anchor=(1.3, 1.2))\n\n# Set the ticks\nax.set_xticks(np.linspace(0, 2*np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, fontsize=10)\n\n# Set the title\nax.set_title(\"Greenhouse Gas Emissions in 2021\", va=\"bottom\", fontsize=20)\n\n# Resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_102.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which pollutant has the second highest emission value according to the data?",
            "output": "Methane"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_104",
        "img": "./rose/png/rose_104.png",
        "topic": "Social Sciences and Humanities",
        "title": " Number of Students Across Different Educational Levels in 2021",
        "csv": "Educational Level \\t Value \\n Primary School \\t 250 \\n Middle School \\t 200 \\n High School \\t 150 \\n College \\t 100 \\n Graduate School \\t 80 \\n Postgraduate School \\t 60 \\n Professional School \\t 40 \\n Doctoral School \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the number of students across various educational levels in 2021. The count descends from primary school with 250 students, middle school with 200, high school holding 150, to college with 100 students. Fewer individuals attend graduate school at 80, postgraduate school at 60, professional school with 40 students, and doctoral school has the smallest number at 20 students."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#transform data\ndata_labels = ['Primary School', 'Middle School', 'High School', 'College', 'Graduate School', 'Postgraduate School', 'Professional School', 'Doctoral School']\ndata = [250, 200, 150, 100, 80, 60, 40, 20]\nline_labels = ['Educational Level', 'Number of Students']\n\n#plot the data\nfig = plt.figure(figsize=(15,15))\nax = fig.add_subplot(111, projection='polar')\n\n#calculate sector angle\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\n#draw sectors corresponding to different categories\nfor i in range(0, num_categories):\n    ax.bar(sector_angle * i, data[i], width=sector_angle, color=plt.cm.tab10(i), label=data_labels[i])\n\n#add a legend\nax.legend(data_labels, bbox_to_anchor=(1.2, 0.5))\nax.set_xticks(np.arange(0,2*np.pi,sector_angle))\nax.set_xticklabels(data_labels, rotation=35)\nax.set_title(\"Number of Students Across Different Educational Levels in 2021\", fontsize=20)\nplt.grid(linestyle='--')\nplt.tight_layout()\n\n#save the image\nfig.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_99.png')\n\n#clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many students are there in College?",
            "output": "100"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_52",
        "img": "./rose/png/rose_52.png",
        "topic": "Government and Public Policy",
        "title": " Number of Government Agencies and Programs by Category in 2021",
        "csv": "Category \\t Value \\n Federal Government \\t 17 \\n Local Government \\t 25 \\n City Planning \\t 14 \\n Public Education \\t 30 \\n Public Safety \\t 45 \\n Social Services \\t 60 \\n Public Health \\t 75 \\n Transportation \\t 90 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart visualizes the number of government agencies and programs across various categories in 2021. It indicates that the Federal Government has 17 entities, Local Government has 25, and City Planning comprises 14. Public Education consists of 30 agencies or programs, while Public Safety has a higher count with 45. Social Services has 60, Public Health leads with 75, and Transportation has the highest number at 90."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = [\"Federal Government\", \"Local Government\", \"City Planning\", \"Public Education\", \"Public Safety\", \"Social Services\", \"Public Health\", \"Transportation\"]\ndata = [17, 25, 14, 30, 45, 60, 75, 90]\nline_labels = [\"Category\", \"Number\"]\n\n# Plot the data with the type of rose chart\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111, projection='polar')\n\n# Calculate sector angle\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\n# Draw sectors corresponding to different categories\ncolors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet', 'purple']\nfor i in range(num_categories):\n    ax.bar(sector_angle * i, data[i], width=sector_angle, color = colors[i], label=data_labels[i])\n    \n# Set the ticks and labels\nax.set_xticks(np.linspace(0, 2 * np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels)\n\n# Add legend\nax.legend(loc='upper right', bbox_to_anchor=(1.2, 1))\n\n# Add title\nplt.title(\"Number of Government Agencies and Programs by Category in 2021\")\n\n# Automatically resize the image \nplt.tight_layout()\n\n# Save the image\nplt.savefig(\"./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_144.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the total value for Public Education and Transportation combined?",
            "output": "120"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_82",
        "img": "./rose/png/rose_82.png",
        "topic": "Agriculture and Food Production",
        "title": " Quantity of Agricultural Products in 2020",
        "csv": "Crop Type \\t Value \\n Grains \\t 100 \\n Vegetables \\t 200 \\n Fruits \\t 150 \\n Dairy \\t 50 \\n Nuts \\t 120 \\n Livestock \\t 80 \\n Aquaculture \\t 40 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the quantity of various agricultural products in 2020. It represents seven categories: Grains have a value of 100, Vegetables are at 200, Fruits reach 150, Dairy is the lowest with 50, Nuts are recorded at 120, Livestock stands at 80, and Aquaculture has a value of 40. Each 'petal' of the rose chart would correspond to the quantity of these crop types."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels.\ndata_labels = ['Grains', 'Vegetables', 'Fruits', 'Dairy', 'Nuts', 'Livestock', 'Aquaculture']\ndata = np.array([100, 200, 150, 50, 120, 80, 40])\nline_labels = ['Crop Type', 'Quantity']\n\n# Plot the data with the type of rose chart\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111, projection='polar', polar=True)\nnum_categories = len(data)\nsector_angle = (2 * np.pi) / num_categories\n# color\ncolors = ['#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#42d4f4', '#f032e6', '#bfef45', '#fabebe', '#469990', '#e6beff', '#9A6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#a9a9a9']\n\n# draw different sectors corresponding to different categories\nfor i in range(num_categories):\n    ax.bar(i * sector_angle, data[i], width=sector_angle, bottom=0.0, color=colors[i], label=data_labels[i])\n\n# Set the category labels for each sector \nax.set_xticks(np.linspace(0, 2 * np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, fontsize=10)\n\n# Add legend\nax.legend(bbox_to_anchor=(1.1,1.1))\n\n# Set title\nax.set_title('Quantity of Agricultural Products in 2020', fontsize=14)\n\n# Resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_59.png')\n\n# Clear the current figure\nplt.clf()"
        },
        "QA": {
            "input": "What is the value for nuts in the given data?",
            "output": "120"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_93",
        "img": "./rose/png/rose_93.png",
        "topic": "Social Sciences and Humanities",
        "title": " Number of Students Enrolled in Social Science and Humanities Courses in 2021",
        "csv": "Field of Study \\t Value \\n Psychology \\t 1200 \\n Sociology \\t 1000 \\n Philosophy \\t 850 \\n Literature \\t 900 \\n Art History \\t 600 \\n History \\t 800 \\n Anthropology \\t 250 \\n Political Science \\t 400 \\n Linguistics \\t 300 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the enrollment numbers for various social science and humanities courses in 2021. Psychology leads with 1200 students, followed by Sociology at 1000, Literature with 900, and History at 800. Philosophy has 850 students, Art History is chosen by 600, Political Science has 400, Linguistics sees 300 enrollments, and Anthropology has the fewest with 250 students."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# transform the data into three variables\ndata_labels = ['Psychology','Sociology','Philosophy','Literature','Art\\nHistory','History','Anthropology','Political\\nScience','Linguistics']\ndata = [1200,1000,850,900,600,800,250,400,300]\nline_labels = []\n\n# create figure\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, polar=True)\n\n# set the number of categories\nnum_categories = len(data_labels)\n\n# calculate the sector angle\nsector_angle = (2 * np.pi) / num_categories\n\n# set up the colors\ncmap = plt.get_cmap('tab20')\ncolors = [cmap(i) for i in range(num_categories)]\n\n# draw the sectors\nfor i in range(len(data_labels)):\n    ax.bar(i * sector_angle, data[i], width=sector_angle,\n           label=data_labels[i], color=colors[i])\n\n# reposition the legend\nax.legend(data_labels, bbox_to_anchor=(1.05, 0.0), loc='lower left')\n\n# set the title\nax.set_title('Number of Students Enrolled in Social Science and Humanities Courses in 2021')\n\n# set the ticks\nax.set_xticks(np.linspace(0, 2*np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, fontsize=14, rotation=45, wrap=True)\n\n# adjust plot size and save\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_81.png')\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more students are enrolled in Sociology compared to Political Science?",
            "output": "600"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_145",
        "img": "./rose/png/rose_145.png",
        "topic": "Healthcare and Health",
        "title": " Number of Healthcare Patients by Specialty in 2021",
        "csv": "Category \\t Value \\n Cardiology \\t 200 \\n Endocrinology \\t 175 \\n Oncology \\t 150 \\n Gastroenterology \\t 125 \\n Pulmonology \\t 100 \\n Nephrology \\t 75 \\n Hematology \\t 50 \\n Infectious Diseases \\t 25 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the number of healthcare patients by specialty in 2021. Cardiology leads with 200 patients, followed by Endocrinology at 175, and Oncology with 150. Gastroenterology has 125 patients, Pulmonology 100, Nephrology 75, Hematology 50, and Infectious Diseases has the least with 25 patients."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = ['Cardiology', 'Endocrinology', 'Oncology', 'Gastroenterology', 'Pulmonology', 'Nephrology', 'Hematology', 'Infectious Diseases']\ndata = [200, 175, 150, 125, 100, 75, 50, 25]\nline_labels = ['Number of Patients']\n\n# Plot the data with the type of rose chart\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, polar=True)\n\n# Calculate the sector angle\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\n# Create sectors for different categories\nfor i in range(num_categories):\n    ax.bar(sector_angle * i, data[i], width=sector_angle, label=data_labels[i], color=plt.cm.Set2(i))\n\n# Set the ticks\nax.set_xticks(np.linspace(0.0, 2 * np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, fontsize=12)\n\n# Modify the legend position\nax.legend(loc='upper right',bbox_to_anchor=(1.3, 1.0))\n\n# Set the title of the figure\nplt.title('Number of Healthcare Patients by Specialty in 2021', fontsize=16)\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-075144_25.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "How many more patients does Cardiology have compared to Infectious Diseases?",
            "output": "175"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_53",
        "img": "./rose/png/rose_53.png",
        "topic": "Real Estate and Housing Market",
        "title": " Number of Real Estate Properties in the Housing Market",
        "csv": "Type \\t Value \\n Single-Family Homes \\t 130 \\n Condominiums \\t 90 \\n Townhouses \\t 60 \\n Multi-Family Homes \\t 40 \\n Co-ops \\t 25 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the quantity of different types of real estate properties in the housing market. Single-Family Homes lead with a value of 130, followed by Condominiums at 90. Townhouses come in at 60, while Multi-Family Homes are represented with a figure of 40. Co-ops have the lowest number, set at 25."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels. \ndata_labels = ['Single-Family Homes', 'Condominiums', 'Townhouses', 'Multi-Family Homes', 'Co-ops']\ndata = np.array([130, 90, 60, 40, 25])\nline_labels = np.array(['Type', 'Number'])\n\n# Plot the data with the type of rose chart\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111, projection='polar')\n\n# Different sectors represent different categories with the same angle, whose radius is proportional to the corresponding value\nsector_angle = (2 * np.pi) / len(data_labels)\nfor i in range(len(data_labels)):\n    ax.bar(i*sector_angle, data[i], width=sector_angle, label=data_labels[i], color=f'C{i}')\n\n# Set the legend of the chart and position it in a way that does not overlap with the chart\nax.legend(bbox_to_anchor=(1.2, 1.1))\n\n# Set the number of ticks to match the number of categories\nax.set_xticks(np.arange(0, 2*np.pi, sector_angle))\n\n# Set each category label to the center position of its corresponding sector\nax.set_xticklabels(data_labels, wrap=True)\n\n# Set the title of the figure\nax.set_title('Number of Real Estate Properties in the Housing Market')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_145.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many Co-ops are there in the Real Estate Properties data?",
            "output": "25"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_21",
        "img": "./rose/png/rose_21.png",
        "topic": "Social Media and the Web",
        "title": " Frequency of Technologies Used in Social Media and the Web in 2021",
        "csv": "Category \\t Value \\n Web Design \\t 70 \\n Network Security \\t 90 \\n Cloud Computing \\t 50 \\n Online Advertising \\t 80 \\n Mobile Applications \\t 60 \\n Big Data \\t 40 \\n Web Analytics \\t 20 \\n Machine Learning \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart outlines the frequency of various technologies used in social media and the web in 2021. Web Design has a value of 70, Network Security 90, Cloud Computing 50, and Online Advertising 80. Mobile Applications are at 60, while Big Data is at 40. Web Analytics and Machine Learning are the lowest, with values of 20 and 10, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels.\ndata_labels = ['Web Design', 'Network Security', 'Cloud Computing', 'Online Advertising', 'Mobile Applications', 'Big Data', 'Web Analytics', 'Machine Learning']\ndata = [70, 90, 50, 80, 60, 40, 20, 10]\nline_labels = ['Category','Number']\n\n# Plot the data with the type of rose chart\nfig = plt.figure(figsize=(15,15))\nax = fig.add_subplot(111, projection='polar')\n\n# Different sectors represent different categories with the same angle\nsector_angle = (2 * np.pi) / len(data_labels)\n\n# assign a different color to each sector\nfor i in range(len(data_labels)):\n    ax.bar([i*sector_angle], [data[i]], width=sector_angle, label=data_labels[i], color=plt.cm.Reds(i/len(data_labels)))\n\n# reposition the legend so that it does not cover any part of the chart\nax.legend(bbox_to_anchor=(1.2, 1.2), title='Category')\n\n# Ensure that the number of ticks set with `ax.set_xticks()`\nangles = [i*sector_angle for i in range(len(data_labels))]\nax.set_xticks(angles)\n\n# set each category label at the center of its corresponding sector\nax.set_xticklabels(data_labels, fontsize=12, horizontalalignment='center', wrap=True)\n\nax.set_title('Frequency of Technologies Used in Social Media and the Web in 2021', fontsize=20)\n\n# Save the image\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_1.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which technology has the highest frequency of use according to the given data? ",
            "output": "Network Security"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_91",
        "img": "./rose/png/rose_91.png",
        "topic": "Healthcare and Health",
        "title": " Number of Patients Treated in Healthcare Institutions in 2021",
        "csv": "Treatment \\t Value \\n Surgery \\t 45 \\n Diagnostics \\t 87 \\n Radiology \\t 37 \\n Oncology \\t 98 \\n Cardiology \\t 63 \\n Physical Therapy \\t 72 \\n Endocrinology \\t 50 \\n Immunology \\t 40 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart represents the number of patients treated in various departments of healthcare institutions in 2021. Surgery had 45 patients, Diagnostics treated 87 patients, and Radiology had 37 patients. Oncology saw 98 patients, making it the department with the highest patient count. Cardiology had 63 patients, Physical Therapy 72 patients, Endocrinology 50 patients, and Immunology had 40 patients."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = ['Surgery', 'Diagnostics', 'Radiology', 'Oncology', 'Cardiology', 'Physical Therapy', 'Endocrinology', 'Immunology']\nline_labels = ['Treatment', 'Number of Patients']\ndata = np.array([[45, 87, 37, 98, 63, 72, 50, 40]])\n\n# Plot the data with the type of rose chart\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot(111, polar=True)\n\n# Different sectors represent different categories with the same angle, whose radius is proportional to the corresponding value\nsector_angle = (2 * np.pi) / len(data_labels)\nfor i in range(len(data_labels)):\n    ax.bar(i * sector_angle, data[0][i], width=sector_angle, label=data_labels[i])\n\n# Create figure before plotting\nax.set_theta_direction(-1)\nax.set_theta_zero_location('N')\nax.set_title('Number of Patients Treated in Healthcare Institutions in 2021', y=1.08)\n\n# Set the angle parameters in the ax.set_xticks method\nax.set_xticks(np.linspace(0, 2*np.pi, len(data_labels), endpoint=False))\n# Set the category labels\nax.set_xticklabels(data_labels, fontsize=12)\n\n# Position the legend so that it does not cover any part of the chart\nax.legend(data_labels, bbox_to_anchor=(1.2, 1.1))\n# Display gridlines\nax.grid(color='gray', linestyle='--', linewidth=1, alpha=0.5)\n\n# Save the image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_78.png')\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more patients received Diagnostics treatment than those who received Immunology treatment?",
            "output": "47"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_107",
        "img": "./rose/png/rose_107.png",
        "topic": "Education and Academics",
        "title": " Number of Students Enrolled in Each Subject in 2021",
        "csv": "Subject \\t Value \\n Mathematics \\t 130 \\n Science \\t 110 \\n English \\t 120 \\n Social Studies \\t 90 \\n Computer Science \\t 80 \\n History \\t 60 \\n Physical Education \\t 40 \\n Music \\t 10 \\n Art \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the enrollment of students in various subjects for the year 2021. Mathematics leads with 130 students, followed by Science with 110, and English with 120. Social Studies has 90, Computer Science 80, while History has 60 enrollees. Physical Education, Music, and Art have the fewest students with 40, 10, and 20, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform given data\ndata_labels = [\"Mathematics\", \"Science\", \"English\", \"Social Studies\", \"Computer Science\", \"History\", \"Physical Education\", \"Music\", \"Art\"]\ndata = [130, 110, 120, 90, 80, 60, 40, 10, 20]\nline_labels = [\"Subject\", \"Number of Students\"]\n\n# Create figure\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(1, 1, 1, projection=\"polar\")\n\n# Set up axes\nax.set_theta_direction(-1)\nax.set_theta_zero_location(\"N\")\n\n# Calculate sector angle\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\n# Plot the data\nfor i in range(num_categories):\n    ax.bar(i * sector_angle, data[i], width=sector_angle, label=data_labels[i], color=np.random.rand(3,))\n\n# Set labels\nax.set_xticks(np.linspace(0, 2 * np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, wrap=True, fontsize=12)\n\n# Position legend\nax.legend(bbox_to_anchor=(1.1, 1.1))\n\n# Add title\nplt.title(\"Number of Students Enrolled in Each Subject in 2021\", fontsize=12)\n\n# Resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the image\nplt.savefig(\"./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-054203_4.png\")\n\n# Clean up image state\nplt.close()"
        },
        "QA": {
            "input": "How many more students are enrolled in Mathematics than in Physical Education?",
            "output": "90"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_49",
        "img": "./rose/png/rose_49.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Count by Job Level in Human Resources Management",
        "csv": "Job Level \\t Value \\n Executive \\t 100 \\n Senior Management \\t 200 \\n Middle Management \\t 400 \\n Supervisory \\t 800 \\n Entry-level \\t 1200 \\n Internship \\t 200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the employee count distribution by job level within Human Resources Management. It displays six job levels: Executive with 100 employees, Senior Management with 200, Middle Management with 400, Supervisory with 800, Entry-level with 1200, and Internship with 200."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels. \n# Data_labels represents the labels of each column except the first column. \n# Line_labels represents the labels of each row except the first row. \n# Data represent the numerical array in the data.\ndata_labels = ['Executive', 'Senior Management', 'Middle Management', 'Supervisory', 'Entry-level', 'Internship']\ndata = [100, 200, 400, 800, 1200, 200]\nline_labels = ['Number of Employees']\n\n# Create figure before plotting, i.e., add_subplot() follows plt.figure()\nfig = plt.figure(figsize=(8,8))\nax = fig.add_subplot(1,1,1, projection='polar')\n\n# Calculate the sector angle based on the number of categories\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\n# Plot the data with the type of rose chart\nfor i in range(num_categories):\n    ax.bar(sector_angle * i, data[i], width=sector_angle, label=data_labels[i], color=plt.cm.Set1(i))\n\n# Add the legend next to the chart\nax.legend(bbox_to_anchor=(1.25, 1))\n\n# Set the number of ticks to the number of categories\nax.set_xticks(np.linspace(0, 2 * np.pi, num_categories, endpoint=False))\n# Set the labels for the categories\nax.set_xticklabels(data_labels, fontsize=10,rotation=90)\n\n# Set title\nplt.title('Employee Count by Job Level in Human Resources Management',fontsize=14)\n\n# Tight the layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_141.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more entry-level employees are there compared to executive employees?",
            "output": "1100"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_86",
        "img": "./rose/png/rose_86.png",
        "topic": "Law and Legal Affairs",
        "title": " Number of Attorneys Practicing in Different Legal Areas in 2021",
        "csv": "Legal Practice Area \\t Value \\n Criminal Law \\t 100 \\n Civil Rights \\t 85 \\n Corporate Law \\t 75 \\n Family Law \\t 60 \\n Labor Law \\t 50 \\n Intellectual Property \\t 45 \\n Environmental Law \\t 40 \\n Tax Law \\t 35 \\n International Law \\t 30 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart represents the number of attorneys practicing in different legal areas in 2021. Criminal Law leads with a value of 100. Civil Rights follows at 85, and Corporate Law at 75. Family Law has a value of 60, Labor Law 50, and Intellectual Property 45. Environmental Law and Tax Law have lower representations, with values of 40 and 35 respectively. International Law has the smallest number at 30."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Criminal Law', 'Civil Rights', 'Corporate Law', 'Family Law', 'Labor Law', 'Intellectual Property', 'Environmental Law', 'Tax Law', 'International Law']\ndata = [100, 85, 75, 60, 50, 45, 40, 35, 30]\nline_labels = ['Legal Practice Area', 'Number of Attorneys']\n\nfig = plt.figure(figsize=(12,12))\nax = fig.add_subplot(111, projection='polar')\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\ncolors = [plt.cm.jet(i/ num_categories) for i in range(num_categories)]\n\nfor i in range(num_categories):\n    ax.bar(sector_angle*i, data[i], width=sector_angle, color=colors[i], label=data_labels[i])\n\nax.set_xticks(sector_angle/2 + sector_angle * np.arange(num_categories))\nax.set_xticklabels(data_labels, fontsize=14)\n\nax.legend(data_labels, bbox_to_anchor=(1.2, 0.2))\nax.set_title('Number of Attorneys Practicing in Different Legal Areas in 2021', fontsize=16)\n\nfig.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_71.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many attorneys are practicing in Environmental Law?",
            "output": "40"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_3",
        "img": "./rose/png/rose_3.png",
        "topic": "Food and Beverage Industry",
        "title": " Most Popular Food and Beverage Items in 2021",
        "csv": "Product \\t Value \\n Burgers \\t 120 \\n Salads \\t 90 \\n Sandwiches \\t 80 \\n Pizza \\t 70 \\n Fries \\t 60 \\n Soft Drinks \\t 50 \\n Milkshakes \\t 40 \\n Ice Cream \\t 30 \\n Coffee \\t 20 \\n Tea \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the popularity of various food and beverage items in 2021 based on their value. Burgers lead with a value of 120, followed by salads at 90, and sandwiches at 80. Pizza ranks fourth with a value of 70, with fries close behind at 60. Soft drinks score a value of 50, while milkshakes come in at 40. The chart further shows ice cream with a value of 30, coffee at 20, and tea at the bottom with a value of 10."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = [\"Burgers\",\"Salads\",\"Sandwiches\",\"Pizza\",\"Fries\",\"Soft Drinks\",\"Milkshakes\",\"Ice Cream\",\"Coffee\",\"Tea\"]\ndata = [120,90,80,70,60,50,40,30,20,10]\nline_labels = [\"Product\",\"Number of Orders\"]\n\n# Plot the data with the type of rose chart\n# Create figure before plotting\nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111,projection='polar')\n\n# Modify the axes to use polar coordinates\nax.set_theta_direction(-1)\nax.set_theta_zero_location('N')\n\n# Calculate the sector angle\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\n# Draw sectors corresponding to different categories\n# Assign a different color to each sector\nfor i, v in enumerate(data):\n    ax.bar(i*sector_angle, v, width=sector_angle, \n           label=data_labels[i], color=plt.cm.jet(i/num_categories))\n\n# Set the number of ticks matches the number of categories\nax.set_xticks(np.linspace(0, 2*np.pi, num_categories, endpoint=False))\n\n# Set the label of ticks\nax.set_xticklabels(data_labels, fontsize=10, wrap=True, rotation=-90)\n\n# Position the legend\nax.legend(bbox_to_anchor=(1,1), fontsize=10)\n\n# Set the title of figure\nax.set_title('Most Popular Food and Beverage Items in 2021')\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231225-125808_1.png')\n\n# Clear the current image state\nplt.cla()"
        },
        "QA": {
            "input": "How much more value do burgers have compared to sandwiches?",
            "output": "40"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_146",
        "img": "./rose/png/rose_146.png",
        "topic": "Education and Academics",
        "title": " Number of Students Enrolled in Different Academic Fields in 2021",
        "csv": "Category \\t Value \\n STEM \\t 750 \\n Liberal Arts \\t 400 \\n Education \\t 350 \\n Social Sciences \\t 200 \\n Arts and Humanities \\t 150 \\n Agriculture \\t 100 \\n Business \\t 50 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart showcases the enrollment numbers of students in various academic fields in 2021. STEM leads with 750 students, followed by Liberal Arts with 400, Education with 350, and Social Sciences with 200. Arts and Humanities have 150 students enrolled, Agriculture has 100, and the Business field has the fewest with 50 students."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['STEM', 'Liberal Arts', 'Education', 'Social Sciences', 'Arts and Humanities', 'Agriculture', 'Business'] \ndata = [750, 400, 350, 200, 150, 100, 50]\nline_labels = ['Category', 'Number']\n\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(polar=True)\n\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\nfor i in range(num_categories):\n    ax.bar(i * sector_angle, data[i], width=sector_angle, label=data_labels[i], color=plt.cm.Set1(i))\n\nax.set_theta_direction(-1)\nax.set_theta_offset(np.pi / 2)\n\nax.set_xticks(np.arange(0, 2 * np.pi, sector_angle))\nax.set_xticklabels(data_labels)\n\nax.legend(bbox_to_anchor=(1.3,1), loc=\"upper right\")\nax.set_title(\"Number of Students Enrolled in Different Academic Fields in 2021\")\n\nfig.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-075144_27.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "Which academic field has the least number of students enrolled?",
            "output": "Business"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_26",
        "img": "./rose/png/rose_26.png",
        "topic": "Technology and the Internet",
        "title": " Popularity of Technological Developments in the Digital Age",
        "csv": "Category \\t Value \\n Cloud Computing \\t 80 \\n Artificial Intelligence \\t 100 \\n Cyber Security \\t 50 \\n Big Data \\t 60 \\n Robotics \\t 70 \\n Internet of Things \\t 40 \\n Virtual Reality \\t 30 \\n Blockchain \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the popularity of different technological developments in the digital age. Each petal represents a category, with the length indicating its popularity value. Cloud Computing scores 80, Artificial Intelligence leads with 100, and Cyber Security has a value of 50. Big Data is rated at 60, whereas Robotics has a value of 70. The Internet of Things and Virtual Reality register lower at 40 and 30, respectively. Blockchain has the smallest presence with a value of 20."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Cloud Computing', 'Artificial Intelligence', 'Cyber Security', 'Big Data', 'Robotics', 'Internet of Things', 'Virtual Reality', 'Blockchain']\ndata = [80, 100, 50, 60, 70, 40, 30, 20]\nline_labels = ['Category', 'Number']\n\n# Create figure\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(1, 1, 1, projection='polar')\n\n# Calculate the sector angle\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\n# Plot data\nfor i in range(num_categories):\n    ax.bar(sector_angle * i, data[i], width=sector_angle, \n           label=data_labels[i], color=plt.cm.Dark2(i/num_categories))\n\n# Set ticks\nax.set_xticks(np.linspace(0, 2 * np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, fontsize=10, horizontalalignment='center')\n\n# Set legend\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.25),\n          fancybox=True, shadow=True, ncol=4)\n\n# Set title\nax.set_title('Popularity of Technological Developments in the Digital Age')\n\n# Resize image\nplt.tight_layout()\n\n# Save image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_108.png')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the lowest popularity value?",
            "output": "Blockchain"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_99",
        "img": "./rose/png/rose_99.png",
        "topic": "Business and Finance",
        "title": " Investor Participation in Different Financial Instruments in 2021",
        "csv": "Financial Instrument \\t Value \\n Stocks \\t 400 \\n Bonds \\t 500 \\n Mutual Funds \\t 700 \\n Options \\t 250 \\n Futures \\t 150 \\n Derivatives \\t 100 \\n Forex \\t 200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the value of investor participation in various financial instruments in 2021. The chart features seven categories: Stocks have a value of 400, Bonds are at 500, Mutual Funds lead with 700, Options are listed with a value of 250, Futures at 150, Derivatives are the lowest at 100, and Forex stands at 200."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Stocks','Bonds','Mutual Funds','Options','Futures','Derivatives','Forex']\ndata = [400,500,700,250,150,100,200]\nline_labels = ['Number of Investors']\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111, polar=True)\n\nsector_angle = (2 * np.pi) / len(data_labels)\n\nfor i in range(len(data)):\n    ax.bar(sector_angle * i, data[i], align='center', width=sector_angle, label=data_labels[i], alpha=0.5)\n\nax.set_theta_direction(-1)\nax.set_theta_zero_location(\"N\")\nax.set_xticks(np.linspace(0, 2*np.pi, len(data_labels)+1)[:-1])\nax.set_xticklabels(data_labels, fontsize=10, wrap=True, rotation=45)\nax.set_ylim(0, np.max(data)+50)\nax.legend(bbox_to_anchor=(1.3, 1.0))\nax.set_title('Investor Participation in Different Financial Instruments in 2021', fontsize=14)\n\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_90.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "What is the value of Mutual Funds according to the chart?",
            "output": "700"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_97",
        "img": "./rose/png/rose_97.png",
        "topic": "Education and Academics",
        "title": " Number of Institutions by Type in the Education System",
        "csv": "Institution Type \\t Value \\n Public \\t 50 \\n Private \\t 30 \\n Technical \\t 20 \\n Liberal Arts \\t 10 \\n Online \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the number of institutions by type within the education system. Public institutions lead with a value of 50, followed by private at 30. Technical institutions are represented with a value of 20. Liberal arts institutions have a count of 10, and online institutions have the lowest value, listed as 5."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Public', 'Private', 'Technical', 'Liberal Arts', 'Online']\ndata = [50, 30, 20, 10, 5]\nline_labels = ['Institution Type']\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111, projection='polar')\n\nnum_categories = len(data)\nsector_angle = (2 * np.pi) / num_categories\n\nfor i, value in enumerate(data):\n    ax.bar(i * sector_angle, value, width=sector_angle, color=plt.cm.jet(i / num_categories), edgecolor='white', label=data_labels[i])\n\nax.legend(bbox_to_anchor=(1.2, 0.7), loc=\"upper left\")\nax.set_xticks(np.linspace(0, 2*np.pi, num_categories+1)[:-1])\nax.set_xticklabels(data_labels, fontsize=12, rotation=90)\nax.set_title('Number of Institutions by Type in the Education System', fontsize=14)\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_86.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many institutions are liberal arts according to the data?",
            "output": "10"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_37",
        "img": "./rose/png/rose_37.png",
        "topic": "Healthcare and Health",
        "title": " Number of Health Programs by Category in 2021",
        "csv": "Category \\t Value \\n Disease Prevention \\t 90 \\n Vaccinations \\t 87 \\n Health Education \\t 80 \\n Mental Health \\t 70 \\n Chronic Disease Management \\t 60 \\n Nutrition \\t 50 \\n Physical Activity \\t 40 \\n Injury Prevention \\t 30 \\n Substance Abuse \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the distribution of health programs by category in 2021. Disease Prevention leads with a value of 90, followed closely by Vaccinations at 87. Health Education has a value of 80, while Mental Health is at 70. Chronic Disease Management is represented with a value of 60, with Nutrition at 50 and Physical Activity at 40. Injury Prevention and Substance Abuse are at the lower end with values of 30 and 20, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Disease Prevention', 'Vaccinations', 'Health Education', 'Mental Health', 'Chronic Disease Management', 'Nutrition', 'Physical Activity', 'Injury Prevention', 'Substance Abuse']\ndata = np.array([90, 87, 80, 70, 60, 50, 40, 30, 20])\nline_labels = np.array([i for i in range(0, len(data))])\n\nfig = plt.figure(figsize=(20, 20))\nax = fig.add_subplot(111, projection='polar', facecolor='#d8dcd6')\n\nsector_angle = (2 * np.pi) / len(data)\n\nfor i, data_line in enumerate(data):\n    ax.bar(x=line_labels[i] * sector_angle, height=data[i], width=sector_angle)\n\nax.set_xticks(line_labels * sector_angle)\nax.set_xticklabels(data_labels, fontsize=14, wrap=True)\nax.legend(data_labels, fontsize=14, bbox_to_anchor=(1.05, 1), loc='upper left')\n\nax.set_title('Number of Health Programs by Category in 2021', fontsize=20)\n\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_125.png')\nplt.cla()"
        },
        "QA": {
            "input": "What is the value for Health Education programs?",
            "output": "80"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_48",
        "img": "./rose/png/rose_48.png",
        "topic": "Energy and Utilities",
        "title": " Energy Generation Sources in 2021",
        "csv": "Type of Energy \\t Value \\n Renewable \\t 50 \\n Non-Renewable \\t 90 \\n Nuclear \\t 80 \\n Natural Gas \\t 60 \\n Solar \\t 40 \\n Wind \\t 20 \\n Hydroelectric \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This rose chart illustrates the various energy generation sources used in 2021. It quantifies the value of energy produced from different types: Renewable energy sits at 50 units, Non-Renewable at 90, Nuclear energy at 80, Natural Gas at 60, Solar energy at 40, Wind energy at 20, and Hydroelectric at 10 units."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Renewable', 'Non-Renewable', 'Nuclear', 'Natural Gas', 'Solar', 'Wind', 'Hydroelectric']\ndata = [50, 90, 80, 60, 40, 20, 10]\nline_labels = ['Type of Energy', 'Number of Sources']\n\nfig = plt.figure(figsize=(8,8))\nax = fig.add_subplot(111, projection='polar')\n\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\ncolors = ['#ff0000', '#00f0ff', '#0000ff', '#ff00ff', '#00ff00', '#ff0080', '#ffff00']\n\nfor i,data_label in enumerate(data_labels):\n    ax.bar(sector_angle * i, data[i], width=sector_angle, color=colors[i], label=data_label)\n\nax.legend(bbox_to_anchor=(1.15,1), loc=\"upper right\")\nax.set_xticks(np.linspace(0, 2*np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, fontsize=15)\nplt.title('Energy Generation Sources in 2021', fontsize=20)\n\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_140.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the value of Wind energy generation?",
            "output": "20"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_76",
        "img": "./rose/png/rose_76.png",
        "topic": "Arts and Culture",
        "title": " Number of Arts Practices by Category in 2021",
        "csv": "Category \\t Value \\n Music \\t 120 \\n Visual Arts \\t 90 \\n Performing Arts \\t 100 \\n Literature \\t 75 \\n Creative Arts \\t 60 \\n Architecture \\t 50 \\n Cinema \\t 40 \\n Photography \\t 30 \\n Dance \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This rose chart represents the number of arts practices by category in 2021, categorizing them as Music (120), Visual Arts (90), Performing Arts (100), Literature (75), Creative Arts (60), Architecture (50), Cinema (40), Photography (30), and Dance (20). Each category is differentiated by a sector on the chart, demonstrating the relative frequency of practices within the arts."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = ['Music', 'Visual Arts', 'Performing Arts', 'Literature', \n               'Creative Arts', 'Architecture', 'Cinema', 'Photography', 'Dance']\ndata = [120, 90, 100, 75, 60, 50, 40, 30, 20]\nline_labels = ['Category', 'Number of Arts']\n\n# Create figure and plot data with type of rose chart\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(1, 1, 1, polar=True)\nax.set_title('Number of Arts Practices by Category in 2021')\n\n# Calculate sector angle and draw sectors\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\nfor i in range(num_categories):\n    ax.bar(sector_angle * i, data[i], width=sector_angle, \n           label=data_labels[i], color='C'+str(i))\n    \n# Set ticks to match categories\nax.set_xticks(np.linspace(0, 2*np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, rotation=90)\n\n# Position legend outside of chart area\nax.legend(bbox_to_anchor=(1.3, 1), frameon=False)\n\n# Adjust font size and color\nfor tick in ax.xaxis.get_ticklabels():\n    tick.set_fontsize(15)\n    tick.set_color('black')\nfor tick in ax.yaxis.get_ticklabels():\n    tick.set_color('black')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_5.png')\n\n# Clear current image\nplt.clf()"
        },
        "QA": {
            "input": "How many more practices are there in \"Visual Arts\" compared to \"Cinema\"?",
            "output": "50"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_74",
        "img": "./rose/png/rose_74.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Count by Type in a Company",
        "csv": "Employee Type \\t Value \\n Full-time Employees \\t 420 \\n Part-time Employees \\t 110 \\n Contractors \\t 120 \\n Interns \\t 60 \\n Trainees \\t 30 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart represents the distribution of employee types within a company. Full-time employees are the largest group, with 420 individuals. Part-time employees number at 110, followed by contractors with 120. Interns and trainees are the smallest groups, consisting of 60 and 30 individuals, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = [\"Full-time Employees\",\"Part-time Employees\",\"Contractors\",\"Interns\",\"Trainees\"]\ndata = [420,110,120,60,30]\nline_labels = [\"Employee Type\",\"Number\"]\n\nfig = plt.figure(figsize=(12, 12))\nax = fig.add_subplot(111, projection='polar')\nnum_categories = len(data)\nsector_angle = (2 * np.pi) / num_categories\n\nfor i in range(num_categories):\n    ax.bar(sector_angle * i, data[i], width=sector_angle, label=data_labels[i], color=plt.cm.Dark2(i))\n\nax.set_theta_direction(-1)\nplt.xticks(np.arange(0, num_categories) * sector_angle, data_labels, color='black', size=12)\n\nax.set_title(\"Employee Count by Type in a Company\", fontsize=14)\nax.legend(bbox_to_anchor=(1.1, 1.1))\nax.grid(True)\n\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_44.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "How many more full-time employees are there than contractors?",
            "output": "300"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_109",
        "img": "./rose/png/rose_109.png",
        "topic": "Food and Beverage Industry",
        "title": " Beverage Sales Volume in the Food and Beverage Industry in 2021",
        "csv": "Beverage Type \\t Value \\n Beer \\t 200 \\n Wine \\t 150 \\n Spirits \\t 100 \\n Soft Drinks \\t 80 \\n Juice \\t 60 \\n Water \\t 40 \\n Tea \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart demonstrates the sales volume of different beverages in the food and beverage industry for the year 2021. Beer leads with a sales volume of 200, followed by Wine at 150, Spirits at 100, Soft Drinks at 80, Juice at 60, Water at 40, and Tea trailing with a volume of 20. Each beverage type's value is represented as a sector of the rose chart, indicating its proportion relative to the others within the industry's sales."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels. \ndata_labels = ['Beer', 'Wine', 'Spirits', 'Soft Drinks', 'Juice', 'Water', 'Tea']\ndata = [200, 150, 100, 80, 60, 40, 20]\nline_labels = ['Beverage Type', 'Sales Volume']\n\n#Create figure\nfig = plt.figure(figsize=(12, 12))\nax = fig.add_subplot(111, polar=True)\n\n# Plot the data with the type of rose chart.\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\nfor idx, (d, l) in enumerate(zip(data, data_labels)):\n    ax.bar(sector_angle*idx, d, sector_angle, color=plt.cm.Set3(idx), label=l)\n\nax.set_title('Beverage Sales Volume in the Food and Beverage Industry in 2021')\n\n# Set ticks and labels\nax.set_xticks(sector_angle * np.arange(num_categories))\nax.set_xticklabels(data_labels, fontsize=11, wrap=True, rotation=25)\n\n# Position legend to the side of the chart\nax.legend(bbox_to_anchor=(1.1, 1.15)) \n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-054203_7.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which beverage has the lowest sales volume according to the data?",
            "output": "Tea"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_12",
        "img": "./rose/png/rose_12.png",
        "topic": "Energy and Utilities",
        "title": " Number of Energy and Utility Providers in 2021",
        "csv": "Category \\t Value \\n Renewable Energy \\t 45 \\n Hydroelectric \\t 50 \\n Nuclear Energy \\t 20 \\n Oil and Gas \\t 60 \\n Coal \\t 30 \\n Solar \\t 90 \\n Wind \\t 40 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart represents the number of energy and utility providers across different energy categories in 2021. Renewable Energy has 45 providers, Hydroelectric stands at 50, and Nuclear Energy at 20. Oil and Gas lead with 60 providers, while Coal has 30. Solar energy shows a high number with 90 providers, and Wind Energy has 40."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = ['Renewable Energy', 'Hydroelectric', 'Nuclear Energy', 'Oil and Gas', 'Coal', 'Solar', 'Wind']\ndata = [45, 50, 20, 60, 30, 90, 40]\nline_labels = ['Category', 'Number']\n\n# Plot the data with the type of rose chart\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, polar=True)\n\n# Create figure before plotting\ncategory_num = len(data)\nsector_angle = (2 * np.pi) / category_num\n\n# Different sectors represent different categories with the same angle, whose radius is proportional to the corresponding value\nfor sector_index in range(category_num):\n    start_angle = sector_angle * sector_index\n    end_angle = start_angle + sector_angle\n    ax.bar(start_angle, data[sector_index], width=sector_angle, label=data_labels[sector_index])\n\n# Add a legend next to the chart\nax.legend(bbox_to_anchor=(1.25, 1.03), labels=data_labels)\n\n# Set ax.set_xticks\nax.set_xticks(np.linspace(0, 2 * np.pi, category_num + 1)[:-1])\nax.set_xticklabels(data_labels, fontsize=14, wrap=True, rotation=90)\n\n# Set title\nax.set_title(\"Number of Energy and Utility Providers in 2021\", fontsize=20)\n\n# Ensure the labels are correctly positioned at the center of its corresponding sector\nax.set_theta_direction(-1)\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231225-125808_2.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more energy and utility providers does Solar have compared to Nuclear Energy?",
            "output": "70"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_126",
        "img": "./rose/png/rose_126.png",
        "topic": "Arts and Culture",
        "title": " Popularity of Arts and Culture Forms in 2021",
        "csv": "Category \\t Value \\n Visual Arts \\t 53 \\n Dance \\t 47 \\n Music \\t 43 \\n Theatre \\t 40 \\n Literature \\t 37 \\n Film \\t 33 \\n Architecture \\t 30 \\n Crafts \\t 27 \\n Photography \\t 23 \\n Fashion \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the popularity of various forms of arts and culture in 2021. Visual Arts leads with a value of 53, followed closely by Dance at 47 and Music at 43. Theatre has a value of 40, whilst Literature scores 37. Film holds a value of 33, with Architecture at 30. Crafts are represented with a value of 27, Photography at 23, and Fashion at 20. The chart provides a visual representation of the differential interest in these cultural forms."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = ['Visual Arts','Dance','Music','Theatre','Literature','Film','Architecture','Crafts','Photography','Fashion']\ndata = [53,47,43,40,37,33,30,27,23,20]\nline_labels = ['Category','Number']\n\n# Plot the data with the type of rose chart\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(projection='polar')\n\n# Set the number of categories\nnum_categories = len(data_labels)\n\n# Calculate the sector_angle\nsector_angle = (2 * np.pi) / num_categories\n\n# Draw sectors corresponding to different categories\nfor i in range(num_categories):\n    ax.bar(i * sector_angle, data[i], width=sector_angle, label=data_labels[i])\n\n# Position the legend\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)\n\n# Set the ticks and labels\nax.set_xticks(np.linspace(0, 2*np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, fontsize=20)\n\n# Adjust the plot\nax.set_theta_direction(-1)\nax.set_theta_zero_location('N')\nax.set_title('Popularity of Arts and Culture Forms in 2021', fontsize=30)\n\n# Save the figure\nplt.tight_layout()\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-075144_13.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in value between Crafts and Photography?",
            "output": "4"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_147",
        "img": "./rose/png/rose_147.png",
        "topic": "Education and Academics",
        "title": " Number of Students at Different Education Levels in 2021",
        "csv": "Level \\t Value \\n Primary Education \\t 450 \\n Secondary Education \\t 750 \\n Undergraduate \\t 1350 \\n Graduate \\t 650 \\n Post-Graduate \\t 250 \\n Doctoral \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the number of students at various education levels in 2021. It starts with 450 students in primary education and then rises to 750 in secondary education. The count peaks at 1350 for undergraduates, then decreases to 650 for graduate students. Further along, post-graduate students number 250, and there are 100 doctoral students."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = ['Primary Education', 'Secondary Education', 'Undergraduate', 'Graduate', 'Post-Graduate', 'Doctoral']\ndata = [450, 750, 1350, 650, 250, 100]\nline_labels = ['Level', 'Number of Students']\n\n# Set up the figure\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(1,1,1, projection='polar')\n\n# Set the number of categories\nnum_categories = len(data_labels)\n\n# Calculate the sector angle\nsector_angle = (2 * np.pi) / num_categories\n\n# Plot the data\nfor i in range(num_categories):\n    ax.bar(x=sector_angle*i, height=data[i], width=sector_angle, bottom=0.0, color=plt.cm.jet(i/num_categories), label=data_labels[i])\n\n# Set the xticks\nax.set_xticks(np.linspace(0, 2*np.pi, num_categories, endpoint=False))\n\n# Set the xticklabels\nax.set_xticklabels(data_labels, fontsize=12)\n\n# Set the legend\nax.legend(bbox_to_anchor=(1, 1), loc='upper left', fontsize=12)\n\n# Set the title\nplt.title(\"Number of Students at Different Education Levels in 2021\")\n\n# Resize the figure\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-075144_28.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more students are there in secondary education than in post-graduate?",
            "output": "500 students"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_60",
        "img": "./rose/png/rose_60.png",
        "topic": "Human Resources and Employee Management",
        "title": " Number of Employees by Employment Status in 2021",
        "csv": "Employment Status \\t Value \\n Permanent \\t 100 \\n Part-time \\t 90 \\n Contract \\t 80 \\n Casual \\t 70 \\n Freelance \\t 60 \\n Internship \\t 50 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the number of employees categorized by employment status in 2021. The count for permanent positions stands at 100, part-time at 90, contract workers tally at 80, casual jobs at 70, freelance roles number 60, and internships at 50. The data visually represents the distribution of employment types within the surveyed group."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels.\ndata_labels = ['Permanent', 'Part-time', 'Contract', 'Casual', 'Freelance', 'Internship']\ndata = [100, 90, 80, 70, 60, 50]\nline_labels = ['Employment Status', 'Number of Employees']\n\n# Create figure and plot a rose chart\nfig = plt.figure(figsize=(10, 10)) \nax = fig.add_subplot(111, polar=True)\n\n# Calculate the number of categories\nnum_categories = len(data_labels)\n\n# Calculate the sector angle\nsector_angle = (2 * np.pi) / num_categories\n\n# Plot data\nfor i in range(num_categories):\n    ax.bar(sector_angle * i, \n           data[i], \n           width=sector_angle, \n           edgecolor='k', \n           color=plt.cm.cool(i/num_categories), \n           label=data_labels[i])\n\n# Set ticks\nax.set_xticks(np.linspace(0, 2*np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels)\n\n# Add legend\nax.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))\n\n# Title\nplt.title(\"Number of Employees by Employment Status in 2021\")\n\n# Tight layout\nplt.tight_layout()\n\n# Save figure\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_21.png', dpi=300)\n\n# Clear current figure\nplt.clf()"
        },
        "QA": {
            "input": "How many more permanent employees were there than interns in 2021?",
            "output": "50"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_42",
        "img": "./rose/png/rose_42.png",
        "topic": "Food and Beverage Industry",
        "title": " Number of Food and Beverage Products on the Market in 2021",
        "csv": "Product Type \\t Value \\n Dairy \\t 90 \\n Bakery \\t 85 \\n Grains \\t 80 \\n Fruits \\t 75 \\n Vegetables \\t 70 \\n Beverages \\t 60 \\n Meat and Poultry \\t 50 \\n Seafood \\t 40 \\n Condiments \\t 30 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the number of different food and beverage product types on the market in 2021. Dairy leads with a value of 90, followed by Bakery products at 85, Grains at 80, and Fruits at 75. Vegetables are recorded at 70, while Beverages have a value of 60. Meat and Poultry products have a count of 50, Seafood is at 40, and Condiments are at the lowest with a value of 30."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#Transform the given data into three variables: data_labels, data, line_labels. Data_labels represents the labels of each column except the first column. Line_labels represents the labels of each row except the first row. Data represent the numerical array in the data.\ndata_labels = ['Dairy', 'Bakery', 'Grains', 'Fruits', 'Vegetables', 'Beverages', 'Meat and Poultry', 'Seafood', 'Condiments']\ndata = np.array([90, 85, 80, 75, 70, 60, 50, 40, 30])\nline_labels = ['Product Type', 'Number of Products']\n\n#Plot the data with the type of rose chart. Create figure before plotting, i.e., add_subplot() follows plt.figure(). Modify the axes to use polar coordinates with `polar=True` or 'projection='polar'.\nfig = plt.figure(figsize=(8,8))\nax = plt.subplot(111, projection='polar')\n\n#You can use \"import matplotlib.pyplot as plt\" and \"import numpy as np\".\n#There should be multiple sectors in the graph, each representing a different category, assign a different color to each sector, and add a legend next to the chart that clearly labels the category each sector represents, ensuring that the legend does not obscure any part of the chart.\n#All sectors should cover the entire circumference evenly, and each sector should have the same angle.\nnum_categories = len(data)\nsector_angle = (2 * np.pi) / num_categories\ncolors = ['b', 'y', 'c', 'm', 'r', 'g', 'k', '#800080', '#FFC0CB']\n\nfor i in range(num_categories):\n    ax.bar(sector_angle * i, data[i], width=sector_angle, color=colors[i], label=data_labels[i])\n\n#Different sectors represent different categories with the same angle, whose radius is proportional to the corresponding value, and the angles of these sectors must add up to 360 degrees, i.e., use \"sector_angle = (2 * np.pi) / num_categories\" to calculate the sector angle and draw sectors corresponding to different categories by making the width parameter in \"ax.bar\" sector_angle.\n\n#You should use a loop to assign a label to each sector when you create them with `ax.bar`. Then, when you call `ax.legend()`, it will display labels for all categories. Make sure the legend is positioned in such a way that it doesn't overlap with the chart.\n#Ensure that the number of ticks set with `ax.set_xticks()` matches exactly the number of categories or labels you have in `data_labels`.\nax.set_xticks(np.arange(0, 2 * np.pi, sector_angle))\nax.set_xticklabels(data_labels, fontsize=12, va='center')\n\n#Please modify the code to reposition the legend so that it does not cover any part of the chart. You can achieve this by adjusting the `bbox_to_anchor` parameter in the `ax.legend()` method. Try different values for `bbox_to_anchor` to find a position for the legend that is outside of the main chart area, such as at the top, bottom, or side of the chart. Ensure that the legend is clearly visible and does not overlap with the chart itself.\nax.legend(loc='upper left', bbox_to_anchor=(1.2, 1))\n\n#Make sure that each category label is correctly positioned at the center of its corresponding sector. This can be achieved by adjusting the angle parameters in the `ax.set_xticks` method. Ensure that each angle parameter corresponds to the center position of each sector, and then use `ax.set_xticklabels` to set these category labels.\nax.set_theta_direction(-1)\nax.set_theta_zero_location('N')\n\n#Drawing techniques such as background grids can be used.\nax.grid(True)\n\n#The image must be saved as ./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_130.png.\nplt.title('Number of Food and Beverage Products on the Market in 2021')\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_130.png')\n\n#Clear the current image state at the end of the code.\nplt.tight_layout()\nplt.clf()"
        },
        "QA": {
            "input": "How many more types of Dairy products are on the market compared to Seafood products?",
            "output": "50 types"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_94",
        "img": "./rose/png/rose_94.png",
        "topic": "Arts and Culture",
        "title": " Popularity of Arts and Culture Genres in 2021",
        "csv": "Genre \\t Value \\n Painting \\t 27 \\n Sculpture \\t 97 \\n Music \\t 17 \\n Literature \\t 36 \\n Dance \\t 96 \\n Theatre \\t 60 \\n Film \\t 68 \\n Architecture \\t 25 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart illustrates the popularity of various arts and culture genres in 2021. Paintings are valued at 27, while sculptures significantly higher at 97. Music is less popular, with a value of 17, whereas literature holds a value of 36. Dance is among the most popular, scoring 96, and theatre is moderately popular with a value of 60. Films are well-liked with a value of 68, while architecture stands at 25."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Painting', 'Sculpture', 'Music', 'Literature', 'Dance', 'Theatre', 'Film', 'Architecture']\ndata = [27, 97, 17, 36, 96, 60, 68, 25]\nline_labels = ['Genre', 'Number']\n\nnum_categories = len(data_labels)\nsector_angle = (2 * np.pi) / num_categories\n\n# Set up a figure\nfig = plt.figure(figsize=(8, 8))\n\n# Set up a polar axes\nax = fig.add_subplot(111, projection='polar')\n\n# Plot the data\nfor i, v in enumerate(data):\n    ax.bar(sector_angle * i, v, sector_angle, label=data_labels[i], color=plt.cm.Set1(i / num_categories))\n\n# Set up the labels\nax.set_xticks(np.linspace(0, 2 * np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels, fontsize=12, wrap=True)\n\n# Set up the legend\nax.legend(bbox_to_anchor=(1.25, 1.01), loc=\"upper right\")\nax.set_title('Popularity of Arts and Culture Genres in 2021', fontsize=14)\n\n# Resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_82.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much more popular is Theatre compared to Architecture according to the given data?",
            "output": "35"
        }
    },
    {
        "chart_type": "rose",
        "imgname": "rose_89",
        "img": "./rose/png/rose_89.png",
        "topic": "Social Sciences and Humanities",
        "title": " Popularity of Social Science and Humanities Fields in 2021",
        "csv": "Field \\t Value \\n Economics \\t 45 \\n History \\t 75 \\n Sociology \\t 30 \\n Anthropology \\t 25 \\n Geography \\t 50 \\n Political Science \\t 40 \\n Psychology \\t 20 \\n Philosophy \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The rose chart presents the popularity of various Social Science and Humanities fields in 2021 by depicting their values. Economics is marked with a value of 45, History stands out with 75, and Sociology has a value of 30. Anthropology and Philosophy have lower values, standing at 25 and 15 respectively. Geography's popularity is indicated by a value of 50, while Political Science and Psychology have values of 40 and 20."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform data into three variables\ndata_labels = ['Economics', 'History', 'Sociology', 'Anthropology', 'Geography', 'Political Science', 'Psychology', 'Philosophy']\ndata = [45, 75, 30, 25, 50, 40, 20, 15]\nline_labels = ['Field','Number']\n\n# Create figure\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111, projection='polar')\n\n# Number of categories\nnum_categories = len(data_labels)\n\n# Calculate sector angle\nsector_angle = (2 * np.pi) / num_categories\n\n# Create sectors\nfor i in range(num_categories):\n    ax.bar(i * sector_angle, data[i], width=sector_angle, label=data_labels[i])\n\n# Label the sectors\nax.set_xticks(np.linspace(0, 2 * np.pi, num_categories, endpoint=False))\nax.set_xticklabels(data_labels)\n\n# Add legend\nax.legend(bbox_to_anchor=(1.2,1.1))\n\n# Add title\nax.set_title('Popularity of Social Science and Humanities Fields in 2021')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./gpt_chart/structchart_simulation/simulated_data_corner_cases/rose/png/20231227-021234_74.png')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much more popular is History compared to Psychology?",
            "output": "55"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_46",
        "img": "./area_chart/png/area_chart_46.png",
        "topic": "Social Media and the Web",
        "title": " Social Media and the Web Usage by Category",
        "csv": "Category \\t Facebook (Posts) \\t Instagram (Posts) \\t Twitter (Posts) \\t LinkedIn (Posts) \\t YouTube (Posts) \\n Advertising \\t 100 \\t 150 \\t 120 \\t 200 \\t 250 \\n Influencers \\t 200 \\t 180 \\t 250 \\t 150 \\t 120 \\n Branding \\t 150 \\t 200 \\t 100 \\t 180 \\t 130 \\n Customer Service \\t 200 \\t 180 \\t 120 \\t 150 \\t 250 \\n Analytics \\t 130 \\t 100 \\t 150 \\t 200 \\t 180 \\n Content Creation \\t 180 \\t 120 \\t 200 \\t 150 \\t 130 \\n E-commerce \\t 150 \\t 180 \\t 130 \\t 200 \\t 100 \\n Events \\t 180 \\t 150 \\t 100 \\t 200 \\t 170 \\n Public Relations \\t 130 \\t 100 \\t 150 \\t 180 \\t 200 \\n Recruitment \\t 250 \\t 130 \\t 100 \\t 200 \\t 150 \\n Sales \\t 120 \\t 100 \\t 200 \\t 180 \\t 150 \\n Social Listening \\t 180 \\t 200 \\t 150 \\t 100 \\t 250 \\n User Engagement \\t 150 \\t 180 \\t 130 \\t 200 \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates the distribution of social media and web usage across various categories, measured by the number of posts. Advertising sees 100 Facebook posts, 150 Instagram posts, 120 Twitter posts, 200 LinkedIn posts, and 250 YouTube posts. Influencer-related content has higher activity on Twitter with 250 posts. Customer service and recruitment categories lead on YouTube with 250 posts each. Branding is strongest on Instagram with 200 posts. Analytics and E-commerce categories show a preference for LinkedIn with 200 posts each. Overall, the chart represents a diverse usage of social media platforms depending on the category of activity."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import modules\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Define data\ndata = {'Category': ['Advertising', 'Influencers', 'Branding', 'Customer Service', 'Analytics', 'Content Creation', 'E-commerce', 'Events', 'Public Relations', 'Recruitment', 'Sales', 'Social Listening', 'User Engagement'],\n        'Facebook (Posts)': [100, 200, 150, 200, 130, 180, 150, 180, 130, 250, 120, 180, 150],\n        'Instagram (Posts)': [150, 180, 200, 180, 100, 120, 180, 150, 100, 130, 100, 200, 180],\n        'Twitter (Posts)': [120, 250, 100, 120, 150, 200, 130, 100, 150, 100, 200, 150, 130],\n        'LinkedIn (Posts)': [200, 150, 180, 150, 200, 150, 200, 200, 180, 200, 180, 100, 200],\n        'YouTube (Posts)': [250, 120, 130, 250, 180, 130, 100, 170, 200, 150, 150, 250, 100]}\n\n# Convert data to dataframe\ndf = pd.DataFrame(data)\n\n# Convert first column to string type\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Calculate max total value\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\n\n# Set y limits and ticks\nax.set_ylim(0, np.ceil(max_total_value / 100) * 100)\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Plot area chart\nax.stackplot(df['Category'], df.iloc[:, 1:].T, labels=df.columns[1:], colors=['#F8766D', '#7CAE00', '#00BFC4', '#C77CFF', '#619CFF'], alpha=0.7)\n\n# Set grid lines\nax.grid(linestyle='--', alpha=0.5)\n\n# Set legend\nax.legend(loc='upper left', bbox_to_anchor=(1.02, 1))\n\n# Set x and y labels\nax.set_xlabel('Category')\nax.set_ylabel('Posts')\n\n# Set x ticks and tick labels\nax.set_xticks(np.arange(len(df.index)))\nax.set_xticklabels(df['Category'], rotation=45, ha='right', rotation_mode='anchor')\n\n# Set title\nax.set_title('Social Media and the Web Usage by Category')\n\n# Automatically adjust spacing\nfig.tight_layout()\n\n# Save figure\nfig.savefig('output/final/area_chart/png/20231228-131755_2.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which category had the highest number of YouTube posts?",
            "output": "User Engagement"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_54",
        "img": "./area_chart/png/area_chart_54.png",
        "topic": "Sports and Entertainment",
        "title": " Global Distribution of Sports Fans by Region",
        "csv": "Category \\t Baseball (Fans) \\t Soccer (Fans) \\t Basketball (Fans) \\t Hockey (Fans) \\t Football (Fans) \\n United States \\t 40 \\t 50 \\t 30 \\t 20 \\t 60 \\n Europe \\t 50 \\t 40 \\t 30 \\t 40 \\t 70 \\n Asia \\t 30 \\t 20 \\t 40 \\t 20 \\t 50 \\n Africa \\t 20 \\t 10 \\t 30 \\t 10 \\t 40 \\n South America \\t 40 \\t 30 \\t 20 \\t 30 \\t 50 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates the spread of sports fans across five regions, comparing their interests in baseball, soccer, basketball, hockey, and football. In the United States, the fan distribution is 40 for baseball, 50 for soccer, 30 for basketball, 20 for hockey, and 60 for football. Europe shows a fan base of 50 for baseball, 40 for soccer, 30 for basketball, 40 for hockey, and 70 for football. Asia has 30, 20, 40, 20, and 50 fans respectively; Africa has 20, 10, 30, 10, and 40; while South America's numbers are 40 for baseball, 30 for soccer, 20 for basketball, 30 for hockey, and 50 for football."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create a dictionary with the given data\ndata = {\"Category\": [\"United States\", \"Europe\", \"Asia\", \"Africa\", \"South America\"],\n        \"Baseball (Fans)\": [40, 50, 30, 20, 40],\n        \"Soccer (Fans)\": [50, 40, 20, 10, 30],\n        \"Basketball (Fans)\": [30, 30, 40, 30, 20],\n        \"Hockey (Fans)\": [20, 40, 20, 10, 30],\n        \"Football (Fans)\": [60, 70, 50, 40, 50]}\n\n# Convert the dictionary to a DataFrame\ndf = pd.DataFrame(data)\n\n# Convert the first column to string type\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set the figure size\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Calculate the max total value and round up to the nearest multiple of 10, 100, or 1000\nmax_total_value = np.ceil(df.iloc[:, 1:].sum(axis=1).max() / 10) * 10\n\n# Set the y-axis limits and ticks\nax.set_ylim(0, max_total_value)\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Plot the area chart\nax.stackplot(df.index, df.iloc[:, 1:].values.T, labels=df.columns[1:], colors=[\"#CDDC39\", \"#FF9800\", \"#3F51B5\", \"#673AB7\", \"#009688\"], alpha=0.7)\n\n# Set the x-axis limits and ticks\nax.set_xlim(0, len(df.index) - 1)\nax.set_xticks(df.index)\nax.set_xticklabels(df.iloc[:, 0], rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Set the grid lines\nax.grid(color=\"#BDBDBD\", linestyle=\"--\", linewidth=1, alpha=0.5)\n\n# Set the legend and its position\nax.legend(loc=\"upper left\")\n\n# Set the title\nax.set_title(\"Global Distribution of Sports Fans by Region\")\n\n# Automatically resize the image and save it\nplt.tight_layout()\nplt.savefig(\"output/final/area_chart/png/20231228-131755_3.png\", bbox_inches=\"tight\")\n\n# Clear the current figure\nplt.clf()"
        },
        "QA": {
            "input": "In which region is the number of Hockey fans equal to the number of Basketball fans?",
            "output": "Asia"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_21",
        "img": "./area_chart/png/area_chart_21.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing Efficiency and Waste Reduction",
        "csv": "Month \\t Raw Materials (ton) \\t Production Output (ton) \\t Waste (ton) \\n January \\t 100 \\t 80 \\t 10 \\n February \\t 90 \\t 85 \\t 12 \\n March \\t 110 \\t 90 \\t 15 \\n April \\t 120 \\t 95 \\t 10 \\n May \\t 115 \\t 100 \\t 13 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates the relationship between the raw materials used, the production output, and the waste generated each month in a manufacturing process. In January, 100 tons of raw materials resulted in 80 tons of output and 10 tons of waste. February saw a slight reduction in raw materials to 90 tons, with an increase in output to 85 tons and 12 tons of waste. March's numbers increased across all three categories with 110 tons of raw materials, 90 tons of output, and 15 tons of waste. April used 120 tons of raw materials, produced 95 tons, and waste remained at 10 tons. Lastly, May utilized 115 tons of raw materials, achieved the highest output at 100 tons, and produced 13 tons of waste."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport random\n\n# Define data\ndata = {'Month': ['January', 'February', 'March', 'April', 'May'],\n        'Raw Materials (ton)': [100, 90, 110, 120, 115],\n        'Production Output (ton)': [80, 85, 90, 95, 100],\n        'Waste (ton)': [10, 12, 15, 10, 13]}\n\n# Process data\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set x and y axis ticks and labels\nax.set_xticks(np.arange(0, len(df.index)))\nax.set_xticklabels(df['Month'])\nax.set_xlim(0, len(df.index) - 1)\n\n# Calculate and set y axis range and ticks\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value / 10) * 10\nax.set_ylim(0, max_total_value)\nax.set_yticks(np.linspace(0, max_total_value, random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set background grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5)\n\n# Plot area chart\nax.stackplot(df.index, df['Raw Materials (ton)'], df['Production Output (ton)'], df['Waste (ton)'],\n             labels=['Raw Materials (ton)', 'Production Output (ton)', 'Waste (ton)'],\n             colors=['#85C2D9', '#FFB08E', '#FF7F7F'], alpha=0.7)\n\n# Set legend\nax.legend(loc='upper right')\n\n# Set title and labels\nax.set_title('Manufacturing Efficiency and Waste Reduction')\nax.set_xlabel('Month')\nax.set_ylabel('Amount (ton)')\n\n# Automatically resize image and save\nfig.tight_layout()\nfig.savefig('output/final/area_chart/png/20231226-103019_5.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which month had the highest production output?",
            "output": "May"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_89",
        "img": "./area_chart/png/area_chart_89.png",
        "topic": "Food and Beverage Industry",
        "title": " Quarterly Sales of Food and Beverage Products",
        "csv": "Category \\t Alcoholic Beverages (Sales) \\t Soft Drinks (Sales) \\t Snacks (Sales) \\t Frozen Foods (Sales) \\n 1st Quarter \\t 15000 \\t 20000 \\t 25000 \\t 18000 \\n 2nd Quarter \\t 20000 \\t 22000 \\t 26000 \\t 19000 \\n 3rd Quarter \\t 18000 \\t 23000 \\t 27000 \\t 20000 \\n 4th Quarter \\t 19000 \\t 24000 \\t 28000 \\t 21000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates quarterly sales data for different food and beverage product categories. In the 1st quarter, sales are 15,000 for alcoholic beverages, 20,000 for soft drinks, 25,000 for snacks, and 18,000 for frozen foods. The 2nd quarter sees an increase across all categories, with 20,000 in alcoholic beverages, 22,000 for soft drinks, 26,000 for snacks, and 19,000 for frozen foods. Sales continue to rise into the 3rd quarter, with alcoholic beverages at 18,000, soft drinks at 23,000, snacks at 27,000, and frozen foods at 20,000. The 4th quarter sustains this upward trend."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define data as a dictionary\ndata = {'Category': ['1st Quarter', '2nd Quarter', '3rd Quarter', '4th Quarter'], 'Alcoholic Beverages (Sales)': [15000, 20000, 18000, 19000], 'Soft Drinks (Sales)': [20000, 22000, 23000, 24000], 'Snacks (Sales)': [25000, 26000, 27000, 28000], 'Frozen Foods (Sales)': [18000, 19000, 20000, 21000]}\n\n# Create dataframe from data\ndf = pd.DataFrame(data)\n\n# Convert first column to string type\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(12,8))\n\n# Calculate max total value\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\n\n# Round up max total value to nearest multiple of 100\nif max_total_value < 100:\n    max_total_value = np.ceil(max_total_value / 10) * 10\nelif max_total_value < 1000:\n    max_total_value = np.ceil(max_total_value / 100) * 100\nelse:\n    max_total_value = np.ceil(max_total_value / 1000) * 1000\n\n# Set y limits and ticks\nax.set_ylim(0, max_total_value)\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Plot data as stacked area chart\nax.stackplot(df.iloc[:, 0], df.iloc[:, 1:].T, labels=df.iloc[:, 1:].columns, colors=['#3498db','#f1c40f','#e74c3c','#9b59b6'], alpha=0.7)\n\n# Set x ticks and labels\nax.set_xticks(np.arange(len(df.index)))\nax.set_xticklabels(df.iloc[:, 0])\n\n# Rotate x-tick labels by 45 degrees\nplt.xticks(rotation=45, ha='right', rotation_mode='anchor')\n\n# Set grid lines\nax.grid(linestyle='--', alpha=0.3)\n\n# Set legend\nax.legend(loc='upper left', bbox_to_anchor=(1.05, 1))\n\n# Set title\nplt.title('Quarterly Sales of Food and Beverage Products')\n\n# Automatically resize figure\nplt.tight_layout()\n\n# Save figure\nplt.savefig('output/final/area_chart/png/20231228-131755_72.png', bbox_inches='tight')\n\n# Clear current figure\nplt.clf()"
        },
        "QA": {
            "input": "Which product category had the lowest sales in the 4th Quarter?",
            "output": "Alcoholic Beverages"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_78",
        "img": "./area_chart/png/area_chart_78.png",
        "topic": "Social Media and the Web",
        "title": " Social Media Usage by Industry Categories",
        "csv": "Category \\t Facebook (Users) \\t Instagram (Users) \\t Twitter (Users) \\t LinkedIn (Users) \\t YouTube (Users) \\n Advertising \\t 200 \\t 180 \\t 150 \\t 130 \\t 100 \\n Influencers \\t 100 \\t 120 \\t 150 \\t 100 \\t 200 \\n E-commerce \\t 150 \\t 180 \\t 200 \\t 150 \\t 250 \\n Brand Awareness \\t 100 \\t 200 \\t 250 \\t 180 \\t 150 \\n Customer Engagement \\t 200 \\t 180 \\t 150 \\t 130 \\t 100 \\n Content Creation \\t 150 \\t 200 \\t 100 \\t 250 \\t 120 \\n Analytics \\t 180 \\t 150 \\t 100 \\t 200 \\t 170 \\n Customer Service \\t 130 \\t 100 \\t 150 \\t 180 \\t 200 \\n News and Updates \\t 250 \\t 130 \\t 100 \\t 200 \\t 150 \\n Event Promotion \\t 120 \\t 100 \\t 200 \\t 180 \\t 150 \\n Social Listening \\t 180 \\t 200 \\t 150 \\t 100 \\t 250 \\n Community Management \\t 150 \\t 180 \\t 130 \\t 200 \\t 100 \\n Social Media Strategy \\t 120 \\t 150 \\t 200 \\t 170 \\t 130 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This area chart illustrates the social media usage by industry categories, showing user counts across various platforms: Facebook, Instagram, Twitter, LinkedIn, and YouTube. Categories include Advertising, Influencers, E-commerce, Brand Awareness, Customer Engagement, Content Creation, Analytics, Customer Service, News and Updates, Event Promotion, Social Listening, Community Management, and Social Media Strategy. Facebook often sees high usage, with 200 users in Advertising and Customer Engagement. Instagram peaks at 200 for Brand Awareness and Social Listening. Twitter's highest usage is 250 for Brand Awareness. LinkedIn emphasizes Content Creation with 250 users, and YouTube has 250 users in E-commerce and Social Listening."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Solution\n\n# import necessary modules\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# define the data\ndata = {'Category': ['Advertising', 'Influencers', 'E-commerce', 'Brand Awareness', 'Customer Engagement', 'Content Creation', 'Analytics', 'Customer Service', 'News and Updates', 'Event Promotion', 'Social Listening', 'Community Management', 'Social Media Strategy'], \n        'Facebook (Users)': [200, 100, 150, 100, 200, 150, 180, 130, 250, 120, 180, 150, 120], \n        'Instagram (Users)': [180, 120, 180, 200, 180, 200, 150, 100, 130, 100, 200, 180, 150], \n        'Twitter (Users)': [150, 150, 200, 250, 150, 100, 100, 150, 100, 200, 150, 130, 200], \n        'LinkedIn (Users)': [130, 100, 150, 180, 130, 250, 200, 180, 200, 180, 100, 200, 170], \n        'YouTube (Users)': [100, 200, 250, 150, 100, 120, 170, 200, 150, 150, 250, 100, 130]}\n\n# convert data to pandas dataframe\ndf = pd.DataFrame(data)\n\n# convert first column to string type\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# set figure size\nfig, ax = plt.subplots(figsize=(10,6))\n\n# stackplot the data\nax.stackplot(df.index, \n             df.iloc[:, 1], \n             df.iloc[:, 2], \n             df.iloc[:, 3], \n             df.iloc[:, 4], \n             df.iloc[:, 5], \n             labels=['Facebook', 'Instagram', 'Twitter', 'LinkedIn', 'YouTube'], \n             colors=['#3b5998', '#e4405f', '#1da1f2', '#0077b5', '#c4302b'], \n             alpha=0.8)\n\n# randomly set background grid lines\nax.grid(color='#CCCCCC', linestyle=':', linewidth=0.5)\n\n# set x and y axis labels\nax.set_xlabel('Categories')\nax.set_ylabel('Number of Users')\n\n# set x and y axis ticks and ticklabels\nif np.random.choice([True, False], p=[0.7, 0.3]):\n    ax.set_xticks(df.index)\n    ax.set_xticklabels(df['Category'], rotation=45, ha='right', rotation_mode='anchor')\n    max_total_value = df.iloc[:, 1:].sum(axis=1).max()\n    ax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\nelse:\n    ax.set_xticks([])\n    ax.set_yticks([])\n\n# set suitable y axis range\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nif max_total_value <= 10:\n    ax.set_ylim(0, 10)\nelif max_total_value <= 100:\n    ax.set_ylim(0, np.ceil(max_total_value/10)*10)\nelif max_total_value <= 1000:\n    ax.set_ylim(0, np.ceil(max_total_value/100)*100)\n\n# set legend\nax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n\n# set title\nax.set_title('Social Media Usage by Industry Categories')\n\n# automatically resize the image\nfig.tight_layout()\n\n# save the image\nfig.savefig('output/final/area_chart/png/20231228-131755_60.png', bbox_inches='tight')\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many users are there for the Influencers category across all social media platforms according to the dataset?",
            "output": "670"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_179",
        "img": "./area_chart/png/area_chart_179.png",
        "topic": "Tourism and Hospitality",
        "title": " Available Accommodations by Type from 2019 to 2023",
        "csv": "Year \\t Hotel Rooms (Available) \\t Airbnb Listings (Available) \\t Vacation Rentals (Available) \\t Hostels (Available) \\t Bed & Breakfast (Available) \\n 2019 \\t 1000 \\t 1200 \\t 500 \\t 200 \\t 100 \\n 2020 \\t 950 \\t 1100 \\t 550 \\t 250 \\t 120 \\n 2021 \\t 900 \\t 1000 \\t 600 \\t 300 \\t 130 \\n 2022 \\t 850 \\t 900 \\t 650 \\t 350 \\t 140 \\n 2023 \\t 800 \\t 800 \\t 700 \\t 400 \\t 150 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart visualizes data on various types of available accommodations from 2019 to 2023. It shows a declining trend in available hotel rooms, with numbers decreasing from 1000 in 2019 to 800 in 2023. Airbnb listings also decrease from 1200 in 2019 to 800 in 2023. Conversely, there is a gradual increase in available vacation rentals, hostels, and bed & breakfast options over the same period, with vacation rentals increasing from 500 to 700, hostels from 200 to 400, and bed & breakfasts from 100 to 150."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import required modules\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Define data as dictionary\ndata = {'Year': [2019, 2020, 2021, 2022, 2023], \n        'Hotel Rooms (Available)': [1000, 950, 900, 850, 800],\n        'Airbnb Listings (Available)': [1200, 1100, 1000, 900, 800],\n        'Vacation Rentals (Available)': [500, 550, 600, 650, 700],\n        'Hostels (Available)': [200, 250, 300, 350, 400],\n        'Bed & Breakfast (Available)': [100, 120, 130, 140, 150]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size and create subplots\nfig, ax = plt.subplots(figsize=(10,6))\n\n# Plot area chart\nax.stackplot(df['Year'], df['Hotel Rooms (Available)'], df['Airbnb Listings (Available)'], df['Vacation Rentals (Available)'], df['Hostels (Available)'], df['Bed & Breakfast (Available)'], labels=['Hotel Rooms', 'Airbnb Listings', 'Vacation Rentals', 'Hostels', 'Bed & Breakfast'], colors=['#253494', '#41b6c4', '#a1dab4', '#fed976', '#e31a1c'], alpha=0.8)\n\n# Set x and y-axis ticks and labels\nax.set_xticks(df.index)\nax.set_xticklabels(df['Year'], rotation=45, ha='right', rotation_mode='anchor')\nax.set_xlim(0, len(df.index) - 1)\n\n# Calculate max total value and set suitable y-axis ticks and range\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nif max_total_value <= 100:\n    yticks = [0, 50, 100]\nelse:\n    yticks = np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32)\nax.set_ylim(0, max_total_value)\nax.set_yticks(yticks)\n\n# Set background grid lines\nax.grid(axis='y', linestyle='--', linewidth=0.5)\n\n# Set legend and its position\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(reversed(handles), reversed(labels), loc='upper left')\n\n# Set title and labels\nax.set_title('Available Accommodations by Type from 2019 to 2023')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Available Accommodations')\n\n# Automatically resize image and save as png\nplt.tight_layout()\nplt.savefig('output/final/area_chart/png/20231228-145339_1.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more vacation rentals were available in 2023 compared to 2019?",
            "output": "200"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_23",
        "img": "./area_chart/png/area_chart_23.png",
        "topic": "Real Estate and Housing Market",
        "title": " Housing Sales Trends by Property Type from 2019 to 2023",
        "csv": "Year \\t Single Family Home Sales (Units) \\t Condo Sales (Units) \\t Multi-Family Home Sales (Units) \\t New Construction Sales (Units) \\n 2019 \\t 800 \\t 500 \\t 200 \\t 300 \\n 2020 \\t 750 \\t 550 \\t 250 \\t 350 \\n 2021 \\t 700 \\t 600 \\t 300 \\t 400 \\n 2022 \\t 650 \\t 650 \\t 350 \\t 450 \\n 2023 \\t 600 \\t 700 \\t 400 \\t 500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates the housing sales trends by property type from 2019 to 2023. It shows the sales of single-family homes starting at 800 units in 2019 and gradually decreasing to 600 units in 2023. Condo sales begin at 500 units and steadily increase to 700 units. Multi-family home sales grow from 200 units to 400 units over the five years. New construction sales also display an upward trend, rising from 300 units in 2019 to 500 units in 2023."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n#\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# create dictionary\ndata = {'Year': [2019, 2020, 2021, 2022, 2023],\n        'Single Family Home Sales (Units)': [800, 750, 700, 650, 600],\n        'Condo Sales (Units)': [500, 550, 600, 650, 700],\n        'Multi-Family Home Sales (Units)': [200, 250, 300, 350, 400],\n        'New Construction Sales (Units)': [300, 350, 400, 450, 500]}\n\n# convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# set figure size\nfig = plt.figure(figsize=(12, 8), dpi=80)\n\n# plot area chart\nax = fig.add_subplot(111)\nax.stackplot(df['Year'], df['Single Family Home Sales (Units)'],\n             df['Condo Sales (Units)'], df['Multi-Family Home Sales (Units)'],\n             df['New Construction Sales (Units)'], colors=['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c'], alpha=0.7)\n\n# set x and y ticks and ticklabels\nif np.random.random() < 0.7:\n    ax.set_xticks(np.arange(len(df['Year'])))\n    ax.set_xticklabels(df['Year'])\nif np.random.random() < 0.7:\n    # set rotation and wrap for longer labels\n    ax.set_xticklabels(df['Year'], rotation=45, ha='right', rotation_mode='anchor', wrap=True)\nif np.random.random() < 0.7:\n    ax.set_yticks(np.linspace(0, np.ceil(df.iloc[:, 1:].sum(axis=1).max()), np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# set ylimit\nmax_total_value = np.ceil(df.iloc[:, 1:].sum(axis=1).max())\nif max_total_value <= 10:\n    ax.set_ylim(0, max_total_value)\nelif 10 < max_total_value <= 100:\n    ax.set_ylim(0, np.ceil(max_total_value / 10) * 10)\nelif 100 < max_total_value <= 1000:\n    ax.set_ylim(0, np.ceil(max_total_value / 100) * 100)\n\n# randomly set background grid lines\nif np.random.random() < 0.5:\n    ax.grid(color='grey', linestyle='-', linewidth=0.5, alpha=0.3)\n\n# set legend\nax.legend(['Single Family Home Sales', 'Condo Sales', 'Multi-Family Home Sales', 'New Construction Sales'], loc='upper right')\n\n# set title and labels\nax.set_title('Housing Sales Trends by Property Type from 2019 to 2023')\nax.set_xlabel('Year')\nax.set_ylabel('Sales (Units)')\n\n# automatically resize image\nfig.tight_layout()\n\n# save figure\nfig.savefig('output/final/area_chart/png/20231226-103019_7.png', bbox_inches='tight')\n\n# clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which type of property had the highest increase in sales units from 2019 to 2023?",
            "output": "Condo Sales"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_100",
        "img": "./area_chart/png/area_chart_100.png",
        "topic": "Government and Public Policy",
        "title": " Government Legislation and Public Opinion Analysis",
        "csv": "Year \\t Legislation Passed \\t Public Opinion (Support) \\t Public Opinion (Opposition) \\n 2016 \\t 50% \\t 60% \\t 40% \\n 2017 \\t 55% \\t 70% \\t 30% \\n 2018 \\t 60% \\t 65% \\t 35% \\n 2019 \\t 65% \\t 75% \\t 25% \\n 2020 \\t 70% \\t 80% \\t 20% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates the trend of government legislation passed and public opinion from 2016 to 2020. It shows percentage data for legislation passed and public opinion in support and opposition. In 2016, 50% of legislation was passed with 60% support and 40% opposition. By 2017, legislation passed increased to 55%, with support at 70% and opposition at 30%. The trend continues with 2018 seeing 60% legislation passed, 65% support, and 35% opposition. In 2019, 65% of legislation passed, with a notable 75% support and only 25% opposition. The year 2020 marks the highest percentages, with 70% legislation passed, 80% public support, and the lowest opposition at 20%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Convert data to dictionary and process with pandas\ndata = {'Year': [2016, 2017, 2018, 2019, 2020],\n        'Legislation Passed': [50, 55, 60, 65, 70],\n        'Public Opinion (Support)': [60, 70, 65, 75, 80],\n        'Public Opinion (Opposition)': [40, 30, 35, 25, 20]}\n\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Calculate max total value and set y-axis ticks and labels\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value / 10) * 10\nyticks = np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32)\nax.set_yticks(yticks)\n\n# Plot the data as an area chart\nax.stackplot(df['Year'], df['Legislation Passed'], df['Public Opinion (Support)'], df['Public Opinion (Opposition)'], labels=['Legislation Passed', 'Public Opinion (Support)', 'Public Opinion (Opposition)'], colors=['#78D5E3', '#7FACD6', '#E88471'], alpha=0.7)\n\n# Set x-axis limits and labels\nax.set_xlim(0, len(df.index) - 1)\nax.set_xticks(range(len(df['Year'])))\nax.set_xticklabels(df['Year'], rotation=45, ha='right', rotation_mode='anchor')\n\n# Set grid lines\nax.grid(color='#AAAAAA', linestyle='--')\n\n# Set legend\nax.legend(loc='upper left')\n\n# Set title\nax.set_title('Government Legislation and Public Opinion Analysis')\n\n# Automatically resize image and save\nfig.tight_layout()\nplt.savefig('output/final/area_chart/png/20231228-131755_90.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "In what year did the legislation passed reach 60%?",
            "output": "2018"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_86",
        "img": "./area_chart/png/area_chart_86.png",
        "topic": "Law and Legal Affairs",
        "title": " Lawsuits by Law Firm and Case Type",
        "csv": "Category \\t Litigation (Cases) \\t Contracts (Cases) \\t Intellectual Property (Cases) \\t Criminal (Cases) \\t Employment (Cases) \\t Real Estate (Cases) \\t Immigration (Cases) \\t Family (Cases) \\n Law Firm A \\t 100 \\t 80 \\t 50 \\t 30 \\t 60 \\t 40 \\t 20 \\t 10 \\n Law Firm B \\t 80 \\t 50 \\t 40 \\t 25 \\t 70 \\t 20 \\t 15 \\t 5 \\n Law Firm C \\t 60 \\t 40 \\t 30 \\t 20 \\t 50 \\t 10 \\t 5 \\t 5 \\n Law Firm D \\t 50 \\t 30 \\t 20 \\t 10 \\t 40 \\t 10 \\t 5 \\t 0 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates the distribution of cases handled by four different law firms across eight legal categories. Law Firm A reported 100 litigation, 80 contract, 50 intellectual property, 30 criminal, 60 employment, 40 real estate, 20 immigration, and 10 family cases. Law Firm B engaged in 80 litigation, 50 contract, 40 intellectual property, 25 criminal, 70 employment, 20 real estate, 15 immigration, and 5 family cases. Law Firm C had 60 litigation, 40 contract, 30 intellectual property, 20 criminal, 50 employment, 10 real estate, 5 immigration, and 5 family cases. Lastly, Law Firm D dealt with 50 litigation, 30 contract, 20 intellectual property, 10 criminal, 40 employment, 10 real estate, 5 immigration, and no family cases."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define data dictionary\ndata = {'Category': ['Litigation (Cases)', 'Contracts (Cases)', 'Intellectual Property (Cases)', 'Criminal (Cases)', 'Employment (Cases)', 'Real Estate (Cases)', 'Immigration (Cases)', 'Family (Cases)'],\n        'Law Firm A': [100, 80, 50, 30, 60, 40, 20, 10],\n        'Law Firm B': [80, 50, 40, 25, 70, 20, 15, 5],\n        'Law Firm C': [60, 40, 30, 20, 50, 10, 5, 5],\n        'Law Firm D': [50, 30, 20, 10, 40, 10, 5, 0]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nplt.figure(figsize=(10, 6))\n\n# Plot the chart using ax.stackplot method\nax = plt.subplot(111)\nax.stackplot(df['Category'], df.iloc[:, 1:].values.T, labels=df.columns[1:], colors=['#4e79a7', '#f28e2c', '#e15759', '#76b7b2'], alpha=0.7)\n\n# Set x-axis and y-axis labels\nax.set_xlabel('Case Type')\nax.set_ylabel('Number of Lawsuits')\n\n# Set title\nplt.title('Lawsuits by Law Firm and Case Type')\n\n# Set ticks and ticklabels\nif np.random.rand() < 0.7:\n    ax.set_xticks(np.arange(len(df['Category'])))\n    ax.set_xticklabels(df['Category'], rotation=45, ha='right', rotation_mode='anchor')\n    ax.set_xlim(0, len(df['Category']) - 1)\nif np.random.rand() < 0.7:\n    max_total_value = df.iloc[:, 1:].sum(axis=1).max()\n    max_total_value = np.ceil(max_total_value / 100) * 100\n    ax.set_ylim(0, max_total_value)\n    ax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set background grid lines\nax.grid(linestyle='--', linewidth=0.5, alpha=0.5)\n\n# Set legend and adjust its position\nax.legend(loc='upper left', bbox_to_anchor=(1.0, 1.0))\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('output/final/area_chart/png/20231228-131755_7.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more Litigation cases does Law Firm A handle than Law Firm D?",
            "output": "50 cases"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_272",
        "img": "./area_chart/png/area_chart_272.png",
        "topic": "Business and Finance",
        "title": " Quarterly Financial Performance in 2020",
        "csv": "2020 \\t Revenue ($) \\t Expenses ($) \\t Profit ($) \\n Q1 \\t 5000 \\t 4000 \\t 1000 \\n Q2 \\t 5200 \\t 4100 \\t 1100 \\n Q3 \\t 4500 \\t 4900 \\t 400 \\n Q4 \\t 5100 \\t 3500 \\t 1600 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart outlines the quarterly financial performance in 2020, showing Revenue ($), Expenses ($), and Profit ($) for each quarter. Q1 reports a revenue of $5000, expenses of $4000, and profit of $1000. In Q2, revenue increased to $5200 with expenses at $4100, resulting in a profit of $1100. Q3 saw a decrease in revenue to $4500 against expenses of $4900, leading to a lower profit of $400. Q4 rebounded with revenue of $5100 and reduced expenses of $3500, achieving the highest profit of $1600 for the year."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# create dictionary for data\ndata = {'2020': ['Q1', 'Q2', 'Q3', 'Q4'],\n        'Revenue ($)': [5000, 5200, 4500, 5100],\n        'Expenses ($)': [4000, 4100, 4900, 3500],\n        'Profit ($)': [1000, 1100, 400, 1600]}\n\n# process data with pandas\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# set figure size\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# create stacked area chart\nax.stackplot(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], labels=['Revenue', 'Expenses', 'Profit'],\n             colors=['#1f77b4', '#ff7f0e', '#2ca02c'], alpha=0.7)\n\n# randomly set background grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.3)\n\n# set x and y axis ticks and ticklabels with 70% probability\nif np.random.choice([True, False], p=[0.7, 0.3]):\n    ax.set_xticks(np.arange(0, len(df.index)))\n    ax.set_xticklabels(df.iloc[:, 0], rotation=45, ha='right', rotation_mode='anchor', fontsize=12)\n    ax.set_xlim(0, len(df.index) - 1)\nif np.random.choice([True, False], p=[0.7, 0.3]):\n    max_total_value = df.iloc[:, 1:].sum(axis=1).max()\n    # ceil max_total_value up to the nearest multiple of 10, 100 or 1000\n    if max_total_value < 100:\n        max_total_value = np.ceil(max_total_value / 10) * 10\n    elif max_total_value < 1000:\n        max_total_value = np.ceil(max_total_value / 100) * 100\n    else:\n        max_total_value = np.ceil(max_total_value / 1000) * 1000\n    # set yticks with length in list of [3, 5, 7, 9, 11]\n    ax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n    # set yticklabels with wrap=true for longer strings\n    if max_total_value < 1000:\n        ax.set_yticklabels(np.arange(0, max_total_value + 1, max_total_value / len(ax.get_yticks())).astype(int),\n                           rotation=0, ha='right', rotation_mode='anchor', fontsize=12, wrap=True)\n    else:\n        ax.set_yticklabels(np.arange(0, max_total_value + 1, max_total_value / len(ax.get_yticks())).astype(int),\n                           rotation=0, ha='right', rotation_mode='anchor', fontsize=12)\n    # set ylim with max_total_value\n    ax.set_ylim(0, max_total_value)\n\n# set legend and legend title\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=3, fontsize=12, frameon=False, title='Performance')\nax.get_legend().get_title().set_fontsize('14')\n\n# set title\nax.set_title('Quarterly Financial Performance in 2020', fontsize=16)\n\n# automatically resize image and save\nfig.tight_layout()\nplt.savefig('output/final/area_chart/png/20231228-155112_35.png', bbox_inches='tight')\n\n# clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which quarter in 2020 had the highest profit?",
            "output": "Q4"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_101",
        "img": "./area_chart/png/area_chart_101.png",
        "topic": "Education and Academics",
        "title": " Education and Academics Statistics",
        "csv": "Field \\t Students \\t Graduates \\t Professors \\n Business \\t 100 \\t 80 \\t 30 \\n Engineering \\t 120 \\t 100 \\t 40 \\n Medicine \\t 150 \\t 120 \\t 50 \\n Law \\t 200 \\t 150 \\t 60 \\n Psychology \\t 180 \\t 140 \\t 80 \\n Literature \\t 160 \\t 100 \\t 70 \\n Science \\t 100 \\t 80 \\t 30 \\n History \\t 130 \\t 90 \\t 40 \\n Education \\t 220 \\t 180 \\t 90 \\n Computer Science \\t 190 \\t 150 \\t 70 \\n Art \\t 140 \\t 90 \\t 50 \\n Music \\t 120 \\t 60 \\t 30 \\n Economics \\t 180 \\t 140 \\t 60 \\n Mathematics \\t 150 \\t 110 \\t 70 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates education data across various fields, showing students, graduates, and professors. Business has 100 students, 80 graduates, and 30 professors, while Engineering shows 120 students, 100 graduates, and 40 professors. Medicine, Law, Psychology, Literature, Science, History, Education, Computer Science, Art, Music, Economics, and Mathematics also display varying numbers of students, graduates, and professors. The values range from 100 to 220 students, 60 to 180 graduates, and 30 to 90 professors across the fields."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define data as dictionary\ndata = {'Field': ['Business', 'Engineering', 'Medicine', 'Law', 'Psychology', 'Literature', 'Science', 'History', 'Education', 'Computer Science', 'Art', 'Music', 'Economics', 'Mathematics'], 'Students': [100, 120, 150, 200, 180, 160, 100, 130, 220, 190, 140, 120, 180, 150], 'Graduates': [80, 100, 120, 150, 140, 100, 80, 90, 180, 150, 90, 60, 140, 110], 'Professors': [30, 40, 50, 60, 80, 70, 30, 40, 90, 70, 50, 30, 60, 70]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figsize\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Calculate max total value and set ylimit and yticks\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nif max_total_value < 100:\n    ylimit = 10 * np.ceil(max_total_value / 10)\nelif max_total_value < 1000:\n    ylimit = 100 * np.ceil(max_total_value / 100)\nelse:\n    ylimit = 1000 * np.ceil(max_total_value / 1000)\nax.set_ylim(0, ylimit)\nax.set_yticks(np.linspace(0, ylimit, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Plot area chart\nax.stackplot(df.index, df['Students'], df['Graduates'], df['Professors'], labels=['Students', 'Graduates', 'Professors'], colors=['#4C72B0', '#55A868', '#C44E52'], alpha=0.8)\n\n# Set xticks and xticklabels\nax.set_xlim(0, len(df.index) - 1)\nax.set_xticks(df.index)\nax.set_xticklabels(df['Field'], rotation=45, ha='right', rotation_mode='anchor', wrap=True)\n\n# Set background grid lines\nax.grid(True, ls='--', alpha=0.5)\n\n# Set title and legend\nplt.title('Education and Academics Statistics')\nax.legend(loc='upper right')\n\n# Automatically resize image and save\nfig.tight_layout()\nplt.savefig('output/final/area_chart/png/20231228-131755_92.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more students are there in Education compared to Computer Science?",
            "output": "30"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_69",
        "img": "./area_chart/png/area_chart_69.png",
        "topic": "Real Estate and Housing Market",
        "title": " Housing Market Trends in 2018",
        "csv": "2018 \\t Single Family Homes ($) \\t Condos ($) \\t Townhomes ($) \\t Apartments ($) \\n January \\t 500000 \\t 300000 \\t 250000 \\t 200000 \\n February \\t 480000 \\t 310000 \\t 240000 \\t 210000 \\n March \\t 520000 \\t 320000 \\t 230000 \\t 220000 \\n April \\t 530000 \\t 330000 \\t 240000 \\t 190000 \\n May \\t 550000 \\t 350000 \\t 260000 \\t 180000 \\n June \\t 570000 \\t 360000 \\t 270000 \\t 170000 \\n July \\t 590000 \\t 370000 \\t 280000 \\t 160000 \\n August \\t 600000 \\t 380000 \\t 290000 \\t 150000 \\n September \\t 580000 \\t 390000 \\t 300000 \\t 140000 \\n October \\t 560000 \\t 400000 \\t 310000 \\t 130000 \\n November \\t 540000 \\t 410000 \\t 320000 \\t 120000 \\n December \\t 520000 \\t 420000 \\t 330000 \\t 110000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates housing market trends in 2018, showing the average sales prices of single-family homes, condos, townhomes, and apartments each month. January starts with single-family homes at $500,000, condos at $300,000, townhomes at $250,000, and apartments at $200,000. Prices generally trend upward throughout the year, with peaks in August for single-family homes at $600,000, condos at $380,000, and townhomes at $290,000, while apartment prices peak in March at $220,000 before declining to December lows of $520,000, $420,000, $330,000, and $110,000, respectively, for the four property types."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create dictionary with data\ndata = {\"2018\": [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\",\n                 \"September\", \"October\", \"November\", \"December\"],\n        \"Single Family Homes ($)\": [500000, 480000, 520000, 530000, 550000, 570000, 590000, 600000, 580000, 560000, 540000, 520000],\n        \"Condos ($)\": [300000, 310000, 320000, 330000, 350000, 360000, 370000, 380000, 390000, 400000, 410000, 420000],\n        \"Townhomes ($)\": [250000, 240000, 230000, 240000, 260000, 270000, 280000, 290000, 300000, 310000, 320000, 330000],\n        \"Apartments ($)\": [200000, 210000, 220000, 190000, 180000, 170000, 160000, 150000, 140000, 130000, 120000, 110000]}\n\n# Process data using pandas\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot area chart with stacked data\nax.stackplot(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], df.iloc[:, 4],\n             labels=[\"Single Family Homes\", \"Condos\", \"Townhomes\", \"Apartments\"],\n             colors=[\"#FFA07A\", \"#87CEFA\", \"#90EE90\", \"#FFDAB9\"],\n             alpha=0.8)\n\n# Set x and y axis ticks and labels\nif np.random.random() < 0.7:\n    ax.set_xticks(np.arange(len(df.iloc[:, 0])))\n    ax.set_xticklabels(df.iloc[:, 0], rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n    ax.set_xlim(0, len(df.index) - 1)\n    ax.set_yticks(np.linspace(0, np.ceil(df.iloc[:, 1:].sum(axis=1).max()), np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set background grid lines\nax.grid(alpha=0.2)\n\n# Set title and legend\nax.set_title(\"Housing Market Trends in 2018\")\nax.legend(loc=\"upper left\")\n\n# Automatically resize image\nfig.tight_layout()\n\n# Save figure\nfig.savefig(\"output/final/area_chart/png/20231228-131755_50.png\", bbox_inches=\"tight\")\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "In which month was the price difference between Single Family Homes and Apartments the greatest in 2018?",
            "output": "August"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_174",
        "img": "./area_chart/png/area_chart_174.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare Visits by Type and Quarter in 2017",
        "csv": "2017 \\t Primary Care Visits \\t Specialty Care Visits \\t Emergency Visits \\t Inpatient Visits \\t Outpatient Visits \\n Q1 \\t 200 \\t 150 \\t 180 \\t 130 \\t 250 \\n Q2 \\t 100 \\t 120 \\t 150 \\t 100 \\t 200 \\n Q3 \\t 150 \\t 180 \\t 200 \\t 150 \\t 250 \\n Q4 \\t 100 \\t 200 \\t 250 \\t 180 \\t 150 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart represents healthcare visits by type for each quarter of 2017. In Q1, there were 200 primary care, 150 specialty care, 180 emergency, 130 inpatient, and 250 outpatient visits. Q2 saw a decline with 100 primary, 120 specialty, 150 emergency, 100 inpatient, and 200 outpatient visits. Q3's figures increased to 150 primary, 180 specialty, 200 emergency, 150 inpatient, and 250 outpatient visits. Lastly, Q4 had 100 primary care, 200 specialty care, 250 emergency, 180 inpatient, and 150 outpatient visits."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Create dictionary for data\ndata = {'2017': ['Q1', 'Q2', 'Q3', 'Q4'],\n        'Primary Care Visits': [200, 100, 150, 100],\n        'Specialty Care Visits': [150, 120, 180, 200],\n        'Emergency Visits': [180, 150, 200, 250],\n        'Inpatient Visits': [130, 100, 150, 180],\n        'Outpatient Visits': [250, 200, 250, 150]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot area chart\nax.stackplot(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], df.iloc[:, 4], df.iloc[:, 5], labels=['Primary Care Visits', 'Specialty Care Visits', 'Emergency Visits', 'Inpatient Visits', 'Outpatient Visits'], colors=['#6bb9f0', '#ff9e3c', '#ff6e83', '#b3b3b3', '#6a6a6a'], alpha=0.8)\n\n# Set x and y limits\nax.set_xlim(0, len(df.index) - 1)\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value/10)*10\nax.set_ylim(0, max_total_value)\n\n# Set ticks and tick labels for x and y axis\nif np.random.choice([True, False], p=[0.7, 0.3]):\n    ax.set_xticks(np.arange(0, len(df.index)))\n    ax.set_xticklabels(df.iloc[:, 0], rotation=45, ha='right', rotation_mode='anchor')\nif np.random.choice([True, False], p=[0.7, 0.3]):\n    ax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set grid lines\nax.grid(ls=':', alpha=0.5)\n\n# Set legend\nax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n\n# Set title\nax.set_title('Healthcare Visits by Type and Quarter in 2017')\n\n# Automatically resize image\nfig.tight_layout()\n\n# Save figure\nfig.savefig('output/final/area_chart/png/20231228-140159_95.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "How many inpatient visits were there in Q4 of 2017?",
            "output": "180"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_62",
        "img": "./area_chart/png/area_chart_62.png",
        "topic": "Real Estate and Housing Market",
        "title": " Housing Market Trends by State",
        "csv": "Category \\t Single Family Homes (Units) \\t Multi-Family Homes (Units) \\t Apartments (Units) \\t Condos (Units) \\t Townhouses (Units) \\n California \\t 20000 \\t 15000 \\t 30000 \\t 25000 \\t 10000 \\n New York \\t 15000 \\t 10000 \\t 20000 \\t 25000 \\t 8000 \\n Florida \\t 25000 \\t 20000 \\t 35000 \\t 30000 \\t 12000 \\n Texas \\t 30000 \\t 25000 \\t 40000 \\t 35000 \\t 15000 \\n Illinois \\t 20000 \\t 15000 \\t 25000 \\t 20000 \\t 10000 \\n Pennsylvania \\t 15000 \\t 10000 \\t 20000 \\t 15000 \\t 8000 \\n Ohio \\t 25000 \\t 20000 \\t 30000 \\t 25000 \\t 12000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates housing market trends by state, detailing unit numbers for single and multi-family homes, apartments, condos, and townhouses. California leads with 30,000 apartment units, whereas Florida and Texas follow with 35,000 and 40,000 units, respectively. For single-family homes, Texas has the highest at 30,000 units, and Ohio ties with Florida at 25,000 units. Condos are most plentiful in Texas with 35,000 units. New York and Pennsylvania have lower counts across all categories when compared to the other states presented."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Solution\n\n# Import required libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create dictionary to represent data\ndata = {'Category': ['California', 'New York', 'Florida', 'Texas', 'Illinois', 'Pennsylvania', 'Ohio'],\n        'Single Family Homes (Units)': [20000, 15000, 25000, 30000, 20000, 15000, 25000],\n        'Multi-Family Homes (Units)': [15000, 10000, 20000, 25000, 15000, 10000, 20000],\n        'Apartments (Units)': [30000, 20000, 35000, 40000, 25000, 20000, 30000],\n        'Condos (Units)': [25000, 25000, 30000, 35000, 20000, 15000, 25000],\n        'Townhouses (Units)': [10000, 8000, 12000, 15000, 10000, 8000, 12000]\n        }\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig = plt.figure(figsize=(10, 6))\n\n# Set background color and grid lines\nax = plt.gca()\nax.set_facecolor('#f4f4f4')\nax.grid(color='white', linestyle='-', linewidth=1, alpha=0.5)\n\n# Calculate max total value\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\n# Round up to the nearest multiple of 10, 100 or 1000\nif max_total_value < 100:\n    max_total_value = 100\nelif max_total_value < 1000:\n    max_total_value = 1000\nelse:\n    max_total_value = np.ceil(max_total_value / 1000) * 1000\n\n# Set x and y axis ticks and ticklabels\nax.set_xlim(0, len(df.index) - 1)\nax.set_xticks(np.arange(len(df.index)))\nax.set_xticklabels(df.iloc[:, 0], rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set colors and transparency\ncolors = ['#d7191c', '#fdae61', '#ffffbf', '#abdda4', '#2b83ba']\nalpha = 0.8\n\n# Plot the data with area chart\nax.stackplot(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], df.iloc[:, 4], df.iloc[:, 5],\n             labels=['Single Family Homes (Units)', 'Multi-Family Homes (Units)', 'Apartments (Units)',\n                     'Condos (Units)', 'Townhouses (Units)'], colors=colors, alpha=alpha)\n\n# Set legend position and labels\nax.legend(loc='upper left', bbox_to_anchor=(1, 1))\nax.set_ylabel('Housing Units')\n\n# Set title\nax.set_title('Housing Market Trends by State')\n\n# Automatically resize image and save\nplt.tight_layout()\nplt.savefig('output/final/area_chart/png/20231228-131755_43.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which state has the least number of condos?",
            "output": "Pennsylvania"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_12",
        "img": "./area_chart/png/area_chart_12.png",
        "topic": "Healthcare and Health",
        "title": " Patient Demographics and Visits by Gender",
        "csv": "Gender \\t Total Visits \\t New Patients \\t Follow-up Visits \\n Male \\t 350 \\t 150 \\t 200 \\n Female \\t 450 \\t 200 \\t 250 \\n Other \\t 20 \\t 10 \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates patient demographics and visits categorized by gender. Male patients had a total of 350 visits, with 150 being new patients and 200 follow-up visits. Female patients led with 450 total visits, comprising 200 new patients and 250 follow-up visits. The 'Other' gender category accounted for 20 visits, split evenly between 10 new patients and 10 follow-up visits."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Set data as dictionary\ndata = {'Gender': ['Male', 'Female', 'Other'], 'Total Visits': [350, 450, 20], 'New Patients': [150, 200, 10], 'Follow-up Visits': [200, 250, 10]}\n\n# Convert dictionary to dataframe\ndf = pd.DataFrame(data)\n\n# Convert first column to string type\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set background grid lines\nax.grid(color='lightgrey', linestyle='--', linewidth=1, alpha=0.5)\n\n# Set area chart\nax.stackplot(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], labels=['Total Visits', 'New Patients', 'Follow-up Visits'], colors=['#98C1D9', '#E0FBFC', '#EE6C4D'], alpha=0.8)\n\n# Set legend and position\nax.legend(loc='upper left')\n\n# Set ticks and ticklabels for x axis\nax.set_xticks(np.arange(len(df.index)))\nax.set_xticklabels(df.iloc[:, 0])\n\n# Set rotation for x axis\nplt.setp(ax.get_xticklabels(), ha='right', rotation=45, rotation_mode='anchor')\n\n# Set ticks and ticklabels for y axis\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value/100) * 100\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set title\nplt.title('Patient Demographics and Visits by Gender')\n\n# Set y label\nplt.ylabel('Visits')\n\n# Set x label\nplt.xlabel('Gender')\n\n# Automatically resize image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('output/final/area_chart/png/20231226-103019_20.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many follow-up visits were made by female patients?",
            "output": "250"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_231",
        "img": "./area_chart/png/area_chart_231.png",
        "topic": "Retail and E-commerce",
        "title": " Retail and E-commerce Sales by Category",
        "csv": "Category \\t Total Retail Sales ($) \\t E-commerce Sales ($) \\n Apparel \\t 50000 \\t 20000 \\n Beauty and Personal Care \\t 30000 \\t 15000 \\n Electronics \\t 70000 \\t 50000 \\n Furniture and Home Decor \\t 40000 \\t 30000 \\n Groceries and Household Supplies \\t 90000 \\t 45000 \\n Health and Wellness \\t 35000 \\t 25000 \\n Media and Entertainment \\t 60000 \\t 40000 \\n Sporting Goods \\t 45000 \\t 35000 \\n Toys and Games \\t 25000 \\t 15000 \\n Travel and Tourism \\t 80000 \\t 70000 \\n Automotive \\t 100000 \\t 80000 \\n Home Improvement \\t 60000 \\t 50000 \\n Pet Supplies \\t 30000 \\t 20000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates retail and e-commerce sales by category. Categories include Apparel, Beauty and Personal Care, Electronics, and more, with varying total retail and e-commerce sales figures. For example, Apparel has $50,000 in total retail sales and $20,000 in e-commerce sales. In contrast, Automotive has the highest figures with $100,000 in retail and $80,000 in e-commerce. Other categories such as Electronics, Groceries, and Travel show significant sales in both retail and e-commerce, indicating a diverse distribution of consumer spending across different sectors."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define the data as a dictionary\ndata = {'Category': ['Apparel', 'Beauty and Personal Care', 'Electronics', 'Furniture and Home Decor', 'Groceries and Household Supplies', 'Health and Wellness', 'Media and Entertainment', 'Sporting Goods', 'Toys and Games', 'Travel and Tourism', 'Automotive', 'Home Improvement', 'Pet Supplies'], 'Total Retail Sales ($)': [50000, 30000, 70000, 40000, 90000, 35000, 60000, 45000, 25000, 80000, 100000, 60000, 30000], 'E-commerce Sales ($)': [20000, 15000, 50000, 30000, 45000, 25000, 40000, 35000, 15000, 70000, 80000, 50000, 20000]}\n\n# Convert the first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set the figure size\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Plot the data with stackplot\nax.stackplot(df['Category'], df['Total Retail Sales ($)'], df['E-commerce Sales ($)'], labels=['Total Retail Sales ($)', 'E-commerce Sales ($)'], colors=['#FFA07A', '#87CEEB'], alpha=0.7)\n\n# Set random grid lines\nax.grid(linestyle='--', linewidth=0.5, color='gray')\n\n# Calculate the max total value and round up to the nearest multiple of 1000\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value/1000)*1000\n\n# Set the suitable y-axis range and ticks\nax.set_ylim(0, max_total_value)\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set the x-axis range\nax.set_xlim(0, len(df.index) - 1)\n\n# Set the rotation and alignment for the x-axis tick labels\nplt.setp(ax.get_xticklabels(), rotation=45, ha='right', rotation_mode='anchor')\n\n# Set the legend and its position\nax.legend(loc='upper left')\n\n# Set the title and labels\nax.set_title('Retail and E-commerce Sales by Category')\nax.set_xlabel('Category')\nax.set_ylabel('Sales ($)')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('output/final/area_chart/png/20231228-145339_76.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference between total retail sales and e-commerce sales for Furniture and Home Decor?",
            "output": "10000"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_97",
        "img": "./area_chart/png/area_chart_97.png",
        "topic": "Technology and the Internet",
        "title": " User Distribution in Technology and the Internet Industry",
        "csv": "Category \\t Web Development (Users) \\t Data Science (Users) \\t Cybersecurity (Users) \\t Artificial Intelligence (Users) \\t Social Media (Users) \\n Technology \\t 250 \\t 180 \\t 200 \\t 150 \\t 300 \\n Internet \\t 200 \\t 150 \\t 180 \\t 130 \\t 250 \\n Mobile \\t 180 \\t 200 \\t 150 \\t 100 \\t 250 \\n Cloud Computing \\t 150 \\t 180 \\t 130 \\t 200 \\t 170 \\n E-commerce \\t 130 \\t 100 \\t 150 \\t 180 \\t 200 \\n Artificial Intelligence \\t 100 \\t 200 \\t 250 \\t 150 \\t 180 \\n Internet of Things \\t 200 \\t 180 \\t 150 \\t 130 \\t 100 \\n Big Data \\t 150 \\t 200 \\t 100 \\t 250 \\t 120 \\n Social Networking \\t 180 \\t 150 \\t 100 \\t 200 \\t 170 \\n Cybersecurity \\t 120 \\t 100 \\t 200 \\t 180 \\t 150 \\n Digital Marketing \\t 100 \\t 200 \\t 250 \\t 150 \\t 180 \\n Virtual Reality \\t 150 \\t 180 \\t 130 \\t 200 \\t 170 \\n Augmented Reality \\t 130 \\t 100 \\t 150 \\t 180 \\t 200 \\n Blockchain \\t 200 \\t 180 \\t 150 \\t 130 \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates user distribution across various segments within the technology and internet industry. The categories include Technology, Internet, Mobile, Cloud Computing, E-commerce, Artificial Intelligence, Internet of Things, Big Data, Social Networking, Cybersecurity, Digital Marketing, Virtual Reality, Augmented Reality, and Blockchain. Each category shows user counts for Web Development, Data Science, Cybersecurity, Artificial Intelligence, and Social Media. For instance, Technology has the highest number of Social Media users at 300, whereas Cybersecurity shows an equal interest across Web Development, Cybersecurity, and Digital Marketing with 200 users each."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Represent data using dictionary\ndata = {'Category': ['Technology', 'Internet', 'Mobile', 'Cloud Computing', 'E-commerce', 'Artificial Intelligence', 'Internet of Things', 'Big Data', 'Social Networking', 'Cybersecurity', 'Digital Marketing', 'Virtual Reality', 'Augmented Reality', 'Blockchain'], 'Web Development (Users)': [250, 200, 180, 150, 130, 100, 200, 150, 180, 120, 100, 150, 130, 200], 'Data Science (Users)': [180, 150, 200, 180, 100, 200, 180, 200, 150, 100, 200, 180, 100, 180], 'Cybersecurity (Users)': [200, 180, 150, 130, 150, 250, 150, 100, 100, 200, 250, 130, 150, 150], 'Artificial Intelligence (Users)': [150, 130, 100, 200, 180, 150, 130, 250, 200, 180, 250, 200, 150, 130], 'Social Media (Users)': [300, 250, 250, 170, 200, 180, 100, 120, 170, 150, 180, 170, 200, 100]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(10,5))\n\n# Use ax.stackplot()\nax.stackplot(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], df.iloc[:, 4], df.iloc[:, 5], labels=['Web Development', 'Data Science', 'Cybersecurity', 'Artificial Intelligence', 'Social Media'], colors=['#FFA500', '#FFD700', '#FFA07A', '#87CEEB', '#FFC0CB'], alpha=0.8)\n\n# Set x and y axis ticks and ticklabels\nax.set_xticklabels(df.iloc[:, 0], rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticks(np.linspace(0, df.iloc[:, 1:].sum(axis=1).max(), np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set x and y axis labels\nax.set_xlabel('Category')\nax.set_ylabel('Number of Users')\n\n# Set title\nax.set_title('User Distribution in Technology and the Internet Industry')\n\n# Set background grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set legend\nax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('output/final/area_chart/png/20231228-131755_87.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more users are in Data Science compared to Artificial Intelligence across all categories combined?",
            "output": "110 users"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_142",
        "img": "./area_chart/png/area_chart_142.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Distribution by Department from 2019 to 2023",
        "csv": "Year \\t Administration (Employees) \\t Sales (Employees) \\t IT (Employees) \\t HR (Employees) \\t R&D (Employees) \\n 2019 \\t 200 \\t 280 \\t 270 \\t 150 \\t 180 \\n 2020 \\t 180 \\t 300 \\t 250 \\t 160 \\t 200 \\n 2021 \\t 220 \\t 320 \\t 230 \\t 170 \\t 210 \\n 2022 \\t 210 \\t 310 \\t 240 \\t 180 \\t 190 \\n 2023 \\t 250 \\t 290 \\t 260 \\t 190 \\t 230 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart visualizes employee distribution across five departments from 2019 to 2023. In 2019, there were 200 administration, 280 sales, 270 IT, 150 HR, and 180 R&D employees. By 2020, these numbers changed to 180, 300, 250, 160, and 200 respectively. The year 2021 showed an increase in every department, with 220 administration, 320 sales, 230 IT, 170 HR, and 210 R&D employees. In 2022, slight fluctuations occurred, and in 2023, the figures rose to 250 administration, 290 sales, 260 IT, 190 HR, and 230 R&D employees."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\n# Define data dictionary\ndata_dict = {\"Year\": [2019, 2020, 2021, 2022, 2023],\n             \"Administration (Employees)\": [200, 180, 220, 210, 250],\n             \"Sales (Employees)\": [280, 300, 320, 310, 290],\n             \"IT (Employees)\": [270, 250, 230, 240, 260],\n             \"HR (Employees)\": [150, 160, 170, 180, 190],\n             \"R&D (Employees)\": [180, 200, 210, 190, 230]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data_dict)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot data as stacked area chart\nax.stackplot(df[\"Year\"], df.iloc[:, 1:].T, labels=df.columns[1:], colors=[\"#4286f4\", \"#42f46b\", \"#f442a6\", \"#f4c642\", \"#7842f4\"], alpha=0.7)\n\n# Set x and y axis limits\nax.set_xlim(0, len(df.index) - 1)\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value/10)*10 # Round up to nearest multiple of 10\nax.set_ylim(0, max_total_value)\n\n# Set y axis ticks\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set background grid lines\nax.grid(linestyle='--', alpha=0.3)\n\n# Set legend\nax.legend(loc=\"upper left\", bbox_to_anchor=(1,1))\n\n# Set title and labels\nax.set_title(\"Employee Distribution by Department from 2019 to 2023\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Number of Employees\")\n\n# Automatically resize image\nfig.tight_layout()\n\n# Save figure\nfig.savefig(\"output/final/area_chart/png/20231228-140159_57.png\", bbox_inches=\"tight\")\n\n# Clear image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more employees were there in Sales than in R&D in 2021?",
            "output": "110 employees"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_39",
        "img": "./area_chart/png/area_chart_39.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Donations to Charity and Nonprofit Organizations",
        "csv": "Organization \\t Donations (in thousands) \\n Red Cross \\t 250 \\n Habitat for Humanity \\t 350 \\n United Way \\t 500 \\n Salvation Army \\t 300 \\n American Cancer Society \\t 400 \\n Boys & Girls Club \\t 200 \\n St. Jude Children's Research Hospital \\t 450 \\n Feeding America \\t 550 \\n Make-A-Wish Foundation \\t 150 \\n Goodwill Industries International \\t 300 \\n YMCA of the USA \\t 350 \\n World Vision \\t 400 \\n ASPCA \\t 200 \\n American Heart Association \\t 450 \\n American Red Cross \\t 500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates donations received by various charity and nonprofit organizations in units of thousands. Organizations such as Red Cross and American Red Cross each received 250 and 500 respectively, while Habitat for Humanity and YMCA of the USA garnered 350 each. United Way leads with 500, whereas The Salvation Army and Goodwill Industries International each accumulated 300. The American Cancer Society and World Vision both received 400, with St. Jude Children's Research Hospital and the American Heart Association slightly higher at 450. Feeding America tops the chart with 550, and donations to the Boys & Girls Club and ASPCA stand at 200 each, with Make-A-Wish Foundation receiving the least at 150."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n#Data\ndata = {'Organization': ['Red Cross', 'Habitat for Humanity', 'United Way', 'Salvation Army', 'American Cancer Society', 'Boys & Girls Club', 'St. Jude Children\\'s Research Hospital', 'Feeding America', 'Make-A-Wish Foundation', 'Goodwill Industries International', 'YMCA of the USA', 'World Vision', 'ASPCA', 'American Heart Association', 'American Red Cross'],\n        'Donations (in thousands)': [250, 350, 500, 300, 400, 200, 450, 550, 150, 300, 350, 400, 200, 450, 500]}\n\n#Convert to DataFrame\ndf = pd.DataFrame(data)\n\n#Convert first column to string type\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n#Set figsize parameter\nplt.figure(figsize=(10,6))\n\n#Set axis labels\nplt.xlabel('Organization')\nplt.ylabel('Donations (in thousands)')\n\n#Set title\nplt.title('Donations to Charity and Nonprofit Organizations')\n\n#Set background grid lines\nplt.grid(linestyle='--', alpha=0.5)\n\n#Calculate max total value\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\n\n#Ceil max total value up to nearest multiple of 10, 100, or 1000\nif max_total_value < 100:\n    max_total_value = np.ceil(max_total_value/10)*10\nelif max_total_value < 1000:\n    max_total_value = np.ceil(max_total_value/100)*100\nelse:\n    max_total_value = np.ceil(max_total_value/1000)*1000\n\n#Set yticks\nplt.yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n#Set xticks\nplt.xticks(rotation=45, ha='right', rotation_mode='anchor')\n\n#Plot area chart\nplt.stackplot(df['Organization'], df['Donations (in thousands)'], colors=['lightblue'], alpha=0.8)\n\n#Set legend\nplt.legend(['Donations'], loc='upper left')\n\n#Automatically resize image\nplt.tight_layout()\n\n#Save the chart\nplt.savefig('output/final/area_chart/png/20231228-131755_10.png', bbox_inches='tight')\n\n#Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which organization received the highest amount of donations according to the data?",
            "output": "Feeding America"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_28",
        "img": "./area_chart/png/area_chart_28.png",
        "topic": "Law and Legal Affairs",
        "title": " Law and Legal Affairs Statistics",
        "csv": "Category \\t Legal Cases Filed \\t Legal Cases Resolved \\t Legal Cases Pending \\t  \\n Civil Law \\t 500 \\t 400 \\t 100 \\n Criminal Law \\t 400 \\t 350 \\t 50 \\n Corporate Law \\t 300 \\t 250 \\t 50 \\n Family Law \\t 200 \\t 150 \\t 50 \\n Employment Law \\t 150 \\t 100 \\t 50 \\n Property Law \\t 100 \\t 80 \\t 20 \\n Immigration Law \\t 50 \\t 40 \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart depicts law and legal affairs statistics, breaking down legal cases by category. For Civil Law, there were 500 cases filed, 400 resolved, and 100 pending. Criminal Law saw 400 filed, 350 resolved, and 50 pending. Corporate Law had 300 cases filed, 250 resolved, and 50 pending. Family Law included 200 filed, 150 resolved, and 50 pending cases. Employment Law registered 150 filed, 100 resolved, and 50 pending cases. Property Law had 100 cases filed, 80 resolved, and 20 pending. Lastly, Immigration Law had 50 cases filed, 40 resolved, and 10 pending."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define data dictionary\ndata = {'Category': ['Civil Law', 'Criminal Law', 'Corporate Law', 'Family Law', 'Employment Law', 'Property Law', 'Immigration Law'],\n        'Legal Cases Filed': [500, 400, 300, 200, 150, 100, 50],\n        'Legal Cases Resolved': [400, 350, 250, 150, 100, 80, 40],\n        'Legal Cases Pending': [100, 50, 50, 50, 50, 20, 10]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig = plt.figure(figsize=(12, 8))\n\n# Set axes\nax = fig.add_subplot(111)\n\n# Plot area chart\nax.stackplot(df['Category'], df['Legal Cases Filed'], df['Legal Cases Resolved'], df['Legal Cases Pending'], labels=['Legal Cases Filed', 'Legal Cases Resolved', 'Legal Cases Pending'], colors=['#A2D6F3', '#F3D0A2', '#A2F3A2'], alpha=0.8)\n\n# Set x limit\nax.set_xlim(0, len(df.index) - 1)\n\n# Set y limit\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value / 10) * 10\nax.set_ylim(0, max_total_value)\n\n# Set y ticks\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set background grid lines\nax.grid(color='grey', linestyle='dashed', alpha=0.5)\n\n# Set legend\nax.legend(loc='upper right', fontsize=12)\n\n# Set title\nax.set_title('Law and Legal Affairs Statistics', fontsize=16)\n\n# Set x and y labels\nax.set_xlabel('Category', fontsize=14)\nax.set_ylabel('Number of Cases', fontsize=14)\n\n# Set x and y ticks and tick labels\nax.set_xticks(np.arange(len(df['Category'])))\nax.set_xticklabels(df['Category'], rotation=45, ha='right', rotation_mode='anchor')\n\n# Automatically resize image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('output/final/area_chart/png/20231226-130527_12.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which law category has the least number of cases resolved?",
            "output": "Immigration Law"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_45",
        "img": "./area_chart/png/area_chart_45.png",
        "topic": "Education and Academics",
        "title": " Subject Performance by Education Level",
        "csv": "Subject \\t Math \\t Science \\t English \\t History \\t Art \\n Elementary School \\t 30 \\t 40 \\t 25 \\t 20 \\t 10 \\n Middle School \\t 40 \\t 30 \\t 25 \\t 20 \\t 20 \\n High School \\t 50 \\t 30 \\t 20 \\t 20 \\t 20 \\n Undergraduate Studies \\t 60 \\t 40 \\t 20 \\t 20 \\t 10 \\n Graduate Studies \\t 70 \\t 30 \\t 20 \\t 10 \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This area chart outlines the performance across five subjects at different education levels. Elementary school students scored 30 in Math, 40 in Science, 25 in English, 20 in History, and 10 in Art. Middle school scores increased to 40 in Math and Art, while Science dipped to 30, with English and History remaining stable at 25 and 20, respectively. High school presented a peak in Math at 50, and Art maintained at 20, while Science, English, and History reported 30, 20, and 20, correspondingly. Undergraduate studies saw a rise in Math to 60, Science to 40, with other subjects lower. Graduate studies showed highest Math scores at 70, 30 in Science, a consistent 20 in English, a decrease in History to 10, and Art remaining at 10."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data dictionary\ndata = {'Subject': ['Math', 'Science', 'English', 'History', 'Art'], \n        'Elementary School': [30, 40, 25, 20, 10], \n        'Middle School': [40, 30, 25, 20, 20], \n        'High School': [50, 30, 20, 20, 20], \n        'Undergraduate Studies': [60, 40, 20, 20, 10], \n        'Graduate Studies': [70, 30, 20, 10, 10]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Calculate max total value\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\n# Round up to nearest multiple of 10, 100, or 1000\nif max_total_value < 100:\n    max_total_value = np.ceil(max_total_value / 10) * 10\nelif max_total_value < 1000:\n    max_total_value = np.ceil(max_total_value / 100) * 100\nelse:\n    max_total_value = np.ceil(max_total_value / 1000) * 1000\n\n# Set y axis range and ticks\nax.set_ylim(0, max_total_value)\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set background grid lines\nax.grid(axis='y', alpha=0.5)\n\n# Plot stacked area chart\nax.stackplot(df['Subject'], df['Elementary School'], df['Middle School'], df['High School'], df['Undergraduate Studies'], df['Graduate Studies'], labels=['Elementary School', 'Middle School', 'High School', 'Undergraduate Studies', 'Graduate Studies'], colors=['#78C2C4', '#F5793A', '#A95AA1', '#85A4C1', '#FABD61'], alpha=0.8)\n\n# Set x and y axis labels\nax.set_xlabel('Subject')\nax.set_ylabel('Number of Students')\n\n# Set title\nax.set_title('Subject Performance by Education Level')\n\n# Set legend\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05), ncol=5)\n\n# Automatically resize image and save\nplt.tight_layout()\nplt.savefig('output/final/area_chart/png/20231228-131755_18.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many points did the graduate students score in Science?",
            "output": "30"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_126",
        "img": "./area_chart/png/area_chart_126.png",
        "topic": "Real Estate and Housing Market",
        "title": " Real Estate and Housing Market Trends by Region",
        "csv": "Category \\t Luxury Homes (Sales) \\t Single Family Homes (Sales) \\t Condos (Sales) \\t Townhomes (Sales) \\t Rentals (Leases) \\n California \\t 200 \\t 300 \\t 150 \\t 120 \\t 220 \\n Texas \\t 150 \\t 250 \\t 180 \\t 100 \\t 260 \\n New York \\t 180 \\t 200 \\t 130 \\t 150 \\t 240 \\n Florida \\t 250 \\t 150 \\t 120 \\t 200 \\t 270 \\n Illinois \\t 120 \\t 180 \\t 200 \\t 130 \\t 190 \\n Pennsylvania \\t 200 \\t 160 \\t 140 \\t 180 \\t 210 \\n Ohio \\t 160 \\t 180 \\t 150 \\t 220 \\t 200 \\n Arizona \\t 140 \\t 190 \\t 180 \\t 160 \\t 170 \\n Michigan \\t 180 \\t 150 \\t 200 \\t 170 \\t 190 \\n North Carolina \\t 150 \\t 180 \\t 160 \\t 190 \\t 230 \\n Georgia \\t 200 \\t 170 \\t 150 \\t 240 \\t 210 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates trends in the real estate and housing market by region, detailing the sales of luxury homes, single-family homes, condos, townhomes, and leases of rentals. In California, there were 200 luxury home sales, 300 single-family home sales, 150 condo sales, 120 townhome sales, and 220 rental leases. Texas had lower figures in luxury and single-family homes but higher in condo sales and rentals compared to California. Other states like New York, Florida, and Illinois show varying numbers across different housing categories. Data includes diverse regions such as Pennsylvania, Ohio, Arizona, Michigan, North Carolina, and Georgia, reflecting a broad spectrum of the housing market."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Define and process data\ndata = {'Category': ['California', 'Texas', 'New York', 'Florida', 'Illinois', 'Pennsylvania', 'Ohio', 'Arizona', 'Michigan', 'North Carolina', 'Georgia'],\n        'Luxury Homes (Sales)': [200, 150, 180, 250, 120, 200, 160, 140, 180, 150, 200],\n        'Single Family Homes (Sales)': [300, 250, 200, 150, 180, 160, 180, 190, 150, 180, 170],\n        'Condos (Sales)': [150, 180, 130, 120, 200, 140, 150, 180, 200, 160, 150],\n        'Townhomes (Sales)': [120, 100, 150, 200, 130, 180, 220, 160, 170, 190, 240],\n        'Rentals (Leases)': [220, 260, 240, 270, 190, 210, 200, 170, 190, 230, 210]}\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot area chart\nax.stackplot(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], df.iloc[:, 4], df.iloc[:, 5],\n              labels=['Luxury Homes (Sales)', 'Single Family Homes (Sales)', 'Condos (Sales)', 'Townhomes (Sales)', 'Rentals (Leases)'],\n              colors=['#0096FF', '#8EE5EE', '#FFB6C1', '#FFA500', '#90EE90'], alpha=0.8)\n\n# Set x and y axis ticks and ticklabels\nif np.random.choice([0, 1], p=[0.3, 0.7]):\n    ax.set_xticks(np.arange(0, len(df.index), 1))\n    ax.set_xticklabels(df.iloc[:, 0], rotation=45, ha='right', rotation_mode='anchor', wrap=True)\n    ax.set_xlim(0, len(df.index) - 1)\nif np.random.choice([0, 1], p=[0.3, 0.7]):\n    max_total_value = df.iloc[:, 1:].sum(axis=1).max()\n    max_total_value = np.ceil(max_total_value / 10) * 10\n    ax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set background grid lines\nif np.random.choice([0, 1], p=[0.3, 0.7]):\n    ax.grid(linestyle='dashed', alpha=0.5)\n\n# Set legend and legend title\nlegend = ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, frameon=False)\nlegend_title = ax.set_title('Legend', fontsize=12)\nlegend_title.set_y(1.15)\n\n# Set y axis label\nif np.random.choice([0, 1], p=[0.3, 0.7]):\n    ax.set_ylabel('Number of Sales', fontsize=12)\n\n# Set title\nax.set_title('Real Estate and Housing Market Trends by Region', fontsize=14)\n\n# Automatically resize image and save\nplt.tight_layout()\nplt.savefig('output/final/area_chart/png/20231228-140159_39.png', bbox_inches='tight')\n\n# Clear image state\nplt.clf()\nplt.close()"
        },
        "QA": {
            "input": "Which region had the lowest number of single-family homes sold?",
            "output": "Michigan"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_205",
        "img": "./area_chart/png/area_chart_205.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Distribution by HR Functions from 2019 to 2023",
        "csv": "Year \\t Recruitment (Employees) \\t Training (Employees) \\t Compensation (Employees) \\t Benefits (Employees) \\t Performance Management (Employees) \\n 2019 \\t 200 \\t 150 \\t 180 \\t 130 \\t 250 \\n 2020 \\t 250 \\t 180 \\t 200 \\t 150 \\t 250 \\n 2021 \\t 180 \\t 200 \\t 150 \\t 100 \\t 250 \\n 2022 \\t 150 \\t 180 \\t 130 \\t 200 \\t 170 \\n 2023 \\t 200 \\t 180 \\t 150 \\t 130 \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates the employee distribution across various HR functions from 2019 to 2023. The functions include Recruitment, Training, Compensation, Benefits, and Performance Management. In 2019, Recruitment had 200 employees, Training had 150, Compensation had 180, Benefits had 130, and Performance Management had the highest with 250 employees. By 2023, the numbers changed to 200 in Recruitment, 180 in Training, 150 in Compensation, 130 in Benefits, and a significant decrease to 100 in Performance Management. Each year shows fluctuations in employee distribution among the five HR functions."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Define data as a dictionary\ndata = {'Year': ['2019', '2020', '2021', '2022', '2023'],\n        'Recruitment (Employees)': [200, 250, 180, 150, 200],\n        'Training (Employees)': [150, 180, 200, 180, 180],\n        'Compensation (Employees)': [180, 200, 150, 130, 150],\n        'Benefits (Employees)': [130, 150, 100, 200, 130],\n        'Performance Management (Employees)': [250, 250, 250, 170, 100]}\n\n# Convert dictionary to dataframe\ndf = pd.DataFrame(data)\n\n# Convert first column to string type\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Calculate max total value and round up to nearest multiple of 10, 100, or 1000\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nif max_total_value > 1000:\n    max_total_value = np.ceil(max_total_value / 1000) * 1000\nelif max_total_value > 100:\n    max_total_value = np.ceil(max_total_value / 100) * 100\nelse:\n    max_total_value = np.ceil(max_total_value / 10) * 10\n\n# Set y ticks and tick labels\nyticks = np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32)\nyticklabels = ['${:,.0f}'.format(x) for x in yticks]\nax.set_yticks(yticks)\nax.set_yticklabels(yticklabels)\n\n# Set x ticks and tick labels\nax.set_xticks(np.arange(len(df)))\nax.set_xticklabels(df['Year'])\n\n# Plot area chart\nax.stackplot(df['Year'], df.iloc[:, 1:].transpose(), labels=df.iloc[:, 1:].columns, colors=['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3'], alpha=0.8)\n\n# Set legend and position\nax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=5)\n\n# Set title\nax.set_title('Employee Distribution by HR Functions from 2019 to 2023')\n\n# Set grid lines\nax.grid(linestyle='--', alpha=0.5)\n\n# Automatically resize image\nplt.tight_layout()\n\n# Save figure as png\nplt.savefig('output/final/area_chart/png/20231228-145339_40.png', bbox_inches='tight')\n\n# Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "In which year was the number of employees under performance management the highest?",
            "output": "2019 and 2020"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_9",
        "img": "./area_chart/png/area_chart_9.png",
        "topic": "Tourism and Hospitality",
        "title": " Monthly Accommodation Occupancy Rates",
        "csv": "Month \\t Hotel Occupancy Rate (%) \\t Airbnb Occupancy Rate (%) \\t Vacation Rental Occupancy Rate (%) \\n Jan \\t 70 \\t 60 \\t 50 \\n Feb \\t 65 \\t 70 \\t 55 \\n Mar \\t 75 \\t 75 \\t 65 \\n Apr \\t 80 \\t 80 \\t 70 \\n May \\t 85 \\t 85 \\t 75 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates the monthly accommodation occupancy rates, comparing hotel, Airbnb, and vacation rental percentages. In January, hotel occupancy is at 70%, Airbnb at 60%, and vacation rentals at 50%. February shows a slight decrease for hotels to 65%, but an increase for Airbnb and vacation rentals to 70% and 55% respectively. March sees a rise across all with hotels at 75%, Airbnb also at 75%, and vacation rentals at 65%. The trend continues upward in April, with hotels at 80%, Airbnb the same, and vacation rentals at 70%. In May, occupancy peaks at 85% for hotels and Airbnb, and 75% for vacation rentals."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import required libraries\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Define the data as a dictionary\n\ndata = {'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'], 'Hotel Occupancy Rate (%)': [70, 65, 75, 80, 85], 'Airbnb Occupancy Rate (%)': [60, 70, 75, 80, 85], 'Vacation Rental Occupancy Rate (%)': [50, 55, 65, 70, 75]}\n\n# Convert the data to a dataframe\n\ndf = pd.DataFrame(data)\n\n# Convert first column to string type\n\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set the figure size and create a subplot\n\nfig, ax = plt.subplots(figsize=(12,8))\n\n# Set the max total value for the y axis\n\nmax_total_value = np.ceil(df.iloc[:, 1:].sum(axis=1).max() / 10.0) * 10.0\n\n# Set the y limits and ticks\n\nax.set_ylim(0, max_total_value)\n\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set the x limits and ticks\n\nax.set_xlim(0, len(df.index) - 1)\n\nax.set_xticks(np.arange(len(df.index)))\n\n# Set the x and y labels\n\nax.set_xlabel('Month')\nax.set_ylabel('Occupancy Rate (%)')\n\n# Plot the data as an area chart\n\nax.stackplot(df['Month'], df.iloc[:, 1:].values.T, labels=df.columns[1:], colors=['#F2B705', '#E7343F', '#4F81BD'], alpha=0.5)\n\n# Add grid lines\n\nax.grid(ls='--', alpha=0.3)\n\n# Set the legend position and title\n\nax.legend(loc='upper right', title='Accommodation Type')\n\n# Set the title of the figure\n\nplt.suptitle('Monthly Accommodation Occupancy Rates')\n\n# Automatically resize the image and save it\n\nplt.tight_layout()\n\nfig.savefig('output/final/area_chart/png/20231226-103019_17.png', bbox_inches='tight')\n\n# Clear the current image state\n\nplt.clf()"
        },
        "QA": {
            "input": "What was the Vacation Rental Occupancy Rate in April?",
            "output": "70%"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_37",
        "img": "./area_chart/png/area_chart_37.png",
        "topic": "Tourism and Hospitality",
        "title": " Reservation Trends by Month",
        "csv": "Month \\t Hotel Bookings (Units) \\t Airline Bookings (Units) \\t Car Rentals (Units) \\t Restaurant Reservations (Units) \\n January \\t 200 \\t 150 \\t 180 \\t 130 \\n February \\t 180 \\t 160 \\t 200 \\t 150 \\n March \\t 220 \\t 180 \\t 150 \\t 160 \\n April \\t 230 \\t 200 \\t 180 \\t 170 \\n May \\t 250 \\t 220 \\t 190 \\t 180 \\n June \\t 270 \\t 240 \\t 200 \\t 190 \\n July \\t 300 \\t 260 \\t 220 \\t 200 \\n August \\t 280 \\t 240 \\t 200 \\t 190 \\n September \\t 270 \\t 230 \\t 190 \\t 180 \\n October \\t 260 \\t 220 \\t 180 \\t 170 \\n November \\t 240 \\t 200 \\t 160 \\t 150 \\n December \\t 220 \\t 180 \\t 150 \\t 140 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This area chart illustrates monthly reservation trends across four categories: hotel bookings, airline bookings, car rentals, and restaurant reservations. Data for each category are provided as units. The chart includes data from January, with 200 hotel bookings, 150 airline bookings, 180 car rentals, and 130 restaurant reservations, and progresses monthly through December, which sees 220 hotel bookings, 180 airline bookings, 150 car rentals, and 140 restaurant reservations. The visual representation allows for the comparison of trends and seasonality in reservation activities throughout the year."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import required modules\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create dictionary to represent data\ndata = {'Month': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n        'Hotel Bookings (Units)': [200, 180, 220, 230, 250, 270, 300, 280, 270, 260, 240, 220],\n        'Airline Bookings (Units)': [150, 160, 180, 200, 220, 240, 260, 240, 230, 220, 200, 180],\n        'Car Rentals (Units)': [180, 200, 150, 180, 190, 200, 220, 200, 190, 180, 160, 150],\n        'Restaurant Reservations (Units)': [130, 150, 160, 170, 180, 190, 200, 190, 180, 170, 150, 140]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size and create subplots\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data as an area chart\nax.stackplot(df['Month'], df['Hotel Bookings (Units)'], df['Airline Bookings (Units)'], df['Car Rentals (Units)'], df['Restaurant Reservations (Units)'],\n             labels=['Hotel Bookings (Units)', 'Airline Bookings (Units)', 'Car Rentals (Units)', 'Restaurant Reservations (Units)'],\n             colors=['#2ca02c', '#1f77b4', '#ff7f0e', '#d62728'],\n             alpha=0.5)\n\n# Set x and y axis ticks and ticklabels\nif np.random.choice([0, 1]):\n    ax.set_xticks(np.arange(len(df['Month'])))\n    ax.set_xticklabels(df['Month'])\nif np.random.choice([0, 1]):\n    ax.set_xlim(0, len(df.index) - 1)\nif np.random.choice([0, 1]):\n    max_total_value = df.iloc[:, 1:].sum(axis=1).max()\n    max_total_value = np.ceil(max_total_value / 10) * 10\n    ax.set_ylim(0, max_total_value)\n    ax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set grid lines\nif np.random.choice([0, 1]):\n    ax.grid(True, linestyle='dashed')\n\n# Set legend\nlegend = ax.legend(loc='upper left')\nfor text in legend.get_texts():\n    text.set_color('black')\n\n# Set title and labels\nax.set_title('Reservation Trends by Month')\nax.set_xlabel('Month')\nax.set_ylabel('Units')\n\n# Automatically resize image by tight_layout() before saving\nplt.tight_layout()\n\n# Save image as png\nplt.savefig('output/final/area_chart/png/20231226-130527_7.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "In which month did airline bookings reach the highest units according to the given data?",
            "output": "July"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_55",
        "img": "./area_chart/png/area_chart_55.png",
        "topic": "Sports and Entertainment",
        "title": " Attendance Trends for Popular Events from 2016 to 2020",
        "csv": "Year \\t Concerts (Attendees) \\t Sports Events (Attendees) \\t Movie Premieres (Attendees) \\t Festivals (Attendees) \\n 2016 \\t 10000 \\t 15000 \\t 12000 \\t 8000 \\n 2017 \\t 12000 \\t 17000 \\t 14000 \\t 9000 \\n 2018 \\t 13000 \\t 19000 \\t 15000 \\t 10000 \\n 2019 \\t 15000 \\t 20000 \\t 16000 \\t 11000 \\n 2020 \\t 11000 \\t 18000 \\t 13000 \\t 9000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates the trends in attendance for various popular events from 2016 to 2020. Each year shows the number of attendees for concerts, sports events, movie premieres, and festivals. In 2016, there were 10,000 concert-goers, 15,000 sports event attendees, 12,000 movie premiere attendees, and 8,000 festival attendees. The chart shows a general increase in attendees for all events until 2019, followed by a decline in 2020, where concerts attracted 11,000 attendees, sports events 18,000, movie premieres 13,000, and festivals 9,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Define data as a dictionary\ndata = {'Year': [2016, 2017, 2018, 2019, 2020], \n        'Concerts (Attendees)': [10000, 12000, 13000, 15000, 11000], \n        'Sports Events (Attendees)': [15000, 17000, 19000, 20000, 18000], \n        'Movie Premieres (Attendees)': [12000, 14000, 15000, 16000, 13000], \n        'Festivals (Attendees)': [8000, 9000, 10000, 11000, 9000]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig = plt.figure(figsize=(10, 6))\n\n# Plot the data with an area chart\nax = fig.add_subplot(111)\nax.stackplot(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], df.iloc[:, 4], \n             labels=['Concerts', 'Sports Events', 'Movie Premieres', 'Festivals'], \n             colors=['#FACF7A', '#7AB6F5', '#75D3B1', '#F5A17A'], alpha=0.7)\n\n# Set x and y axis ticks and labels\nax.set_xlim(0, len(df.index) - 1)\nax.set_ylim(0, np.ceil(df.iloc[:, 1:].sum(axis=1).max() / 1000) * 1000)\nax.set_xticks(np.arange(len(df.iloc[:, 0])))\nax.set_xticklabels(df.iloc[:, 0])\nax.set_yticks(np.linspace(0, ax.get_ylim()[1], np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set x and y axis labels\nax.set_xlabel('Year')\nax.set_ylabel('Number of Attendees')\n\n# Add background grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5)\n\n# Set legend position and remove overlapping with content\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=4)\n\n# Automatically resize image\nplt.tight_layout()\n\n# Add title\nplt.title('Attendance Trends for Popular Events from 2016 to 2020')\n\n# Save the image\nplt.savefig('output/final/area_chart/png/20231228-131755_31.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "In which year did concerts see the highest number of attendees according to the data?",
            "output": "2019"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_35",
        "img": "./area_chart/png/area_chart_35.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare Services Utilization by Category",
        "csv": "Category \\t Number of Patients \\t Medication Administered \\t Medical Tests \\t Medical Procedures \\t Health Education \\n Patients with Chronic Conditions \\t 500 \\t 200 \\t 400 \\t 300 \\t 100 \\n Emergency Visits \\t 200 \\t 150 \\t 150 \\t 100 \\t 50 \\n Mental Health Services \\t 100 \\t 50 \\t 100 \\t 150 \\t 50 \\n Primary Care Visits \\t 300 \\t 100 \\t 200 \\t 150 \\t 50 \\n Inpatient Admissions \\t 50 \\t 100 \\t 50 \\t 200 \\t 100 \\n Specialty Care Visits \\t 250 \\t 150 \\t 150 \\t 200 \\t 100 \\n Preventive Care Visits \\t 150 \\t 50 \\t 100 \\t 50 \\t 200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates healthcare services utilization broken down by category. It shows the number of patients, medication administered, medical tests, medical procedures, and health education for each service category. Patients with Chronic Conditions lead with 500 patients; Emergency Visits account for 200 patients; Mental Health Services, 100; Primary Care Visits, 300; Inpatient Admissions, 50; Specialty Care Visits, 250; and Preventive Care Visits, 150. Medication, tests, procedures, and education vary per category, indicating the extent of healthcare services provided across different medical needs."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create dictionary for data\ndata = {\n    'Category': ['Patients with Chronic Conditions', 'Emergency Visits', 'Mental Health Services', 'Primary Care Visits', 'Inpatient Admissions', 'Specialty Care Visits', 'Preventive Care Visits'],\n    'Number of Patients': [500, 200, 100, 300, 50, 250, 150],\n    'Medication Administered': [200, 150, 50, 100, 100, 150, 50],\n    'Medical Tests': [400, 150, 100, 200, 50, 150, 100],\n    'Medical Procedures': [300, 100, 150, 150, 200, 200, 50],\n    'Health Education': [100, 50, 50, 50, 100, 100, 200]\n}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size to prevent content from being cut off\nfig, ax = plt.subplots(figsize=(15, 8))\n\n# Set x and y ticks and ticklabels with 70% probability\nif np.random.randint(10) < 7:\n    ax.set_xticks(np.arange(len(df.index)))\n    ax.set_xticklabels(df.iloc[:, 0], rotation=45, ha='right', rotation_mode='anchor')\nif np.random.randint(10) < 7:\n    max_total_value = df.iloc[:, 1:].sum(axis=1).max()\n    max_total_value = np.ceil(max_total_value / 100) * 100\n    ax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set background grid lines\nplt.grid(axis='y', linestyle='--')\n\n# Plot the data with area chart\nax.stackplot(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], df.iloc[:, 4], df.iloc[:, 5], labels=['Number of Patients', 'Medication Administered', 'Medical Tests', 'Medical Procedures', 'Health Education'])\n\n# Set legend position\nplt.legend(loc='upper left')\n\n# Set title and labels\nplt.title('Healthcare Services Utilization by Category')\nplt.xlabel('Category')\nplt.ylabel('Number')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save figure as png\nplt.savefig('output/final/area_chart/png/20231226-130527_4.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more medical tests were conducted for patients with chronic conditions compared to preventive care visits?",
            "output": "300"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_3",
        "img": "./area_chart/png/area_chart_3.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Distribution by Seniority from 2019 to 2023",
        "csv": "Category \\t Executive (Employees) \\t Senior Management (Employees) \\t Middle Management (Employees) \\t Junior Management (Employees) \\t Frontline Staff (Employees) \\n 2019 \\t 50 \\t 100 \\t 200 \\t 300 \\t 400 \\n 2020 \\t 55 \\t 110 \\t 210 \\t 310 \\t 425 \\n 2021 \\t 60 \\t 120 \\t 220 \\t 320 \\t 450 \\n 2022 \\t 65 \\t 130 \\t 230 \\t 330 \\t 475 \\n 2023 \\t 70 \\t 140 \\t 240 \\t 340 \\t 500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates the employee distribution by seniority in a company over five years, from 2019 to 2023. Each year shows an incremental increase across different management levels and frontline staff. In 2019, there were 50 executive, 100 senior management, 200 middle management, 300 junior management, and 400 frontline staff employees. By 2023, these numbers grew to 70 executive, 140 senior management, 240 middle management, 340 junior management, and 500 frontline staff employees. The layered representation signifies the cumulative progression of employee numbers at each seniority level over the years."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create dictionary of data\ndata = {'Category': ['2019', '2020', '2021', '2022', '2023'], 'Executive (Employees)': [50, 55, 60, 65, 70], 'Senior Management (Employees)': [100, 110, 120, 130, 140], 'Middle Management (Employees)': [200, 210, 220, 230, 240], 'Junior Management (Employees)': [300, 310, 320, 330, 340], 'Frontline Staff (Employees)': [400, 425, 450, 475, 500]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size and probability of setting ticks and ticklabels\nfig, ax = plt.subplots(figsize=(9, 6))\nprob = np.random.choice([True, False], p=[0.7, 0.3])\n\n# Plot the data with area chart\nax.stackplot(df['Category'], df['Executive (Employees)'], df['Senior Management (Employees)'], df['Middle Management (Employees)'], df['Junior Management (Employees)'], df['Frontline Staff (Employees)'], colors=['#7AB4C9', '#E9CD8E', '#F4A6A6', '#C9E9B5', '#B5E1E6'], alpha=0.8)\nax.set_title('Employee Distribution by Seniority from 2019 to 2023')\n\n# Set ticks and ticklabels for x axis\nax.set_xlim(0, len(df.index) - 1)\nif prob:\n    ax.set_xticks(np.arange(len(df['Category'])))\n    if len(df['Category'][0]) > 6:\n        ax.set_xticklabels(df['Category'], rotation=45, ha='right', rotation_mode='anchor')\n    else:\n        ax.set_xticklabels(df['Category'])\nelse:\n    ax.set_xticklabels([])\n\n# Calculate and set suitable ylime range and yticks\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nif max_total_value < 10:\n    max_total_value = 10\nelif max_total_value < 100:\n    max_total_value = np.ceil(max_total_value / 10) * 10\nelif max_total_value < 1000:\n    max_total_value = np.ceil(max_total_value / 100) * 100\nelse:\n    max_total_value = np.ceil(max_total_value / 1000) * 1000\nax.set_ylim(0, max_total_value)\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set ticks and ticklabels for y axis\nif prob:\n    ax.set_ylabel('Number of Employees')\nelse:\n    ax.set_yticklabels([])\n    \n# Add background grid lines\nax.grid(linestyle='--')\n\n# Add legend and adjust its position\nleg = ax.legend(['Executive', 'Senior Management', 'Middle Management', 'Junior Management', 'Frontline Staff'], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5)\n\n# Automatically resize image and save\nfig.tight_layout()\nplt.savefig('output/final/area_chart/png/20231226-103019_11.png', bbox_inches='tight')\n\n# Clear image state\nplt.clf()"
        },
        "QA": {
            "input": "How many Middle Management employees were there in 2020?",
            "output": "210"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_68",
        "img": "./area_chart/png/area_chart_68.png",
        "topic": "Retail and E-commerce",
        "title": " Retail and E-commerce Sales and Revenue by Category",
        "csv": "Category \\t Retail Sales ($) \\t E-commerce Sales ($) \\t Retail Revenue ($) \\t E-commerce Revenue ($) \\n Clothing \\t 5000 \\t 3000 \\t 3500 \\t 2500 \\n Electronics \\t 6000 \\t 4000 \\t 4500 \\t 3500 \\n Home Goods \\t 4000 \\t 2000 \\t 3000 \\t 1500 \\n Beauty & Health \\t 3000 \\t 1500 \\t 2500 \\t 1000 \\n Toys & Games \\t 2500 \\t 1000 \\t 2000 \\t 500 \\n Food & Beverage \\t 7000 \\t 5000 \\t 6500 \\t 4500 \\n Automotive \\t 4000 \\t 3000 \\t 3500 \\t 2500 \\n Sports & Outdoors \\t 3000 \\t 2000 \\t 2500 \\t 1500 \\n Pet Supplies \\t 2000 \\t 1000 \\t 1500 \\t 500 \\n Jewelry \\t 1500 \\t 500 \\t 1000 \\t 250 \\n Furniture \\t 5000 \\t 4000 \\t 4500 \\t 3500 \\n Office Supplies \\t 2000 \\t 1000 \\t 1500 \\t 500 \\n Beauty & Personal Care \\t 3000 \\t 2000 \\t 2500 \\t 1500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates data on retail and e-commerce sales and revenue across various categories. For each category, the chart presents four metrics: retail sales, e-commerce sales, retail revenue, and e-commerce revenue, all in USD. The sales figures show that Clothing, Electronics, and Food & Beverage have higher numbers, while Jewelry and Pet Supplies show lower figures. Retail sales and revenue are invariably higher than their e-commerce counterparts in each category, indicating that despite the growth of e-commerce, traditional retail still holds a significant portion of the market share in these categories."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Represent data using dictionary\ndata = {'Category': ['Clothing', 'Electronics', 'Home Goods', 'Beauty & Health', 'Toys & Games', 'Food & Beverage', 'Automotive', 'Sports & Outdoors', 'Pet Supplies', 'Jewelry', 'Furniture', 'Office Supplies', 'Beauty & Personal Care'], 'Retail Sales ($)': [5000, 6000, 4000, 3000, 2500, 7000, 4000, 3000, 2000, 1500, 5000, 2000, 3000], 'E-commerce Sales ($)': [3000, 4000, 2000, 1500, 1000, 5000, 3000, 2000, 1000, 500, 4000, 1000, 2000], \n'Retail Revenue ($)': [3500, 4500, 3000, 2500, 2000, 6500, 3500, 2500, 1500, 1000, 4500, 1500, 2500], \n'E-commerce Revenue ($)': [2500, 3500, 1500, 1000, 500, 4500, 2500, 1500, 500, 250, 3500, 500, 1500]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot data as stacked area chart\nax.stackplot(df['Category'], df['Retail Sales ($)'], df['E-commerce Sales ($)'], \n             df['Retail Revenue ($)'], df['E-commerce Revenue ($)'], \n             labels=['Retail Sales', 'E-commerce Sales', 'Retail Revenue', 'E-commerce Revenue'], \n             colors=['#6ca9d2', '#d8c770', '#ff6347', '#98fb98'], alpha=0.7)\n\n# Set x and y axis labels\nax.set_xlabel('Category')\nax.set_ylabel('Sales ($)')\nax.set_title('Retail and E-commerce Sales by Category')\n\n# Set ticks and ticklabels for x axis\nax.set_xticks(np.arange(len(df['Category'])))\nax.set_xticklabels(df['Category'], rotation=45, ha='right', rotation_mode='anchor')\n\n# Calculate max total value and set suitable y limit and ticks\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value/1000) * 1000\nax.set_ylim(0, max_total_value)\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set legend and adjust position\nax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n\n# Randomly set background grid lines\nax.grid(color='gray', linestyle='--', alpha=0.2)\n\n# Automatically resize image and save\nplt.tight_layout()\nplt.savefig('output/final/area_chart/png/20231228-131755_5.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference between the retail sales and e-commerce sales for Electronics?",
            "output": "$2000"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_164",
        "img": "./area_chart/png/area_chart_164.png",
        "topic": "Food and Beverage Industry",
        "title": " Food and Beverage Industry Financial Performance",
        "csv": "Category \\t Food Sales (in thousands) \\t Beverage Sales (in thousands) \\t Food and Beverage Expenses (in thousands) \\t Net Profit (in thousands) \\n Restaurant \\t 150 \\t 100 \\t 120 \\t 80 \\n Grocery Store \\t 100 \\t 150 \\t 80 \\t 70 \\n Fast Food \\t 200 \\t 100 \\t 120 \\t 100 \\n Bakery \\t 150 \\t 200 \\t 100 \\t 80 \\n Convenience Store \\t 100 \\t 120 \\t 50 \\t 70 \\n Catering \\t 250 \\t 100 \\t 150 \\t 80 \\n Cafeteria \\t 180 \\t 120 \\t 100 \\t 80 \\n Food Truck \\t 100 \\t 150 \\t 120 \\t 70 \\n Pub \\t 150 \\t 200 \\t 100 \\t 70 \\n Coffee Shop \\t 200 \\t 150 \\t 100 \\t 80 \\n Food Delivery \\t 100 \\t 180 \\t 50 \\t 70 \\n Bar \\t 150 \\t 120 \\t 100 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates financial performance metrics across various food and beverage industry categories. It highlights food sales, beverage sales, expenses, and net profit all in thousands of dollars. For instance, restaurants show food sales of 150k, beverage sales of 100k, expenses of 120k, and a net profit of 80k. Grocery stores, fast food, bakeries, convenience stores, catering businesses, cafeterias, food trucks, pubs, coffee shops, food delivery services, and bars are similarly represented. Each category has four associated financial figures showing sales in food and beverages, how much was spent, and the resulting net profit."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create dictionary with data\ndata = {\n    'Category': ['Restaurant', 'Grocery Store', 'Fast Food', 'Bakery', 'Convenience Store', 'Catering', 'Cafeteria', 'Food Truck', 'Pub', 'Coffee Shop', 'Food Delivery', 'Bar'],\n    'Food Sales (in thousands)': [150, 100, 200, 150, 100, 250, 180, 100, 150, 200, 100, 150],\n    'Beverage Sales (in thousands)': [100, 150, 100, 200, 120, 100, 120, 150, 200, 150, 180, 120],\n    'Food and Beverage Expenses (in thousands)': [120, 80, 120, 100, 50, 150, 100, 120, 100, 100, 50, 100],\n    'Net Profit (in thousands)': [80, 70, 100, 80, 70, 80, 80, 70, 70, 80, 70, 80]\n}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size and create subplots\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set x and y axis limits\nax.set_xlim(0, len(df.index) - 1)\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value / 10) * 10\nax.set_ylim(0, max_total_value)\n\n# Set y ticks\nyticks = np.random.choice([3, 5, 7, 9, 11])\nax.set_yticks(np.linspace(0, max_total_value, yticks, dtype=np.int32))\n\n# Set background grid lines\nax.grid(alpha=0.3, linestyle='--')\n\n# Plot area chart\nax.stackplot(df['Category'], df['Food Sales (in thousands)'], df['Beverage Sales (in thousands)'],\ndf['Food and Beverage Expenses (in thousands)'], df['Net Profit (in thousands)'],\n labels=['Food Sales (in thousands)', 'Beverage Sales (in thousands)', 'Food and Beverage Expenses (in thousands)', 'Net Profit (in thousands)'], \n colors=['#FFB347', '#77DD77', '#FFA07A', '#B0E0E6'], alpha=0.7)\n\n# Set legend and its position\nax.legend(loc='upper left')\n\n# Set x and y labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Sales (in thousands)')\nax.set_title('Food and Beverage Industry Financial Performance')\n\n# Automatically resize the image\nfig.tight_layout()\n\n# Save the image\nfig.savefig('output/final/area_chart/png/20231228-140159_84.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much is the Food and Beverage Expenses of the Grocery Store?",
            "output": "80 thousand"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_15",
        "img": "./area_chart/png/area_chart_15.png",
        "topic": "Real Estate and Housing Market",
        "title": " Housing Market Trends in 2021",
        "csv": "Month \\t Single Family Homes (Units) \\t Multi-Family Homes (Units) \\t Condos (Units) \\t Townhomes (Units) \\n Jan \\t 300 \\t 200 \\t 100 \\t 150 \\n Feb \\t 290 \\t 210 \\t 120 \\t 140 \\n Mar \\t 310 \\t 190 \\t 110 \\t 160 \\n Apr \\t 300 \\t 205 \\t 115 \\t 155 \\n May \\t 305 \\t 195 \\t 105 \\t 160 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates housing market trends for various types of homes over the first five months of 2021. It shows the number of units sold for single-family homes, multi-family homes, condos, and townhomes in each month. January starts with 300 single-family homes, 200 multi-family homes, 100 condos, and 150 townhomes. Over the months, these numbers fluctuate, with single-family homes peaking at 310 units in March and condos at 120 units in February. The data presents a market with movements in all housing types, capturing the dynamics of the housing market during these months."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Define data as dictionary\ndata = {'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n        'Single Family Homes (Units)': [300, 290, 310, 300, 305],\n        'Multi-Family Homes (Units)': [200, 210, 190, 205, 195],\n        'Condos (Units)': [100, 120, 110, 115, 105],\n        'Townhomes (Units)': [150, 140, 160, 155, 160]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set background grid lines\nax.grid(color='lightgrey', linestyle='--', linewidth=0.5, alpha=0.5)\n\n# Set x and y axis ticks and ticklabels\nif np.random.choice([True, False], p=[0.7, 0.3]):\n    ax.set_xlim(0, len(df.index) - 1)\n    ax.set_xticks(np.arange(len(df.index)))\n    ax.set_xticklabels(df['Month'])\n    ax.set_yticks(np.linspace(0, df.iloc[:, 1:].sum(axis=1).max(), np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n    ax.set_yticklabels(np.linspace(0, df.iloc[:, 1:].sum(axis=1).max(), np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set max total value and y limits\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value / 10) * 10\nax.set_ylim(0, max_total_value)\n\n# Set suitable colors and transparency\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nalpha = 0.7\n\n# Plot the data with area chart\nax.stackplot(df['Month'], df['Single Family Homes (Units)'], df['Multi-Family Homes (Units)'], df['Condos (Units)'], df['Townhomes (Units)'], labels=['Single Family Homes', 'Multi-Family Homes', 'Condos', 'Townhomes'], colors=colors, alpha=alpha)\n\n# Set legend and position\nax.legend(loc='upper right')\n\n# Set title\nax.set_title('Housing Market Trends in 2021')\n\n# Automatically resize the image\nfig.tight_layout()\n\n# Save figure\nplt.savefig('output/final/area_chart/png/20231226-103019_24.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which type of housing unit shows the highest increase in units from January to May?",
            "output": "Single Family Homes (Units)"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_104",
        "img": "./area_chart/png/area_chart_104.png",
        "topic": "Transportation and Logistics",
        "title": " Distribution of Transportation Units by Region",
        "csv": "Category \\t Trucks (Units) \\t Ships (Units) \\t Planes (Units) \\t Trains (Units) \\t Vehicles (Units) \\n USA \\t 500 \\t 200 \\t 300 \\t 400 \\t 600 \\n Europe \\t 400 \\t 300 \\t 200 \\t 350 \\t 550 \\n Asia \\t 600 \\t 400 \\t 500 \\t 300 \\t 700 \\n South America \\t 300 \\t 200 \\t 150 \\t 250 \\t 350 \\n Africa \\t 200 \\t 100 \\t 50 \\t 150 \\t 250 \\n Oceania \\t 100 \\t 50 \\t 20 \\t 80 \\t 120 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates the distribution of transportation units by region, comprising trucks, ships, planes, trains, and other vehicles. The USA reports 500 trucks, 200 ships, 300 planes, 400 trains, and 600 vehicles. Europe has 400 trucks, 300 ships, 200 planes, 350 trains, and 550 vehicles. Asia leads with 600 trucks, 400 ships, 500 planes, 300 trains, and 700 vehicles. South America shows 300 trucks, 200 ships, 150 planes, 250 trains, and 350 vehicles, while Africa records 200 trucks, 100 ships, 50 planes, 150 trains, and 250 vehicles. Oceania has the fewest with 100 trucks, 50 ships, 20 planes, 80 trains, and 120 vehicles."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create dictionary for data\ndata = {\"Category\": [\"USA\", \"Europe\", \"Asia\", \"South America\", \"Africa\", \"Oceania\"],\n        \"Trucks (Units)\": [500, 400, 600, 300, 200, 100],\n        \"Ships (Units)\": [200, 300, 400, 200, 100, 50],\n        \"Planes (Units)\": [300, 200, 500, 150, 50, 20],\n        \"Trains (Units)\": [400, 350, 300, 250, 150, 80],\n        \"Vehicles (Units)\": [600, 550, 700, 350, 250, 120]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set background grid lines\nax.grid(color='lightgrey', linestyle='--')\n\n# Calculate max total value for y axis\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\n\n# Round up max total value to nearest multiple of 10, 100, or 1000\nif max_total_value <= 10:\n    max_total_value = 10\nelif max_total_value > 10 and max_total_value <= 100:\n    max_total_value = np.ceil(max_total_value / 10) * 10\nelif max_total_value > 100 and max_total_value <= 1000:\n    max_total_value = np.ceil(max_total_value / 100) * 100\nelse:\n    max_total_value = np.ceil(max_total_value / 1000) * 1000\n\n# Set y axis limits and ticks\nax.set_ylim(0, max_total_value)\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Plot stacked area chart\nax.stackplot(df[\"Category\"], df[\"Trucks (Units)\"], df[\"Ships (Units)\"], df[\"Planes (Units)\"], df[\"Trains (Units)\"], df[\"Vehicles (Units)\"], labels=[\"Trucks\", \"Ships\", \"Planes\", \"Trains\", \"Vehicles\"], colors=[\"#577590\", \"#E1B16A\", \"#1D4E89\", \"#F4D35E\", \"#284B63\"], alpha=0.8)\n\n# Set legend\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=1, frameon=False)\n\n# Set x axis tick labels\nax.set_xticklabels(df[\"Category\"], rotation=45, ha='right')\n\n# Set x axis limit\nax.set_xlim(0, len(df.index) - 1)\n\n# Set x and y labels\nax.set_xlabel(\"Region\")\nax.set_ylabel(\"Units\")\n\n# Set title\nax.set_title(\"Distribution of Transportation Units by Region\")\n\n# Automatically resize image\nfig.tight_layout()\n\n# Save image\nfig.savefig(\"output/final/area_chart/png/20231228-131755_99.png\", bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more trucks does South America have compared to Africa?",
            "output": "100"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_53",
        "img": "./area_chart/png/area_chart_53.png",
        "topic": "Retail and E-commerce",
        "title": " Retail and E-commerce Sales by Category",
        "csv": "Category \\t Revenue ($) \\t Online Sales ($) \\t In-store Sales ($) \\t Total Sales ($) \\n Clothing \\t 50000 \\t 30000 \\t 20000 \\t 50000 \\n Electronics \\t 80000 \\t 50000 \\t 30000 \\t 80000 \\n Home Goods \\t 40000 \\t 20000 \\t 20000 \\t 40000 \\n Beauty & Cosmetics \\t 30000 \\t 15000 \\t 15000 \\t 30000 \\n Toys & Games \\t 60000 \\t 40000 \\t 20000 \\t 60000 \\n Food & Beverage \\t 100000 \\t 60000 \\t 40000 \\t 100000 \\n Sporting Goods \\t 70000 \\t 50000 \\t 20000 \\t 70000 \\n Furniture \\t 40000 \\t 30000 \\t 10000 \\t 40000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates retail and e-commerce sales by category, detailing revenue, online sales, in-store sales, and total sales in dollars. Clothing shows a revenue of $50,000, with $30,000 from online and $20,000 in-store. Electronics revenue is $80,000, split as $50,000 online and $30,000 in-store. Home Goods and Beauty & Cosmetics both have revenues of $40,000 and $30,000 respectively, evenly divided between online and in-store sales. Toys & Games have $60,000 revenue with a split of $40,000 online and $20,000 in-store. Food & Beverage leads with $100,000 revenue, $60,000 online and $40,000 in-store. Sporting Goods and Furniture show $70,000 and $40,000 in revenues with online sales contributing $50,000 and $30,000 respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Data\ndata = {\n    'Category': ['Clothing', 'Electronics', 'Home Goods', 'Beauty & Cosmetics', 'Toys & Games', 'Food & Beverage', 'Sporting Goods', 'Furniture'],\n    'Revenue ($)': [50000, 80000, 40000, 30000, 60000, 100000, 70000, 40000],\n    'Online Sales ($)': [30000, 50000, 20000, 15000, 40000, 60000, 50000, 30000],\n    'In-store Sales ($)': [20000, 30000, 20000, 15000, 20000, 40000, 20000, 10000],\n    'Total Sales ($)': [50000, 80000, 40000, 30000, 60000, 100000, 70000, 40000]\n}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set the figure size\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the colors and transparency for the area chart\ncolors = ['#b2d8d8', '#e1b2e1', '#e1d8b2', '#98fb98']\nalpha = 0.7\n\n# Plot the area chart\nax.stackplot(df.index, df['Revenue ($)'], df['Online Sales ($)'], df['In-store Sales ($)'],\n    df['Total Sales ($)'], labels=['Revenue ($)', 'Online Sales ($)', 'In-store Sales ($)', 'Total Sales ($)'], colors=colors, alpha=alpha)\nax.legend(loc='upper left')\n\n# Set the background grid lines\nax.grid(axis='y', alpha=0.3)\n\n# Set the x and y ticks and ticklabels\nax.set_xlim(0, len(df.index) - 1)\n\n# Calculate the max total value and set the yticks\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value / 100) * 100\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set the tick labels\nax.set_xticklabels(df['Category'], rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(['$' + str(int(i)) for i in ax.get_yticks()], wrap=True, rotation=0)\n\n# Set the title and labels\nax.set_title('Retail and E-commerce Sales by Category', fontsize=16)\nax.set_xlabel('Category', fontsize=12)\nax.set_ylabel('Sales ($)', fontsize=12)\n\n# Automatically resize the image and save it\nfig.tight_layout()\nplt.savefig('output/final/area_chart/png/20231228-131755_29.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much is the Revenue from Food & Beverage?",
            "output": "100000"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_118",
        "img": "./area_chart/png/area_chart_118.png",
        "topic": "Food and Beverage Industry",
        "title": " Food Industry Analysis",
        "csv": "Category \\t Restaurant Revenue ($) \\t Grocery Sales ($) \\t Alcohol Sales ($) \\t Online Orders ($) \\t Food Delivery Services ($) \\n Chinese \\t 20000 \\t 15000 \\t 5000 \\t 3000 \\t 10000 \\n Italian \\t 18000 \\t 12000 \\t 4000 \\t 2500 \\t 8000 \\n Mexican \\t 22000 \\t 16000 \\t 6000 \\t 3500 \\t 12000 \\n American \\t 25000 \\t 18000 \\t 7000 \\t 4000 \\t 15000 \\n Japanese \\t 21000 \\t 14000 \\t 5000 \\t 3500 \\t 10000 \\n Indian \\t 19000 \\t 13000 \\t 6000 \\t 3000 \\t 9000 \\n Thai \\t 23000 \\t 17000 \\t 7000 \\t 4000 \\t 13000 \\n French \\t 26000 \\t 19000 \\t 8000 \\t 4500 \\t 16000 \\n Fast Food \\t 30000 \\t 20000 \\t 10000 \\t 5000 \\t 20000 \\n Desserts \\t 28000 \\t 21000 \\t 9000 \\t 4500 \\t 18000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart portrays the revenue and sales distributions across various categories within the food industry. The categories include Chinese, Italian, Mexican, American, Japanese, Indian, Thai, French, Fast Food, and Desserts. Revenue and sales are divided into restaurant revenue, grocery sales, alcohol sales, online orders, and food delivery services. Each category shows a range in revenues and sales, with Fast Food leading in all categories, especially in restaurant revenue ($30,000) and food delivery services ($20,000). Restaurant revenue ranges from $18,000 for Italian to $30,000 for Fast Food, and the relative sizes of the different sectors vary per cuisine type."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create dictionary for data\ndata = {\"Category\": [\"Chinese\", \"Italian\", \"Mexican\", \"American\", \"Japanese\", \"Indian\", \"Thai\", \"French\", \"Fast Food\", \"Desserts\"],\n        \"Restaurant Revenue ($)\": [20000, 18000, 22000, 25000, 21000, 19000, 23000, 26000, 30000, 28000],\n        \"Grocery Sales ($)\": [15000, 12000, 16000, 18000, 14000, 13000, 17000, 19000, 20000, 21000],\n        \"Alcohol Sales ($)\": [5000, 4000, 6000, 7000, 5000, 6000, 7000, 8000, 10000, 9000],\n        \"Online Orders ($)\": [3000, 2500, 3500, 4000, 3500, 3000, 4000, 4500, 5000, 4500],\n        \"Food Delivery Services ($)\": [10000, 8000, 12000, 15000, 10000, 9000, 13000, 16000, 20000, 18000]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(12,8))\n\n# Plot area chart\nax.stackplot(df.index, df.iloc[:, 1:].values.T, labels=df.iloc[:, 1:].columns, colors=[\"#FFC857\", \"#E9724C\", \"#C5283D\", \"#481D24\", \"#2E1F2A\"], alpha=0.8)\n\n# Set x and y axis ticks and ticklabels\nif np.random.choice([0, 1], p=[0.3, 0.7]):\n    ax.set_xlim(0, len(df.index) - 1)\n    ax.set_xticks(np.arange(0, len(df.index)))\n    ax.set_xticklabels(df.iloc[:, 0], rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nif np.random.choice([0, 1], p=[0.3, 0.7]):\n    max_total_value = df.iloc[:, 1:].sum(axis=1).max()\n    max_total_value = np.ceil(max_total_value / 100) * 100\n    ax.set_ylim(0, max_total_value)\n    ax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Adjust legend position\nax.legend(loc=\"upper left\", bbox_to_anchor=(1, 1))\n\n# Add grid lines\nax.grid(True, alpha=0.3)\n\n# Set title\nax.set_title(\"Food Industry Analysis\")\n\n# Automatically resize image\nfig.tight_layout()\n\n# Save image\nfig.savefig(\"output/final/area_chart/png/20231228-140159_29.png\", bbox_inches=\"tight\")\n\n# Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the highest revenue across all five areas combined?",
            "output": "Fast Food"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_24",
        "img": "./area_chart/png/area_chart_24.png",
        "topic": "Technology and the Internet",
        "title": " User Distribution across Industry Categories",
        "csv": "Category \\t Web Development (Users) \\t Data Science (Users) \\t Cybersecurity (Users) \\t Artificial Intelligence (Users) \\t Social Media (Users) \\n IT \\t 200 \\t 150 \\t 180 \\t 130 \\t 250 \\n Marketing \\t 100 \\t 120 \\t 150 \\t 100 \\t 200 \\n Finance \\t 150 \\t 180 \\t 200 \\t 150 \\t 250 \\n Education \\t 100 \\t 200 \\t 250 \\t 180 \\t 150 \\n Healthcare \\t 200 \\t 180 \\t 150 \\t 130 \\t 100 \\n Science \\t 150 \\t 200 \\t 100 \\t 250 \\t 120 \\n Business \\t 180 \\t 150 \\t 100 \\t 200 \\t 170 \\n Government \\t 130 \\t 100 \\t 150 \\t 180 \\t 200 \\n E-commerce \\t 250 \\t 130 \\t 100 \\t 200 \\t 150 \\n Gaming \\t 120 \\t 100 \\t 200 \\t 180 \\t 150 \\n Mobile \\t 180 \\t 200 \\t 150 \\t 100 \\t 250 \\n Retail \\t 150 \\t 180 \\t 130 \\t 200 \\t 100 \\n Telecommunications \\t 120 \\t 150 \\t 200 \\t 170 \\t 130 \\n Automotive \\t 100 \\t 200 \\t 250 \\t 150 \\t 180 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates user distribution across various industry categories, including IT, Marketing, Finance, and more, for different tech sectors such as Web Development, Data Science, Cybersecurity, Artificial Intelligence, and Social Media. The chart includes data points like 200 Web Development users in IT, 120 Data Science users in Marketing, 200 Cybersecurity users in Finance, 180 AI users in Education, and 250 Social Media users in Mobile, amongst others, showcasing the diversity of user engagement across industries and tech sectors."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# define data dictionary\ndata = {'Category': ['IT', 'Marketing', 'Finance', 'Education', 'Healthcare', 'Science', 'Business', 'Government', 'E-commerce', 'Gaming', 'Mobile', 'Retail', 'Telecommunications', 'Automotive'], 'Web Development (Users)': [200, 100, 150, 100, 200, 150, 180, 130, 250, 120, 180, 150, 120, 100], 'Data Science (Users)': [150, 120, 180, 200, 180, 200, 150, 100, 130, 100, 200, 180, 150, 200], 'Cybersecurity (Users)': [180, 150, 200, 250, 150, 100, 100, 150, 100, 200, 150, 130, 200, 250], 'Artificial Intelligence (Users)': [130, 100, 150, 180, 130, 250, 200, 180, 200, 180, 100, 200, 170, 150], 'Social Media (Users)': [250, 200, 250, 150, 100, 120, 170, 200, 150, 150, 250, 100, 130, 180]}\n\n# convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# create figure and axes\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# calculate max total value and set y limit and ticks\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value / 100) * 100\nax.set_ylim(0, max_total_value)\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# plot stacked area chart\nax.stackplot(df.index, df.iloc[:, 1:].values.T, labels=df.columns[1:], colors=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd'], alpha=0.8)\n\n# set x and y axis ticks and ticklabels\nif np.random.choice([True, False], p=[0.7, 0.3]):\n    ax.set_xticks(df.index)\n    ax.set_xticklabels(df.iloc[:, 0], rotation=45, ha='right', rotation_mode='anchor')\n    ax.set_xlim(0, len(df.index) - 1)\nif np.random.choice([True, False], p=[0.7, 0.3]):\n    ax.set_yticklabels(ax.get_yticks(), rotation=45, ha='right', rotation_mode='anchor')\n\n# add background grid lines\nax.grid(axis='y', color='gray', alpha=0.5, linestyle='--')\n\n# set legend and title\nax.legend(loc='upper left')\nax.set_title('User Distribution across Industry Categories')\n\n# automatically resize image and savefig\nfig.tight_layout()\nfig.savefig('output/final/area_chart/png/20231226-130527_0.png', bbox_inches='tight')\n\n# clear image state\nplt.clf()\n"
        },
        "QA": {
            "input": "Which category has the highest number of users in Cybersecurity?",
            "output": "Education"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_65",
        "img": "./area_chart/png/area_chart_65.png",
        "topic": "Tourism and Hospitality",
        "title": " Tourism and Hospitality Trends",
        "csv": "Country \\t Hotel Bookings \\t Restaurant Reservations \\t Museum Visits \\t Airport Arrivals \\n USA \\t 10000 \\t 20000 \\t 5000 \\t 100000 \\n UK \\t 8000 \\t 15000 \\t 4000 \\t 80000 \\n France \\t 5000 \\t 10000 \\t 3000 \\t 50000 \\n Germany \\t 4000 \\t 8000 \\t 2000 \\t 40000 \\n Spain \\t 3000 \\t 6000 \\t 1000 \\t 30000 \\n Italy \\t 2000 \\t 4000 \\t 500 \\t 20000 \\n China \\t 1000 \\t 2000 \\t 1000 \\t 10000 \\n Japan \\t 500 \\t 1000 \\t 1500 \\t 5000 \\n Brazil \\t 1000 \\t 1500 \\t 800 \\t 10000 \\n Mexico \\t 500 \\t 1000 \\t 400 \\t 5000 \\n Canada \\t 800 \\t 1500 \\t 500 \\t 8000 \\n Australia \\t 500 \\t 1000 \\t 400 \\t 5000 \\n Russia \\t 800 \\t 1500 \\t 300 \\t 8000 \\n India \\t 1000 \\t 2000 \\t 1000 \\t 10000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart presents tourism and hospitality trends across various countries. It plots hotel bookings, restaurant reservations, museum visits, and airport arrivals. The United States leads in all categories with 10,000 hotel bookings, 20,000 restaurant reservations, 5,000 museum visits, and 100,000 airport arrivals. The UK, France, Germany, and Spain follow, but with lower numbers across the board. Italy, China, Japan, Brazil, Mexico, Canada, Australia, Russia, and India are represented with progressively smaller figures in each category. The data captures a snapshot of the tourism activity, highlighting variations in travel and entertainment preferences by country."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Convert data to dictionary\ndata = {\"Country\": [\"USA\", \"UK\", \"France\", \"Germany\", \"Spain\", \"Italy\", \"China\", \"Japan\", \"Brazil\", \"Mexico\", \"Canada\", \"Australia\", \"Russia\", \"India\"],\n        \"Hotel Bookings\": [10000, 8000, 5000, 4000, 3000, 2000, 1000, 500, 1000, 500, 800, 500, 800, 1000],\n        \"Restaurant Reservations\": [20000, 15000, 10000, 8000, 6000, 4000, 2000, 1000, 1500, 1000, 1500, 1000, 1500, 2000],\n        \"Museum Visits\": [5000, 4000, 3000, 2000, 1000, 500, 1000, 1500, 800, 400, 500, 400, 300, 1000],\n        \"Airport Arrivals\": [100000, 80000, 50000, 40000, 30000, 20000, 10000, 5000, 10000, 5000, 8000, 5000, 8000, 10000]}\n\n# Convert data to dataframe\ndf = pd.DataFrame(data)\n\n# Convert first column to string type\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(10,7))\n\n# Set colors\ncolors = ['#5C9BD5', '#ED7D31', '#A5A5A5', '#FFC000']\n\n# Set transparency\nalpha = 0.7\n\n# Plot the chart\nax.stackplot(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], df.iloc[:, 4], colors=colors, alpha=alpha)\n\n# Set background grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set x and y axis ticks and ticklabels\nif np.random.choice([True, False], p=[0.7, 0.3]):\n    ax.set_xticks(np.arange(len(df.iloc[:, 0])))\n    ax.set_xticklabels(df.iloc[:, 0])\n    ax.set_xlim(0, len(df.index) - 1)\n    \nif np.random.choice([True, False], p=[0.7, 0.3]):\n    max_total_value = df.iloc[:, 1:].sum(axis=1).max()\n    max_total_value = np.ceil(max_total_value / 1000) * 1000\n    ax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n    ax.set_ylim(0, max_total_value)\n\n# Set x and y axis labels\nax.set_xlabel(\"Country\")\nax.set_ylabel(\"Count\")\n\n# Set legend\nax.legend([\"Hotel Bookings\", \"Restaurant Reservations\", \"Museum Visits\", \"Airport Arrivals\"], loc=\"upper left\")\n\n# Set title\nax.set_title(\"Tourism and Hospitality Trends\")\n\n# Automatically resize image\nplt.tight_layout()\n\n# Save figure\nfig.savefig(\"output/final/area_chart/png/20231228-131755_46.png\", bbox_inches=\"tight\")"
        },
        "QA": {
            "input": "Which country has the least number of airport arrivals according to the data?",
            "output": "Russia"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_41",
        "img": "./area_chart/png/area_chart_41.png",
        "topic": "Environment and Sustainability",
        "title": " Environmental Sustainability by Industry",
        "csv": "Category \\t Recycling (%) \\t Energy Usage (%) \\t Water Conservation (%) \\t Sustainable Transport (%) \\t Green Spaces (%) \\n Government \\t 50 \\t 30 \\t 20 \\t 10 \\t 60 \\n Business \\t 40 \\t 35 \\t 25 \\t 15 \\t 50 \\n Education \\t 30 \\t 40 \\t 30 \\t 20 \\t 40 \\n Non-Profit \\t 20 \\t 45 \\t 35 \\t 25 \\t 30 \\n Healthcare \\t 10 \\t 50 \\t 40 \\t 30 \\t 20 \\n Agriculture \\t 15 \\t 55 \\t 45 \\t 35 \\t 10 \\n Hospitality \\t 25 \\t 60 \\t 50 \\t 40 \\t 5 \\n Retail \\t 35 \\t 65 \\t 55 \\t 45 \\t 0 \\n Construction \\t 45 \\t 70 \\t 60 \\t 50 \\t 10 \\n Transportation \\t 55 \\t 75 \\t 65 \\t 55 \\t 20 \\n Energy \\t 65 \\t 80 \\t 70 \\t 60 \\t 30 \\n Technology \\t 75 \\t 85 \\t 75 \\t 65 \\t 40 \\n Food & Beverage \\t 85 \\t 90 \\t 80 \\t 70 \\t 50 \\n Manufacturing \\t 90 \\t 95 \\t 85 \\t 75 \\t 60 \\n Real Estate \\t 100 \\t 100 \\t 90 \\t 80 \\t 70 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates the environmental sustainability efforts across various industries, measured by percentages in recycling, energy usage, water conservation, sustainable transport, and green spaces. Each industry's commitment in these five areas ranges from government at the lower end of the scale, with 50% in recycling and 60% in green spaces, to real estate at the higher end, with 100% in both recycling and energy usage, and 70% in green spaces. The chart shows a progressive increase in commitment to sustainability as one moves from government to real estate."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Data\ndata = {'Category': ['Government', 'Business', 'Education', 'Non-Profit', 'Healthcare', 'Agriculture', 'Hospitality', 'Retail', 'Construction', 'Transportation', 'Energy', 'Technology', 'Food & Beverage', 'Manufacturing', 'Real Estate'], \n        'Recycling (%)': [50, 40, 30, 20, 10, 15, 25, 35, 45, 55, 65, 75, 85, 90, 100],\n        'Energy Usage (%)': [30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100],\n        'Water Conservation (%)': [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90],\n        'Sustainable Transport (%)': [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80],\n        'Green Spaces (%)': [60, 50, 40, 30, 20, 10, 5, 0, 10, 20, 30, 40, 50, 60, 70]}\n\n# Convert data into pandas dataframe\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set up figure and axes\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot area chart\nax.stackplot(df.index, df['Recycling (%)'], df['Energy Usage (%)'], df['Water Conservation (%)'], df['Sustainable Transport (%)'], df['Green Spaces (%)'], labels=['Recycling', 'Energy Usage', 'Water Conservation', 'Sustainable Transport', 'Green Spaces'], alpha=0.8)\n\n# Set x and y axis ticks and labels\nax.set_xticks(df.index)\nax.set_xticklabels(df['Category'], rotation=45, ha='right', rotation_mode='anchor')\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value/10)*10\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\nax.set_yticklabels([str(i) + '%' for i in ax.get_yticks()])\n\n# Set grid lines\nax.grid(axis='y', alpha=0.5)\n\n# Set legend and title\nax.legend(loc='upper left', bbox_to_anchor=(1, 1))\nax.set_title('Environmental Sustainability by Industry')\n\n# Automatically resize image\nfig.tight_layout()\n\n# Save image\nfig.savefig('output/final/area_chart/png/20231228-131755_12.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which industry has the highest Energy Usage percentage?",
            "output": "Real Estate"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_143",
        "img": "./area_chart/png/area_chart_143.png",
        "topic": "Retail and E-commerce",
        "title": " Retail and E-commerce Sales Analysis",
        "csv": "Category \\t Total Sales ($) \\t Online Sales ($) \\t In-Store Sales ($) \\t E-commerce Sales ($) \\n Clothing \\t 500000 \\t 250000 \\t 250000 \\t 150000 \\n Electronics \\t 800000 \\t 400000 \\t 400000 \\t 200000 \\n Home Goods \\t 600000 \\t 300000 \\t 300000 \\t 180000 \\n Beauty \\t 300000 \\t 150000 \\t 150000 \\t 90000 \\n Food \\t 400000 \\t 200000 \\t 200000 \\t 120000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates the breakdown of total sales into online, in-store, and e-commerce sales for various retail categories. Clothing shows total sales at $500,000, split evenly between online and in-store, with $150,000 attributed to e-commerce. Electronics has a total of $800,000 sales, again evenly divided between online and in-store sales, and $200,000 in e-commerce. Home goods report $600,000 in total, with equal parts online and in-store and $180,000 via e-commerce. Beauty category sales stand at $300,000, with an even split and $90,000 e-commerce sales. Lastly, food has total sales of $400,000, equally divided with $120,000 in e-commerce."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\n\n# Import necessary modules\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create data dictionary\ndata = {'Category': ['Clothing', 'Electronics', 'Home Goods', 'Beauty', 'Food'],\n        'Total Sales ($)': [500000, 800000, 600000, 300000, 400000],\n        'Online Sales ($)': [250000, 400000, 300000, 150000, 200000],\n        'In-Store Sales ($)': [250000, 400000, 300000, 150000, 200000],\n        'E-commerce Sales ($)': [150000, 200000, 180000, 90000, 120000]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nplt.figure(figsize=(10, 7))\n\n# Plot area chart\nax = plt.axes()\nax.stackplot(df.index, df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], df.iloc[:, 4], labels=['Total Sales', 'Online Sales', 'In-Store Sales', 'E-commerce Sales'], colors=['#FFBF00', '#0080FF', '#FF00FF', '#800000'], alpha=0.5)\n\n# Set x and y axis ticks\nif np.random.choice([True, False], p=[0.7, 0.3]):\n    ax.set_xlim(0, len(df.index) - 1)\n    ax.set_xticks(df.index)\n    ax.set_xticklabels(df.iloc[:, 0])\n\n    # Rotate x axis labels if length is more than 6 characters\n    for tick in ax.get_xticklabels():\n        if len(tick.get_text()) > 6:\n            tick.set_rotation(45)\n            tick.set_ha('right')\n            tick.set_rotation_mode('anchor')\nelse:\n    ax.set_xticks([])\n\nif np.random.choice([True, False], p=[0.7, 0.3]):\n    # Get max total value\n    max_total_value = df.iloc[:, 1:].sum(axis=1).max()\n\n    # Ceil max total value up to nearest multiple of 10, 100, or 1000\n    if max_total_value > 1000:\n        max_total_value = np.ceil(max_total_value / 1000) * 1000\n    elif max_total_value > 100:\n        max_total_value = np.ceil(max_total_value / 100) * 100\n    else:\n        max_total_value = np.ceil(max_total_value / 10) * 10\n\n    # Set y axis ticks and tick labels\n    ax.set_ylim(0, max_total_value)\n    ax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n    ax.set_yticklabels(ax.get_yticks())\n\n    # Rotate y axis labels if length is more than 6 characters\n    for tick in ax.get_yticklabels():\n        if len(tick.get_text()) > 6:\n            tick.set_rotation(45)\n            tick.set_ha('right')\n            tick.set_rotation_mode('anchor')\nelse:\n    ax.set_yticks([])\n\n# Set grid lines\nplt.grid(color='gray', linestyle='dashed', linewidth=0.5)\n\n# Set legend\nax.legend(loc='upper left')\n\n# Set title\nplt.title('Retail and E-commerce Sales Analysis')\n\n# Automatically resize image\nplt.tight_layout()\n\n# Save image\nplt.savefig('output/final/area_chart/png/20231228-140159_6.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much are the e-commerce sales for Electronics?",
            "output": "$200,000"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_18",
        "img": "./area_chart/png/area_chart_18.png",
        "topic": "Business and Finance",
        "title": " Financial Performance from 2019 to 2022",
        "csv": "Year \\t Revenue (Million $) \\t Expenses (Million $) \\t Profit (Million $) \\n 2019 \\t 100 \\t 80 \\t 20 \\n 2020 \\t 110 \\t 90 \\t 20 \\n 2021 \\t 115 \\t 95 \\t 20 \\n 2022 \\t 120 \\t 100 \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart outlines financial performance from 2019 to 2022, showing Revenue, Expenses, and Profit in millions of dollars for each year. In 2019, Revenue is at 100, Expenses at 80, and Profit at 20 million dollars. The following years exhibit a gradual increase in Revenue and Expenses, with Revenue rising to 110 in 2020, 115 in 2021, and 120 in 2022. Correspondingly, Expenses increase to 90 in 2020, 95 in 2021, and 100 in 2022. Throughout the four years, Profit remains constant at 20 million dollars."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import required libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data as a dictionary\ndata = {'Year': [2019, 2020, 2021, 2022], 'Revenue (Million $)': [100, 110, 115, 120], 'Expenses (Million $)': [80, 90, 95, 100], 'Profit (Million $)': [20, 20, 20, 20]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Plot the data as an area chart\nfig, ax = plt.subplots(figsize=(12, 8))\nax.stackplot(df['Year'], df['Revenue (Million $)'], df['Expenses (Million $)'], df['Profit (Million $)'], labels=['Revenue', 'Expenses', 'Profit'], colors=['#f4d03f', '#e74c3c', '#2ecc71'], alpha=0.7)\n\n# Set x and y axis limits\nax.set_xlim(0, len(df.index) - 1)\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value / 10) * 10\nax.set_ylim(0, max_total_value)\n\n# Set y ticks and ticklabels\nyticks = np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32)\nax.set_yticks(yticks)\nax.set_yticklabels(yticks, rotation=45, ha='right', rotation_mode='anchor')\n\n# Set x and y axis labels\nax.set_xlabel('Year')\nax.set_ylabel('Million $')\n\n# Set background grid lines\nax.grid(color='#95a5a6', linestyle='--', linewidth=1, alpha=0.2)\n\n# Set legend and legend title\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc='upper left', title='Financial Performance')\n\n# Set title\nplt.title('Financial Performance from 2019 to 2022')\n\n# Automatically resize image and save\nplt.tight_layout()\nplt.savefig('output/final/area_chart/png/20231226-103019_28.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What was the incremental increase in revenue from 2020 to 2021?",
            "output": "5 million $"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_30",
        "img": "./area_chart/png/area_chart_30.png",
        "topic": "Sports and Entertainment",
        "title": " Revenue Comparison among Major Sports Leagues",
        "csv": "Year \\t Baseball (Revenue) \\t Basketball (Revenue) \\t Football (Revenue) \\t Soccer (Revenue) \\n 2015 \\t 100000 \\t 120000 \\t 150000 \\t 80000 \\n 2016 \\t 110000 \\t 140000 \\t 160000 \\t 100000 \\n 2017 \\t 120000 \\t 150000 \\t 170000 \\t 120000 \\n 2018 \\t 130000 \\t 160000 \\t 180000 \\t 130000 \\n 2019 \\t 140000 \\t 170000 \\t 190000 \\t 140000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates the revenues of four major sports from 2015 to 2019. Baseball's revenue increased from $100,000 in 2015 to $140,000 in 2019. Basketball revenue grew from $120,000 to $170,000, football experienced a rise from $150,000 to $190,000, and soccer went up from $80,000 to $140,000 over the same period. Each year shows a progressive increase in revenue for all sports."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Initialize libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create dictionary with data\ndata = {'Year': [2015, 2016, 2017, 2018, 2019],\n        'Baseball (Revenue)': [100000, 110000, 120000, 130000, 140000],\n        'Basketball (Revenue)': [120000, 140000, 150000, 160000, 170000],\n        'Football (Revenue)': [150000, 160000, 170000, 180000, 190000],\n        'Soccer (Revenue)': [80000, 100000, 120000, 130000, 140000]}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data as an area chart\nax.stackplot(df['Year'], df['Baseball (Revenue)'], df['Basketball (Revenue)'], df['Football (Revenue)'], df['Soccer (Revenue)'],\n             labels=['Baseball', 'Basketball', 'Football', 'Soccer'],\n             colors=['#D9E6E8', '#A4C8D4', '#6EA5C4', '#4989B8'],\n             alpha=0.8)\n\n# Set x and y axis ticks and tick labels\nax.set_xlim(0, len(df.index) - 1)\nax.set_xticks(np.arange(len(df.index)))\nax.set_xticklabels(df['Year'], rotation=45, ha='right', rotation_mode='anchor')\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value / 100) * 100\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set grid lines\nax.grid(ls='--')\n\n# Set legend and place it outside of the plot\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=4)\n\n# Set title\nplt.title('Revenue Comparison among Major Sports Leagues')\n\n# Automatically resize image and save it\nplt.tight_layout()\nplt.savefig('output/final/area_chart/png/20231226-130527_15.png', bbox_inches='tight')\n\n# Clear image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the revenue for Baseball in the year 2017?",
            "output": "120,000"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_36",
        "img": "./area_chart/png/area_chart_36.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Performance and Development in Various Departments",
        "csv": "Category \\t Employee Satisfaction \\t Employee Turnover \\t Training & Development \\t n HR Policies \\t n Recruitment \\n Finance \\t 80% \\t 15% \\t 20% \\t 10% \\t 12% \\n Marketing \\t 90% \\t 10% \\t 15% \\t 8% \\t 15% \\n IT \\t 75% \\t 20% \\t 18% \\t 12% \\t 20% \\n IOperationsT \\t 85% \\t 12% \\t 15% \\t 10% \\t 18% \\n Customer Service \\t 80% \\t 15% \\t 17% \\t 9% \\t 14% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart represents employee performance metrics across five departments: Finance, Marketing, IT, Operations, and Customer Service. The metrics compared are Employee Satisfaction, Employee Turnover, Training & Development, HR Policies, and Recruitment. The percentages vary per department, with Employee Satisfaction ranging from 75% in IT to 90% in Marketing. Employee Turnover fluctuates between 10% (Marketing) and 20% (IT). Training & Development, HR Policies, and Recruitment percentages span from 10% to 20%, indicating different levels of investment and challenges in these areas across departments."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Define data dictionary\ndata = {\n    'Category': ['Employee Satisfaction', 'Employee Turnover', 'Training & Development', 'HR Policies',\n                 'Recruitment'],\n    'Finance': [80, 15, 20, 10, 12],\n    'Marketing': [90, 10, 15, 8, 15],\n    'IT': [75, 20, 18, 12, 20],\n    'Operations': [85, 12, 15, 10, 18],\n    'Customer Service': [80, 15, 17, 9, 14],\n}\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Calculate max total value and round up to nearest multiple of 10, 100 or 1000\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nif max_total_value < 10:\n    max_total_value = round(max_total_value)\nelif max_total_value < 100:\n    max_total_value = round(max_total_value, -1)\nelif max_total_value < 1000:\n    max_total_value = round(max_total_value, -2)\nelse:\n    max_total_value = round(max_total_value, -3)\n\n# Set y ticks and tick labels\nyticks = np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32)\nax.set_yticks(yticks)\nax.set_yticklabels(yticks)\n\n# Set x ticks and tick labels\nxticks = np.arange(len(df.index))\nax.set_xticks(xticks)\nax.set_xticklabels(df.iloc[:, 0])\n\n# Plot area chart\nax.stackplot(xticks, df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], df.iloc[:, 4], df.iloc[:, 5], \n             labels=df.columns[1:],\n             colors=['#FFC0CB', '#FFA07A', '#FFDAB9', '#F0E68C', '#7FFFD4'], alpha=0.7)\n\n# Set legend\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=3)\n\n# Set grid lines\nax.grid(linestyle='--')\n\n# Set title\nplt.title('Employee Performance and Development in Various Departments')\n\n# Automatically resize image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('output/final/area_chart/png/20231226-130527_6.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which department has the highest Employee Satisfaction percentage?",
            "output": "Marketing"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_106",
        "img": "./area_chart/png/area_chart_106.png",
        "topic": "Technology and the Internet",
        "title": " Technology and the Internet Usage Statistics",
        "csv": "Category \\t Smartphones (Users) \\t Social Media (Users) \\t Online Shopping (Users) \\t Streaming Services (Users) \\t Cloud Computing (Users) \\n Technology \\t 250 \\t 300 \\t 200 \\t 150 \\t 220 \\n Internet \\t 300 \\t 400 \\t 250 \\t 180 \\t 300 \\n Artificial Intelligence \\t 200 \\t 250 \\t 150 \\t 120 \\t 180 \\n Mobile Apps \\t 180 \\t 200 \\t 300 \\t 250 \\t 220 \\n E-commerce \\t 150 \\t 180 \\t 250 \\t 300 \\t 200 \\n Cybersecurity \\t 100 \\t 130 \\t 150 \\t 180 \\t 220 \\n Big Data \\t 180 \\t 200 \\t 150 \\t 120 \\t 180 \\n Virtual Reality \\t 100 \\t 120 \\t 150 \\t 180 \\t 200 \\n Gaming \\t 150 \\t 180 \\t 200 \\t 220 \\t 250 \\n Digital Marketing \\t 180 \\t 200 \\t 220 \\t 250 \\t 300 \\n Cloud Storage \\t 200 \\t 220 \\t 150 \\t 120 \\t 180 \\n Internet of Things \\t 250 \\t 300 \\t 200 \\t 220 \\t 250 \\n Web Development \\t 120 \\t 150 \\t 180 \\t 200 \\t 220 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart presents technology and internet usage statistics across various categories, such as Technology, Internet, Artificial Intelligence, and more. Each category shows user numbers for activities like using Smartphones, engaging with Social Media, Online Shopping, Streaming Services, and Cloud Computing. For instance, the Technology category has 250 Smartphone users, 300 Social Media users, 200 Online Shopping users, 150 Streaming Services users, and 220 Cloud Computing users. Internet is at 300, 400, 250, 180, and 300 respectively across the same activities, while the numbers vary significantly for other categories like Artificial Intelligence, Mobile Apps, and E-commerce."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import python modules\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Set data into dictionary\ndata = {'Category': ['Technology', 'Internet', 'Artificial Intelligence', 'Mobile Apps', 'E-commerce', 'Cybersecurity',\n                     'Big Data', 'Virtual Reality', 'Gaming', 'Digital Marketing', 'Cloud Storage',\n                     'Internet of Things', 'Web Development'],\n        'Smartphones (Users)': [250, 300, 200, 180, 150, 100, 180, 100, 150, 180, 200, 250, 120],\n        'Social Media (Users)': [300, 400, 250, 200, 180, 130, 200, 120, 180, 200, 220, 300, 150],\n        'Online Shopping (Users)': [200, 250, 150, 300, 250, 150, 150, 150, 200, 220, 150, 200, 180],\n        'Streaming Services (Users)': [150, 180, 120, 250, 300, 180, 120, 180, 220, 250, 120, 220, 200],\n        'Cloud Computing (Users)': [220, 300, 180, 220, 200, 220, 180, 200, 250, 300, 180, 250, 220]}\n\n# Process data with pandas\ndf = pd.DataFrame(data)\n# Convert first column to string type\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nplt.figure(figsize=(20, 10))\n\n# Set colors\ncolors = ['#FFCCCC', '#FF9999', '#FF6666', '#FF3333', '#FF0000']\n\n# Set transparency\nalpha = 0.8\n\n# Set background grid lines\nplt.grid(True, alpha=0.3)\n\n# Set x and y axis ticks and ticklabels\nplt.xticks(rotation=45, ha='right', rotation_mode='anchor')\nplt.yticks(np.linspace(0, df.iloc[:, 1:].sum(axis=1).max(), np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set x and y axis limits\nplt.xlim(0, len(df.index) - 1)\nplt.ylim(0, np.ceil(df.iloc[:, 1:].sum(axis=1).max() / 10) * 10)\n\n# Set x and y axis labels\nplt.xlabel('Category')\nplt.ylabel('Number of Users')\n\n# Plot the chart\nax = plt.stackplot(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], df.iloc[:, 4], df.iloc[:, 5],\n                   colors=colors, alpha=alpha)\n\n# Set legend\nplt.legend(ax, ['Smartphones', 'Social Media', 'Online Shopping', 'Streaming Services', 'Cloud Computing'],\n           loc='upper left')\n\n# Set title\nplt.title('Technology and the Internet Usage Statistics')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('output/final/area_chart/png/20231228-140159_1.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the highest number of Streaming Services users?",
            "output": "Digital Marketing"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_13",
        "img": "./area_chart/png/area_chart_13.png",
        "topic": "Retail and E-commerce",
        "title": " Monthly Retail and E-commerce Performance",
        "csv": "Month \\t Revenue ($) \\t Expenses ($) \\t Profit ($) \\n January \\t 500000 \\t 450000 \\t 50000 \\n February \\t 480000 \\t 430000 \\t 50000 \\n March \\t 520000 \\t 460000 \\t 60000 \\n April \\t 450000 \\t 400000 \\t 50000 \\n May \\t 540000 \\t 490000 \\t 50000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates a company's monthly retail and e-commerce performance, detailing revenue, expenses, and profit for five months. In January, revenue was $500,000, expenses were $450,000, and profit was $50,000. February saw similar profit but slightly lower revenue and expenses, at $480,000 and $430,000 respectively. March had higher numbers with $520,000 in revenue, $460,000 in expenses, and $60,000 in profit. April's revenue dropped to $450,000 with expenses at $400,000 and profit at $50,000. The trend improved in May, with revenue at $540,000, expenses at $490,000, and profit also at $50,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define data\ndata = {'Month': ['January', 'February', 'March', 'April', 'May'], 'Revenue ($)': [500000, 480000, 520000, 450000, 540000], 'Expenses ($)': [450000, 430000, 460000, 400000, 490000], 'Profit ($)': [50000, 50000, 60000, 50000, 50000]}\n\n# Process data into dataframe\ndf = pd.DataFrame(data)\n\n# Convert first column to string type\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size and create plot\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\n\n# Plot area chart\nax.stackplot(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], labels=['Revenue', 'Expenses', 'Profit'], colors=['#FFB4B4', '#B4D8FF', '#B4FFB4'], alpha=0.7)\n\n# Set x and y axis tick labels and rotation\nmax_total_value = np.ceil(df.iloc[:, 1:].sum(axis=1).max() / 1000) * 1000\nax.set_ylim(0, max_total_value)\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set x and y axis limits\nax.set_xlim(0, len(df.index) - 1)\nax.set_ylim(0, np.ceil(df.iloc[:, 1:].sum(axis=1).max() / 1000) * 1000)\n\n# Set grid lines\nax.grid(color='gray', linestyle='--')\n\n# Add legend and set its position\nax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n\n# Set title and labels\nax.set_title('Monthly Retail and E-commerce Performance')\nax.set_xlabel('Month')\nax.set_ylabel('Amount ($)')\n\n# Automatically resize image and save\nplt.tight_layout()\nplt.savefig('output/final/area_chart/png/20231226-103019_22.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the total revenue for the given months?",
            "output": "$2,490,000"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_70",
        "img": "./area_chart/png/area_chart_70.png",
        "topic": "Law and Legal Affairs",
        "title": " Legal Cases by Month",
        "csv": "Month \\t Corporate Law (Cases) \\t Criminal Law (Cases) \\t Family Law (Cases) \\t Environmental Law (Cases) \\t Immigration Law (Cases) \\n January \\t 20 \\t 30 \\t 10 \\t 15 \\t 5 \\n February \\t 25 \\t 35 \\t 15 \\t 10 \\t 10 \\n March \\t 30 \\t 25 \\t 20 \\t 20 \\t 5 \\n April \\t 35 \\t 20 \\t 25 \\t 15 \\t 10 \\n May \\t 25 \\t 30 \\t 20 \\t 10 \\t 20 \\n June \\t 15 \\t 20 \\t 15 \\t 20 \\t 25 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates the number of cases in various legal fields over six months. Corporate Law cases start at 20 in January and peak at 35 in April. Criminal Law cases fluctuate, beginning with 30 in January, peaking at 35 in February, and then dropping to 20 by June. Family Law cases incrementally rise from 10 in January to 25 in April. Environmental Law cases see two peaks of 20 in March and June after starting at 15 in January. Immigration Law cases increase steadily, starting at 5 in January, hitting a trough in March and April, and reaching the highest count of 25 in June."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Define data as a dictionary\ndata = {\"Month\": [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"],\n       \"Corporate Law (Cases)\": [20, 25, 30, 35, 25, 15],\n       \"Criminal Law (Cases)\": [30, 35, 25, 20, 30, 20],\n       \"Family Law (Cases)\": [10, 15, 20, 25, 20, 15],\n       \"Environmental Law (Cases)\": [15, 10, 20, 15, 10, 20],\n       \"Immigration Law (Cases)\": [5, 10, 5, 10, 20, 25]}\n\n# Process the data using pandas\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size and create subplot\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data as an area chart\nax.stackplot(df[\"Month\"], df[\"Corporate Law (Cases)\"], df[\"Criminal Law (Cases)\"], df[\"Family Law (Cases)\"], df[\"Environmental Law (Cases)\"], df[\"Immigration Law (Cases)\"], labels=[\"Corporate Law\", \"Criminal Law\", \"Family Law\", \"Environmental Law\", \"Immigration Law\"], colors=[\"#00BFFF\", \"#FF1493\", \"#00FA9A\", \"#FFD700\", \"#8B4513\"], alpha=0.6)\n\n# Add background grid lines\nax.grid(color=\"gray\", linestyle=\"--\", linewidth=0.5, alpha=0.3)\n\n# Set x-axis tick labels\nax.set_xticklabels(df[\"Month\"], rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Set y-axis tick labels\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value / 10) * 10\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set axis limits\nax.set_xlim(0, len(df.index) - 1)\nax.set_ylim(0, max_total_value)\n\n# Add legend and set its position\nax.legend(loc=\"upper left\", bbox_to_anchor=(1, 1))\n\n# Add title and labels\nax.set_title(\"Legal Cases by Month\", fontsize=12)\nax.set_xlabel(\"Month\", fontsize=10)\nax.set_ylabel(\"Number of Cases\", fontsize=10)\n\n# Automatically resize image and save\nplt.tight_layout()\nplt.savefig(\"output/final/area_chart/png/20231228-131755_51.png\", bbox_inches=\"tight\")\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many Immigration Law cases were there in May?",
            "output": "20"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_127",
        "img": "./area_chart/png/area_chart_127.png",
        "topic": "Transportation and Logistics",
        "title": " Freight Volume by Month",
        "csv": "Month \\t Air Freight (kg) \\t Sea Freight (kg) \\t Road Freight (kg) \\t Rail Freight (kg) \\n January \\t 50000 \\t 100000 \\t 75000 \\t 25000 \\n February \\t 60000 \\t 120000 \\t 80000 \\t 30000 \\n March \\t 70000 \\t 140000 \\t 85000 \\t 35000 \\n April \\t 80000 \\t 160000 \\t 90000 \\t 40000 \\n May \\t 90000 \\t 180000 \\t 95000 \\t 45000 \\n June \\t 100000 \\t 200000 \\t 100000 \\t 50000 \\n July \\t 110000 \\t 220000 \\t 105000 \\t 55000 \\n August \\t 120000 \\t 240000 \\t 110000 \\t 60000 \\n September \\t 130000 \\t 260000 \\t 115000 \\t 65000 \\n October \\t 140000 \\t 280000 \\t 120000 \\t 70000 \\n November \\t 150000 \\t 300000 \\t 125000 \\t 75000 \\n December \\t 160000 \\t 320000 \\t 130000 \\t 80000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates monthly freight volumes across four transportation modes: air, sea, road, and rail, throughout a year. January shows air freight at 50,000 kg, sea freight at 100,000 kg, road freight at 75,000 kg, and rail freight at 25,000 kg. A steady increase is observed each month, with December reaching the highest volumes: air freight at 160,000 kg, sea freight at 320,000 kg, road freight at 130,000 kg, and rail freight at 80,000 kg. Each transportation mode shows a consistent upward trend as the months progress."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Step 1: Define the data\ndata = {'Month': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n        'Air Freight (kg)': [50000, 60000, 70000, 80000, 90000, 100000, 110000, 120000, 130000, 140000, 150000, 160000],\n        'Sea Freight (kg)': [100000, 120000, 140000, 160000, 180000, 200000, 220000, 240000, 260000, 280000, 300000, 320000],\n        'Road Freight (kg)': [75000, 80000, 85000, 90000, 95000, 100000, 105000, 110000, 115000, 120000, 125000, 130000],\n        'Rail Freight (kg)': [25000, 30000, 35000, 40000, 45000, 50000, 55000, 60000, 65000, 70000, 75000, 80000]}\n\n# Step 2: Convert the data into a dataframe\ndf = pd.DataFrame(data)\n\n# Step 3: Convert the first column to string type\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Step 4: Create a figure and set the size\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Step 5: Calculate the max total value and set the y-axis limit and ticks\nmax_total_value = np.ceil(df.iloc[:, 1:].sum(axis=1).max() / 1000) * 1000\nax.set_ylim(0, max_total_value)\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Step 6: Use ax.stackplot() to plot the chart\nax.stackplot(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], df.iloc[:, 4], labels=['Air Freight', 'Sea Freight', 'Road Freight', 'Rail Freight'], colors=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'], alpha=0.8)\n\n# Step 7: Set the labels, title, and legend\nax.set_xlabel('Month')\nax.set_ylabel('Freight Volume (kg)')\nax.set_title('Freight Volume by Month')\nax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n\n# Step 8: Set the grid lines\nax.grid(ls='dashed')\n\n# Step 9: Automatically resize the image and save it\nplt.tight_layout()\nplt.savefig('output/final/area_chart/png/20231228-140159_4.png', bbox_inches='tight')\n\n# Step 10: Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much did the sea freight volume increase from January to December?",
            "output": "220000 kg"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_124",
        "img": "./area_chart/png/area_chart_124.png",
        "topic": "Agriculture and Food Production",
        "title": " Crop Production by Region",
        "csv": "Category \\t Corn Production (tons) \\t Wheat Production (tons) \\t Soybean Production (tons) \\t Rice Production (tons) \\t Barley Production (tons) \\n North America \\t 200000 \\t 150000 \\t 180000 \\t 130000 \\t 250000 \\n South America \\t 100000 \\t 120000 \\t 150000 \\t 100000 \\t 200000 \\n Europe \\t 150000 \\t 180000 \\t 200000 \\t 150000 \\t 250000 \\n Asia \\t 100000 \\t 200000 \\t 250000 \\t 180000 \\t 150000 \\n Africa \\t 200000 \\t 180000 \\t 150000 \\t 130000 \\t 100000 \\n Oceania \\t 150000 \\t 200000 \\t 100000 \\t 250000 \\t 120000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates crop production across different regions, specifying quantities for corn, wheat, soybean, rice, and barley. North America shows production figures: corn at 200,000 tons, wheat 150,000, soybeans 180,000, rice 130,000, and barley 250,000. South America lists corn at 100,000 tons, wheat 120,000, soybeans 150,000, rice 100,000, and barley 200,000. Europe's production includes corn at 150,000 tons, wheat 180,000, soybeans 200,000, rice 150,000, and barley 250,000. Asia's data reads corn 100,000 tons, wheat 200,000, soybeans 250,000, rice 180,000, and barley 150,000. Africa has corn at 200,000 tons, wheat 180,000, soybeans 150,000, rice 130,000, and barley 100,000. Lastly, Oceania's figures stand at corn 150,000 tons, wheat 200,000, soybeans 100,000, rice 250,000, and barley 120,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create data dictionary\ndata = {\"Category\": [\"North America\", \"South America\", \"Europe\", \"Asia\", \"Africa\", \"Oceania\"],\n        \"Corn Production (tons)\": [200000, 100000, 150000, 100000, 200000, 150000],\n        \"Wheat Production (tons)\": [150000, 120000, 180000, 200000, 180000, 200000],\n        \"Soybean Production (tons)\": [180000, 150000, 200000, 250000, 150000, 100000],\n        \"Rice Production (tons)\": [130000, 100000, 150000, 180000, 130000, 250000],\n        \"Barley Production (tons)\": [250000, 200000, 250000, 150000, 100000, 120000]\n       }\n\n# Convert first column to string type\ndf = pd.DataFrame(data)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set background grid lines\nax.grid(color=\"lightgrey\", linestyle=\"--\", linewidth=0.5)\n\n# Set x and y axis ticks and ticklabels (70% probability)\nax.set_xlim(0, len(df.index) - 1)\nif np.random.uniform() < 0.7:\n    ax.set_xticks(np.arange(len(df)))\n    ax.set_xticklabels(df.iloc[:, 0])\nif np.random.uniform() < 0.7:\n    # Calculate max total value and round up to nearest multiple of 10, 100, or 1000\n    max_total_value = np.ceil(df.iloc[:, 1:].sum(axis=1).max() / 10) * 10\n    # Set yticks with random length from list of [3, 5, 7, 9, 11]\n    ax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n    ax.set_yticklabels(ax.get_yticks())\n\n# Plot data as stacked area chart\nax.stackplot(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], df.iloc[:, 4], df.iloc[:, 5],\n             labels=df.columns[1:6], alpha=0.6)\n\n# Set legend and adjust position\nax.legend(loc=\"upper left\", fontsize=\"small\")\nfig.tight_layout()\n\n# Set title\nax.set_title(\"Crop Production by Region\")\n\n# Automatically resize image and save figure\nfig.tight_layout()\nfig.savefig(\"output/final/area_chart/png/20231228-140159_35.png\", bbox_inches=\"tight\")\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which region has the highest Soybean production?",
            "output": "Asia"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_186",
        "img": "./area_chart/png/area_chart_186.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Charity and Nonprofit Organization Expenditures and Volunteer Involvement",
        "csv": "Category \\t Donations ($) \\t Grants ($) \\t Fundraising ($) \\n Education \\t 20000 \\t 50000 \\t 15000 \\n Healthcare \\t 30000 \\t 40000 \\t 20000 \\n Social Services \\t 25000 \\t 35000 \\t 10000 \\n Environment \\t 15000 \\t 30000 \\t 25000 \\n Arts and Culture \\t 10000 \\t 20000 \\t 5000 \\n Animal Welfare \\t 20000 \\t 25000 \\t 15000 \\n Disaster Relief \\t 30000 \\t 50000 \\t 30000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart depicts charity and nonprofit organization financial activities across seven categories: Education, Healthcare, Social Services, Environment, Arts and Culture, Animal Welfare, and Disaster Relief. It illustrates the breakdown of funds acquired through Donations, Grants, and Fundraising efforts in dollars. Education receives $20,000 in donations, $50,000 in grants, and $15,000 through fundraising. Healthcare shows $30,000 in donations, $40,000 from grants, and $20,000 fundraising. Social Services lists $25,000, $35,000, and $10,000 respectively. Environment, Arts and Culture, Animal Welfare, and Disaster Relief follow with their respective financial figures in each funding category."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# create data dictionary\ndata = {\n    'Category': ['Education', 'Healthcare', 'Social Services', 'Environment', 'Arts and Culture', 'Animal Welfare', 'Disaster Relief'],\n    'Donations ($)': [20000, 30000, 25000, 15000, 10000, 20000, 30000],\n    'Grants ($)': [50000, 40000, 35000, 30000, 20000, 25000, 50000],\n    'Fundraising ($)': [15000, 20000, 10000, 25000, 5000, 15000, 30000],\n}\n\n# convert data to dataframe\ndf = pd.DataFrame(data)\n\n# convert first column to string type\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# create figure and axes\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# set x and y axis ticks and labels\nax.set_xticks(np.arange(len(df.index)))\nax.set_xticklabels(df['Category'], rotation=45, ha='right', rotation_mode='anchor')\nax.set_xlim(0, len(df.index) - 1)\nax.set_yticks(np.linspace(0, df.iloc[:, 1:].sum(axis=1).max(), np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# set colors and transparency\ncolors = ['#5F9EA0', '#7B68EE', '#FF7F50']\nalpha = 0.5\n\n# create stacked area chart\nax.stackplot(df['Category'], df['Donations ($)'], df['Grants ($)'], df['Fundraising ($)'], colors=colors, alpha=alpha)\n\n# add background grid lines\nax.grid(axis='y', color='gray', linestyle='dashed', alpha=0.5)\n\n# add legend\nax.legend(['Donations ($)', 'Grants ($)', 'Fundraising ($)'], loc='upper left', bbox_to_anchor=(1, 1))\n\n# set title\nax.set_title('Charity and Nonprofit Organization Expenditures and Volunteer Involvement')\n\n# automatically resize image\nplt.tight_layout()\n\n# save figure\nplt.savefig('output/final/area_chart/png/20231228-145339_17.png', bbox_inches='tight')\n\n# clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the largest total amount of Donations, Grants, and Fundraising combined?",
            "output": "Disaster Relief"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_17",
        "img": "./area_chart/png/area_chart_17.png",
        "topic": "Transportation and Logistics",
        "title": " Transportation and Logistics by Month",
        "csv": "Month \\t Trucks (Units) \\t Ships (Units) \\t Planes (Units) \\t Trains (Units) \\n Jan \\t 200 \\t 100 \\t 50 \\t 150 \\n Feb \\t 180 \\t 120 \\t 45 \\t 160 \\n Mar \\t 220 \\t 90 \\t 60 \\t 170 \\n Apr \\t 210 \\t 110 \\t 40 \\t 180 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates monthly transportation logistics data measured by the number of units. For January, there are 200 truck units, 100 ship units, 50 plane units, and 150 train units. February shows 180 trucks, 120 ships, 45 planes, and 160 trains. March records 220 trucks, 90 ships, 60 planes, and 170 trains, while April lists 210 trucks, 110 ships, 40 planes, and 180 train units."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Represent data using dictionary\ndata_dict = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr'],\n    'Trucks (Units)': [200, 180, 220, 210],\n    'Ships (Units)': [100, 120, 90, 110],\n    'Planes (Units)': [50, 45, 60, 40],\n    'Trains (Units)': [150, 160, 170, 180]\n}\n\n# Use pandas to process data\ndf = pd.DataFrame(data_dict)\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set x and y axis ticks and ticklabels\nax.set_xlim(0, len(df.index) - 1)\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value / 100) * 100\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Set background grid lines\nax.grid(linestyle='--', alpha=0.5)\n\n# Set colors and transparency\ncolors = ['#FFB6C1', '#87CEEB', '#FFDAB9', '#90EE90']\n\n# Plot the data with type of area chart\nax.stackplot(df['Month'], df['Trucks (Units)'], df['Ships (Units)'], df['Planes (Units)'], df['Trains (Units)'], labels=['Trucks', 'Ships', 'Planes', 'Trains'], colors=colors, alpha=0.7)\n\n# Set legend's position\nax.legend(loc='upper left')\n\n# Set title and axis labels\nax.set_title('Transportation and Logistics by Month')\nax.set_xlabel('Month')\nax.set_ylabel('Units')\n\n# Automatically resize image\nfig.tight_layout()\n\n# Save figure\nfig.savefig('output/final/area_chart/png/20231226-103019_27.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many truck units were shipped in March?",
            "output": "220"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_213",
        "img": "./area_chart/png/area_chart_213.png",
        "topic": "Social Media and the Web",
        "title": " Social Media Usage by Industry",
        "csv": "Category \\t Facebook (Users) \\t Twitter (Users) \\t Instagram (Users) \\t LinkedIn (Users) \\t YouTube (Users) \\n Technology \\t 200 \\t 150 \\t 180 \\t 130 \\t 250 \\n Entertainment \\t 100 \\t 120 \\t 150 \\t 100 \\t 200 \\n Fashion \\t 150 \\t 180 \\t 200 \\t 150 \\t 250 \\n Food \\t 100 \\t 200 \\t 250 \\t 180 \\t 150 \\n Travel \\t 200 \\t 180 \\t 150 \\t 130 \\t 100 \\n Beauty \\t 150 \\t 200 \\t 100 \\t 250 \\t 120 \\n Fitness \\t 180 \\t 150 \\t 100 \\t 200 \\t 170 \\n Lifestyle \\t 130 \\t 100 \\t 150 \\t 180 \\t 200 \\n Sports \\t 250 \\t 130 \\t 100 \\t 200 \\t 150 \\n News \\t 120 \\t 100 \\t 200 \\t 180 \\t 150 \\n Music \\t 180 \\t 200 \\t 150 \\t 100 \\t 250 \\n Art \\t 150 \\t 180 \\t 130 \\t 200 \\t 100 \\n Business \\t 120 \\t 150 \\t 200 \\t 170 \\t 130 \\n Health \\t 100 \\t 200 \\t 250 \\t 150 \\t 180 \\n Education \\t 200 \\t 180 \\t 150 \\t 130 \\t 100 \\n Politics \\t 150 \\t 200 \\t 100 \\t 250 \\t 120 \\n Marketing \\t 180 \\t 150 \\t 100 \\t 200 \\t 170 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates the number of users across various industries on six different social media platforms: Facebook, Twitter, Instagram, LinkedIn, YouTube, and TikTok. User counts for each platform are provided for technology, entertainment, fashion, food, travel, beauty, fitness, lifestyle, sports, news, music, art, business, health, education, politics, and marketing industries. For instance, the technology industry registers 200 Facebook users, 150 Twitter users, and so forth, while the beauty industry shows 150 Facebook users, 200 Twitter users, among others. The chart offers a comparison of social media engagement across different sectors."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# convert data to dictionary\ndata = {'Category': ['Technology', 'Entertainment', 'Fashion', 'Food', 'Travel', 'Beauty', 'Fitness', 'Lifestyle', 'Sports', 'News', 'Music', 'Art', 'Business', 'Health', 'Education', 'Politics', 'Marketing'],\n        'Facebook (Users)': [200, 100, 150, 100, 200, 150, 180, 130, 250, 120, 180, 150, 120, 100, 200, 150, 180],\n        'Twitter (Users)': [150, 120, 180, 200, 180, 200, 150, 100, 130, 100, 200, 180, 150, 200, 180, 200, 150],\n        'Instagram (Users)': [180, 150, 200, 250, 150, 100, 100, 150, 100, 200, 150, 130, 200, 250, 150, 100, 100],\n        'LinkedIn (Users)': [130, 100, 150, 180, 130, 250, 200, 180, 200, 180, 100, 200, 170, 150, 130, 250, 200],\n        'YouTube (Users)': [250, 200, 250, 150, 100, 120, 170, 200, 150, 150, 250, 100, 130, 180, 100, 120, 170]}\n\n# convert data to dataframe\ndf = pd.DataFrame(data)\n\n# convert first column to string\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# plot the chart\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# randomly set background grid lines\nplt.grid(color='lightgrey', linestyle='--', linewidth=0.5)\n\n# calculate max total value and set y limit and ticks\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nmax_total_value = np.ceil(max_total_value/100.0)*100.0\nax.set_ylim(0, max_total_value)\nax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# set colors and transparency\ncolors = ['#0059B3', '#00A3E0', '#00CCFF', '#80DFFF', '#CCE6FF']\ntransparency = 0.7\n\n# plot the chart\nax.stackplot(df['Category'], df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], df.iloc[:, 4], df.iloc[:, 5], colors=colors, alpha=transparency)\n\n# set legend\nax.legend(['Facebook', 'Twitter', 'Instagram', 'LinkedIn', 'YouTube'], loc='upper left', bbox_to_anchor=(1, 1))\n\n# set x and y labels\nax.set_xticklabels(df['Category'], rotation=45, ha='right', rotation_mode='anchor')\nax.set_xlabel('Category')\nax.set_ylabel('Number of Users')\n\n# set title\nplt.title('Social Media Usage by Industry')\n\n# automatically resize the image\nplt.tight_layout()\n\n# save the chart\nplt.savefig('output/final/area_chart/png/20231228-145339_50.png', dpi=100, bbox_inches='tight')\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which industry has the highest number of Twitter users?",
            "output": "Food"
        }
    },
    {
        "chart_type": "area_chart",
        "imgname": "area_chart_1",
        "img": "./area_chart/png/area_chart_1.png",
        "topic": "Government and Public Policy",
        "title": " Government Priorities and Spending Trends",
        "csv": "Year \\t Education (%) \\t Healthcare (%) \\t Infrastructure (%) \\t Economy (%) \\n 2019 \\t 35 \\t 30 \\t 20 \\t 15 \\n 2020 \\t 30 \\t 35 \\t 20 \\t 15 \\n 2021 \\t 25 \\t 40 \\t 20 \\t 15 \\n 2022 \\t 20 \\t 45 \\t 20 \\t 15 \\n 2023 \\t 15 \\t 50 \\t 20 \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The area chart illustrates government spending trends across four categories: Education, Healthcare, Infrastructure, and Economy over five years (2019-2023). In 2019, the highest percentage of spending was on Education (35%), followed by Healthcare (30%). Over the years, the trend shows a decrease in the Education percentage, declining to 15% by 2023, while Healthcare spending increases steadily, reaching 50% in 2023. Infrastructure and Economy percentages remain constant at 20% and 15%, respectively, throughout the period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Data\ndata = {\"Year\": [2019, 2020, 2021, 2022, 2023],\n        \"Education (%)\": [35, 30, 25, 20, 15],\n        \"Healthcare (%)\": [30, 35, 40, 45, 50],\n        \"Infrastructure (%)\": [20, 20, 20, 20, 20],\n        \"Economy (%)\": [15, 15, 15, 15, 15]}\n\n# Convert data to dataframe\ndf = pd.DataFrame(data)\n\n# Convert first column to string type\ndf.iloc[:, 0] = df.iloc[:, 0].astype(str)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot the data with area chart\nax.stackplot(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2], df.iloc[:, 3], df.iloc[:, 4], labels=[\"Education\", \"Healthcare\", \"Infrastructure\", \"Economy\"])\n\n# Set x and y axis ticks and ticklabels\nif np.random.choice([True, False], p=[0.7, 0.3]):\n    ax.set_xticks(np.arange(0, len(df.index)))\n    ax.set_xticklabels(df.iloc[:, 0])\n    ax.set_xlim(0, len(df.index) - 1)\n\n    # Calculate max total value and set y axis ticks and ticklabels\n    max_total_value = df.iloc[:, 1:].sum(axis=1).max()\n    max_total_value = np.ceil(max_total_value / 10) * 10\n    ax.set_ylim(0, max_total_value)\n    ax.set_yticks(np.linspace(0, max_total_value, np.random.choice([3, 5, 7, 9, 11]), dtype=np.int32))\n\n# Add background grid lines\nax.grid(axis=\"y\", linestyle=\":\")\n\n# Set colors and transparency\ncolors = [\"#5E9EA0\", \"#D2691E\", \"#FF8C00\", \"#228B22\"]\nalpha = 0.8\n\n# Set legend and legend position\nlegend = ax.legend(loc=\"upper right\")\nlegend.set_title(\"Unit\")\n\n# Set title\nax.set_title(\"Government Priorities and Spending Trends\")\n\n# Automatically resize image and save\nplt.tight_layout()\nplt.savefig(\"output/final/area_chart/png/20231226-103019_0.png\", bbox_inches=\"tight\")\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of government spending was allocated to infrastructure in 2020?",
            "output": "20%"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_11",
        "img": "./heatmap/png/heatmap_11.png",
        "topic": "Science and Engineering",
        "title": " Scientific Fields and Their Involvement in Various Areas",
        "csv": "Field \\t Engineering \\t Chemistry \\t Biology \\t Physics \\t Computer Science \\t Mathematics \\n Research \\t 20 \\t 10 \\t 15 \\t 30 \\t 25 \\t 12 \\n Education \\t 30 \\t 25 \\t 15 \\t 10 \\t 20 \\t 30 \\n Industry \\t 35 \\t 30 \\t 15 \\t 20 \\t 25 \\t 28 \\n Government \\t 15 \\t 35 \\t 25 \\t 20 \\t 30 \\t 30 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This heatmap presents the involvement of different scientific fields across various areas. Engineering shows 20, 30, 35, and 15 for research, education, industry, and government respectively. Chemistry is involved with numbers posted as 10, 25, 30, and 35 across these areas. In Biology, the counts are 15 in both research and education, and equally 15 in industry with a higher engagement of 25 in government. Physics involvement is at 30 for research, 10 for education, 20 for industry, and another 20 for government. Computer Science has 25 in research, 20 in education, 25 in industry, and 30 in government. Mathematics scores 12 in research, 30 each in education and government, and 28 in industry."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# import seaborn as sns\n\n# create data\ndata = {'Field': ['Research', 'Education', 'Industry', 'Government'], 'Engineering': [20, 30, 35, 15], 'Chemistry': [10, 25, 30, 35], 'Biology': [15, 15, 15, 25], 'Physics': [30, 10, 20, 20], 'Computer Science': [25, 20, 25, 30], 'Mathematics': [12, 30, 28, 30]}\n\n# convert data to pandas dataframe\ndf = pd.DataFrame(data)\n\n# set index to Field column\ndf.set_index('Field', inplace=True)\n\n# plot heatmap using pcolor()\nfig, ax = plt.subplots(figsize=(10, 6))\nim = ax.pcolor(df, cmap='Blues')\n\n# set ticks and ticklabels for x and y axis\nax.set_xticks(np.arange(len(df.columns))+0.5, minor=False)\nax.set_yticks(np.arange(len(df.index))+0.5, minor=False)\nax.set_xticklabels(df.columns, minor=False)\nax.set_yticklabels(df.index, minor=False)\n\n# set ticks and ticklabels in the center of rows and columns\nax.xaxis.tick_top()\nax.xaxis.set_label_position('top')\nax.invert_yaxis()\n\n# rotate x-axis labels\nplt.xticks(rotation=45, ha='right', rotation_mode='anchor')\n\n# add colorbar\nplt.colorbar(im)\n\n# set title\nplt.title('Scientific Fields and Their Involvement in Various Areas')\n\n# automatically resize the image\nplt.tight_layout()\n\n# save figure\nplt.savefig('output/final/heatmap/png/20231225-210514_33.png', bbox_inches='tight')\n\n# clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which sector has the highest involvement in Physics?",
            "output": "Research"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_22",
        "img": "./heatmap/png/heatmap_22.png",
        "topic": "Retail and E-commerce",
        "title": " E-commerce Growth by Retail Category",
        "csv": "Category \\t E-commerce Revenue (Billion USD) \\t Online Sales Growth (%) \\t Store Sales Growth (%) \\t E-commerce Share of Total Sales (%) \\t Average Order Value (USD) \\n Clothing \\t 100 \\t 25 \\t 5 \\t 20 \\t 50 \\n Electronics \\t 150 \\t 20 \\t 10 \\t 25 \\t 100 \\n Beauty \\t 75 \\t 30 \\t 7 \\t 15 \\t 40 \\n Home Goods \\t 50 \\t 15 \\t 3 \\t 10 \\t 30 \\n Grocery \\t 200 \\t 35 \\t 2 \\t 40 \\t 75 \\n Accessories \\t 40 \\t 10 \\t 4 \\t 5 \\t 20 \\n Toys \\t 30 \\t 5 \\t 7 \\t 3 \\t 15 \\n Health and Wellness \\t 60 \\t 12 \\t 8 \\t 6 \\t 35 \\n Furniture \\t 50 \\t 10 \\t 3 \\t 7 \\t 45 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates E-commerce growth metrics by retail category, outlining E-commerce revenue, online and store sales growth percentages, E-commerce's share of total sales, and average order value. Clothing category shows $100 billion in revenue, a 25% increase in online sales, 5% in store growth, with E-commerce constituting 20% of total sales, and an average order value of $50. Electronics reveal higher revenue at $150 billion, yet lower online sales growth of 20%. Grocery tops in revenue at $200 billion and online sales growth at 35%, with a 40% share of E-commerce in total sales and a $75 average order value."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# Data processing\ndata = {'Category': ['Clothing', 'Electronics', 'Beauty', 'Home Goods', 'Grocery', 'Accessories', 'Toys', 'Health and Wellness', 'Furniture'], \n        'E-commerce Revenue (Billion USD)': [100, 150, 75, 50, 200, 40, 30, 60, 50], \n        'Online Sales Growth (%)': [25, 20, 30, 15, 35, 10, 5, 12, 10], \n        'Store Sales Growth (%)': [5, 10, 7, 3, 2, 4, 7, 8, 3], \n        'E-commerce Share of Total Sales (%)': [20, 25, 15, 10, 40, 5, 3, 6, 7], \n        'Average Order Value (USD)': [50, 100, 40, 30, 75, 20, 15, 35, 45]}\n\ndf = pd.DataFrame(data)\ndf = df.set_index('Category')\n\n# Plotting the heatmap chart\nfig, ax = plt.subplots(figsize=(12,8)) # Setting the size of the figure\n\n# Using the 30% probability of sns.heatmap()\nsns.heatmap(data=df, annot=True, cbar=False, cmap='Blues', fmt='g', square=True)\n\n# Using the 70% probability of imshow() or pcolor()\n# ax.pcolor(df, cmap='Blues')\n# ax.set_xticks(np.arange(0.5, len(df.columns), 1))\n# ax.set_xticklabels(df.columns, rotation=45, ha='right', rotation_mode='anchor')\n# ax.set_yticks(np.arange(0.5, len(df.index), 1))\n# ax.set_yticklabels(df.index, rotation=0, ha='center')\n# ax.set_xlabel('E-commerce Metrics')\n# ax.set_ylabel('Retail Categories')\n\n# Adding colorbar\n# cbar = plt.colorbar()\n# cbar.ax.set_ylabel('Value', rotation=90)\n\n# Setting the title and labels\nax.set_title('E-commerce Growth by Retail Category')\nax.set_xlabel('E-commerce Metrics')\nax.set_ylabel('Retail Categories')\n\n# Automatically resizing the image\nplt.tight_layout()\n\n# Saving the image\nplt.savefig('output/final/heatmap/png/20231226-140552_18.png', bbox_inches='tight')\n\n# Clearing the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the e-commerce share of total sales for the Electronics category?",
            "output": "25%"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_84",
        "img": "./heatmap/png/heatmap_84.png",
        "topic": "Sports and Entertainment",
        "title": " Team Performance in Different Sports",
        "csv": "Sport \\t Athleticism (%) \\t Strategy (%) \\t Teamwork (%) \\t Endurance (%) \\t Creativity (%) \\t Outlook (%) \\n Football \\t 70% \\t 60% \\t 80% \\t 75% \\t 50% \\t 90% \\n Basketball \\t 75% \\t 65% \\t 85% \\t 80% \\t 55% \\t 93% \\n Baseball \\t 80% \\t 70% \\t 90% \\t 85% \\t 60% \\t 95% \\n Soccer \\t 85% \\t 75% \\t 95% \\t 90% \\t 65% \\t 98% \\n Tennis \\t 90% \\t 80% \\t 98% \\t 93% \\t 70% \\t 99% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap chart illustrates the composition of team performance in different sports based on various attributes like Athleticism, Strategy, Teamwork, Endurance, Creativity, and Future Outlook. Football scores include 70% athleticism, 60% strategy, 80% teamwork, 75% endurance, 50% creativity, and 90% for outlook. Basketball marks slightly higher in each area. Baseball and Soccer continue the trend of increasing percentages in each category. Tennis tops the chart with the highest values in all attributes except for Teamwork, which is highest for Soccer. Each sport is rated from 50% to 99% across the six performance factors."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# Process the data using dict and pandas\ndata = {'Sport': ['Football', 'Basketball', 'Baseball', 'Soccer', 'Tennis'],\n        'Athleticism (%)': [70, 75, 80, 85, 90],\n        'Strategy (%)': [60, 65, 70, 75, 80],\n        'Teamwork (%)': [80, 85, 90, 95, 98],\n        'Endurance (%)': [75, 80, 85, 90, 93],\n        'Creativity (%)': [50, 55, 60, 65, 70],\n        'Outlook (%)': [90, 93, 95, 98, 99]}\n\ndf = pd.DataFrame(data)\n\n# Set the figure size\nfig = plt.figure(figsize=(10, 8))\n\n# Plot the heatmap chart using seaborn\nax = sns.heatmap(df.iloc[:, 1:], annot=True, cmap='Blues', linewidths=0.5)\n\n# Set the title\nplt.title('Team Performance in Different Sports')\n\n# Set the ticks and tick labels for x and y axis\nax.set_xticks(np.arange(len(df.columns) - 1) + 0.5)\nax.set_xticklabels(df.columns[1:], rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticks(np.arange(len(df['Sport'])) + 0.5)\nax.set_yticklabels(df['Sport'], rotation=0, ha='right', rotation_mode='anchor')\n\n# Center the ticks and tick labels for x and y axis\nax.tick_params(left=False, bottom=False)\nax.set_xticks(np.arange(len(df.columns) - 1) + 0.5, minor=True)\nax.set_yticks(np.arange(len(df['Sport'])) + 0.5, minor=True)\nax.tick_params(which='minor', left=True, bottom=True)\nax.grid(False, which='minor')\n\n# Automatically resize the image\nfig.tight_layout()\n\n# Save the figure\nplt.savefig('output/final/heatmap/png/20231228-124154_78.png', bbox_inches='tight')\n\n# Clear the current figure state\nplt.clf()"
        },
        "QA": {
            "input": "How much is the Endurance percentage in Soccer?",
            "output": "90%"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_23",
        "img": "./heatmap/png/heatmap_23.png",
        "topic": "Technology and the Internet",
        "title": " Technology and Internet Usage by Region",
        "csv": "Technology \\t Internet Usage (%) \\t Cloud Computing Usage (%) \\t Social Media Usage (%) \\t Artificial Intelligence Usage (%) \\t Internet Security (%) \\t Online Shopping (%) \\n Global \\t 70% \\t 60% \\t 50% \\t 40% \\t 80% \\t 30% \\n North America \\t 75% \\t 65% \\t 55% \\t 45% \\t 85% \\t 25% \\n Europe \\t 72% \\t 62% \\t 52% \\t 42% \\t 82% \\t 32% \\n Asia \\t 68% \\t 58% \\t 48% \\t 38% \\t 78% \\t 28% \\n Africa \\t 65% \\t 55% \\t 45% \\t 35% \\t 75% \\t 35% \\n Australia \\t 70% \\t 60% \\t 50% \\t 40% \\t 80% \\t 30% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates technology and internet usage percentages by region across six categories. Globally, internet usage is at 70%, cloud computing at 60%, social media at 50%, artificial intelligence at 40%, internet security at 80%, and online shopping at 30%. North America shows slightly higher usage rates in all categories except for online shopping, which is at 25%. Europe's percentages are moderately high, with only a 2-3% decrease compared to global rates. Asia and Africa have lower usage percentages across all categories, with Africa showing the highest online shopping rate at 35%. Australia matches the global percentages in all categories."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Input data\ndata = {'Region': ['Global', 'North America', 'Europe', 'Asia', 'Africa', 'Australia'],\n        'Internet Usage': [70, 75, 72, 68, 65, 70],\n        'Cloud Computing Usage': [60, 65, 62, 58, 55, 60],\n        'Social Media Usage': [50, 55, 52, 48, 45, 50],\n        'Artificial Intelligence Usage': [40, 45, 42, 38, 35, 40],\n        'Internet Security': [80, 85, 82, 78, 75, 80],\n        'Online Shopping': [30, 25, 32, 28, 35, 30]\n        }\n\n# Convert data to dataframe\ndf = pd.DataFrame(data)\n\n# Set figure size\nplt.figure(figsize=(10, 6), dpi=80)\n\n# Set axis labels and title\nplt.xlabel('Technology Usage', fontsize=12)\nplt.ylabel('Region', fontsize=12)\nplt.title('Technology Usage by Region', fontsize=14)\n\n# Create heatmap plot\nax = plt.gca()\nheatmap = ax.imshow(df.iloc[:, 1:], cmap='Blues')\n\n# Set ticks and ticklabels for x and y axis\nax.set_xticks(np.arange(len(df.columns[1:])))\nax.set_yticks(np.arange(len(df['Region'])))\nax.set_xticklabels(df.columns[1:], fontsize=12, ha='right', rotation_mode='anchor', rotation=45)\nax.set_yticklabels(df['Region'], fontsize=12, ha='right', rotation_mode='anchor', rotation=0)\n\n# Loop over data dimensions and create text annotations\nfor i in range(len(df['Region'])):\n    for j in range(len(df.columns[1:])):\n        text = ax.text(j, i, df.iloc[i, j + 1], ha='center', va='center', color='black')\n\n# Add colorbar\ncbar = plt.colorbar(heatmap, shrink=0.6, aspect=15)\ncbar.set_label('Usage (%)', fontsize=12)\n\n# Automatically resize image and save\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231226-140552_19.png', dpi=80, bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which region has the highest usage percentage in Cloud Computing?",
            "output": "North America"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_112",
        "img": "./heatmap/png/heatmap_112.png",
        "topic": "Sports and Entertainment",
        "title": " Revenue Breakdown by League in Sports",
        "csv": "League \\t Viewership (Millions) \\t Tickets Sold (Millions) \\t Merchandise Sales (Millions) \\t TV Rights Revenue (Millions) \\t Sponsorship Revenue (Millions) \\n NFL \\t 120 \\t 5 \\t 200 \\t 300 \\t 400 \\n NBA \\t 100 \\t 10 \\t 150 \\t 200 \\t 300 \\n MLB \\t 80 \\t 7 \\t 100 \\t 150 \\t 200 \\n NHL \\t 50 \\t 3 \\t 80 \\t 100 \\t 100 \\n MLS \\t 30 \\t 2 \\t 50 \\t 80 \\t 50 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This heatmap provides an overview of various revenue streams for five different sports leagues. It covers viewership in millions, tickets sold in millions, merchandise sales in millions, TV rights revenue in millions, and sponsorship revenue in millions. The NFL leads with 120 million viewers, 5 million tickets sold, 200 million in merchandise sales, 300 million from TV rights, and 400 million in sponsorship revenue. The NBA follows, and then the MLB, NHL, and MLS, with the MLS having the lowest figures in all categories: 30 million viewers, 2 million tickets, 50 million in merchandise, 80 million from TV rights, and 50 million from sponsorships."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndata = {'League': ['NFL', 'NBA', 'MLB', 'NHL', 'MLS'],\n        'Viewership (Millions)': [120, 100, 80, 50, 30],\n        'Tickets Sold (Millions)': [5, 10, 7, 3, 2],\n        'Merchandise Sales (Millions)': [200, 150, 100, 80, 50],\n        'TV Rights Revenue (Millions)': [300, 200, 150, 100, 80],\n        'Sponsorship Revenue (Millions)': [400, 300, 200, 100, 50]}\n\ndf = pd.DataFrame(data)\ndf.set_index('League', inplace=True)\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\ncmap = plt.get_cmap('Reds')\nim = ax.imshow(df, cmap=cmap)\n\nax.set_xticks(np.arange(len(df.columns)))\nax.set_yticks(np.arange(len(df.index)))\nax.set_xticklabels(df.columns)\nax.set_yticklabels(df.index)\n\nax.xaxis.tick_top()\nplt.setp(ax.get_xticklabels(), rotation=45, ha='left', rotation_mode='anchor')\nplt.setp(ax.get_yticklabels(), rotation=0, ha='right', rotation_mode='anchor')\n\nfor i in range(len(df.index)):\n    for j in range(len(df.columns)):\n        text = ax.text(j, i, df.iloc[i, j],\n                       ha='center', va='center', color='black')\n\ncbar = ax.figure.colorbar(im, ax=ax, shrink=0.5)\ncbar.ax.set_ylabel('Revenue (Millions)', rotation=-90, va='bottom')\n\nax.set_title('Revenue Breakdown by League in Sports')\n\nfig.tight_layout()\n\nplt.savefig('output/final/heatmap/png/20231228-131639_13.png', bbox_inches='tight')\n\nplt.clf()"
        },
        "QA": {
            "input": "How many millions of tickets were sold for the MLS league?",
            "output": "2"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_99",
        "img": "./heatmap/png/heatmap_99.png",
        "topic": "Science and Engineering",
        "title": " Funding for Science and Engineering Research",
        "csv": "Category \\t 2010 (billion) \\t 2011 (billion) \\t 2012 (billion) \\t 2013 (billion) \\t 2014 (billion) \\t 2015 (billion) \\n Energy Research \\t 10.5 \\t 12 \\t 13.2 \\t 14.5 \\t 16 \\t 18 \\n Space Exploration \\t 8 \\t 9 \\t 10 \\t 11 \\t 12 \\t 14 \\n Biomedical Engineering \\t 6 \\t 7 \\t 8 \\t 9 \\t 10 \\t 11 \\n Nanotechnology \\t 4 \\t 5 \\t 6 \\t 7 \\t 8 \\t 9 \\n Materials Science \\t 3 \\t 4 \\t 5 \\t 6 \\t 7 \\t 8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates the funding increments, measured in billions, for various science and engineering research fields from 2010 to 2015. Energy Research funding started at 10.5 billion in 2010, increasing yearly up to 18 billion in 2015. Space Exploration saw an increase from 8 billion in 2010 to 14 billion in 2015. Biomedical Engineering's funding grew from 6 billion to 11 billion, while Nanotechnology experienced growth from 4 billion to 9 billion. Lastly, Materials Science funding rose from 3 billion in 2010 to 8 billion in 2015."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# import seaborn as sns\n\ndata = {'Category': ['Energy Research', 'Space Exploration', 'Biomedical Engineering', 'Nanotechnology', 'Materials Science'], '2010 (billion)': [10.5, 8, 6, 4, 3], '2011 (billion)': [12, 9, 7, 5, 4], '2012 (billion)': [13.2, 10, 8, 6, 5], '2013 (billion)': [14.5, 11, 9, 7, 6], '2014 (billion)': [16, 12, 10, 8, 7], '2015 (billion)': [18, 14, 11, 9, 8]}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize=(12, 8))\n\nplt.imshow(df.iloc[:, 1:], cmap='YlOrRd', aspect='auto')\n\nax.set_xticks(np.arange(len(df.columns[1:])))\nax.set_yticks(np.arange(len(df['Category'])))\n\nax.set_xticklabels(df.columns[1:], ha='right', rotation=45, rotation_mode='anchor')\nax.set_yticklabels(df['Category'], wrap=True, ha='right', rotation=0, rotation_mode='anchor')\n\nax.set_xlabel('Fiscal Year')\nax.set_ylabel('Category')\n\nax.tick_params(axis='x', which='major', pad=10)\nax.tick_params(axis='y', which='major', pad=10)\n\nax.set_title('Funding for Science and Engineering Research')\n\nfor i in range(len(df['Category'])):\n    for j in range(len(df.columns[1:])):\n        text = ax.text(j, i, df.iloc[i, j+1], ha='center', va='center', color='w')\n\n# sns.heatmap(df.iloc[:, 1:], cmap='YlOrRd', annot=True, fmt='.1f', cbar=False)\n\nfig.colorbar(plt.imshow(df.iloc[:, 1:], cmap='YlOrRd', aspect='auto'))\n\n# plt.savefig('output/final/heatmap/png/20231228-130949_0.png', bbox_inches='tight')\n# plt.tight_layout()\n# plt.savefig('output/final/heatmap/png/20231228-130949_0.png', bbox_inches='tight')\nplt.savefig('output/final/heatmap/png/20231228-130949_0.png', bbox_inches='tight')\n\nplt.clf()"
        },
        "QA": {
            "input": "By how many billion did the funding for Energy Research increase from 2010 to 2015?",
            "output": "7.5 billion"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_131",
        "img": "./heatmap/png/heatmap_131.png",
        "topic": "Energy and Utilities",
        "title": " Energy Consumption by Sector",
        "csv": "Sector \\t Electricity (GWh) \\t Natural Gas (Bcf) \\t Coal (Million Tons) \\t Renewables (GWh) \\t Nuclear (GWh) \\n Residential \\t 1000 \\t 500 \\t 250 \\t 750 \\t 1000 \\n Commercial \\t 1500 \\t 750 \\t 400 \\t 1000 \\t 1250 \\n Industrial \\t 2000 \\t 1000 \\t 500 \\t 1250 \\t 1500 \\n Agricultural \\t 500 \\t 250 \\t 125 \\t 350 \\t 500 \\n Transportation \\t 500 \\t 250 \\t 100 \\t 300 \\t 500 \\n Other \\t 250 \\t 125 \\t 75 \\t 200 \\t 250 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates energy consumption across various sectors: Residential, Commercial, Industrial, Agricultural, Transportation, and Other. It shows usage in Gigawatt-hours (GWh) for Electricity and Renewables, Billion cubic feet (Bcf) for Natural Gas, Million Tons for Coal, and GWh for Nuclear power. Residential, Industrial, and Commercial sectors have higher energy consumption in every category, especially in Electricity and Natural Gas. The Agricultural and Transportation sectors exhibit moderate energy usage, while the 'Other' category has the lowest consumption figures across all energy sources."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Solution\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# data processing\ndata = {'Sector': ['Residential', 'Commercial', 'Industrial', 'Agricultural', 'Transportation', 'Other'],\n        'Electricity (GWh)': [1000, 1500, 2000, 500, 500, 250],\n        'Natural Gas (Bcf)': [500, 750, 1000, 250, 250, 125],\n        'Coal (Million Tons)': [250, 400, 500, 125, 100, 75],\n        'Renewables (GWh)': [750, 1000, 1250, 350, 300, 200],\n        'Nuclear (GWh)': [1000, 1250, 1500, 500, 500, 250]}\n\ndf = pd.DataFrame(data)\ndf = df.set_index('Sector')\n\n# plot the heatmap chart\nfig, ax = plt.subplots(figsize=(10, 8))\nheatmap = sns.heatmap(df, annot=True, fmt=\"d\", cmap='YlGnBu', cbar=True, ax=ax)\nheatmap.set_title('Energy Consumption by Sector')\nheatmap.set_xlabel('Energy Source')\nheatmap.set_ylabel('Sector')\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231228-131639_37.png', bbox_inches='tight')\nplt.close()\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much more coal does the Industrial sector consume compared to the Agricultural sector?",
            "output": "375 million tons"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_52",
        "img": "./heatmap/png/heatmap_52.png",
        "topic": "Real Estate and Housing Market",
        "title": " Housing Market by Price Range",
        "csv": "Price Range (in 1000s) \\t Studio (%) \\t 1 Bedroom (%) \\t 2 Bedroom (%) \\t 3 Bedroom (%) \\t 4 Bedroom (%) \\n $0-100 \\t 10% \\t 20% \\t 30% \\t 25% \\t 15% \\n $100-200 \\t 20% \\t 25% \\t 30% \\t 20% \\t 15% \\n $200-300 \\t 25% \\t 30% \\t 30% \\t 10% \\t 5% \\n $300-400 \\t 30% \\t 35% \\t 25% \\t 5% \\t 5% \\n $400-500 \\t 35% \\t 30% \\t 20% \\t 10% \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap presents the distribution of different types of housing units, categorized by the number of bedrooms, across various price ranges in increments of $100,000. For the cheapest price range, $0-100k, the studio to 4-bedroom distribution percentages are as follows: 10% studio, 20% one bedroom, 30% two bedroom, 25% three bedroom, and 15% four bedroom. As the price range increases, there is a notable increase in the percentage of studio and one-bedroom units up to the $300-400k range, with a decrease in the proportion of larger units. The highest price range, $400-500k, sees the highest percentage of studio units at 35%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data processing\ndata_dict = {\"Price Range (in 1000s)\": [\"$0-100\", \"$100-200\", \"$200-300\", \"$300-400\", \"$400-500\"],\n             \"Studio (%)\": [10, 20, 25, 30, 35],\n             \"1 Bedroom (%)\": [20, 25, 30, 35, 30],\n             \"2 Bedroom (%)\": [30, 30, 30, 25, 20],\n             \"3 Bedroom (%)\": [25, 20, 10, 5, 10],\n             \"4 Bedroom (%)\": [15, 15, 5, 5, 5]}\ndf = pd.DataFrame(data_dict)\n\n# Plotting the heatmap chart\nfig, ax = plt.subplots(figsize=(10, 7))\nplt.imshow(df.iloc[:, 1:], cmap='YlGnBu')\n\n# Setting ticks and ticklabels\nax.set_xticks(np.arange(len(df.columns[1:])))\nax.set_xticklabels(df.columns[1:])\nax.set_yticks(np.arange(len(df[\"Price Range (in 1000s)\"])))\nax.set_yticklabels(df[\"Price Range (in 1000s)\"])\n\n# Rotating and wrapping long tick labels\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\", wrap=True)\nplt.setp(ax.get_yticklabels(), rotation=0, ha=\"right\", rotation_mode=\"anchor\", wrap=True)\n\n# Adding a colorbar\ncbar = plt.colorbar()\ncbar.ax.set_ylabel(\"Percentage\")\n\n# Adding values to each cell\nfor i in range(len(df[\"Price Range (in 1000s)\"])):\n    for j in range(len(df.columns[1:])):\n        plt.text(j, i, str(df.iloc[i, j+1]) + \"%\", ha=\"center\", va=\"center\", color=\"white\")\n\n# Setting title and labels\nplt.title(\"Housing Market by Price Range\")\nplt.xlabel(\"Number of Bedrooms\")\nplt.ylabel(\"Price Range (in 1000s)\")\n\n# Automatically resizing the image\nplt.tight_layout()\n\n# Saving the figure\nplt.savefig(\"output/final/heatmap/png/20231228-124154_4.png\", bbox_inches=\"tight\")\n\n# Clearing the image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage difference between studio and 4 bedroom apartments in the $300-400 price range?",
            "output": "25%"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_62",
        "img": "./heatmap/png/heatmap_62.png",
        "topic": "Agriculture and Food Production",
        "title": " Agricultural Production by Region",
        "csv": "Region \\t Crop Production (Tonnes) \\t Livestock Production (Tonnes) \\t Fishing Production (Tonnes) \\t Forestry Production (Tonnes) \\t Poultry Production (Tonnes) \\t Dairy Production (Litres) \\n North America \\t 500000 \\t 600000 \\t 30000 \\t 40000 \\t 200000 \\t 150000 \\n South America \\t 400000 \\t 550000 \\t 35000 \\t 45000 \\t 180000 \\t 120000 \\n Europe \\t 450000 \\t 650000 \\t 25000 \\t 35000 \\t 220000 \\t 170000 \\n Asia \\t 600000 \\t 800000 \\t 50000 \\t 60000 \\t 300000 \\t 200000 \\n Africa \\t 300000 \\t 400000 \\t 20000 \\t 25000 \\t 150000 \\t 100000 \\n Australia \\t 350000 \\t 450000 \\t 30000 \\t 35000 \\t 180000 \\t 140000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This heatmap illustrates agricultural production data across six regions including North America, South America, Europe, Asia, Africa, and Australia. It displays figures for crop, livestock, fishing, forestry, poultry, and dairy outputs, measured in tonnes and litres respectively. The data points range from crop production figures like Asia's 600,000 tonnes, to dairy production like Asia's 200,000 litres. The variations in production across the regions are depicted in a color-coded manner, with distinct values for each type of agricultural yield."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data processing\ndata = {'Region': ['North America', 'South America', 'Europe', 'Asia', 'Africa', 'Australia'],\n        'Crop Production (Tonnes)': [500000, 400000, 450000, 600000, 300000, 350000],\n        'Livestock Production (Tonnes)': [600000, 550000, 650000, 800000, 400000, 450000],\n        'Fishing Production (Tonnes)': [30000, 35000, 25000, 50000, 20000, 30000],\n        'Forestry Production (Tonnes)': [40000, 45000, 35000, 60000, 25000, 35000],\n        'Poultry Production (Tonnes)': [200000, 180000, 220000, 300000, 150000, 180000],\n        'Dairy Production (Litres)': [150000, 120000, 170000, 200000, 100000, 140000]}\n\ndf = pd.DataFrame(data)\ndf = df.set_index('Region')\n\n# Plotting\nfig, ax = plt.subplots(figsize=(12, 8))\nax = sns.heatmap(df, annot=True, cmap='coolwarm', linewidths=0.5, fmt=',.0f', cbar_kws={'label': 'Production (Tonnes/Litres)'})\nax.tick_params(axis='both', which='both', length=0, labelsize=12)\nax.set_title('Agricultural Production by Region', fontsize=16)\nax.set_ylabel('Region', fontsize=14)\nax.set_xlabel('Production Type', fontsize=14)\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231228-124154_50.png', bbox_inches='tight')\nplt.close(fig)"
        },
        "QA": {
            "input": "Which region has the highest Livestock Production?",
            "output": "Asia"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_143",
        "img": "./heatmap/png/heatmap_143.png",
        "topic": "Energy and Utilities",
        "title": " Energy and Utilities Usage and Impact",
        "csv": "Utility \\t Electricity Usage (kWh) \\t Natural Gas Usage (m3) \\t Water Usage (Liters) \\t Waste Production (kg) \\t Renewable Energy Usage (%) \\t Carbon Emissions (tons) \\n Green Energy Co. \\t 500 \\t 300 \\t 600 \\t 100 \\t 75% \\t 50 \\n Power Solutions Inc. \\t 700 \\t 400 \\t 800 \\t 150 \\t 65% \\t 60 \\n Energy Innovations Ltd. \\t 600 \\t 350 \\t 650 \\t 120 \\t 80% \\t 45 \\n Sustainable Utilities Corp. \\t 550 \\t 400 \\t 700 \\t 130 \\t 70% \\t 55 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates various utility usage and impact metrics for four companies. Green Energy Co. registers 500 kWh electricity, 300 m\u00b3 natural gas, 600 liters of water, 100 kg waste, 75% renewable energy usage, and 50 tons of carbon emissions. Power Solutions Inc. has higher usage across all metrics except for renewable energy usage, where they're at 65%, resulting in 60 tons of emissions. Energy Innovations Ltd. shows moderate usage with a notable 80% in renewable energy. Lastly, Sustainable Utilities Corp. has 550 kWh electricity usage, 400 m\u00b3 gas, 700 liters water, 130 kg waste, a 70% renewable adoption rate, and 55 tons of carbon emissions."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import the necessary modules\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Define the data\ndata = {'Utility': ['Green Energy Co.', 'Power Solutions Inc.', 'Energy Innovations Ltd.', 'Sustainable Utilities Corp.'],\n        'Electricity Usage (kWh)': [500, 700, 600, 550],\n        'Natural Gas Usage (m3)': [300, 400, 350, 400],\n        'Water Usage (Liters)': [600, 800, 650, 700],\n        'Waste Production (kg)': [100, 150, 120, 130],\n        'Renewable Energy Usage (%)': [75, 65, 80, 70],\n        'Carbon Emissions (tons)': [50, 60, 45, 55]\n        }\n\n# Convert the data into a pandas dataframe\ndf = pd.DataFrame(data)\n\n# Set the utility column as the index\ndf.set_index('Utility', inplace=True)\n\n# Plot the heatmap chart using seaborn\nfig, ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(df, annot=True, cmap='Oranges')\n\n# Set the ticks and ticklabels for the x and y axis\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_xticklabels(df.columns, rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(df.index, rotation=0, ha='right', rotation_mode='anchor')\n\n# Set the title\nax.set_title('Energy and Utilities Usage and Impact')\n\n# Automatically resize the image and save it\nfig.tight_layout()\nfig.savefig('output/final/heatmap/png/20231228-131639_6.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which utility has the lowest carbon emissions?",
            "output": "Energy Innovations Ltd"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_73",
        "img": "./heatmap/png/heatmap_73.png",
        "topic": "Business and Finance",
        "title": " Financial Performance by Sector",
        "csv": "Sector \\t Revenue (Billion USD) \\t Profit (Billion USD) \\t Assets (Billion USD) \\t Market Capitalization (Billion USD) \\t Debt (Billion USD) \\n Technology \\t 500 \\t 150 \\t 700 \\t 800 \\t 300 \\n Healthcare \\t 300 \\t 100 \\t 600 \\t 500 \\t 200 \\n Finance \\t 400 \\t 200 \\t 800 \\t 600 \\t 400 \\n Energy \\t 200 \\t 50 \\t 400 \\t 300 \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates the financial performance of four sectors, showcasing five different metrics. The Technology sector shows a revenue of 500 billion USD, profit of 150 billion USD, assets of 700 billion USD, market capitalization of 800 billion USD, and debt of 300 billion USD. Healthcare has revenues of 300 billion USD, profits of 100 billion USD, assets totaling 600 billion USD, market capitalization at 500 billion USD, and 200 billion USD in debt. The Finance sector reports 400 billion USD revenue, 200 billion USD profit, 800 billion USD assets, 600 billion USD market capitalization, and 400 billion USD debt, while the Energy sector has lower figures with 200 billion USD revenue, 50 billion USD profit, 400 billion USD in assets, 300 billion USD market capitalization, and 100 billion USD debt."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Import data and process into a dataframe\ndata = {'Sector': ['Technology', 'Healthcare', 'Finance', 'Energy'], \n        'Revenue (Billion USD)': [500, 300, 400, 200],\n        'Profit (Billion USD)': [150, 100, 200, 50],\n        'Assets (Billion USD)': [700, 600, 800, 400],\n        'Market Capitalization (Billion USD)': [800, 500, 600, 300],\n        'Debt (Billion USD)': [300, 200, 400, 100]\n       }\n\ndf = pd.DataFrame(data)\n\n# Set figure size and create axes object\nplt.figure(figsize=(10,8))\nax = plt.gca()\n\n# Plot heatmap using seaborn\nsns.heatmap(df.iloc[:, 1:], annot=True, fmt='.0f', cmap='Blues', ax=ax)\n\n# Set ticks and ticklabels for x and y axis\nax.set_xticks(np.arange(5) + 0.5)\nax.set_yticks(np.arange(4) + 0.5)\nax.set_xticklabels(df.columns[1:], rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(df['Sector'], ha='right', rotation_mode='anchor')\n\n# Set title and labels\nax.set_title('Financial Performance by Sector')\nax.set_xlabel('Financial Data (Billion USD)')\nax.set_ylabel('Sector')\n\n# Automatically resize image and save\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231228-124154_64.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which sector has the highest Market Capitalization to Debt ratio?",
            "output": "Healthcare"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_81",
        "img": "./heatmap/png/heatmap_81.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing Efficiency Metrics",
        "csv": "Product \\t Production Speed (units per hour) \\t Quality Control (%) \\t Downtime (hours) \\t Waste (%) \\t Efficiency (%) \\n Product A \\t 100 \\t 95 \\t 2 \\t 3 \\t 98 \\n Product B \\t 85 \\t 90 \\t 4 \\t 5 \\t 95 \\n Product C \\t 75 \\t 85 \\t 6 \\t 8 \\t 90 \\n Product D \\t 110 \\t 98 \\t 1 \\t 2 \\t 99 \\n Product E \\t 120 \\t 99 \\t 0.5 \\t 1 \\t 99.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap represents manufacturing efficiency metrics across five products. Product A has a production speed of 100 units per hour, a quality control percentage of 95%, 2 hours of downtime, 3% waste, and 98% efficiency. Product B\u2019s respective figures are 85 units, 90% quality control, 4 hours downtime, 5% waste, and 95% efficiency. Product C has 75 units production speed, 85% quality control, 6 hours downtime, 8% waste, and 90% efficiency. Product D shows 110 units, 98% quality control, 1 hour downtime, 2% waste, and 99% efficiency while Product E excels with 120 units, 99% quality control, 0.5 hours downtime, 1% waste, and 99.5% efficiency."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Process the data using dict and pandas\ndata = {'Product':['Product A', 'Product B', 'Product C', 'Product D', 'Product E'], \n        'Production Speed (units per hour)':[100, 85, 75, 110, 120], \n        'Quality Control (%)':[95, 90, 85, 98, 99], \n        'Downtime (hours)':[2, 4, 6, 1, 0.5], \n        'Waste (%)':[3, 5, 8, 2, 1], \n        'Efficiency (%)':[98, 95, 90, 99, 99.5]}\n\ndf = pd.DataFrame(data)\ndf.set_index('Product', inplace=True)\n\n# Plot the data with heatmap chart\nfig, ax = plt.subplots(figsize=(12,6))\nax = sns.heatmap(df, annot=True, fmt='.1f', cmap='Blues', linewidths=.5, cbar=True, cbar_kws={\"shrink\": .5})\n\n# Set the ticks and ticklabels for x and y axis\nax.set_xticklabels(df.columns, rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(df.index, rotation=0)\n\n# Set the title\nax.set_title('Manufacturing Efficiency Metrics')\n\n# Automatically resize the image\nfig.tight_layout()\n\n# Save the image\nfig.savefig('output/final/heatmap/png/20231228-124154_72.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()\n\n# Check the generated code to make sure it doesn't report errors and save path is correct"
        },
        "QA": {
            "input": "What is the Downtime for Product C?",
            "output": "6"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_79",
        "img": "./heatmap/png/heatmap_79.png",
        "topic": "Technology and the Internet",
        "title": " Emerging Technologies and Online Usage",
        "csv": "Technology \\t Internet Usage (%) \\t Mobile Internet Usage (%) \\t E-commerce Penetration (%) \\t Social Media Users (%) \\t Online Gaming Revenue (%) \\n Artificial Intelligence \\t 65% \\t 70% \\t 50% \\t 45% \\t 35% \\n Internet of Things \\t 50% \\t 55% \\t 60% \\t 65% \\t 70% \\n Cloud Computing \\t 80% \\t 85% \\t 90% \\t 95% \\t 100% \\n Virtual Reality \\t 40% \\t 45% \\t 50% \\t 55% \\t 60% \\n Blockchain \\t 30% \\t 35% \\t 40% \\t 45% \\t 50% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap represents the impact of five emerging technologies on five different metrics of online usage. Artificial Intelligence shows a 65% internet usage with its highest in mobile internet usage at 70%, whereas the Internet of Things stands at 50% for internet usage, peaking at 70% for online gaming revenue. Cloud Computing leads with high percentages across all metrics, reaching up to 100% in online gaming revenue. Virtual Reality and Blockchain show lower percentages, with their highest in online gaming revenue at 60% and 50%, respectively. Each technology exhibits a distinct pattern of online usage and penetration."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\n\nfrom matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# Define data\ndata = {\n    'Technology': ['Artificial Intelligence', 'Internet of Things', 'Cloud Computing', 'Virtual Reality', 'Blockchain'],\n    'Internet Usage (%)': [65, 50, 80, 40, 30],\n    'Mobile Internet Usage (%)': [70, 55, 85, 45, 35],\n    'E-commerce Penetration (%)': [50, 60, 90, 50, 40],\n    'Social Media Users (%)': [45, 65, 95, 55, 45],\n    'Online Gaming Revenue (%)': [35, 70, 100, 60, 50]\n}\n\n# Convert data to pandas dataframe\ndf = pd.DataFrame(data)\n\n# Set figsize for larger setting\nplt.figure(figsize=(10, 8))\n\n# Create heatmap chart using seaborn\nsns.heatmap(df.drop('Technology', axis=1), annot=True, cmap='Blues')\n\n# Set ticks and ticklabels for x and y axis\nplt.xticks(np.arange(5) + 0.5, labels=df.drop('Technology', axis=1).columns, rotation=45, ha='right', rotation_mode='anchor')\nplt.yticks(np.arange(5) + 0.5, labels=df['Technology'], rotation=0, ha='right', rotation_mode='anchor')\n\n# Add title\nplt.title('Emerging Technologies and Online Usage')\n\n# Automatically resize image by tight_layout()\nplt.tight_layout()\n\n# Save image as png\nplt.savefig('output/final/heatmap/png/20231228-124154_70.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the E-commerce Penetration percentage for Internet of Things technology?",
            "output": "60%"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_10",
        "img": "./heatmap/png/heatmap_10.png",
        "topic": "Energy and Utilities",
        "title": " Energy Mix by Country",
        "csv": "Energy Source \\t Coal (%) \\t Natural Gas (%) \\t Hydroelectric (%) \\t Nuclear (%) \\t Wind (%) \\t Solar (%) \\n United States \\t 45% \\t 25% \\t 10% \\t 10% \\t 5% \\t 5% \\n China \\t 68% \\t 15% \\t 5% \\t 10% \\t 1% \\t 1% \\n Russia \\t 45% \\t 20% \\t 10% \\t 15% \\t 5% \\t 5% \\n India \\t 30% \\t 30% \\t 10% \\t 10% \\t 10% \\t 10% \\n Japan \\t 8% \\t 25% \\t 30% \\t 15% \\t 15% \\t 7% \\n Germany \\t 20% \\t 15% \\t 5% \\t 25% \\t 30% \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates the energy mix percentages for six countries, highlighting their reliance on different energy sources. The United States' energy mix includes 45% coal, 25% natural gas, 10% hydroelectric, 10% nuclear, and 5% each for wind and solar. China relies predominantly on coal at 68%, with lower contributions from other sources, including 15% natural gas and only 1% each for wind and solar. Russia has a similar dependency on coal at 45% and a slightly higher nuclear contribution at 15%. India shows a more balanced mix, with coal and natural gas each at 30% and equal parts for hydroelectric, nuclear, wind, and solar at 10%. Japan has a diverse mix, heavily weighted towards hydroelectric at 30%, nuclear and wind at 15% each, and solar at 7%. Lastly, Germany's energy profile is marked by a high reliance on wind power at 30%, followed by 25% nuclear energy, and lower utilization of coal at 20%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Process data using dict and pandas\ndata = {\"Energy Source\": [\"Coal\", \"Natural Gas\", \"Hydroelectric\", \"Nuclear\", \"Wind\", \"Solar\"],\n        \"United States\": [45, 25, 10, 10, 5, 5],\n        \"China\": [68, 15, 5, 10, 1, 1],\n        \"Russia\": [45, 20, 10, 15, 5, 5],\n        \"India\": [30, 30, 10, 10, 10, 10],\n        \"Japan\": [8, 25, 30, 15, 15, 7],\n        \"Germany\": [20, 15, 5, 25, 30, 5]}\ndf = pd.DataFrame(data)\ndf = df.set_index(\"Energy Source\")\n\n# Plot the heatmap chart\nfig, ax = plt.subplots(figsize=(10, 8)) # Set the figure size\nim = ax.imshow(df, cmap=\"Blues\", vmin=0, vmax=100) # Set the color map, min and max values\n\n# Set the ticks and tick labels for x and y axis\nax.set_xticks(np.arange(len(df.columns)))\nax.set_yticks(np.arange(len(df.index)))\nax.set_xticklabels(df.columns)\nax.set_yticklabels(df.index)\n\n# Rotate the x-axis labels and align them to the right\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations for each cell\nfor i in range(len(df.index)):\n    for j in range(len(df.columns)):\n        text = ax.text(j, i, df.iloc[i, j], ha=\"center\", va=\"center\", color=\"w\") # Set the text color as white\n\n# Set the title of the figure\nax.set_title(\"Energy Mix by Country\")\n\n# Automatically resize the image\nfig.tight_layout()\n\n# Add a colorbar of chart with 40% probability\nif np.random.random() < 0.4:\n    cbar = ax.figure.colorbar(im, ax=ax) # Add the colorbar\n    cbar.ax.set_ylabel(\"%\", rotation=-90, va=\"bottom\") # Set the label for colorbar\n\n# Save the figure as a png image\nplt.savefig(\"output/final/heatmap/png/20231225-210514_32.png\", bbox_inches=\"tight\")\n\n# Clear the current image state\nplt.clf()\nplt.close()"
        },
        "QA": {
            "input": "Which country has the highest percentage of solar energy usage according to the data?",
            "output": "India"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_78",
        "img": "./heatmap/png/heatmap_78.png",
        "topic": "Sports and Entertainment",
        "title": " Sports Team Revenue Breakdow",
        "csv": "Team \\t Player Salaries (Millions) \\t Ticket Sales (Millions) \\t Merchandise Sales (Millions) \\t Advertising Revenue (Millions) \\t TV Deals (Millions) \\n Los Angeles Lakers \\t 100 \\t 500 \\t 200 \\t 300 \\t 800 \\n New York Yankees \\t 80 \\t 450 \\t 150 \\t 250 \\t 750 \\n Chicago Bulls \\t 70 \\t 400 \\t 120 \\t 220 \\t 700 \\n Dallas Cowboys \\t 90 \\t 600 \\t 180 \\t 350 \\t 900 \\n Manchester United \\t 60 \\t 300 \\t 100 \\t 200 \\t 600 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates a revenue breakdown for five sports teams across various financial streams for the given period. The Los Angeles Lakers have player salaries amounting to $100 million, ticket sales at $500 million, merchandise sales at $200 million, advertising revenue reaching $300 million, and TV deals at $800 million. The New York Yankees show $80 million for player salaries, $450 million in ticket sales, $150 million from merchandise sales, $250 million in advertising revenue, and $750 million from TV deals. The Chicago Bulls, Dallas Cowboys, and Manchester United depict similar financial categories with varying figures, providing a comparative overview of their revenue sources."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create dictionary with data\ndata = {'Team': ['Los Angeles Lakers', 'New York Yankees', 'Chicago Bulls', 'Dallas Cowboys', 'Manchester United'],\n        'Player Salaries (Millions)': [100, 80, 70, 90, 60],\n        'Ticket Sales (Millions)': [500, 450, 400, 600, 300],\n        'Merchandise Sales (Millions)': [200, 150, 120, 180, 100],\n        'Advertising Revenue (Millions)': [300, 250, 220, 350, 200],\n        'TV Deals (Millions)': [800, 750, 700, 900, 600]}\n\n# Convert dictionary to dataframe\ndf = pd.DataFrame(data)\n\n# Set team name as index\ndf.set_index('Team', inplace=True)\n\n# Create heatmap chart using seaborn\nimport seaborn as sns\nfig, ax = plt.subplots(figsize=(10,10))\nsns.heatmap(df, annot=True, fmt='g', cmap='Blues', linewidths=0.5, cbar=False)\n\n# Set ticks and ticklabels for x and y axis, and make them in the center of rows and columns\nticklabels = [x[:6] if len(x) > 6 else x for x in df.columns]\nax.set_xticklabels(ticklabels, rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(ticklabels[::-1], rotation=0, ha='right', rotation_mode='anchor')\n\n# Add title to the chart\nplt.title('Sports Team Revenue Breakdown')\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# Save figure as png\nplt.savefig('output/final/heatmap/png/20231228-124154_7.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()\nplt.close()"
        },
        "QA": {
            "input": "Which team has the lowest player salaries according to the data?",
            "output": "Manchester United"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_7",
        "img": "./heatmap/png/heatmap_7.png",
        "topic": "Education and Academics",
        "title": " Education Metrics by Country",
        "csv": "Country \\t Primary Education Completion Rate (%) \\t Secondary Education Completion Rate (%) \\t Tertiary Education Completion Rate (%) \\t Literacy Rate (%) \\t Enrollment Rate (%) \\n United States \\t 92% \\t 88% \\t 65% \\t 99% \\t 95% \\n China \\t 98% \\t 95% \\t 80% \\t 99% \\t 98% \\n India \\t 97% \\t 92% \\t 70% \\t 85% \\t 90% \\n Japan \\t 100% \\t 98% \\t 95% \\t 99% \\t 100% \\n Germany \\t 95% \\t 90% \\t 80% \\t 98% \\t 96% \\n United Kingdom \\t 90% \\t 85% \\t 75% \\t 97% \\t 92% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap represents various educational metrics across six countries. It incorporates the primary, secondary, and tertiary education completion rates, along with literacy and enrollment rates. The United States shows a primary completion rate of 92%, secondary at 88%, tertiary at 65%, a literacy rate of 99%, and an enrollment rate of 95%. China's figures are 98%, 95%, 80%, 99%, and 98%, respectively. India's data shows 97%, 92%, 70%, 85%, and 90%. Japan presents complete rates for primary education and enrollment at 100%, and very high rates in other metrics. Germany and the United Kingdom exhibit slightly lower, but still high, completion and literacy rates."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n#Import seaborn as sns if using sns.heatmap()\nimport seaborn as sns\n\n#Create a dictionary to store the data\ndata = {\"Country\": [\"United States\", \"China\", \"India\", \"Japan\", \"Germany\", \"United Kingdom\"],\n        \"Primary Education Completion Rate (%)\": [92, 98, 97, 100, 95, 90],\n        \"Secondary Education Completion Rate (%)\": [88, 95, 92, 98, 90, 85],\n        \"Tertiary Education Completion Rate (%)\": [65, 80, 70, 95, 80, 75],\n        \"Literacy Rate (%)\": [99, 99, 85, 99, 98, 97],\n        \"Enrollment Rate (%)\": [95, 98, 90, 100, 96, 92]}\n\n#Convert the dictionary to a pandas dataframe\ndf = pd.DataFrame(data)\n\n#Set the index to be the Country column\ndf = df.set_index(\"Country\")\n\n#Create a figure and axes\nfig, ax = plt.subplots(figsize=(10,8))\n\n#Plot the heatmap using sns.heatmap() or imshow() or pcolor()\nheatmap = sns.heatmap(df, annot=True, linewidths=.5, ax=ax) #Use annot=True to show the values in each cell\n#heatmap = ax.imshow(df, cmap=\"coolwarm\", vmin=0, vmax=100) #Use cmap=\"coolwarm\" to set the color scheme and vmin/vmax to set the range of values\n\n#Set the title\nax.set_title(\"Education Metrics by Country\", fontsize=18)\n\n#Set the x and y labels\nax.set_xlabel(\"Education Completion Rate (%)\", fontsize=12)\nax.set_ylabel(\"Country\", fontsize=12)\n\n#Set the x and y tick labels in the center of each row and column\nax.set_xticks(np.arange(len(df.columns))+0.5)\nax.set_xticklabels(df.columns, rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_yticks(np.arange(len(df.index))+0.5)\nax.set_yticklabels(df.index, rotation=0, ha=\"right\", rotation_mode=\"anchor\")\n\n#Automatically resize the image and add a colorbar if desired\nfig.tight_layout() #Use tight_layout() to automatically resize the image\n#fig.colorbar(heatmap) #Use this line if you want to add a colorbar to the plot\n\n#Save the figure as a png file\nplt.savefig(\"output/final/heatmap/png/20231225-210514_23.png\", bbox_inches=\"tight\") #Use bbox_inches=\"tight\" to prevent the labels from being cut off\n\n#Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest Literacy Rate?",
            "output": "Japan"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_4",
        "img": "./heatmap/png/heatmap_4.png",
        "topic": "Tourism and Hospitality",
        "title": " Tourism Metrics by Country",
        "csv": "Country \\t Hotel Occupancy (%) \\t Average Daily Rate (USD) \\t Revenue per Available Room (USD) \\t Tourist Arrivals (Millions) \\t Tourism Contribution to GDP (%) \\t International Tourism Receipts (USD) \\n France \\t 75% \\t 150 \\t 112.5 \\t 85 \\t 10% \\t 120 \\n Spain \\t 68% \\t 130 \\t 88.4 \\t 83 \\t 8% \\t 100 \\n United States \\t 70% \\t 180 \\t 126 \\t 100 \\t 12% \\t 150 \\n China \\t 65% \\t 120 \\t 78 \\t 90 \\t 10% \\t 85 \\n Italy \\t 72% \\t 140 \\t 100.8 \\t 80 \\t 10% \\t 110 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates various tourism metrics for five countries. France shows a hotel occupancy rate of 75%, an average daily rate of 150 USD, revenue per available room at 112.5 USD, tourist arrivals at 85 million, a 10% contribution to GDP from tourism, and international tourism receipts of 120 billion USD. Spain, the United States, China, and Italy display their corresponding figures across these metrics, with occupancy rates ranging from 65% to 72%, average daily rates between 120 and 180 USD, and varying contributions to their economies and tourism inflows."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Process the data\ndata = {'Country': ['France', 'Spain', 'United States', 'China', 'Italy'], 'Hotel Occupancy (%)': [75, 68, 70, 65, 72], 'Average Daily Rate (USD)': [150, 130, 180, 120, 140], 'Revenue per Available Room (USD)': [112.5, 88.4, 126, 78, 100.8], 'Tourist Arrivals (Millions)': [85, 83, 100, 90, 80], 'Tourism Contribution to GDP (%)': [10, 8, 12, 10, 10], 'International Tourism Receipts (USD)': [120, 100, 150, 85, 110]}\ndf = pd.DataFrame(data)\n\n# Plot the heatmap chart\nfig, ax = plt.subplots(figsize=(10, 6))\nim = ax.imshow(df.iloc[:,1:].values, cmap='YlGn')\n\n# Set the ticks and ticklabels for x and y axis\nax.set_xticks(np.arange(len(df.columns[1:])))\nax.set_yticks(np.arange(len(df['Country'])))\nax.set_xticklabels(df.columns[1:])\nax.set_yticklabels(df['Country'])\n\n# Rotate the x-axis tick labels by 45 degrees and align them to the right\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Center the ticks and ticklabels\nax.tick_params(axis='both', which='both', length=0.5, pad=10)\nax.tick_params(axis='x', which='major', pad=20)\nax.tick_params(axis='y', which='major', pad=10)\n\n# Create a colorbar and add the label\ncbar = ax.figure.colorbar(im)\ncbar.ax.set_ylabel('Values', rotation=-90, va=\"bottom\", labelpad=20)\n\n# Show the value of each cell\nfor i in range(len(df['Country'])):\n    for j in range(len(df.columns[1:])):\n        text = ax.text(j, i, df.iloc[i, j+1], ha=\"center\", va=\"center\", color=\"black\")\n\n# Set the title\nax.set_title('Tourism Metrics by Country')\n\n# Automatically resize the image and save it\nfig.tight_layout()\nplt.savefig('output/final/heatmap/png/20231225-210514_19.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()\nplt.close()"
        },
        "QA": {
            "input": "What is the tourist arrivals figure for Spain?",
            "output": "83 millions"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_28",
        "img": "./heatmap/png/heatmap_28.png",
        "topic": "Transportation and Logistics",
        "title": " Freight Transport by Region",
        "csv": "Region \\t Trucking (Tonnes per Kilometer) \\t Rail (Tonnes per Kilometer) \\t Air (Tonnes per Kilometer) \\t Maritime (Tonnes per Kilometer) \\t Pipeline (Tonnes per Kilometer) \\n North America \\t 2.5 \\t 3.5 \\t 6.2 \\t 1.8 \\t 2.0 \\n South America \\t 2.0 \\t 2.8 \\t 5.5 \\t 1.5 \\t 1.8 \\n Europe \\t 3.0 \\t 4.0 \\t 7.0 \\t 2.5 \\t 2.5 \\n Asia \\t 4.0 \\t 5.5 \\t 9.5 \\t 3.5 \\t 3.0 \\n Africa \\t 1.5 \\t 2.0 \\t 4.2 \\t 1.2 \\t 1.5 \\n Australia \\t 3.5 \\t 4.5 \\t 8.0 \\t 2.8 \\t 2.8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates freight transport data by region, broken down into trucking, rail, air, maritime, and pipeline modes, measured in tonnes per kilometer. North America shows trucking at 2.5, rail at 3.5, air at 6.2, maritime at 1.8, and pipeline at 2.0. South America's figures are slightly less. Europe, Asia, and Australia present higher transport intensities across all modes compared to the Americas and Africa. Asia leads with the highest values, particularly in air and rail freight. Africa has the lowest numbers in each category, with trucking at 1.5 and rail at 2.0, demonstrating varied transport reliance across continents."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create data dictionary\ndata = {\n    'Region': ['North America', 'South America', 'Europe', 'Asia', 'Africa', 'Australia'],\n    'Trucking': [2.5, 2.0, 3.0, 4.0, 1.5, 3.5],\n    'Rail': [3.5, 2.8, 4.0, 5.5, 2.0, 4.5],\n    'Air': [6.2, 5.5, 7.0, 9.5, 4.2, 8.0],\n    'Maritime': [1.8, 1.5, 2.5, 3.5, 1.2, 2.8],\n    'Pipeline': [2.0, 1.8, 2.5, 3.0, 1.5, 2.8]\n}\n\n# Convert data to dataframe\ndf = pd.DataFrame.from_dict(data)\n\n# Set region as index\ndf.set_index('Region', inplace=True)\n\n# Set figure size\nplt.figure(figsize=(12,8))\n\n# Plot heatmap using sns.heatmap()\nsns.heatmap(df, annot=True, cmap='Blues')\n\n# Set ticks and tick labels for x and y axis\nplt.xticks(np.arange(5)+0.5, labels=df.columns, rotation=45, ha='right', rotation_mode='anchor')\nplt.yticks(np.arange(6)+0.5, labels=df.index, rotation=0, ha='right', rotation_mode='anchor')\n\n# Add title\nplt.title('Freight Transport by Region')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('output/final/heatmap/png/20231226-140552_9.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which region has the highest amount of freight transport by air?",
            "output": "Asia"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_108",
        "img": "./heatmap/png/heatmap_108.png",
        "topic": "Agriculture and Food Production",
        "title": " Crop Yields by Country in Agriculture",
        "csv": "Country \\t Wheat (Tonnes per Hectare) \\t Corn (Tonnes per Hectare) \\t Rice (Tonnes per Hectare) \\t Soybeans (Tonnes per Hectare) \\t Barley (Tonnes per Hectare) \\t Potatoes (Tonnes per Hectare) \\n United States \\t 3.2 \\t 5.5 \\t 3.0 \\t 2.5 \\t 4.0 \\t 6.1 \\n China \\t 2.8 \\t 4.8 \\t 3.2 \\t 2.7 \\t 3.5 \\t 5.0 \\n India \\t 3.5 \\t 5.2 \\t 2.7 \\t 2.2 \\t 3.0 \\t 4.8 \\n Brazil \\t 4.0 \\t 6.0 \\t 6.5 \\t 3.0 \\t 5.5 \\t 7.2 \\n Argentina \\t 1.8 \\t 2.5 \\t 2.2 \\t 1.5 \\t 2.0 \\t 3.5 \\n Russia \\t 3.1 \\t 4.0 \\t 3.6 \\t 2.8 \\t 4.2 \\t 5.0 \\n France \\t 2.5 \\t 3.8 \\t 3.1 \\t 2.6 \\t 3.2 \\t 4.6 \\n Canada \\t 3.0 \\t 4.5 \\t 3.3 \\t 2.9 \\t 3.8 \\t 5.2 \\n Germany \\t 2.7 \\t 4.0 \\t 3.2 \\t 2.6 \\t 3.5 \\t 4.8 \\n United Kingdom \\t 2.8 \\t 4.2 \\t 3.5 \\t 2.9 \\t 3.6 \\t 5.1 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap represents crop yields by country in the agricultural sector. It shows the tonnes per hectare for six different crops: wheat, corn, rice, soybeans, barley, and potatoes across ten countries. The United States exhibits yields of 3.2, 5.5, 3.0, 2.5, 4.0, and 6.1 respectively for these crops. China's figures are slightly lower, while India and Brazil show varied yield figures, with Brazil having the highest yield for rice and potatoes. Argentina and Russia have lower yields compared to others, with Argentina having the smallest figures for all crops. European countries like France, Germany, and the United Kingdom display consistent but mid-range yields."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set data\ncountry = ['United States', 'China', 'India', 'Brazil', 'Argentina', 'Russia', 'France', 'Canada', 'Germany', 'United Kingdom']\nwheat = [3.2, 2.8, 3.5, 4.0, 1.8, 3.1, 2.5, 3.0, 2.7, 2.8]\ncorn = [5.5, 4.8, 5.2, 6.0, 2.5, 4.0, 3.8, 4.5, 4.0, 4.2]\nrice = [3.0, 3.2, 2.7, 6.5, 2.2, 3.6, 3.1, 3.3, 3.2, 3.5]\nsoybeans = [2.5, 2.7, 2.2, 3.0, 1.5, 2.8, 2.6, 2.9, 2.6, 2.9]\nbarley = [4.0, 3.5, 3.0, 5.5, 2.0, 4.2, 3.2, 3.8, 3.5, 3.6]\npotatoes = [6.1, 5.0, 4.8, 7.2, 3.5, 5.0, 4.6, 5.2, 4.8, 5.1]\n\n# Create dataframe\ndf = pd.DataFrame({'Country': country, 'Wheat (Tonnes per Hectare)': wheat, 'Corn (Tonnes per Hectare)': corn, 'Rice (Tonnes per Hectare)': rice, 'Soybeans (Tonnes per Hectare)': soybeans, 'Barley (Tonnes per Hectare)': barley, 'Potatoes (Tonnes per Hectare)': potatoes})\n\n# Set figure size\nplt.rcParams[\"figure.figsize\"] = (12,10)\n\n# Create heatmap chart\nax = sns.heatmap(df.set_index('Country'), cmap='coolwarm', annot=True, fmt='.1f', linewidths=0.5)\n\n# Set axis ticks and labels\nax.set_xticks(np.arange(0,6)+0.5)\nax.set_xticklabels(['Wheat', 'Corn', 'Rice', 'Soybeans', 'Barley', 'Potatoes'], fontsize=12, rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticks(np.arange(0,10)+0.5)\nax.set_yticklabels(country, fontsize=12, rotation=0)\n\n# Set tick marks\nax.tick_params(axis='both', which='both', length=0)\n\n# Set title and labels\nax.set_title('Crop Yields by Country in Agriculture', fontsize=16)\nax.set_xlabel('Type of Crop', fontsize=14)\nax.set_ylabel('Country', fontsize=14)\n\n# Automatically resize image and save\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231228-130949_5.png', bbox_inches='tight')\n\n# Clear image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the yield of Rice per hectare in India?",
            "output": "2.7 tonnes"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_20",
        "img": "./heatmap/png/heatmap_20.png",
        "topic": "Business and Finance",
        "title": " Economic Indicators in the Past Five Years",
        "csv": "Year \\t 2009 \\t 2010 \\t 2011 \\t 2012 \\t 2013 \\n GDP (in billions) \\t $14.8 \\t $15.0 \\t $15.5 \\t $16.0 \\t $16.5 \\n Unemployment Rate (%) \\t 8.0% \\t 7.6% \\t 7.2% \\t 6.8% \\t 6.4% \\n Inflation Rate (%) \\t 2.2% \\t 2.5% \\t 2.8% \\t 3.0% \\t 3.2% \\n Interest Rate (%) \\t 3.5% \\t 3.2% \\t 3.0% \\t 2.8% \\t 2.5% \\n Stock Market Index \\t 11 \\t 13 \\t 15 \\t 17 \\t 19 \\n Consumer Spending ($ in billions) \\t $8.5 \\t $8.7 \\t $9.0 \\t $9.2 \\t $9.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap reflects various economic indicators over a five-year period. From 2009 to 2013, the dataset shows annual figures for GDP (in billions), Unemployment Rate (%), Inflation Rate (%), Interest Rate (%), Stock Market Index, and Consumer Spending ($ in billions). The data reveal that GDP increased from $14.8 billion to $16.5 billion, Unemployment Rate decreased from 8.0% to 6.4%, Inflation Rate rose from 2.2% to 3.2%, Interest Rate dropped from 3.5% to 2.5%, the Stock Market Index grew from 11 to 19, and Consumer Spending escalated from $8.5 billion to $9.5 billion."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# python code\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Define the data\ndata = {\n    'Year': [2009, 2010, 2011, 2012, 2013],\n    'GDP (in billions)': [14.8, 15.0, 15.5, 16.0, 16.5],\n    'Unemployment Rate (%)': [8.0, 7.6, 7.2, 6.8, 6.4],\n    'Inflation Rate (%)': [2.2, 2.5, 2.8, 3.0, 3.2],\n    'Interest Rate (%)': [3.5, 3.2, 3.0, 2.8, 2.5],\n    'Stock Market Index': [11, 13, 15, 17, 19],\n    'Consumer Spending ($ in billions)': [8.5, 8.7, 9.0, 9.2, 9.5]\n}\n\n# Convert data to pandas dataframe\ndf = pd.DataFrame(data)\ndf = df.set_index('Year')\n\n# Create a heatmap chart using seaborn\nimport seaborn as sns\nplt.figure(figsize=(10,8))\nax = sns.heatmap(df, cmap='coolwarm', annot=True, linewidths=0.5, vmax=20, vmin=0, fmt='.1f', cbar=False)\n\n# Set x and y ticks and ticklabels at the center of rows and columns\nax.set_xticks(np.arange(len(df.columns))+0.5, minor=False)\nax.set_yticks(np.arange(len(df.index))+0.5, minor=False)\nax.set_xticklabels(df.columns.values, minor=False, rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(df.index.values, minor=False, rotation=0, ha='right', rotation_mode='anchor')\n\n# Set title and labels\nplt.title('Economic Indicators in the Past Five Years')\nplt.xlabel('Indicators')\nplt.ylabel('Year')\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the chart as a png file\nplt.savefig('output/final/heatmap/png/20231226-140552_16.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What was the inflation rate in 2012?",
            "output": "3.0%"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_37",
        "img": "./heatmap/png/heatmap_37.png",
        "topic": "Social Media and the Web",
        "title": " Social Media and Web Platform Metrics",
        "csv": "Platform \\t Number of Users (Millions) \\t Active Users (Millions) \\t Revenue (Millions) \\t Ad Revenue (Millions) \\t Monthly Visits (Millions) \\n Facebook \\t 2000 \\t 1500 \\t 4000 \\t 3500 \\t 5000 \\n Instagram \\t 800 \\t 600 \\t 1200 \\t 1100 \\t 1500 \\n Twitter \\t 500 \\t 400 \\t 800 \\t 700 \\t 1000 \\n LinkedIn \\t 250 \\t 200 \\t 600 \\t 500 \\t 750 \\n Snapchat \\t 200 \\t 150 \\t 400 \\t 350 \\t 500 \\n TikTok \\t 150 \\t 100 \\t 300 \\t 250 \\t 400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap chart visualizes various metrics for social media and web platforms. It provides data on the number of total and active users (in millions), revenue, ad revenue (both in millions), and monthly visits (in millions). Facebook leads with 2000 million total users, 1500 million active users, 4000 million in revenue, 3500 million from ad revenue, and 5000 million monthly visits. Instagram, Twitter, LinkedIn, Snapchat, and TikTok follow, with descending values across the metrics presented. For example, TikTok shows 150 million total users, 100 million active users, 300 million in revenue, 250 million in ad revenue, and 400 million monthly visits."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Read the data\ndata = {'Platform': ['Facebook', 'Instagram', 'Twitter', 'LinkedIn', 'Snapchat', 'TikTok'],\n        'Number of Users (Millions)': [2000, 800, 500, 250, 200, 150],\n        'Active Users (Millions)': [1500, 600, 400, 200, 150, 100],\n        'Revenue (Millions)': [4000, 1200, 800, 600, 400, 300],\n        'Ad Revenue (Millions)': [3500, 1100, 700, 500, 350, 250],\n        'Monthly Visits (Millions)': [5000, 1500, 1000, 750, 500, 400]}\n\n# Convert the data into a dataframe\ndf = pd.DataFrame(data)\n\n# Set the index to Platform\ndf.set_index('Platform', inplace=True)\n\n# Create the heatmap chart\nfig, ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(df, annot=True, cmap='Blues', linewidths=0.5, cbar_kws={'label': 'Value (Millions)'})\n\n# Set the ticks and ticklabels for x and y axis\nax.set_xticklabels(df.columns, rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(df.index, rotation=0, ha='right', rotation_mode='anchor')\n\n# Set the title and labels\nax.set_title('Social Media and Web Platform Metrics')\nax.set_xlabel('Metrics')\nax.set_ylabel('Platforms')\n\n# Automatically resize the image and save it\nfig.tight_layout()\nfig.savefig('output/final/heatmap/png/20231228-124154_20.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference between ad revenue and the total revenue for Instagram?",
            "output": "$100 million"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_8",
        "img": "./heatmap/png/heatmap_8.png",
        "topic": "Law and Legal Affairs",
        "title": " Legal Cases by Country and Type",
        "csv": "Case Type \\t Contract Law \\t Criminal Law \\t Family Law \\t Corporate Law \\t Environmental Law \\t Immigration Law \\n United States \\t 35% \\t 25% \\t 20% \\t 10% \\t 5% \\t 5% \\n Canada \\t 40% \\t 20% \\t 15% \\t 10% \\t 8% \\t 7% \\n United Kingdom \\t 30% \\t 30% \\t 20% \\t 10% \\t 5% \\t 5% \\n Australia \\t 25% \\t 30% \\t 20% \\t 15% \\t 5% \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap represents the distribution of legal cases by type across four countries. In the United States, contract law cases constitute 35%, criminal law 25%, family law 20%, corporate law 10%, and both environmental and immigration law at 5%. Canada shows a higher preference for contract law at 40%, with descending percentages in criminal, family, corporate, environmental, and immigration law. The United Kingdom has an equal percentage for contract and criminal law at 30%, followed by family, corporate, and equal percentages for environmental and immigration law at 5%. Australia has 25% contract law cases, with criminal law leading at 30%, and the rest follow."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# Create dictionary for data\ndata = {\n    'Case Type': ['Contract Law', 'Criminal Law', 'Family Law', 'Corporate Law', 'Environmental Law', 'Immigration Law'],\n    'United States': [35, 25, 20, 10, 5, 5],\n    'Canada': [40, 20, 15, 10, 8, 7],\n    'United Kingdom': [30, 30, 20, 10, 5, 5],\n    'Australia': [25, 30, 20, 15, 5, 5]\n}\n\n# Convert dictionary to dataframe\ndf = pd.DataFrame(data)\n\n# Set figure size\nplt.figure(figsize=(12,8))\n\n# Plot heatmap using sns.heatmap()\nax = sns.heatmap(df.iloc[:,1:], annot=True, fmt='g', cmap='Blues', cbar=False)\n\n# Set x and y ticks and labels\nax.set_yticks(np.arange(len(df['Case Type'])) + 0.5)\nax.set_yticklabels(df['Case Type'], rotation=45, ha='right', rotation_mode='anchor')\nax.set_xticks(np.arange(len(df.columns[1:])) + 0.5)\nax.set_xticklabels(df.columns[1:], rotation=45, ha='right', rotation_mode='anchor')\n\n# Set ticks and ticklabels in the center of rows and columns\nax.tick_params(axis='both', which='both', length=0, pad=10)\nax.set_yticklabels(df['Case Type'], rotation=0, ha='center', wrap=True)\nax.set_xticklabels(df.columns[1:], rotation=0, ha='center', wrap=True)\n\n# Set title\nplt.title('Legal Cases by Country and Type')\n\n# Automatically resize image and save\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231225-210514_27.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest percentage of Family Law cases according to the data?",
            "output": "United States"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_92",
        "img": "./heatmap/png/heatmap_92.png",
        "topic": "Retail and E-commerce",
        "title": " Retail Performance by Category",
        "csv": "Category \\t Revenue (in Million) \\t Profit (in Million) \\t Sales (in Million) \\t Customers (in Million) \\t Average Order Value ($) \\n Clothing \\t 100 \\t 20 \\t 80 \\t 10 \\t 50 \\n Electronics \\t 150 \\t 30 \\t 120 \\t 15 \\t 40 \\n Home Goods \\t 50 \\t 10 \\t 40 \\t 5 \\t 45 \\n Beauty \\t 70 \\t 15 \\t 50 \\t 8 \\t 55 \\n Toys \\t 40 \\t 8 \\t 30 \\t 4 \\t 35 \\n Groceries \\t 200 \\t 40 \\t 160 \\t 20 \\t 45 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap visualizes retail performance by category, showing the Revenue, Profit, Sales, Customers, and Average Order Value for Clothing, Electronics, Home Goods, Beauty, Toys, and Groceries. Each category's performance is represented using colors to easily identify relative values across these metrics. Clothing sees $100 million in revenue and $20 million in profit, with Electronics at $150 million revenue and $30 million profit. Home Goods, Beauty, and Toys follow, while Groceries top the chart with $200 million in revenue and $40 million in profit. Customer counts range from 4 to 20 million, and Average Order Value spans from $35 to $55."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\n# Define data as a dictionary\ndata = {'Category': ['Clothing', 'Electronics', 'Home Goods', 'Beauty', 'Toys', 'Groceries'],\n       'Revenue (in Million)': [100, 150, 50, 70, 40, 200],\n       'Profit (in Million)': [20, 30, 10, 15, 8, 40],\n       'Sales (in Million)': [80, 120, 40, 50, 30, 160],\n       'Customers (in Million)': [10, 15, 5, 8, 4, 20],\n       'Average Order Value ($)': [50, 40, 45, 55, 35, 45]}\n\n# Convert data into a pandas dataframe\ndf = pd.DataFrame(data)\n\n# Set the figure size\nplt.figure(figsize=(10,8))\n\n# Create the heatmap using seaborn\nsns.heatmap(df.iloc[:,1:], annot=True, cmap='Blues', cbar=False)\n\n# Set ticks and ticklabels for x and y axis\nplt.xticks(np.arange(5)+0.5, labels=df.columns[1:], rotation=45, ha='right', rotation_mode='anchor')\nplt.yticks(np.arange(6)+0.5, labels=df['Category'], rotation=0, ha='right', rotation_mode='anchor')\n\n# Set title and labels\nplt.title('Retail Performance by Category')\nplt.xlabel('Metrics')\nplt.ylabel('Category')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('output/final/heatmap/png/20231228-124154_89.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf() "
        },
        "QA": {
            "input": "What is the average order value for the Toys category?",
            "output": "$35"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_113",
        "img": "./heatmap/png/heatmap_113.png",
        "topic": "Food and Beverage Industry",
        "title": " Product Distribution in Food and Beverage Industry",
        "csv": "Product \\t Coffee \\t Tea \\t Soft Drinks \\t Alcoholic Beverages \\t Snacks \\t Meals/Breakfast \\n Starbucks \\t 35% \\t 25% \\t 15% \\t 10% \\t 10% \\t 5% \\n McDonald's \\t 15% \\t 10% \\t 20% \\t 25% \\t 20% \\t 10% \\n Coca-Cola \\t 10% \\t 20% \\t 30% \\t 15% \\t 10% \\t 15% \\n Budweiser \\t 5% \\t 5% \\t 10% \\t 45% \\t 25% \\t 10% \\n Lay's \\t 20% \\t 10% \\t 10% \\t 10% \\t 30% \\t 20% \\n Kellogg's \\t 5% \\t 20% \\t 5% \\t 5% \\t 20% \\t 45% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates the product distribution percentages for various food and beverage categories across six companies. Starbucks shows a prevalence in coffee and tea sales, McDonald's in soft drinks and alcoholic beverages, and Coca-Cola is primarily focused on soft drinks. Budweiser's distribution heavily favors alcoholic beverages, while Lay's shows a stronger presence in snacks. Kellogg's distribution significantly leans towards meals/breakfast items. Each company's portfolio is distinctly characterized by varying percentages across the categories of coffee, tea, soft drinks, alcoholic beverages, snacks, and meals/breakfast."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# data processing\ndata = {'Product': ['Starbucks', 'McDonald\\'s', 'Coca-Cola', 'Budweiser', 'Lay\\'s', 'Kellogg\\'s'], 'Coffee': [35, 15, 10, 5, 20, 5], 'Tea': [25, 10, 20, 5, 10, 20], 'Soft Drinks': [15, 20, 30, 10, 10, 5], 'Alcoholic Beverages': [10, 25, 15, 45, 10, 5], 'Snacks': [10, 20, 10, 25, 30, 20], 'Meals/Breakfast': [5, 10, 15, 10, 20, 45]}\n\ndf = pd.DataFrame(data)\ndf = df.set_index('Product')\n\n# plot the chart\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# heatmap chart using sns.heatmap()\nsns.heatmap(df, annot=True, cmap=\"Blues\", cbar=False, linewidths=.5, fmt='g')\n\n# set ticks and ticklabels for x and y axis\nax.set_xticks(np.arange(len(df.columns))+0.5)\nax.set_xticklabels(df.columns, rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticks(np.arange(len(df))+0.5)\nax.set_yticklabels(df.index, rotation=0, ha='right', rotation_mode='anchor')\n\n# set ticks and ticklabels in the center of rows and columns\nax.set_xticks(np.arange(len(df.columns))+0.5, minor=True)\nax.set_xticklabels('', minor=True)\nax.set_yticks(np.arange(len(df))+0.5, minor=True)\nax.set_yticklabels('', minor=True)\n\n# add colorbar\ncbar = ax.figure.colorbar(ax.collections[0])\ncbar.ax.tick_params(labelsize=12)\n\n# set title\nplt.title('Product Distribution in Food and Beverage Industry', fontsize=16)\n\n# resize image\nplt.tight_layout()\n\n# save image\nplt.savefig('output/final/heatmap/png/20231228-131639_14.png', bbox_inches='tight')\n\n# clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage of Soft Drinks for Coca-Cola?",
            "output": "30%"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_9",
        "img": "./heatmap/png/heatmap_9.png",
        "topic": "Agriculture and Food Production",
        "title": " Agriculture and Food Production by Country",
        "csv": "Country \\t Total Land Area (sq. km) \\t Agricultural Land Area (sq. km) \\t Crop Production (tonnes) \\t Livestock Production (tonnes) \\t Fish Production (tonnes) \\n China \\t 9.6  \\t 1.2  \\t 1.5  \\t 0.1  \\t 0.01 \\n India \\t 3.2  \\t 0.8  \\t 0.7  \\t 0.05  \\t 0.005  \\n United States \\t 6.8  \\t 1.5  \\t 1.2  \\t 0.2  \\t 0.012  \\n Brazil \\t 8.5  \\t 2.0  \\t 800  \\t 0.15  \\t 0.008  \\n Russia \\t 17  \\t 3.5  \\t 0.5  \\t 0.1  \\t 0.018  \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This heatmap presents data on agriculture and food production across five countries. The measurements include each country's total land area in square kilometers, agricultural land area, crop production in tonnes, livestock production in tonnes, and fish production in tonnes. China's figures are 9.6 (sq. km), 1.2 (sq. km), 1.5 (tonnes), 0.1 (tonnes), and 0.01 (tonnes), respectively. India's stats are 3.2, 0.8, 0.7, 0.05, and 0.005. The United States has 6.8, 1.5, 1.2, 0.2, and 0.012. Brazil shows 8.5, 2.0, 800, 0.15, and 0.008. Lastly, Russia's data are 17, 3.5, 0.5, 0.1, and 0.018, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# Import data\ndata = {\"Country\": [\"China\", \"India\", \"United States\", \"Brazil\", \"Russia\"],\n        \"Total Land Area (sq. km)\": [9.6, 3.2, 6.8, 8.5, 17],\n        \"Agricultural Land Area (sq. km)\": [1.2, 0.8, 1.5, 2.0, 3.5],\n        \"Crop Production (tonnes)\": [1.5, 0.7, 1.2, 0.8, 0.5],\n        \"Livestock Production (tonnes)\": [0.1, 0.05, 0.2, 0.15, 0.1],\n        \"Fish Production (tonnes)\": [0.01, 0.005, 0.012, 0.008, 0.018]}\ndf = pd.DataFrame(data)\n\n# Set figure size\nplt.figure(figsize=(12, 6))\n\n# Process data\nx_labels = [\"Total Land Area (million sq. km)\", \"Agricultural Land Area (million sq. km)\", \n            \"Crop Production (billion tonnes)\",\n            \"Livestock Production (billion tonnes)\", \"Fish Production (billion tonnes)\"]\ny_labels = [\"China\", \"India\", \"United States\", \"Brazil\", \"Russia\"]\nvalues = df.iloc[:, 1:].values\n\n# Plot heatmap\nax = sns.heatmap(values, cmap=\"YlGnBu\", annot=True, fmt='.3f', linewidths=.5, cbar=False)\n\n# Set ticks and tick labels\nax.set_xticks(np.arange(0.5, len(x_labels) + 0.5))\nax.set_xticklabels(x_labels, rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_yticks(np.arange(0.5, len(y_labels) + 0.5))\nax.set_yticklabels(y_labels, rotation=0, ha=\"right\", rotation_mode=\"anchor\")\n\n# Set title\nplt.title(\"Agriculture and Food Production by Country\")\n\n# Automatically resize image and save\nplt.tight_layout()\nplt.savefig(\"output/final/heatmap/png/20231225-210514_31.png\", bbox_inches='tight')\n\n# Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest fish production according to the data provided?",
            "output": "United States"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_24",
        "img": "./heatmap/png/heatmap_24.png",
        "topic": "Real Estate and Housing Market",
        "title": " Housing Market Trends in Major Cities",
        "csv": "Location \\t Median Home Price ($) \\t Average Rent ($) \\t Vacancy Rate (%) \\t Median Household Income ($) \\n New York City \\t $1200000 \\t $2500 \\t 5% \\t $65000 \\n Los Angeles \\t $900000 \\t $2200 \\t 5% \\t $60000 \\n Chicago \\t $650000 \\t $1800 \\t 4% \\t $55000 \\n Dallas \\t $500000 \\t $1500 \\t 3% \\t $50000 \\n San Francisco \\t $1500000 \\t $3000 \\t 6% \\t $75000 \\n Miami \\t $800000 \\t $2000 \\t 6% \\t $55000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap presents housing market trends across six major cities. For each city, it depicts the median home price, average rent, vacancy rate, and median household income. New York City features a median home price of $1,200,000, rent at $2,500, a 5% vacancy rate, and a median income of $65,000. Los Angeles shows a home price of $900,000, rent at $2,200, vacancy at 5%, and income at $60,000. Chicago lists a home price of $650,000, rent at $1,800, a 4% vacancy, and income at $55,000. Dallas has a $500,000 home price, $1,500 rent, a 3% vacancy rate, and $50,000 income. San Francisco stands out with the highest median home price of $1,500,000 and rent at $3,000, a vacancy rate of 6%, and the highest median income of $75,000. Lastly, Miami has a home price of $800,000, rent at $2,000, a 6% vacancy, and a median income identical to Chicago's at $55,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# Define the data\ndata = {'Location': ['New York City', 'Los Angeles', 'Chicago', 'Dallas', 'San Francisco', 'Miami'],\n        'Median Home Price ($)': [1200000, 900000, 650000, 500000, 1500000, 800000],\n        'Average Rent ($)': [2500, 2200, 1800, 1500, 3000, 2000],\n        'Vacancy Rate (%)': [5, 5, 4, 3, 6, 6],\n        'Median Household Income ($)': [65000, 60000, 55000, 50000, 75000, 55000]}\n\n# Convert the data to a pandas dataframe\ndf = pd.DataFrame(data)\n\n# Set the figure size\nplt.figure(figsize=(10, 8))\n\n# Create a heatmap using seaborn\nax = sns.heatmap(df.drop('Location', axis=1), annot=True, cmap='Blues')\n\n# Set the ticks and ticklabels for both x and y axis\nax.set_xticklabels(df.columns[1:], rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(df['Location'], rotation=0)\n\n# Set the title of the figure\nax.set_title('Housing Market Trends in Major Cities')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('output/final/heatmap/png/20231226-140552_3.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in average rent between Los Angeles and Miami?",
            "output": "$200"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_96",
        "img": "./heatmap/png/heatmap_96.png",
        "topic": "Business and Finance",
        "title": " Company Financial Performance in Various Industries",
        "csv": "Category Name \\t Revenue (Millions of [Currency Abbreviation]) \\t Net Income (Millions of [Currency Abbreviation]) \\t Total Assets (Millions of [Currency Abbreviation]) \\t Total Liabilities (Millions of [Currency Abbreviation]) \\n Retail \\t 500 \\t 100 \\t 1000 \\t 700 \\n Technology \\t 800 \\t 200 \\t 1500 \\t 900 \\n Finance \\t 1000 \\t 300 \\t 2000 \\t 1200 \\n Healthcare \\t 600 \\t 150 \\t 1200 \\t 800 \\n Energy \\t 400 \\t 50 \\t 800 \\t 600 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap represents the financial performance of companies in various industries, focusing on revenue, net income, total assets, and total liabilities, all in millions of an unspecified currency abbreviation. The Retail sector shows revenue of 500, net income of 100, assets totaling 1000, and liabilities of 700. Technology sector figures include 800 in revenue, 200 net income, assets of 1500, and liabilities of 900. Finance has 1000 revenue, 300 net income, 2000 in assets, and 1200 in liabilities. Healthcare displays 600 revenue, 150 net income, 1200 assets, and 800 liabilities. Finally, Energy shows 400 revenue, 50 net income, 800 assets, and 600 in liabilities."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define data as a dictionary\ndata = {'Category Name': ['Retail', 'Technology', 'Finance', 'Healthcare', 'Energy'],\n        'Revenue (Millions)': [500, 800, 1000, 600, 400],\n        'Net Income (Millions)': [100, 200, 300, 150, 50],\n        'Total Assets (Millions)': [1000, 1500, 2000, 1200, 800],\n        'Total Liabilities (Millions)': [700, 900, 1200, 800, 600]}\n\n# Convert data into a dataframe\ndf = pd.DataFrame(data)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot heatmap chart\nhm = ax.imshow(df.iloc[:, 1:], cmap='Blues')\n\n# Add x and y ticks and labels\nax.set_xticks(np.arange(len(df.columns[1:])))\nax.set_yticks(np.arange(len(df['Category Name'])))\n\nax.set_xticklabels(df.columns[1:], rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(df['Category Name'])\n\n# Set ticks and ticklabels in the center of rows and columns\nax.tick_params(axis='both', which='both', length=0)\nax.set_xticks(np.arange(len(df.columns[1:]))+0.5, minor=True)\nax.set_yticks(np.arange(len(df['Category Name']))+0.5, minor=True)\nax.tick_params(axis='x', which='minor', bottom=False, labelbottom=False)\nax.tick_params(axis='y', which='minor', left=False, labelleft=False)\n\n# Set title\nax.set_title('Company Financial Performance in Various Industries')\n\n# Add colorbar\ncbar = plt.colorbar(hm, ax=ax)\ncbar.ax.set_ylabel('Millions of [Currency Abbreviation]', rotation=-90, va='bottom')\n\n# Add text to each cell\nfor i in range(len(df['Category Name'])):\n    for j in range(len(df.columns[1:])):\n        text = ax.text(j, i, df.iloc[i, j+1],\n                       ha='center', va='center', color='black')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('output/final/heatmap/png/20231228-124154_95.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the total liabilities of the finance sector?",
            "output": "1200"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_13",
        "img": "./heatmap/png/heatmap_13.png",
        "topic": "Technology and the Internet",
        "title": " Technology and Internet Usage by Country",
        "csv": "Category \\t Data Usage (GB) \\t Internet Speed (Mbps) \\t Online Shopping (%) \\t Smartphone Adoption (%) \\t Social Media Usage (%) \\n United States \\t 50 \\t 25 \\t 60% \\t 75% \\t 80% \\n China \\t 40 \\t 50 \\t 80% \\t 90% \\t 90% \\n Japan \\t 30 \\t 30 \\t 50% \\t 60% \\t 70% \\n United Kingdom \\t 20 \\t 35 \\t 40% \\t 55% \\t 60% \\n Germany \\t 15 \\t 20 \\t 30% \\t 40% \\t 50% \\n India \\t 10 \\t 15 \\t 20% \\t 30% \\t 40% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates technology and internet usage metrics across six countries. The data encompasses average data usage in gigabytes, internet speed in megabits per second, online shopping participation, smartphone adoption, and social media usage rates, all represented as percentages. The United States logs 50 GB usage, 25 Mbps speed, and has high engagement with digital platforms: 60% in online shopping, 75% in smartphone adoption, and 80% in social media usage. The metrics for China, Japan, the United Kingdom, Germany, and India follow respectively, with varying figures across categories indicative of diverse levels of technological engagement and internet infrastructure."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Data processing\ndata = {\"Country\": [\"United States\", \"China\", \"Japan\", \"United Kingdom\", \"Germany\", \"India\"],\n        \"Data Usage (GB)\": [50, 40, 30, 20, 15, 10],\n        \"Internet Speed (Mbps)\": [25, 50, 30, 35, 20, 15],\n        \"Online Shopping (%)\": [60, 80, 50, 40, 30, 20],\n        \"Smartphone Adoption (%)\": [75, 90, 60, 55, 40, 30],\n        \"Social Media Usage (%)\": [80, 90, 70, 60, 50, 40]}\n\ndf = pd.DataFrame(data)\ndf = df.set_index(\"Country\")\n\n# Plotting the heatmap chart\nfig, ax = plt.subplots(figsize=(10, 7))\nheatmap = ax.imshow(df, cmap=\"YlGnBu\")\n\n# Setting x and y ticks and ticklabels\nax.set_xticks(np.arange(len(df.columns)))\nax.set_yticks(np.arange(len(df.index)))\nax.set_xticklabels(df.columns)\nax.set_yticklabels(df.index)\n\n# Rotating x-axis labels if necessary\nif len(df.columns[0]) > 6:\n    ax.set_xticklabels(df.columns, rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Wrapping y-axis labels if necessary\nif len(df.index[0]) > 6:\n    ax.set_yticklabels(df.index, wrap=True)\n\n# Setting ticks at the center of rows and columns\nax.set_xticks(np.arange(len(df.columns) + 1) - 0.5, minor=True)\nax.set_yticks(np.arange(len(df.index) + 1) - 0.5, minor=True)\nax.grid(which=\"minor\", color=\"w\", linestyle=\"-\", linewidth=2)\n\n# Adding colorbar with 40% probability\nif np.random.uniform() < 0.4:\n    fig.colorbar(heatmap)\n\n# Adding labels to each cell if colorbar is not added\nelse:\n    for i in range(len(df.index)):\n        for j in range(len(df.columns)):\n            text = ax.text(j, i, df.iloc[i, j],\n                           ha=\"center\", va=\"center\", color=\"k\")\n\n# Setting title and saving the figure\nax.set_title(\"Technology and Internet Usage by Country\")\nfig.tight_layout()\nplt.savefig(\"output/final/heatmap/png/20231225-210514_45.png\", bbox_inches=\"tight\")\nplt.close()"
        },
        "QA": {
            "input": "Which country has the highest Internet Speed according to the data?",
            "output": "China"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_31",
        "img": "./heatmap/png/heatmap_31.png",
        "topic": "Environment and Sustainability",
        "title": " Environmental Impact by Country",
        "csv": "Country \\t Air Pollution (\u03bcg/m\u00b3) \\t Water Pollution (mg/L) \\t Waste Production (kg/person) \\t Renewable Energy Usage (%) \\t Deforestation (%) \\t Greenhouse Gas Emissions (tonnes/person) \\n United States \\t 12 \\t 0.5 \\t 3.2 \\t 25% \\t 2% \\t 18 \\n China \\t 20 \\t 0.7 \\t 4.5 \\t 18% \\t 5% \\t 22 \\n India \\t 30 \\t 0.9 \\t 5.0 \\t 15% \\t 7% \\t 25 \\n Brazil \\t 15 \\t 0.6 \\t 3.8 \\t 20% \\t 3% \\t 20 \\n Mexico \\t 18 \\t 0.8 \\t 3.5 \\t 22% \\t 4% \\t 20 \\n Germany \\t 8 \\t 0.4 \\t 2.0 \\t 30% \\t 1% \\t 15 \\n Australia \\t 5 \\t 0.3 \\t 1.5 \\t 35% \\t 0.5% \\t 12 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates environmental impact indicators across several countries. It includes air pollution measured in micrograms per cubic meter, water pollution in milligrams per liter, waste production in kilograms per person, renewable energy usage as a percentage, rates of deforestation, and greenhouse gas emissions in tonnes per person. The selected countries are the United States, China, India, Brazil, Mexico, Germany, and Australia. The data points vary by country and impact category, examining factors like air and water quality, waste management, energy choices, forest conservation, and carbon footprint."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {'Country': ['United States', 'China', 'India', 'Brazil', 'Mexico', 'Germany', 'Australia'],\n        'Air Pollution (\u03bcg/m\u00b3)': [12, 20, 30, 15, 18, 8, 5],\n        'Water Pollution (mg/L)': [0.5, 0.7, 0.9, 0.6, 0.8, 0.4, 0.3],\n        'Waste Production (kg/person)': [3.2, 4.5, 5.0, 3.8, 3.5, 2.0, 1.5],\n        'Renewable Energy Usage (%)': [25, 18, 15, 20, 22, 30, 35],\n        'Deforestation (%)': [2, 5, 7, 3, 4, 1, 0.5],\n        'Greenhouse Gas Emissions (tonnes/person)': [18, 22, 25, 20, 20, 15, 12]\n        }\ndf = pd.DataFrame(data)\ndf.set_index('Country', inplace=True)\n\nfig, ax = plt.subplots(figsize=(10, 8))\n\nim = ax.imshow(df, cmap='YlOrBr')\n\n# set ticks and ticklabels\nax.set_xticks(np.arange(len(df.columns)))\nax.set_yticks(np.arange(len(df.index)))\nax.set_xticklabels(df.columns)\nax.set_yticklabels(df.index)\n\n# center ticks\nax.set_xticks(np.arange(len(df.columns)) - 0.5, minor=True)\nax.set_yticks(np.arange(len(df.index)) - 0.5, minor=True)\n\n# rotate and wrap tick labels if necessary\nif len(ax.get_xticklabels()[0].get_text()) > 6:\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right', rotation_mode='anchor')\nif len(ax.get_yticklabels()[0].get_text()) > 6:\n    ax.set_yticklabels(ax.get_yticklabels(), rotation=45, ha='right', rotation_mode='anchor')\n\n# add colorbar\ncb = fig.colorbar(im, ax=ax)\n\n# add title\nax.set_title('Environmental Impact by Country')\n\n# show or hide cell values\nfor i in range(len(df.index)):\n    for j in range(len(df.columns)):\n        text = ax.text(j, i, df.iloc[i, j],\n                       ha='center', va='center', color='black' if df.iloc[i, j] < 20 else 'white')\n\n# resize and save image\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231228-124154_14.png', bbox_inches='tight')\n\n# clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of renewable energy usage does Brazil have?",
            "output": "20%"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_44",
        "img": "./heatmap/png/heatmap_44.png",
        "topic": "Law and Legal Affairs",
        "title": " Legal Activity and Representation",
        "csv": "Topic \\t Number of Lawsuits \\t Number of Legal Advisers \\t Number of Legal Documents \\t Number of Court Cases \\t Number of Lawyers \\n Intellectual Property \\t 100 \\t 25 \\t 500 \\t 450 \\t 300 \\n Employment Law \\t 200 \\t 50 \\t 1000 \\t 900 \\t 600 \\n Criminal Law \\t 150 \\t 75 \\t 750 \\t 600 \\t 500 \\n Contract Law \\t 125 \\t 100 \\t 650 \\t 500 \\t 400 \\n Tax Law \\t 75 \\t 50 \\t 400 \\t 300 \\t 200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates various legal sectors and their respective activity measured by the number of lawsuits, legal advisers, legal documents, court cases, and lawyers. Intellectual Property sees 100 lawsuits, 25 legal advisers, 500 legal documents, 450 court cases, and 300 lawyers. Employment Law has double the lawsuits at 200, 50 legal advisers, 1000 documents, 900 cases, and 600 lawyers. Criminal Law follows with 150 lawsuits, 75 advisers, 750 documents, 600 cases, and 500 lawyers. Contract Law involves 125 lawsuits, 100 advisers, 650 documents, 500 cases, and 400 lawyers. Tax Law features the least with 75 lawsuits, 50 advisers, 400 documents, 300 cases, and 200 lawyers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\n# 20231228-124154_32.png\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Preprocess data\ndata = {'Topic': ['Intellectual Property', 'Employment Law', 'Criminal Law', 'Contract Law', 'Tax Law'],\n        'Number of Lawsuits': [100, 200, 150, 125, 75],\n        'Number of Legal Advisers': [25, 50, 75, 100, 50],\n        'Number of Legal Documents': [500, 1000, 750, 650, 400],\n        'Number of Court Cases': [450, 900, 600, 500, 300],\n        'Number of Lawyers': [300, 600, 500, 400, 200]}\n\ndf = pd.DataFrame(data)\ndf.set_index('Topic', inplace=True)\n\n# Plot heatmap\nfig, ax = plt.subplots(figsize=(10, 8))\nheatmap = ax.pcolor(df, cmap='OrRd')\n\n# Set ticks and tick labels\nax.set_xticks([x + 0.5 for x in range(len(df.columns))])\nax.set_yticks([y + 0.5 for y in range(len(df.index))])\nax.set_xticklabels(df.columns, rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(df.index, rotation=0, ha='right', rotation_mode='anchor', wrap=True)\n\n# Set ticks and tick labels in the center\nax.set_xticks([x + 0.5 for x in range(len(df.columns))], minor=True)\nax.set_yticks([y + 0.5 for y in range(len(df.index))], minor=True)\nax.set_xticklabels(df.columns, rotation=45, ha='right', rotation_mode='anchor', minor=True)\nax.set_yticklabels(df.index, rotation=0, ha='right', rotation_mode='anchor', wrap=True, minor=True)\nax.tick_params(axis='both', which='both', length=0)\n\n# Set colorbar\nplt.colorbar(heatmap)\n\n# Set title\nax.set_title('Legal Activity and Representation')\n\n# Automatically resize and save\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231228-124154_32.png', bbox_inches='tight')\n\n# Clear image state\nplt.clf()"
        },
        "QA": {
            "input": "Which topic has the greatest number of legal advisers?",
            "output": "Contract Law"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_69",
        "img": "./heatmap/png/heatmap_69.png",
        "topic": "Social Sciences and Humanities",
        "title": " Research in Social Sciences and Humanities",
        "csv": "Category \\t Research Institutions \\t Funding Sources \\t Publications \\t Conferences \\t Collaborations \\n Aging \\t 25 \\t 15 \\t 45 \\t 72 \\t 38 \\n Education \\t 50 \\t 30 \\t 60 \\t 90 \\t 45 \\n Gender Studies \\t 20 \\t 10 \\t 30 \\t 40 \\t 25 \\n History \\t 40 \\t 25 \\t 50 \\t 65 \\t 35 \\n Linguistics \\t 35 \\t 20 \\t 55 \\t 80 \\t 40 \\n Psychology \\t 55 \\t 35 \\t 65 \\t 100 \\t 50 \\n Sociology \\t 45 \\t 25 \\t 50 \\t 75 \\t 40 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap outlines research activity across various fields in the social sciences and humanities, detailing the number of research institutions, funding sources, publications, conferences, and collaborations. Categories include Aging, Education, Gender Studies, History, Linguistics, Psychology, and Sociology. Aging research features 25 institutions, 15 funding sources, 45 publications, 72 conferences, and 38 collaborations. Education boasts 50 institutions, 30 funding sources, 60 publications, 90 conferences, and 45 collaborations. Gender Studies has lower figures, while Psychology leads with 55 institutions, 35 funding sources, 65 publications, 100 conferences, and 50 collaborations. The heatmap likely uses color intensities to represent the density of activity in each category."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n\n# Create dictionary with data\ndata = {'Category': ['Aging', 'Education', 'Gender Studies', 'History', 'Linguistics', 'Psychology', 'Sociology'], \n        'Research Institutions': [25, 50, 20, 40, 35, 55, 45],\n        'Funding Sources': [15, 30, 10, 25, 20, 35, 25],\n        'Publications': [45, 60, 30, 50, 55, 65, 50],\n        'Conferences': [72, 90, 40, 65, 80, 100, 75],\n        'Collaborations': [38, 45, 25, 35, 40, 50, 40]}\n\n# Convert dictionary to dataframe\ndf = pd.DataFrame(data)\n\n# Set figure size\nfig = plt.figure(figsize=(10,8))\n\n# Set color map\ncmap = 'magma'\n\n# Plot heatmap\nax = sns.heatmap(df.iloc[:,1:], cmap=cmap, annot=True, fmt='g', cbar=False)\n\n# Set ticks and ticklabels\nax.set_xticklabels(df.columns[1:], rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(df['Category'], rotation=0)\n\n# Set tick positions\nax.set_xticks(np.arange(0.5, 5.5, 1))\nax.set_yticks(np.arange(0.5, 7.5, 1))\n\n# Set tick labels in center\nax.tick_params(axis='x', pad=0.5)\nax.tick_params(axis='y', pad=0.5)\n\n# Set title\nplt.title('Research in Social Sciences and Humanities')\n\n# Automatically resize image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('output/final/heatmap/png/20231228-124154_59.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many research institutions are focused on Aging?",
            "output": "25"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_51",
        "img": "./heatmap/png/heatmap_51.png",
        "topic": "Environment and Sustainability",
        "title": " Environmental Impact by Country",
        "csv": "Country \\t Electricity Production (TWh) \\t Renewable Energy Production (TWh) \\t Carbon Dioxide Emissions (MtCO2) \\t Water Usage (billion m3) \\t Waste Production (million tonnes) \\t Forest Area (%) \\n China \\t 7 \\t 1.5 \\t 10 \\t 2.5 \\t 5 \\t 25 \\n United States \\t 5.5 \\t 1.2 \\t 9 \\t 2.2 \\t 4 \\t 20 \\n India \\t 4 \\t 0.8 \\t 7 \\t 2.0 \\t 3 \\t 18 \\n Russia \\t 3 \\t 0.5 \\t 6 \\t 1.5 \\t 2.5 \\t 15 \\n Japan \\t 2.5 \\t 0.7 \\t 5 \\t 1.2 \\t 2 \\t 12 \\n Germany \\t 2 \\t 0.5 \\t 4 \\t 1.0 \\t 1.5 \\t 10 \\n Canada \\t 1.5 \\t 0.4 \\t 3 \\t 0.8 \\t 1 \\t 8 \\n Brazil \\t 1 \\t 0.3 \\t 2 \\t 0.5 \\t 0.8 \\t 6 \\n Australia \\t 0.8 \\t 0.2 \\t 1 \\t 0.3 \\t 0.6 \\t 5 \\n South Africa \\t 0.5 \\t 0.1 \\t 0.5 \\t 0.2 \\t 0.4 \\t 4 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates the environmental impact metrics for various countries. It covers electricity and renewable energy production in terawatt-hours (TWh), carbon dioxide emissions in metric tons (MtCO2), water usage in billion cubic meters, waste production in million tonnes, and the percentage of forest area. China leads with 7 TWh electricity production, 1.5 TWh from renewables, emissions at 10 MtCO2, using 2.5 billion m\u00b3 of water, producing 5 million tonnes of waste, and having 25% forest area. At the lower end, South Africa's figures are 0.5 TWh electricity, 0.1 TWh renewable, 0.5 MtCO2 emissions, 0.2 billion m\u00b3 water usage, 0.4 million tonnes of waste, and 4% forest area."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n#Import required modules\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n\n#Create a dictionary with the data\ndata = {'Country':['China', 'United States', 'India', 'Russia', 'Japan', 'Germany', 'Canada', 'Brazil', 'Australia', 'South Africa'],\n        'Electricity Production (TWh)':[7, 5.5, 4, 3, 2.5, 2, 1.5, 1, 0.8, 0.5],\n        'Renewable Energy Production (TWh)':[1.5, 1.2, 0.8, 0.5, 0.7, 0.5, 0.4, 0.3, 0.2, 0.1],\n        'Carbon Dioxide Emissions (MtCO2)':[10, 9, 7, 6, 5, 4, 3, 2, 1, 0.5],\n        'Water Usage (billion m3)':[2.5, 2.2, 2.0, 1.5, 1.2, 1.0, 0.8, 0.5, 0.3, 0.2],\n        'Waste Production (million tonnes)':[5, 4, 3, 2.5, 2, 1.5, 1, 0.8, 0.6, 0.4],\n        'Forest Area (%)':[25, 20, 18, 15, 12, 10, 8, 6, 5, 4]}\n\n#Convert the dictionary to a pandas dataframe\ndf = pd.DataFrame(data)\n\n#Set the figure size\nplt.figure(figsize=(12,8))\n\n#Plot the heatmap chart using seaborn\nsns.heatmap(df.iloc[:,1:], annot=True, cmap='BuPu', cbar=False, vmin=0, vmax=25)\n\n#Set the title\nplt.title('Environmental Impact by Country')\n\n#Rotate the x-axis labels by 45 degrees and align them to the right\nplt.xticks(rotation=45, ha='right', rotation_mode='anchor')\n\n#Set the y-axis labels to the center of each row\nplt.yticks(np.arange(10)+0.5, df['Country'], rotation=0)\n\n#Automatically adjust the layout\nplt.tight_layout()\n\n#Save the chart as a png file\nplt.savefig('output/final/heatmap/png/20231228-124154_39.png', bbox_inches='tight')\n\n#Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference between the Water Usage of China and India?",
            "output": "0.5 billion m3"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_97",
        "img": "./heatmap/png/heatmap_97.png",
        "topic": "Arts and Culture",
        "title": " Popularity of Arts and Culture by Category",
        "csv": "Category \\t Painting \\t Sculpture \\t Dance \\t Film \\t Music \\t Theatre \\n 1 \\t 20 \\t 10 \\t 5 \\t 30 \\t 15 \\t 20 \\n 2 \\t 30 \\t 15 \\t 5 \\t 25 \\t 20 \\t 15 \\n 3 \\t 40 \\t 20 \\t 10 \\t 15 \\t 20 \\t 15 \\n 4 \\t 25 \\t 15 \\t 10 \\t 20 \\t 30 \\t 25 \\n 5 \\t 15 \\t 10 \\t 5 \\t 15 \\t 20 \\t 30 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap represents the popularity of different art and culture categories across five divisions. Categories include Painting, Sculpture, Dance, Film, Music, and Theatre. The first category emphasizes Film (30) as the most popular, with Dance (5) being the least. Second and third categories highlight Painting at 30 and 40, respectively, while Dance maintains a lower popularity (5 and 10). The fourth division shows strong preference for Music (30) and Theatre (25), with Dance at 10. The final category reveals Theatre as most popular (30) with Painting, Sculpture, and Dance at lower points of 15, 10, and 5, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\n\ndata = {'Category': [1, 2, 3, 4, 5],\n        'Painting': [20, 30, 40, 25, 15],\n        'Sculpture': [10, 15, 20, 15, 10],\n        'Dance': [5, 5, 10, 10, 5],\n        'Film': [30, 25, 15, 20, 15],\n        'Music': [15, 20, 20, 30, 20],\n        'Theatre': [20, 15, 15, 25, 30]}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\nsns.heatmap(df.set_index('Category'),\n            annot=True,\n            fmt='g',\n            cmap='YlGnBu',\n            linewidths=0.5,\n            ax=ax)\n\nax.set_title('Popularity of Arts and Culture by Category')\n\nplt.yticks(rotation=0)\nplt.xticks(rotation=45, ha='right', rotation_mode='anchor')\nax.xaxis.set_ticks_position('top')\nax.yaxis.set_ticks_position('left')\n\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231228-124154_96.png', bbox_inches='tight')\n\nplt.clf()"
        },
        "QA": {
            "input": "Which category scored exactly 30 three times across different categories?",
            "output": "Music"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_18",
        "img": "./heatmap/png/heatmap_18.png",
        "topic": "Government and Public Policy",
        "title": " Government Spending by Policy Area",
        "csv": "Country \\t USA \\t UK \\t Canada \\t Australia \\t Germany \\n Education \\t 30% \\t 25% \\t 10% \\t 20% \\t 15% \\n Healthcare \\t 25% \\t 40% \\t 15% \\t 10% \\t 10% \\n Transportation \\t 20% \\t 25% \\t 30% \\t 15% \\t 10% \\n Taxation \\t 20% \\t 20% \\t 25% \\t 30% \\t 5% \\n Social Services \\t 15% \\t 10% \\t 20% \\t 10% \\t 45% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates the distribution of government spending by policy area across five different countries: the USA, UK, Canada, Australia, and Germany. The areas of spending include education, healthcare, transportation, taxation, and social services, with each country allocating percentages of their budget differently. The USA allocates 30% to education, while Germany designates 45% to social services. Each block on the heatmap represents the percentage of spending, with varying colors showing the intensity of investment in each sector by country."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define data as a dictionary\ndata = {\n    'Country': ['USA', 'UK', 'Canada', 'Australia', 'Germany'],\n    'Education': [30, 25, 10, 20, 15],\n    'Healthcare': [25, 40, 15, 10, 10],\n    'Transportation': [20, 25, 30, 15, 10],\n    'Taxation': [20, 20, 25, 30, 5],\n    'Social Services': [15, 10, 20, 10, 45]\n}\n\n# Convert data into a pandas DataFrame\ndf = pd.DataFrame(data)\n\n# Set Policy Area as the index\ndf.set_index('Country', inplace=True)\n\n# Set figsize to a larger setting to prevent content from being displayed\nplt.figure(figsize=(10, 8))\n\n# Plot the heatmap using sns.heatmap()\nsns.heatmap(df, annot=True, cmap='Blues')\n\n# Set the title of the figure\nplt.title('Government Spending by Policy Area')\n\n# Set the ticks and ticklabels for x and y axis, and make them in the center of rows and columns\nplt.xticks(np.arange(5) + 0.5, df.columns, rotation=45, ha='right', rotation_mode='anchor')\nplt.yticks(np.arange(5) + 0.5, df.index, rotation=0)\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the image as a png file\nplt.savefig('output/final/heatmap/png/20231226-140552_10.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of government spending does Germany allocate to Social Services?",
            "output": "45%"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_47",
        "img": "./heatmap/png/heatmap_47.png",
        "topic": "Technology and the Internet",
        "title": " Evolution of Technology and the Internet.",
        "csv": "Technology \\t Internet \\t Cloud Computing \\t AI \\t Blockchain \\t Virtual Reality \\t Internet of Things \\n 2015 \\t 50% \\t 25% \\t 10% \\t 5% \\t 5% \\t 5% \\n 2016 \\t 45% \\t 27% \\t 12% \\t 7% \\t 5% \\t 4% \\n 2017 \\t 40% \\t 30% \\t 15% \\t 8% \\t 4% \\t 3% \\n 2018 \\t 35% \\t 33% \\t 17% \\t 10% \\t 3% \\t 2% \\n 2019 \\t 30% \\t 36% \\t 20% \\t 12% \\t 2% \\t 0% \\n 2020 \\t 25% \\t 40% \\t 22% \\t 13% \\t 0% \\t 0% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The given heatmap charts the evolution of various technology sectors from 2015 to 2020. It tracks the percentage adoption rates across six categories: Internet usage, cloud computing, AI (Artificial Intelligence), blockchain, virtual reality, and the Internet of Things (IoT). In 2015, Internet usage was at 50%, cloud computing at 25%, AI at 10%, blockchain at 5%, and both virtual reality and IoT at 5%. By 2020, Internet usage decreased to 25%, while cloud computing reached 40%, AI climbed to 22%, and blockchain to 13%. Virtual reality and IoT show a decline to 0% in 2020."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\ndata = {\n    'Technology': [50, 45, 40, 35, 30, 25],\n    'Internet': [25, 27, 30, 33, 36, 40],\n    'Cloud Computing': [10, 12, 15, 17, 20, 22],\n    'AI': [5, 7, 8, 10, 12, 13],\n    'Blockchain': [5, 5, 4, 3, 2, 0],\n    'Virtual Reality': [5, 4, 3, 2, 0, 0],\n    'Internet of Things': [5, 4, 3, 2, 0, 0]\n}\n\ndf = pd.DataFrame(data, index=[2015, 2016, 2017, 2018, 2019, 2020])\n\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.heatmap(df, annot=False, cmap='YlOrBr', linewidths=0.5, cbar_kws={'label': 'Percentage'}, ax=ax)\nax.tick_params(axis='both', which='both', length=0, labelsize=14)\nax.set_title('Evolution of Technology and the Internet', fontsize=16)\nax.set_xlabel('Technology', fontsize=14)\nax.set_ylabel('Year', fontsize=14)\nax.set_yticklabels(ax.get_yticklabels(), rotation=45, ha='right', rotation_mode='anchor')\n\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231228-124154_35.png', bbox_inches='tight')\nplt.show()\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the total percentage increase of Cloud Computing from 2015 to 2020?",
            "output": "15%"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_116",
        "img": "./heatmap/png/heatmap_116.png",
        "topic": "Sports and Entertainment",
        "title": " Team Performance in NBA Regular Season",
        "csv": "Team \\t Wins (%) \\t Losses (%) \\t Ties (%) \\t Points Scored (%) \\t Points Allowed (%) \\n Lakers \\t 65% \\t 20% \\t 15% \\t 75% \\t 70% \\n Celtics \\t 60% \\t 25% \\t 15% \\t 70% \\t 65% \\n Warriors \\t 70% \\t 15% \\t 15% \\t 80% \\t 75% \\n Heat \\t 55% \\t 30% \\t 15% \\t 65% \\t 60% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates the performance of four NBA teams during a regular season in terms of percentages. The Lakers show a 65% win rate, 20% losses, 15% ties, have 75% points scored, and allow 70% points. The Celtics have 60% wins, 25% losses, 15% ties, 70% points scored, and 65% points allowed. The Warriors lead with 70% wins, 15% losses, 15% ties, score 80% of points, and permit 75% of points. The Heat has 55% wins, 30% losses, 15% ties, score 65% of points, and have allowed 60% of points."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import necessary modules\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# Define the data as a dictionary\ndata = {\n    'Team': ['Lakers', 'Celtics', 'Warriors', 'Heat'],\n    'Wins (%)': [65, 60, 70, 55],\n    'Losses (%)': [20, 25, 15, 30],\n    'Ties (%)': [15, 15, 15, 15],\n    'Points Scored (%)': [75, 70, 80, 65],\n    'Points Allowed (%)': [70, 65, 75, 60]\n}\n\n# Convert the data into a pandas DataFrame\ndf = pd.DataFrame(data)\n\n# Set the figure size\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Create the heatmap using sns.heatmap()\nsns.heatmap(df.iloc[:,1:], annot=True, cmap='RdYlGn', linewidths=0.5, cbar=False)\n\n# Set the x and y ticks and labels\nax.set_yticks(np.arange(len(df.index))+0.5, minor=False)\nax.set_xticks(np.arange(len(df.columns)-1)+0.5, minor=False)\nax.set_xticklabels(df.columns[1:], minor=False, rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(df['Team'], minor=False)\n\n# Add a colorbar\ncbar = ax.figure.colorbar(ax.collections[0])\n\n# Set the title\nplt.title('Team Performance in NBA Regular Season')\n\n# Automatically resize the image and save it\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231228-131639_2.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage of points scored by the Warriors?",
            "output": "80%"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_71",
        "img": "./heatmap/png/heatmap_71.png",
        "topic": "Agriculture and Food Production",
        "title": " Agricultural Indicators by Country",
        "csv": "Country \\t Crop Yield Index \\t Food Export (%) \\t Irrigated Land (%) \\t Arable Land (%) \\t Fertilizer Consumption (kg/ha) \\n United States \\t 100 \\t 20% \\t 80% \\t 15% \\t 150 \\n China \\t 90 \\t 15% \\t 65% \\t 10% \\t 200 \\n India \\t 80 \\t 10% \\t 70% \\t 12% \\t 175 \\n Brazil \\t 85 \\t 25% \\t 40% \\t 20% \\t 100 \\n Russia \\t 75 \\t 30% \\t 10% \\t 8% \\t 75 \\n France \\t 95 \\t 15% \\t 50% \\t 18% \\t 125 \\n Canada \\t 80 \\t 20% \\t 30% \\t 25% \\t 75 \\n Argentina \\t 90 \\t 25% \\t 15% \\t 15% \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap graphically represents agricultural indicators across eight countries. Focal points are Crop Yield Index, Food Export percentage, Irrigated, Arable, and Fertilized land as a percentage of total land, and Fertilizer Consumption in kg per hectare. The United States scores a Crop Yield Index of 100, with 20% food exports, 80% irrigated land, 15% arable land, and 150 kg/ha fertilizer use. China, India, Brazil, Russia, France, Canada, and Argentina show varied values across these indicators, such as China with a Crop Yield Index of 90 and 200 kg/ha of fertilizer consumption, and Russia with the highest Food Export percentage at 30%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# Data processing\ndata = {'Country': ['United States', 'China', 'India', 'Brazil', 'Russia', 'France', 'Canada', 'Argentina'], \n        'Crop Yield Index': [100, 90, 80, 85, 75, 95, 80, 90], \n        'Food Export (%)': [20, 15, 10, 25, 30, 15, 20, 25], \n        'Irrigated Land (%)': [80, 65, 70, 40, 10, 50, 30, 15], \n        'Arable Land (%)': [15, 10, 12, 20, 8, 18, 25, 15], \n        'Fertilizer Consumption (kg/ha)': [150, 200, 175, 100, 75, 125, 75, 100]}\n\ndf = pd.DataFrame(data)\ndf = df.set_index('Country')\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10, 8))\nsns.heatmap(df, annot=True, fmt='.0f', cmap='YlGnBu', cbar=True, ax=ax)\n\n# Formatting\nax.set_title('Agricultural Indicators by Country')\nax.set_xticks(np.arange(len(df.columns)) + 0.5)\nax.set_yticks(np.arange(len(df)) + 0.5)\nax.set_xticklabels(df.columns, rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(df.index, rotation=0, ha='right')\nax.tick_params(axis='x', pad=0)\nax.tick_params(axis='y', pad=0)\n\n# Saving and clearing\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231228-124154_60.png', bbox_inches='tight')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest percentage of Irrigated Land according to the data?",
            "output": "United States"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_46",
        "img": "./heatmap/png/heatmap_46.png",
        "topic": "Manufacturing and Production",
        "title": " Key Performance Indicators in Manufacturing",
        "csv": "Factory \\t Production (Units) \\t Defect Rate (%) \\t Downtime (Hours) \\t Efficiency (%) \\t Waste (Units) \\t Cost per Unit ($) \\n Factory A \\t 500 \\t 2% \\t 20 \\t 95% \\t 15 \\t 1.50 \\n Factory B \\t 450 \\t 3% \\t 25 \\t 90% \\t 20 \\t 1.75 \\n Factory C \\t 600 \\t 2.5% \\t 15 \\t 93% \\t 18 \\t 1.60 \\n Factory D \\t 550 \\t 2.5% \\t 18 \\t 92% \\t 16 \\t 1.65 \\n Factory E \\t 400 \\t 3% \\t 30 \\t 88% \\t 22 \\t 1.80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates key performance indicators for five factories. Factory A produced 500 units, had a 2% defect rate, 20 hours of downtime, 95% efficiency, with 15 waste units, at a cost of $1.50 per unit. Factory B's metrics are 450 units produced, a 3% defect rate, 25 hours downtime, 90% efficiency, 20 waste units, and $1.75 cost per unit. Factory C shows 600 units, 2.5% defect rate, 15 hours downtime, 93% efficiency, 18 waste units, and $1.60 cost per unit. Factory D has 550 units, a 2.5% defect rate, 18 hours downtime, 92% efficiency, 16 waste units, and $1.65 cost per unit. Finally, Factory E lists 400 units, a 3% defect rate, 30 hours downtime, 88% efficiency, 22 waste units, and $1.80 cost per unit."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import required modules\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# Define the data as a dictionary\ndata = {'Factory': ['Factory A', 'Factory B', 'Factory C', 'Factory D', 'Factory E'],\n        'Production (Units)': [500, 450, 600, 550, 400],\n        'Defect Rate (%)': [2, 3, 2.5, 2.5, 3],\n        'Downtime (Hours)': [20, 25, 15, 18, 30],\n        'Efficiency (%)': [95, 90, 93, 92, 88],\n        'Waste (Units)': [15, 20, 18, 16, 22],\n        'Cost per Unit ($)': [1.50, 1.75, 1.60, 1.65, 1.80]}\n\n# Convert the data into a pandas dataframe\ndf = pd.DataFrame(data)\n\n# Set the figure size\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Use seaborn heatmap to plot the data\nsns.heatmap(df.iloc[:, 1:], annot=True, fmt='.2f', cmap='Blues', cbar=False)\n\n# Set the title and axis labels\nax.set_title('Key Performance Indicators in Manufacturing')\nax.set_xlabel('Metrics')\nax.set_ylabel('Factory')\n\n# Set the ticks and ticklabels for x and y axis\nax.set_xticks(np.arange(6) + 0.5)\nax.set_xticklabels(df.columns[1:], rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticks(np.arange(5) + 0.5)\nax.set_yticklabels(df['Factory'], rotation=0, ha='right', rotation_mode='anchor')\n\n# Use tight_layout to automatically resize the image\nplt.tight_layout()\n\n# Save the figure as a png file\nplt.savefig('output/final/heatmap/png/20231228-124154_34.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which factory has the highest production output in units?",
            "output": "Factory C"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_118",
        "img": "./heatmap/png/heatmap_118.png",
        "topic": "Social Sciences and Humanities",
        "title": " Research Output in Social Sciences and Humanities",
        "csv": "Category \\t Books (Number) \\t Articles (Number) \\t Conferences (Number) \\t Journals (Number) \\t Citations (Number) \\t Impact Factor \\n Sociology \\t 150 \\t 500 \\t 10 \\t 25 \\t 2500 \\t 3.5 \\n Psychology \\t 200 \\t 600 \\t 12 \\t 30 \\t 3000 \\t 3.8 \\n Anthropology \\t 100 \\t 300 \\t 8 \\t 20 \\t 1500 \\t 3.2 \\n Economics \\t 300 \\t 800 \\t 15 \\t 35 \\t 3500 \\t 4.2 \\n Political Science \\t 250 \\t 700 \\t 14 \\t 32 \\t 3200 \\t 4.0 \\n History \\t 175 \\t 550 \\t 11 \\t 28 \\t 2750 \\t 3.6 \\n Education \\t 225 \\t 650 \\t 13 \\t 31 \\t 3100 \\t 3.9 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates research output across various academic fields in the social sciences and humanities. It shows categories like Sociology, Psychology, Anthropology, Economics, Political Science, History, and Education, comparing the number of books, articles, conferences, journals, citations, and impact factor for each category. Sociology, for instance, has published 150 books, 500 articles, participated in 10 conferences, produced 25 journals, received 2500 citations, and has an impact factor of 3.5. Economics leads with 300 books and 800 articles, while Anthropology has the fewest, with 100 books and 300 articles, correlating with lower citation numbers and impact factor."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\n# Define data\ndata = {'Category':['Sociology','Psychology','Anthropology','Economics','Political Science','History','Education'],\n        'Books (Number)':[150,200,100,300,250,175,225],\n        'Articles (Number)':[500,600,300,800,700,550,650],\n        'Conferences (Number)':[10,12,8,15,14,11,13],\n        'Journals (Number)':[25,30,20,35,32,28,31],\n        'Citations (Number)':[2500,3000,1500,3500,3200,2750,3100],\n        'Impact Factor':[3.5,3.8,3.2,4.2,4.0,3.6,3.9]\n       }\n\n# Convert data to dataframe\ndf = pd.DataFrame(data)\ndf.set_index('Category', inplace=True)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(10,8))\n\n# Plot heatmap using seaborn\nsns.heatmap(df, cmap='coolwarm', annot=True, fmt='.1f', linewidths=0.5, ax=ax)\n\n# Set x and y tick labels\nax.set_xticklabels(df.columns, rotation=45, ha='right', rotation_mode='anchor')\n# ax.set_yticklabels(df[['Books (Number)','Articles (Number)','Conferences (Number)','Journals (Number)','Citations (Number)','Impact Factor']].columns, rotation=0, ha='right', rotation_mode='anchor')\n\n# Set ticks and ticklabels in the center of rows and columns\n# ax.set_xticks(np.arange(0.5, 6.5, 1))\n# ax.set_yticks(np.arange(0.5, 6.5, 1))\n\n# Set title\nax.set_title('Research Output in Social Sciences and Humanities')\n\n# Automatically resize image\nfig.tight_layout()\n\n# Save figure\nfig.savefig('output/final/heatmap/png/20231228-131639_22.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the highest impact factor?",
            "output": "Economics"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_27",
        "img": "./heatmap/png/heatmap_27.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare Indicators by Region",
        "csv": "Category \\t Population (million) \\t Life Expectancy (years) \\t Health Expenditure (% of GDP) \\t Infant Mortality Rate (per 1000 live births) \\t Physicians per 1000 People \\t Hospital Beds per 1000 People \\n North America \\t 365 \\t 78 \\t 16% \\t 5 \\t 2.5 \\t 2.3 \\n South America \\t 430 \\t 73 \\t 12% \\t 10 \\t 1.8 \\t 1.5 \\n Europe \\t 741 \\t 81 \\t 14% \\t 3 \\t 3.5 \\t 3.2 \\n Asia \\t 4621 \\t 74 \\t 10% \\t 20 \\t 1.5 \\t 1.2 \\n Africa \\t 1281 \\t 66 \\t 8% \\t 25 \\t 0.8 \\t 0.7 \\n Australia \\t 43 \\t 82 \\t 15% \\t 3 \\t 4.5 \\t 4.1 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap represents healthcare indicators by region, detailing statistics for population, life expectancy, health expenditure as a percentage of GDP, infant mortality rate, number of physicians, and hospital beds per 1000 people. North America shows a life expectancy of 78 years, a health expenditure of 16%, and an infant mortality rate of 5 per 1000 live births. South America, Europe, Asia, Africa, and Australia are also compared, with Europe having the highest life expectancy at 81 years and Africa the lowest at 66. The population ranges from 43 million in Australia to 4621 million in Asia."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create a dictionary with the given data\ndata = {'Category': ['North America', 'South America', 'Europe', 'Asia', 'Africa', 'Australia'],\n        'Population (million)': [365, 430, 741, 4621, 1281, 43],\n        'Life Expectancy (years)': [78, 73, 81, 74, 66, 82],\n        'Health Expenditure (% of GDP)': [16, 12, 14, 10, 8, 15],\n        'Infant Mortality Rate (per 1,000 live births)': [5, 10, 3, 20, 25, 3],\n        'Physicians per 1,000 People': [2.5, 1.8, 3.5, 1.5, 0.8, 4.5],\n        'Hospital Beds per 1,000 People': [2.3, 1.5, 3.2, 1.2, 0.7, 4.1]}\n\n# Convert the dictionary into a pandas dataframe\ndf = pd.DataFrame(data)\n\n# Set the category column as the index\ndf.set_index('Category', inplace=True)\n\n# Create a figure and axes object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot the heatmap using imshow()\nheatmap = ax.imshow(df, cmap='Blues')\n\n# Add the colorbar\ncbar = plt.colorbar(heatmap, ax=ax)\n\n# Set the ticks and ticklabels for x and y axis\nax.set_xticks(np.arange(len(df.columns)))\nax.set_xticklabels(df.columns)\nax.set_yticks(np.arange(len(df.index)))\nax.set_yticklabels(df.index)\n\n# Rotate the x-tick labels\nplt.setp(ax.get_xticklabels(), rotation=45, ha='right', rotation_mode='anchor')\n\n# Set the tick labels in the center of the cells\nax.xaxis.set_ticks_position('bottom')\nax.yaxis.set_ticks_position('left')\nax.set_xticks(np.arange(df.shape[1]+1)-.5, minor=True)\nax.set_yticks(np.arange(df.shape[0]+1)-.5, minor=True)\nax.grid(which='minor', color='w', linestyle='-', linewidth=3)\n\n# Add the value of each cell\nfor i in range(len(df.index)):\n    for j in range(len(df.columns)):\n        ax.text(j, i, df.iloc[i, j], ha='center', va='center', color='w', fontsize=12)\n\n# Set the title\nax.set_title('Healthcare Indicators by Region', fontsize=16)\n\n# Automatically resize the image and save it\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231226-140552_7.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the infant mortality rate in Asia?",
            "output": "20"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_132",
        "img": "./heatmap/png/heatmap_132.png",
        "topic": "Arts and Culture",
        "title": " Cultural Institutions by Region",
        "csv": "Category \\t Number of Museums \\t Number of Art Galleries \\t Number of Theaters \\t Number of Concert Halls \\t Number of Libraries \\n United States \\t 1500 \\t 2000 \\t 2500 \\t 3000 \\t 3500 \\n Europe \\t 1000 \\t 1500 \\t 2000 \\t 2500 \\t 3000 \\n Asia \\t 500 \\t 1000 \\t 1500 \\t 2000 \\t 2500 \\n South America \\t 200 \\t 400 \\t 600 \\t 800 \\t 1000 \\n Australia \\t 100 \\t 200 \\t 300 \\t 400 \\t 500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates the distribution of cultural institutions across five regions. The United States leads with the highest numbers, ranging from 1500 museums to 3500 libraries. Europe follows with 1000 museums scaling up to 3000 libraries. In Asia, the count starts from 500 museums to 2500 libraries. South America and Australia have lower amounts, with South America showing 200 museums to 1000 libraries, and Australia having 100 museums up to 500 libraries. The data spans five categories: museums, art galleries, theaters, concert halls, and libraries."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# Convert data to pandas dataframe\ndata = {'Category': ['United States', 'Europe', 'Asia', 'South America', 'Australia'],\n        'Number of Museums': [1500, 1000, 500, 200, 100],\n        'Number of Art Galleries': [2000, 1500, 1000, 400, 200],\n        'Number of Theaters': [2500, 2000, 1500, 600, 300],\n        'Number of Concert Halls': [3000, 2500, 2000, 800, 400],\n        'Number of Libraries': [3500, 3000, 2500, 1000, 500]}\n\ndf = pd.DataFrame(data)\n\n# Set figure size\nplt.figure(figsize=(10, 8))\n\n# Create heatmap chart using seaborn\nax = sns.heatmap(data=df.set_index('Category'), annot=True, cmap='coolwarm')\n\n# Set x and y ticks and tick labels\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(ax.get_yticklabels(), rotation=0, ha='right', rotation_mode='anchor')\n\n# Set title\nplt.title('Cultural Institutions by Region')\n\n# Automatically resize image and save\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231228-131639_38.png', bbox_inches='tight')\n\n# Clear image state\nplt.clf()"
        },
        "QA": {
            "input": "How many concert halls are there in Asia?",
            "output": "2000"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_17",
        "img": "./heatmap/png/heatmap_17.png",
        "topic": "Real Estate and Housing Market",
        "title": " Housing Market Trends in Major Cities",
        "csv": "City \\t Median Home Price ($) \\t Median Rent ($) \\t Avg. Days on Market \\t Avg. Mortgage Rate (%) \\t Homeownership Rate (%) \\t Vacancy Rate (%) \\n New York City \\t $800000 \\t $2500 \\t 45 \\t 3.5% \\t 55% \\t 8% \\n Los Angeles \\t $650000 \\t $2000 \\t 40 \\t 3.7% \\t 45% \\t 7% \\n Chicago \\t $400000 \\t $1500 \\t 50 \\t 4% \\t 60% \\t 10% \\n Houston \\t $300000 \\t $1200 \\t 55 \\t 4.2% \\t 65% \\t 12% \\n Phoenix \\t $350000 \\t $1300 \\t 60 \\t 4.5% \\t 70% \\t 8% \\n Philadelphia \\t $450000 \\t $1700 \\t 35 \\t 3.9% \\t 50% \\t 5% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap provides data on housing market trends in six major cities. It shows median home prices ranging from $300,000 in Houston to $800,000 in New York City. Median rent varies from $1,200 in Houston to $2,500 in NYC. Average days on market span from 35 in Philadelphia to 60 in Phoenix. Mortgage rates go from 3.5% in NYC to 4.5% in Phoenix. Homeownership rates are from 45% in Los Angeles to 70% in Phoenix, while vacancy rates range from 5% in Philadelphia to 12% in Houston."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# import data as a pandas dataframe\ndata = pd.DataFrame({'City': ['New York City', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia'],\n                      'Median Home Price ($)': [800000, 650000, 400000, 300000, 350000, 450000],\n                      'Median Rent ($)': [2500, 2000, 1500, 1200, 1300, 1700],\n                      'Avg. Days on Market': [45, 40, 50, 55, 60, 35],\n                      'Avg. Mortgage Rate (%)': [3.5, 3.7, 4, 4.2, 4.5, 3.9],\n                      'Homeownership Rate (%)': [55, 45, 60, 65, 70, 50],\n                      'Vacancy Rate (%)': [8, 7, 10, 12, 8, 5]})\n\n# set figure size to prevent content from being cut off\nplt.figure(figsize=(10, 8))\n\n# create a heatmap using seaborn\nimport seaborn as sns\nax = sns.heatmap(data.drop('City', axis=1), annot=True, fmt='.0f', cmap='Blues', linewidths=.5, cbar_kws={'shrink': 0.8})\n\n# set the ticks and ticklabels for x and y axis\nax.set_xticks(np.arange(0, 6) + 0.5)\nax.set_yticks(np.arange(0, 6) + 0.5)\nax.set_xticklabels(data.columns[1:], rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(data['City'], rotation=0, ha='right', rotation_mode='anchor')\n\n# set the title of the figure\nplt.title('Housing Market Trends in Major Cities')\n\n# resize image and save\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231226-140552_1.png', bbox_inches='tight')\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which city has the highest average mortgage rate?",
            "output": "Phoenix"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_85",
        "img": "./heatmap/png/heatmap_85.png",
        "topic": "Retail and E-commerce",
        "title": " E-commerce Metrics by Product Category",
        "csv": "Category \\t Conversions (%) \\t Click-through Rate (%) \\t Average Order Value ($) \\t Cart Abandonment Rate (%) \\t Customer Retention Rate (%) \\n Clothing \\t 4% \\t 2% \\t 65 \\t 20% \\t 50% \\n Electronics \\t 6% \\t 4% \\t 120 \\t 15% \\t 60% \\n Beauty \\t 8% \\t 6% \\t 80 \\t 18% \\t 55% \\n Books \\t 7% \\t 5% \\t 90 \\t 17% \\t 57% \\n Home Goods \\t 5% \\t 3% \\t 100 \\t 19% \\t 52% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap represents e-commerce metrics for different product categories. It includes data on conversions, click-through rates, average order values, cart abandonment rates, and customer retention rates. The categories are Clothing, Electronics, Beauty, Books, and Home Goods. Clothing shows a 4% conversion, 2% click-through rate, $65 average order value, 20% cart abandonment, and 50% customer retention. Electronics has higher metrics in conversions (6%) and click-through rates (4%), with an average order value of $120. Beauty, Books, and Home Goods also have varied percentages across the metrics, indicating differing performance in these e-commerce indicators."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\n            \n\n# import necessary modules\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# create the data dictionary\ndata = {\"Category\": [\"Clothing\", \"Electronics\", \"Beauty\", \"Books\", \"Home Goods\"], \n        \"Conversions (%)\": [4, 6, 8, 7, 5], \n        \"Click-through Rate (%)\": [2, 4, 6, 5, 3], \n        \"Average Order Value ($)\": [65, 120, 80, 90, 100], \n        \"Cart Abandonment Rate (%)\": [20, 15, 18, 17, 19], \n        \"Customer Retention Rate (%)\": [50, 60, 55, 57, 52]\n       }\n\n# convert the data into a pandas dataframe\ndf = pd.DataFrame(data)\n\n# set the figure size\nplt.figure(figsize=(10, 8))\n\n# plot the heatmap using seaborn\nsns.heatmap(df.iloc[:, 1:], annot=True, cmap='Blues')\n\n# set the ticks and ticklabels for x and y axis\nplt.xticks(np.arange(5) + 0.5, labels=df.columns[1:], rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nplt.yticks(np.arange(5) + 0.5, labels=df[\"Category\"], rotation=0, ha=\"right\", rotation_mode=\"anchor\")\n\n# add a title\nplt.title(\"E-commerce Metrics by Product Category\")\n\n# automatically resize the image\nplt.tight_layout()\n\n# save the image\nplt.savefig(\"output/final/heatmap/png/20231228-124154_8.png\", bbox_inches='tight')\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the Customer Retention Rate for Books?",
            "output": "57%"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_5",
        "img": "./heatmap/png/heatmap_5.png",
        "topic": "Law and Legal Affairs",
        "title": " Law Firm Performance Metrics",
        "csv": "Law Firm \\t Number of Lawyers \\t Number of Active Cases \\t Number of Wins \\t Number of Losses \\n Smith & Smith \\t 200 \\t 500 \\t 400 \\t 100 \\n Johnson & Johnson \\t 150 \\t 450 \\t 300 \\t 150 \\n Brown Law \\t 100 \\t 300 \\t 200 \\t 100 \\n Legal Solutions \\t 50 \\t 100 \\t 80 \\t 20 \\n Smith & Jones \\t 300 \\t 800 \\t 600 \\t 200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap shows performance metrics for five law firms. Smith & Smith has 200 lawyers, with 500 active cases, 400 wins, and 100 losses. Johnson & Johnson follows with 150 lawyers, 450 active cases, 300 wins, and 150 losses. Brown Law shows 100 lawyers, 300 active cases, 200 wins, and 100 losses. Legal Solutions is represented with 50 lawyers, 100 active cases, 80 wins, and 20 losses. Lastly, Smith & Jones stand at 300 lawyers, 800 active cases, 600 wins, and 200 losses. The visualization aims to provide comparisons across law firms based on these categories."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import required libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# Create dictionary with data\ndata = {'Law Firm': ['Smith & Smith', 'Johnson & Johnson', 'Brown Law', 'Legal Solutions', 'Smith & Jones'],\n        'Number of Lawyers': [200, 150, 100, 50, 300],\n        'Number of Active Cases': [500, 450, 300, 100, 800],\n        'Number of Wins': [400, 300, 200, 80, 600],\n        'Number of Losses': [100, 150, 100, 20, 200]}\n\n# Convert dictionary to dataframe\ndf = pd.DataFrame.from_dict(data)\n\n# Set Law Firm as index for dataframe\ndf.set_index('Law Firm', inplace=True)\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot heatmap using seaborn\nsns.heatmap(df[['Number of Lawyers', 'Number of Active Cases', 'Number of Wins', 'Number of Losses']],\n            annot=True, fmt='d', cmap='Blues', cbar=False, ax=ax)\n\n# Set axis labels and ticks\nax.set_xlabel('Performance Metrics', fontsize=12)\nax.set_ylabel('Law Firm', fontsize=12)\nax.set_xticklabels(['Number of Lawyers', 'Number of Active Cases', 'Number of Wins', 'Number of Losses'], rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(['Smith & Smith', 'Johnson & Johnson', 'Brown Law', 'Legal Solutions', 'Smith & Jones'], rotation=0, ha='right', rotation_mode='anchor')\n\n# Add title and resize image\nplt.title('Law Firm Performance Metrics', fontsize=14)\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231225-210514_21.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many active cases does Johnson & Johnson have?",
            "output": "450"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_93",
        "img": "./heatmap/png/heatmap_93.png",
        "topic": "Law and Legal Affairs",
        "title": " Diversity and Salary in Legal Fields",
        "csv": "Category \\t Number of Lawyers \\t Average Salary ($) \\t Percentage of Female Lawyers (%) \\t Percentage of Minority Lawyers (%) \\t Number of Cases Filed \\n Criminal Law \\t 500 \\t 120 \\t 45% \\t 30% \\t 300 \\n Corporate Law \\t 200 \\t 200 \\t 35% \\t 20% \\t 500 \\n Intellectual Property Law \\t 100 \\t 150 \\t 40% \\t 25% \\t 200 \\n Immigration Law \\t 50 \\t 100 \\t 55% \\t 40% \\t 100 \\n Family Law \\t 300 \\t 80 \\t 60% \\t 50% \\t 400 \\n Employment Law \\t 150 \\t 120 \\t 50% \\t 35% \\t 250 \\n Environmental Law \\t 50 \\t 150 \\t 45% \\t 20% \\t 150 \\n Civil Rights Law \\t 100 \\t 100 \\t 60% \\t 50% \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap provides an overview of diversity and salary statistics across various legal fields. Criminal Law has 500 lawyers, an average salary of $120,000, with 45% female and 30% minority lawyers, and 300 cases filed. Corporate Law shows 200 lawyers, $200,000 average salary, with 35% females and 20% minorities, alongside 500 cases filed. Intellectual Property Law lists 100 lawyers, a $150,000 salary average, with 40% females and 25% minority representation, and 200 cases. Immigration Law has 50 lawyers, average salary at $100,000, with 55% female and 40% minority lawyers, and 100 cases filed. Family Law features 300 lawyers, $80,000 average salary, 60% females, 50% minorities, and 400 cases. Employment Law includes 150 lawyers, $120,000 average salary, 50% female and 35% minority lawyers, with 250 cases filed. Environmental Law has 50 lawyers with an average salary of $150,000, 45% female and 20% minority representation, and 150 cases. Finally, Civil Rights Law presents 100 lawyers, $100,000 average salary, with equal representation at 60% for both female and minority lawyers, and 100 cases filed."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\ndata = {'Category': ['Criminal Law', 'Corporate Law', 'Intellectual Property Law', 'Immigration Law', 'Family Law', 'Employment Law', 'Environmental Law', 'Civil Rights Law'], \n        'Number of Lawyers': [500, 200, 100, 50, 300, 150, 50, 100], \n        'Average Salary ($)': [120, 200, 150, 100, 80, 120, 150, 100], \n        'Percentage of Female Lawyers (%)': [45, 35, 40, 55, 60, 50, 45, 60], \n        'Percentage of Minority Lawyers (%)': [30, 20, 25, 40, 50, 35, 20, 50], \n        'Number of Cases Filed': [300, 500, 200, 100, 400, 250, 150, 100]}\n\ndf = pd.DataFrame(data)\ndf = df.set_index('Category')\n\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot heatmap using sns\nsns.heatmap(df, annot=True, cmap='Blues', fmt='g', cbar=False, ax=ax)\n\n# Set ticks and ticklabels for x and y axis\nplt.xticks(np.arange(len(df.columns))+0.5, df.columns, rotation=45, ha='right', rotation_mode='anchor')\nplt.yticks(np.arange(len(df.index))+0.5, df.index, rotation=0)\n\n# Add title and labels\nplt.title('Diversity and Salary in Legal Fields')\nax.set_xlabel('Statistics')\nax.set_ylabel('Category')\n\n# Automatically adjust subplot parameters to give specified padding.\nplt.tight_layout()\n\n# Save image\nplt.savefig('output/final/heatmap/png/20231228-124154_91.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the average salary for a lawyer in the field of Intellectual Property Law?",
            "output": "$150"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_61",
        "img": "./heatmap/png/heatmap_61.png",
        "topic": "Environment and Sustainability",
        "title": " Environmental Impact by Country",
        "csv": "Country \\t Carbon Emissions (Million Metric Tons) \\t Energy Consumption (Billion Kilowatt Hours) \\t Renewable Energy (%) \\t Water Usage (Billion Cubic Meters) \\t Waste Production (Million Metric Tons) \\n China \\t 10 \\t 500 \\t 20% \\t 200 \\t 1000 \\n United States \\t 5 \\t 350 \\t 15% \\t 150 \\t 800 \\n India \\t 3 \\t 300 \\t 10% \\t 100 \\t 600 \\n Russia \\t 4 \\t 200 \\t 25% \\t 50 \\t 400 \\n Japan \\t 2 \\t 150 \\t 30% \\t 75 \\t 300 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap presents data on environmental impact factors across five countries. The chart represents carbon emissions in million metric tons, energy consumption in billion kilowatt-hours, percentage of renewable energy use, water usage in billion cubic meters, and waste production in million metric tons. China's figures show 10 for carbon emissions, a high of 500 for energy consumption, 20% renewable energy, 200 for water usage, and a peak of 1000 for waste production. The United States, India, Russia, and Japan follow, with their respective values spanning across these environmental metrics, indicating varied levels of impact."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\n# Create a dictionary for the data\ndata = {'Country': ['China', 'United States', 'India', 'Russia', 'Japan'],\n        'Carbon Emissions (Million Metric Tons)': [10, 5, 3, 4, 2],\n        'Energy Consumption (Billion Kilowatt Hours)': [500, 350, 300, 200, 150],\n        'Renewable Energy (%)': [20, 15, 10, 25, 30],\n        'Water Usage (Billion Cubic Meters)': [200, 150, 100, 50, 75],\n        'Waste Production (Million Metric Tons)': [1000, 800, 600, 400, 300]}\n\n# Create a dataframe from the dictionary\ndf = pd.DataFrame(data)\n\n# Set the figure size\nfig = plt.figure(figsize=(10, 8))\n\n# Create a heatmap chart using seaborn\nax = sns.heatmap(df.iloc[:, 1:], annot=True, fmt='g', cmap='Blues',\n                 cbar_kws={'label': 'Value'})\n\n# Set the title of the figure\nplt.title('Environmental Impact by Country')\n\n# Set the label for the x and y axis\nplt.xlabel('Category')\nplt.ylabel('Country')\n\n# Set the ticks and ticklabels for the x and y axis\nplt.xticks(np.arange(5) + 0.5, df.columns[1:], rotation=45, ha='right',\n           rotation_mode='anchor')\nplt.yticks(np.arange(5) + 0.5, df['Country'], rotation=0, ha='right')\n\n# Automatically resize the image before saving\nplt.tight_layout()\n\n# Save the figure as a png file\nplt.savefig('output/final/heatmap/png/20231228-124154_5.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage of renewable energy used in the United States?",
            "output": "15%"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_42",
        "img": "./heatmap/png/heatmap_42.png",
        "topic": "Real Estate and Housing Market",
        "title": " Real Estate Market Trends in Major US Cities",
        "csv": "City \\t Average Home Price ($) \\t Average Rent ($) \\t Average Mortgage ($) \\t Vacancy Rate (%) \\t Housing Inventory (Units) \\n New York City \\t $1200000 \\t $2500 \\t $3500 \\t 5% \\t 10000 \\n Los Angeles \\t $900000 \\t $2000 \\t $2800 \\t 7% \\t 8000 \\n Chicago \\t $500000 \\t $1500 \\t $2000 \\t 8% \\t 6000 \\n Houston \\t $400000 \\t $1200 \\t $1800 \\t 9% \\t 5000 \\n Phoenix \\t $300000 \\t $1000 \\t $1500 \\t 10% \\t 4000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap represents real estate market trends in five major US cities. It displays various data points: average home price, average rent, average mortgage, vacancy rate, and housing inventory. New York City shows an average home price of $1,200,000, average rent of $2,500, average mortgage of $3,500, a 5% vacancy rate, and a housing inventory of 10,000 units. Los Angeles, Chicago, Houston, and Phoenix present gradations of these figures respectively, showing descending prices and corresponding vacancy rates and inventories. For instance, Phoenix has the lowest average home price at $300,000, rent at $1,000, mortgage at $1,500, a 10% vacancy rate, and 4,000 housing units."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# process data using dict and pandas\ndata = {'City': ['New York City', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix'],\n        'Average Home Price ($)': [1200000, 900000, 500000, 400000, 300000],\n        'Average Rent ($)': [2500, 2000, 1500, 1200, 1000],\n        'Average Mortgage ($)': [3500, 2800, 2000, 1800, 1500],\n        'Vacancy Rate (%)': [5, 7, 8, 9, 10],\n        'Housing Inventory (Units)': [10000, 8000, 6000, 5000, 4000]}\n\ndf = pd.DataFrame(data)\ndf.set_index('City', inplace=True)\n\n# create heatmap chart\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# use sns.heatmap() with colorbar\nsns.heatmap(df, annot=True, fmt='g', cmap='Blues', cbar=True, ax=ax)\n\n# set ticks and ticklabels for x and y axis\nax.set_xticks(np.arange(df.shape[1]) + 0.5)\nax.set_yticks(np.arange(df.shape[0]) + 0.5)\nax.set_xticklabels(df.columns, rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(df.index, rotation=0, ha='right', rotation_mode='anchor')\n\n# add title\nplt.title('Real Estate Market Trends in Major US Cities')\n\n# resize image and save with tight_layout()\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231228-124154_3.png', bbox_inches='tight')\n\n# clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the vacancy rate in Chicago?",
            "output": "8%"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_60",
        "img": "./heatmap/png/heatmap_60.png",
        "topic": "Science and Engineering",
        "title": " Percentage of Research in Different Engineering Disciplines",
        "csv": "Research Area \\t Materials Science \\t Chemical Engineering \\t Mechanical Engineering \\t Biomedical Engineering \\t Civil Engineering \\t Electrical Engineering \\n Energy Storage \\t 35% \\t 25% \\t 20% \\t 10% \\t 5% \\t 5% \\n Nanomaterials \\t 20% \\t 20% \\t 20% \\t 20% \\t 15% \\t 5% \\n Biomaterials \\t 15% \\t 25% \\t 15% \\t 15% \\t 10% \\t 10% \\n Robotics \\t 10% \\t 10% \\t 30% \\t 35% \\t 5% \\t 10% \\n Structural Engineering \\t 5% \\t 5% \\t 15% \\t 25% \\t 25% \\t 25% \\n Power Systems \\t 15% \\t 15% \\t 20% \\t 10% \\t 15% \\t 25% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates the distribution of research efforts across various engineering disciplines by percentage in six research areas. Materials Science, Chemical Engineering, Mechanical Engineering, Biomedical Engineering, Civil Engineering, and Electrical Engineering are highlighted as contributing to Energy Storage, Nanomaterials, Biomaterials, Robotics, Structural Engineering, and Power Systems. Each cell represents the proportion of research devoted to a topic within a discipline, such as Materials Science accounting for 35% of research in Energy Storage. The varying percentages indicate the emphasis each engineering discipline places on the different research areas."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# Define the data as a dictionary\ndata = {'Research Area': ['Energy Storage', 'Nanomaterials', 'Biomaterials', 'Robotics', 'Structural Engineering', 'Power Systems'],\n        'Materials Science': [35, 20, 15, 10, 5, 15],\n        'Chemical Engineering': [25, 20, 25, 10, 5, 15],\n        'Mechanical Engineering': [20, 20, 15, 30, 15, 20],\n        'Biomedical Engineering': [10, 20, 15, 35, 25, 10],\n        'Civil Engineering': [5, 15, 10, 5, 25, 15],\n        'Electrical Engineering': [5, 5, 10, 10, 25, 25]}\n\n# Convert the data to a pandas DataFrame\ndf = pd.DataFrame(data).set_index('Research Area')\n\n# Create a figure and axes\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot the heatmap using sns.heatmap()\nsns.heatmap(df, cmap='Blues', annot=True, fmt='g', cbar=False)\n\n# Set the ticks and ticklabels for the x and y axis\nax.set_xticks(np.arange(len(df.columns)) + 0.5)\nax.set_yticks(np.arange(len(df.index)) + 0.5)\nax.set_xticklabels(df.columns, rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticklabels(df.index, rotation=0, ha='right', rotation_mode='anchor')\n\n# Set the title of the figure\nplt.title('Percentage of Research in Different Engineering Disciplines')\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the figure as a png file\nplt.savefig('output/final/heatmap/png/20231228-124154_49.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()\n\n# Check the generated code to make sure it doesn't report errors, do not include undefined functions, and save path is relative path which is completely the same as output/final/heatmap/png.\n"
        },
        "QA": {
            "input": "Which engineering discipline has the highest percentage allocated to Robotics?",
            "output": "Biomedical Engineering"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_90",
        "img": "./heatmap/png/heatmap_90.png",
        "topic": "Arts and Culture",
        "title": " Art Forms by Category and Time Period",
        "csv": "Category \\t Painting \\t Sculpture \\t Drawing \\t Photography \\t Music/Theater \\n Classical \\t 25 \\t 10 \\t 15 \\t 10 \\t 40 \\n Modern \\t 35 \\t 15 \\t 10 \\t 20 \\t 20 \\n Contemporary \\t 20 \\t 30 \\t 15 \\t 15 \\t 20 \\n Performance \\t 10 \\t 10 \\t 10 \\t 30 \\t 40 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates the distribution of different art forms across four time periods: Classical, Modern, Contemporary, and Performance. It shows the count for categories like Painting, Sculpture, Drawing, Photography, and Music/Theater. Classical art is highest in Music/Theater at 40, while Modern art peaks in Painting at 35. Contemporary art has a high of 30 in Sculpture, and Performance art equals this high in Music/Theater. Each category balances across various art forms, indicating diverse artistic endeavors throughout these time periods."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Import data as dictionary\ndata = {\n    'Category': ['Classical', 'Modern', 'Contemporary', 'Performance'],\n    'Painting': [25, 35, 20, 10],\n    'Sculpture': [10, 15, 30, 10],\n    'Drawing': [15, 10, 15, 10],\n    'Photography': [10, 20, 15, 30],\n    'Music/Theater': [40, 20, 20, 40]\n}\n\n# Convert dictionary to pandas dataframe\ndf = pd.DataFrame(data)\n\n# Set the index to be the 'Category' column\ndf.set_index('Category', inplace=True)\n\n# Create figure and axes objects\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot heatmap chart\nhm = sns.heatmap(df, cmap='Blues', annot=True, linewidths=.5, ax=ax)\n\n# Set ticks and ticklabels for x and y axis\nhm.set_xticklabels(hm.get_xticklabels(), rotation=45, ha='right', rotation_mode='anchor')\nhm.set_yticklabels(hm.get_yticklabels(), rotation=0, ha='right', rotation_mode='anchor')\n\n# Add colorbar\ncbar = hm.collections[0].colorbar\ncbar.ax.set_ylabel('Percentage', rotation=-90, va='bottom')\n\n# Set title\nax.set_title('Art Forms by Category and Time Period')\n\n# Automatically resize image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('output/final/heatmap/png/20231228-124154_86.png', bbox_inches='tight')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more drawings are there in the 'Classical' category compared to the 'Performance' category?",
            "output": "5"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_32",
        "img": "./heatmap/png/heatmap_32.png",
        "topic": "Arts and Culture",
        "title": " Art and Culture by Category",
        "csv": "Category \\t Visual Arts \\t Music \\t Dance \\t Theater \\t Film \\t Literature \\n Paintings \\t 30 \\t 20 \\t 10 \\t 15 \\t 5 \\t 20 \\n Sculpture \\t 25 \\t 15 \\t 10 \\t 20 \\t 5 \\t 25 \\n Photography \\t 20 \\t 25 \\t 15 \\t 10 \\t 10 \\t 20 \\n Music Production \\t 15 \\t 30 \\t 20 \\t 5 \\t 5 \\t 25 \\n Dance Performances \\t 10 \\t 20 \\t 30 \\t 5 \\t 5 \\t 30 \\n Theater Productions \\t 5 \\t 10 \\t 10 \\t 30 \\t 20 \\t 25 \\n Film Festivals \\t 5 \\t 10 \\t 15 \\t 20 \\t 30 \\t 20 \\n Book Publishing \\t 10 \\t 15 \\t 20 \\t 5 \\t 10 \\t 40 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap represents data on different art and culture categories, including Visual Arts, Music, Dance, Theater, Film, and Literature. Paintings are most associated with Visual Arts (30), followed by Music (20) and Literature (20). Sculptures are also linked closely with Visual Arts (25). Photography scores highest in Music (25). For Music Production, Music is the dominant category (30). Dance Performances peak in Dance (30). Theater Productions and Film Festivals are prevalent in Theater (30) and Film (30) respectively. Book Publishing shows a strong connection to Literature (40). Each category has various levels of association across the disciplines."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# import libs\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# data processing\ndata = {'Category': ['Visual Arts', 'Music', 'Dance', 'Theater', 'Film', 'Literature'],\n        'Paintings': [30, 20, 10, 15, 5, 20],\n        'Sculpture': [25, 15, 10, 20, 5, 25],\n        'Photography': [20, 25, 15, 10, 10, 20],\n        'Music Production': [15, 30, 20, 5, 5, 25],\n        'Dance Performances': [10, 20, 30, 5, 5, 30],\n        'Theater Productions': [5, 10, 10, 30, 20, 25],\n        'Film Festivals': [5, 10, 15, 20, 30, 20],\n        'Book Publishing': [10, 15, 20, 5, 10, 40]}\n\ndf = pd.DataFrame(data).set_index('Category')\n\n# set up figure\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# plot heatmap\nsns.heatmap(df, annot=True, fmt='g', cmap='Blues', linewidths=1, linecolor='white', ax=ax)\n\n# set x-axis ticks and labels\nax.set_xticklabels(df.columns, rotation=45, ha='right', rotation_mode='anchor')\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\n\n# set y-axis ticks and labels\nax.set_yticklabels(df.index, rotation=0, ha='right', rotation_mode='anchor')\nax.set_yticks(np.arange(0.5, len(df.index), 1))\n\n# set ticks and labels in the center of cells\nax.tick_params(axis='both', which='both', length=0)\nax.set_yticks(np.arange(len(df.index)) + 0.5, minor=False)\nax.set_xticks(np.arange(len(df.columns)) + 0.5, minor=False)\n\n# add colorbar\ncb = ax.collections[0].colorbar\ncb.set_ticks(np.arange(0, 41, 10))\ncb.set_ticklabels(np.arange(0, 41, 10))\n\n# set title\nax.set_title('Art and Culture by Category')\n\n# resize and save image\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231228-124154_15.png', bbox_inches='tight')\n\n# clear figure\nplt.clf()"
        },
        "QA": {
            "input": "How many categories have a Dance score of 10 or less?",
            "output": "5"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_33",
        "img": "./heatmap/png/heatmap_33.png",
        "topic": "Agriculture and Food Production",
        "title": " Crop Yields by Region in Agriculture",
        "csv": "Region \\t Wheat (Tonnes per Hectare) \\t Corn (Tonnes per Hectare) \\t Rice (Tonnes per Hectare) \\t Soybeans (Tonnes per Hectare) \\t Barley (Tonnes per Hectare) \\t Potatoes (Tonnes per Hectare) \\n North America \\t 3.2 \\t 5.5 \\t 3.0 \\t 2.5 \\t 4.0 \\t 6.1 \\n South America \\t 2.8 \\t 4.8 \\t 3.2 \\t 2.7 \\t 3.5 \\t 5.0 \\n Europe \\t 3.5 \\t 5.2 \\t 2.7 \\t 2.2 \\t 3.0 \\t 4.8 \\n Asia \\t 4.0 \\t 6.0 \\t 6.5 \\t 3.0 \\t 5.5 \\t 7.2 \\n Africa \\t 1.8 \\t 2.5 \\t 2.2 \\t 1.5 \\t 2.0 \\t 3.5 \\n Australia \\t 3.1 \\t 4.0 \\t 3.6 \\t 2.8 \\t 4.2 \\t 5.0 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This heatmap illustrates the agricultural yields in tonnes per hectare for six different crops across six regions. The crops measured are wheat, corn, rice, soybeans, barley, and potatoes. North America yields 3.2 for wheat, 5.5 for corn, 3.0 for rice, 2.5 for soybeans, 4.0 for barley, and 6.1 for potatoes. South America's figures are slightly lower, with wheat at 2.8 and corn at 4.8. Conversely, Asia reports high yields, particularly for rice at 6.5 and corn at 6.0. Africa's yields are the lowest among the listed regions for all crops, with wheat at 1.8 and corn at 2.5."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Process the data\ndata = {\"Region\": [\"North America\", \"South America\", \"Europe\", \"Asia\", \"Africa\", \"Australia\"],\n        \"Wheat (Tonnes per Hectare)\": [3.2, 2.8, 3.5, 4.0, 1.8, 3.1],\n        \"Corn (Tonnes per Hectare)\": [5.5, 4.8, 5.2, 6.0, 2.5, 4.0],\n        \"Rice (Tonnes per Hectare)\": [3.0, 3.2, 2.7, 6.5, 2.2, 3.6],\n        \"Soybeans (Tonnes per Hectare)\": [2.5, 2.7, 2.2, 3.0, 1.5, 2.8],\n        \"Barley (Tonnes per Hectare)\": [4.0, 3.5, 3.0, 5.5, 2.0, 4.2],\n        \"Potatoes (Tonnes per Hectare)\": [6.1, 5.0, 4.8, 7.2, 3.5, 5.0]}\n\ndf = pd.DataFrame(data)\ndf = df.set_index(\"Region\")\n\n# Set the figure size\nplt.figure(figsize=(10, 8))\n\n# Plot the heatmap\nax = sns.heatmap(df, annot=True, cmap=\"YlGnBu\", square=True)\n\n# Set the ticks and ticklabels for x and y axis\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\", fontsize=12)\nax.set_yticklabels(ax.get_yticklabels(), fontsize=12)\n\n# Add title\nplt.title(\"Crop Yields by Region in Agriculture\", fontsize=18)\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"output/final/heatmap/png/20231228-124154_16.png\", bbox_inches=\"tight\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which region has the highest yield of rice per hectare?",
            "output": "Asia"
        }
    },
    {
        "chart_type": "heatmap",
        "imgname": "heatmap_43",
        "img": "./heatmap/png/heatmap_43.png",
        "topic": "Sports and Entertainment",
        "title": " Popularity of Entertainment Categories",
        "csv": "Category \\t Sports Team \\t Musician \\t Actor \\t Movie \\t TV Show \\t Video Game \\n Football \\t 74% \\t 2% \\t 5% \\t 3% \\t 10% \\t 6% \\n Basketball \\t 5% \\t 80% \\t 5% \\t 3% \\t 5% \\t 2% \\n Baseball \\t 7% \\t 5% \\t 70% \\t 2% \\t 8% \\t 8% \\n Soccer \\t 9% \\t 3% \\t 3% \\t 75% \\t 5% \\t 5% \\n Hockey \\t 5% \\t 2% \\t 5% \\t 2% \\t 80% \\t 6% \\n Esports \\t 4% \\t 8% \\t 5% \\t 5% \\t 6% \\t 72% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The heatmap illustrates the popularity of different entertainment categories across various sectors. Each category\u2014Sports Team, Musician, Actor, Movie, TV Show, Video Game\u2014is represented by a percentage. Football is predominantly popular as a Sports Team with 74%. Musicians have the highest popularity in Basketball at 80%. Actors are most favored in Baseball with 70%. Soccer is most associated with Movies at 75%. TV Shows are notably popular in Hockey, commanding an 80% share. Lastly, Video Games dominate in Esports with a popularity of 72%. Each entertainment sector shows unique preferences for these categories."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\n# create data\ncols = ['Category', 'Sports Team', 'Musician', 'Actor', 'Movie', 'TV Show', 'Video Game']\nrows = ['Football', 'Basketball', 'Baseball', 'Soccer', 'Hockey', 'Esports']\nvalues = [[74, 2, 5, 3, 10, 6], [5, 80, 5, 3, 5, 2], [7, 5, 70, 2, 8, 8], [9, 3, 3, 75, 5, 5], [5, 2, 5, 2, 80, 6], [4, 8, 5, 5, 6, 72]]\n\n# create dataframe\ndf = pd.DataFrame(values, index=rows, columns=cols[1:])\n\n# create figure and axes\nfig, ax = plt.subplots(figsize=(10,7))\n\n# set ticks and ticklabels for x and y axis\nax.set_xticks(np.arange(len(cols[1:])))\nax.set_xticklabels(cols[1:], rotation=45, ha='right', rotation_mode='anchor')\nax.set_yticks(np.arange(len(rows)))\nax.set_yticklabels(rows, rotation=0)\n\n# plot heatmap using sns.heatmap()\nsns.heatmap(df, ax=ax, cmap='coolwarm', annot=True, cbar=False, linewidths=0.5)\n\n# add title\nplt.title('Popularity of Entertainment Categories')\n\n# automatically resize image and save\nplt.tight_layout()\nplt.savefig('output/final/heatmap/png/20231228-124154_31.png', bbox_inches='tight')\n\n# clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the popularity percentage for musicians under the soccer category?",
            "output": "3%"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_50",
        "img": "./3D-Bar/png/3D-Bar_50.png",
        "topic": "Law and Legal Affairs",
        "title": " Global Legal Affairs and Crime Statistics",
        "csv": "Country \\t Violent Crime (Cases) \\t Property Crime (Cases) \\t Fraud (Cases) \\n USA \\t 20000 \\t 18000 \\t 3000 \\n Canada \\t 12000 \\t 15000 \\t 2000 \\n UK \\t 7000 \\t 9000 \\t 1000 \\n Australia \\t 14000 \\t 16000 \\t 2500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates crime statistics across four countries, categorizing data by violent crime, property crime, and fraud cases. The USA reports 20,000 violent crime cases, 18,000 property crime cases, and 3,000 fraud cases. Canada has fewer instances, with 12,000 violent, 15,000 property, and 2,000 fraud cases. The UK shows 7,000 violent, 9,000 property, and 1,000 fraud cases. Australia has 14,000 cases of violent crime, 16,000 of property crime, and 2,500 of fraud."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: y_values, data, x_values. \ny_values = ['Violent Crime (Cases)', 'Property Crime (Cases)', 'Fraud (Cases)']\ndata = np.array([[20000, 18000, 3000], \n                 [12000, 15000, 2000], \n                 [7000, 9000, 1000],\n                 [14000, 16000, 2500]])\nx_values = ['USA', 'Canada', 'UK', 'Australia']\n\n# Plot the data with the type of 3D bar chart. \nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111, projection='3d')\n\n# Iterate over y_values to plot each column of data\nfor i, y in enumerate(y_values):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    ax.bar3d(xs, ys, np.zeros(len(x_values)), 0.5, 0.5, data[:,i], alpha=0.7, color=plt.cm.get_cmap('Spectral')(i/3))\n\n# Set the dimensions of the bars (width, depth, colors, alpha, etc) differently on x-dimension or y-dimension to ensure they are distinct and non-overlapping\nax.set_xlim3d(0, len(x_values))\nax.set_ylim3d(-1, len(y_values))\nax.set_zlim3d(0, max(data.flatten()))\n\n# Rotate the X-axis labels for better readability\nax.view_init(azim=145)\n\n# Y-axis does not need title\nax.set_yticks([])\n\n# Set ax.set_xticks and ax.set_yticks to align the label position with data position\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticklabels(x_values)\nax.set_yticklabels(y_values)\n\n# Drawing techniques such as background grids can be used\nax.grid(True)\n\n# The title of the figure\nax.set_title('Global Legal Affairs and Crime Statistics')\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# The image must be saved as ./3D/png/10_202312251036.png\nplt.savefig('./3D/png/10_202312251036.png')\n\n# Clear the current image state at the end of the code\nplt.cla()"
        },
        "QA": {
            "input": "Which country has the highest number of property crime cases according to the given data?",
            "output": "USA"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_32",
        "img": "./3D-Bar/png/3D-Bar_32.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing and Production Output and Costs Analysis",
        "csv": "Category \\t Manufactured Output (Units) \\t Average Cost ($) \\t Average Time (Days) \\n Machinery \\t 800 \\t 1000 \\t 2000 \\n Electricals \\t 1000 \\t 1500 \\t 2500 \\n Automobiles \\t 1200 \\t 2000 \\t 3000 \\n Clothing \\t 1500 \\t 2500 \\t 3500 \\n Furniture \\t 2000 \\t 3000 \\t 4000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This 3D-bar chart presents an analysis of manufacturing and production output and costs across five categories. It lists the produced output in units, the average cost in dollars, and the average time taken in days. The machinery category shows an output of 800 units with an average cost of $1000 and a lead time of 2000 days. Electricals display 1000 units produced, $1500 average cost, and 2500 days average time. Automobiles are at 1200 units, with costs at $2000 and time at 3000 days. Clothing reaches 1500 units, $2500 cost, and 3500 days, while furniture tops the chart with 2000 units, $3000 cost, and a 4000-day lead time."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Transform the given data into three variables: y_values, data, x_values. \ny_values=['Manufactured Output (Units)','Average Cost ($)','Average Time (Days)']\ndata=np.array([[800,1000,2000],[1000,1500,2500],[1200,2000,3000],[1500,2500,3500],[2000,3000,4000]])\nx_values=['Machinery','Electricals','Automobiles','Clothing','Furniture']\n\n# Create figure before plotting\nfig=plt.figure(figsize=(10,5))\nax=fig.add_subplot(111, projection='3d')\n\n# Plot the data with the type of 3D bar chart. \nfor i in range(len(y_values)):\n    xs=np.arange(len(x_values))\n    ys=[i]*len(x_values)\n    ax.bar3d(xs, ys, [0]*len(x_values), 0.5, 0.5, data[:, i], shade=True, color='g')\n\n# Set the dimensions of the bars (width, depth, colors, alpha, etc) differently \nax.set_zlabel('Output and Costs')\nax.set_ylabel('Metrics')\nax.set_xlabel('Categories')\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values, rotation=45)\nax.set_yticklabels(y_values)\n\n# Drawing techniques such as background grids can be used.\nax.grid(b=True, which='major', color='#666666', linestyle='-')\nax.minorticks_on()\nax.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.2)\n\n# The title of the figure should be  Manufacturing and Production Output and Costs Analysis.\nax.set_title('Manufacturing and Production Output and Costs Analysis')\n\n# Automatically resize the image by tight_layout() before savefig().\nplt.tight_layout()\n\n# The image must be saved as ./3D/png/14.png\nplt.savefig('./3D/png/14.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the lowest average time of manufacturing?",
            "output": "Machinery"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_45",
        "img": "./3D-Bar/png/3D-Bar_45.png",
        "topic": "Food and Beverage Industry",
        "title": " Food and Beverage Industry Analysis - Sales Volume, Price and Revenue",
        "csv": "Food Item \\t Sales Volume (Units) \\t Average Price ($) \\t Gross Revenue ($) \\n Pizza \\t 100 \\t 110 \\t 1000 \\n Burgers \\t 200 \\t 280 \\t 1600 \\n Soft Drinks \\t 400 \\t 320 \\t 800 \\n Salads \\t 500 \\t 515 \\t 750 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates sales volume, average price, and gross revenue for different food items within the food and beverage industry. Pizza sales volume stands at 100 units with an average price of $110, resulting in gross revenues of $1000. Burger sales double to 200 units at a higher average price of $280 and greater revenue at $1600. Soft drinks show a sales volume of 400 units but have a lower average price of $320 and gross revenue of $800. Salads lead in sales volume at 500 units with a price of $515, however, generate the least revenue at $750."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ny_values = ['Sales Volume (Units)', 'Average Price ($)', 'Gross Revenue ($)']\ndata = np.array([[100,110,1000], [200,280,1600], [400,320,800], [500,515,750]])\nx_values = ['Pizza', 'Burgers', 'Soft Drinks', 'Salads']\n\nfig = plt.figure(figsize=(12, 6))\nax = fig.add_subplot(1,1,1, projection='3d')\n\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    ax.bar3d(xs, ys, [0]*len(x_values), 0.5, 0.5, data[:,i], color='#9966FF', alpha=1)\n\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values, rotation=20)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values)\nax.set_title(\"Food and Beverage Industry Analysis - Sales Volume, Price and Revenue\")\nplt.tight_layout()\nplt.savefig('./3D/png/17_202312251044.png', bbox_inches = \"tight\")\nplt.clf()"
        },
        "QA": {
            "input": "Which food item has the highest gross revenue?",
            "output": "Burgers"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_46",
        "img": "./3D-Bar/png/3D-Bar_46.png",
        "topic": "Tourism and Hospitality",
        "title": " Tourism and Hospitality in Major Countries - An Overview",
        "csv": "Country \\t Number of Tourists (Millions) \\t Average Spent per Tourist ($ Hundred) \\t Hotel Occupancy Rate (%) \\n USA \\t 50 \\t 50 \\t 80 \\n UK \\t 25 \\t 60 \\t 70 \\n France \\t 35 \\t 45 \\t 75 \\n Spain \\t 20 \\t 40 \\t 65 \\n Germany \\t 15 \\t 55 \\t 78 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart provides an overview of tourism and hospitality in five major countries. It depicts the number of tourists (in millions), the average amount spent by each tourist in hundreds of dollars, and the hotel occupancy rates in percentage terms for each country. The USA sees 50 million tourists, with an average spend of $5000 and an 80% hotel occupancy rate. The UK has 25 million tourists, $6000 average spend, and a 70% occupancy rate. France welcomes 35 million tourists, has a $4500 average spend, and a 75% occupancy rate. Spain receives 20 million tourists, $4000 average spend, and a 65% occupancy rate, while Germany has 15 million tourists, $5500 average spend, and a 78% occupancy rate."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#Transform the given data into three variables.\ny_values = ['Number of Tourists (Millions)', 'Average Spent per Tourist ($ Hundred)', 'Hotel Occupancy Rate (%)'] \n\ndata = np.array([[50,50,80],\n                 [25,60,70],\n                 [35,45,75],\n                 [20,40,65],\n                 [15,55,78]])\n\nx_values = ['USA', 'UK', 'France', 'Spain', 'Germany']\n\n#Create figure before plotting\nfig = plt.figure(figsize=(12,8))\nax = fig.add_subplot(111, projection='3d')\n\n#Plot the data with the type of 3D bar chart\nfor i in range(len(y_values)):\n    ax.bar3d(np.arange(len(x_values)), [i]*len(x_values), 0, 0.5, 0.5, data[:, i],\n            color='b', alpha=0.5, edgecolor='k')\n\n#Set the dimensions of the bars\nax.set_zlabel('Number of Tourists (Millions)')\nax.set_ylabel('Average Spent per Tourist ($)')\nax.set_xlabel('Hotel Occupancy Rate (%)')\n\n#Set the title of the figure \nax.set_title('Tourism and Hospitality in Major Countries - An Overview')\n\n#Rotate the X-axis labels\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticklabels(x_values, rotation=45)\nax.set_yticklabels(y_values, ha='left')\n\n#Automatically resize the image\nplt.tight_layout()\n\n#Save the image\nplt.savefig('./3D/png/14_202312270030.png')\n\n#Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the hotel occupancy rate in Germany?",
            "output": "78%"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_25",
        "img": "./3D-Bar/png/3D-Bar_25.png",
        "topic": "Law and Legal Affairs",
        "title": " Legal Cases Overview - 2015 to 2019",
        "csv": "Year \\t Number of Criminal Cases (Thousands) \\t Number of Civil Cases (Thousands) \\t Number of Family Cases (Thousands) \\n 2015 \\t 1200 \\t 4000 \\t 3000 \\n 2016 \\t 1300 \\t 4200 \\t 3200 \\n 2017 \\t 1400 \\t 4400 \\t 3400 \\n 2018 \\t 1450 \\t 4500 \\t 3500 \\n 2019 \\t 1500 \\t 4600 \\t 3600 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart outlines the number of legal cases across three categories from 2015 to 2019. In thousands, criminal cases increase from 1200 in 2015 to 1500 in 2019. Civil cases show a larger volume, starting at 4000 in 2015 and rising to 4600 in 2019. The family cases also grow from 3000 in 2015 to 3600 in 2019. Each year reflects a steady increase across all types of cases."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: y_values, data, x_values. \ny_values = ['Number of Criminal Cases (Thousands)', 'Number of Civil Cases (Thousands)', 'Number of Family Cases (Thousands)']\ndata = np.array([[1200, 4000, 3000], [1300, 4200, 3200], [1400, 4400, 3400], [1450, 4500, 3500], [1500, 4600, 3600]])\nx_values = ['2015', '2016', '2017', '2018', '2019']\n\n# Create figure before plotting\nfig = plt.figure(figsize=(15, 6))\nax = fig.add_subplot(111, projection='3d')\n\n# Plotting the data\nfor i, y in enumerate(y_values):\n    xpos, ypos = np.meshgrid(np.arange(len(x_values)), [i])\n    xpos = xpos.flatten()\n    ypos = ypos.flatten() - 0.5\n    zpos = np.zeros(len(x_values))\n    dx = 0.3 * np.ones(len(x_values))\n    dy = 0.3 * np.ones(len(x_values))\n    dz = data[:, i]\n\n    ax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, color=plt.cm.jet(i/len(y_values)), alpha=0.6)\n\n# Rotate the X-axis labels for better readability\nx_range = np.arange(len(x_values))\nax.set_xticks(x_range)\nax.w_xaxis.set_ticklabels(x_values, rotation=30)\nax.set_xlabel('Year')\ny_range = np.arange(len(y_values))\nax.set_yticks(y_range)\nax.w_yaxis.set_ticklabels(y_values, ha='left')\nax.set_ylabel('Metrics')\n\n# Drawing techniques such as background grids can be used\nax.grid(True)\n# Set the title of the figure\nax.set_title('Legal Cases Overview - 2015 to 2019', pad=20)\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./3D/png/20.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What was the total increase in the number of family cases from 2015 to 2019?",
            "output": "600 thousand cases"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_7",
        "img": "./3D-Bar/png/3D-Bar_7.png",
        "topic": "Human Resources and Employee Management",
        "title": " Human Resources Trends - Employee Management and Salary Analysis",
        "csv": "Employment Year \\t  Hundred Number of Employees \\t Average Salary ($) \\t Number of Job Openings \\n 2019 \\t 10 \\t 15 \\t 20 \\n 2020 \\t 11 \\t 30 \\t 25 \\n 2021 \\t 12 \\t 30 \\t 30 \\n 2022 \\t 13 \\t 34 \\t 35 \\n 2023 \\t 14 \\t 35 \\t 40 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart is a graphical representation of human resources trends over five years, detailing changes in employment, average salary, and job openings. In 2019, there were 10 hundred employees with an average salary of $15,000 and 20 job openings. Employment grew steadily each year, reaching 14 hundred employees by 2023, with an accompanying growth in average salary to $35,000 and 40 job openings. The data illustrates trends in employee management and salary analysis from 2019 to 2023."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ny_values =  ['Hundred Number of Employees', 'Average Salary ($)', 'Number of Job Openings']\ndata = np.array([[10,15,20], [11,30,25], [12,30,30], [13,34,35], [14,35,40]])\nx_values = ['2019', '2020', '2021', '2022', '2023']\n\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\n\nwidth = depth = 0.8\ncolors = ['b', 'g', 'r']\n\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    ax.bar3d(xs, ys, np.zeros(len(x_values)), width, depth, data[:, i], shade=True, color=colors[i])\n\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values, ha='left')\nplt.title('Human Resources Trends - Employee Management and Salary Analysis')\n\nplt.tight_layout()\nplt.savefig('./3D/png/6_202312270030.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many job openings were there in 2021?",
            "output": "30"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_27",
        "img": "./3D-Bar/png/3D-Bar_27.png",
        "topic": "Science and Engineering",
        "title": " Science and Engineering - R&D, High-Tech Exports and Patents Analysis",
        "csv": "Year \\t R&D Expenditure (Billion USD) \\t High-Tech Exports (Billion USD) \\t Patents Issued (Number of Patents) \\n 2019 \\t 365 \\t 1120 \\t 2200 \\n 2020 \\t 375 \\t 1150 \\t 2500 \\n 2021 \\t 395 \\t 1200 \\t 1800 \\n 2022 \\t 405 \\t 1250 \\t 2100 \\n 2023 \\t 415 \\t 1280 \\t 1400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This 3D bar chart illustrates the science and engineering metrics over five years: R&D expenditure, high-tech exports, and the number of patents issued. In 2019, R&D spending was at 365 billion USD, high-tech exports at 1120 billion USD, and patents issued were 2200. By 2023, R&D spending increased to 415 billion USD, high-tech exports to 1280 billion USD, and patents issued decreased to 1400. The data reveal a general upward trend in R&D investment and high-tech exports, with fluctuating numbers for issued patents from 2019 to 2023."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Transform the given data into three variables: y_values, data, x_values.\ny_values = ['R&D Expenditure (Billion USD)', 'High-Tech Exports (Billion USD)', 'Patents Issued (Number of Patents)'] \ndata = np.array([[365, 1120, 2200], [375, 1150, 2500], [395, 1200, 1800], [405, 1250, 2100], [415, 1280, 1400]]) \nx_values = ['2019', '2020', '2021', '2022', '2023']\n\n# Create figure with 3D projection\nfig = plt.figure(figsize=(8, 5))\nax = fig.add_subplot(111, projection='3d')\n\n# Iterate over y_values to plot each column of data\nfor i in range(len(y_values) - 1, -1, -1):\n    X = np.arange(len(x_values))\n    Y = [i] * len(x_values)\n    # Set the dimensions of the bars (width, depth, colors, alpha, etc)\n    ax.bar3d(X, Y, np.zeros(len(x_values)), 0.6, 0.6, data[:, i], alpha = 0.6, color=np.random.rand(3,))\n\n# Set the label of x-axis\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values, rotation=30)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values, ha='left', rotation=-15)\n\n# Set the title of the figure\nax.set_title('Science and Engineering - R&D, High-Tech Exports and Patents Analysis')\n\n# Resize the image by tight_layout() and save the image\nplt.tight_layout()\nplt.savefig('./3D/png/2_202312251000.png')\n\n# Clear the current image state\nplt.cla()"
        },
        "QA": {
            "input": "In which year was the number of patents issued the highest according to the data?",
            "output": "2020"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_48",
        "img": "./3D-Bar/png/3D-Bar_48.png",
        "topic": "Human Resources and Employee Management",
        "title": " Human Resources and Employee Management Trends - 2019 to 2023",
        "csv": "Year \\t Number of Employees \\t Average Salary ($) \\t Total Cost of Benefits ($) \\n 2019 \\t 500 \\t 520 \\t 500 \\n 2020 \\t 550 \\t 532 \\t 520 \\n 2021 \\t 600 \\t 550 \\t 560 \\n 2022 \\t 650 \\t 580 \\t 600 \\n 2023 \\t 700 \\t 600 \\t 650 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates changes in human resources and employee management trends from 2019 to 2023. In 2019, there were 500 employees with an average salary of $520 and a total cost of benefits at $500K. By 2020, the number of employees increased to 550, the average salary rose to $532, and total benefits cost climbed to $520K. In 2021, employee numbers grew to 600, with an average salary of $550 and benefits costing $560K. The upward trend continued in 2022 with 650 employees, a $580 average salary, and $600K in benefits. Finally, in 2023, there are 700 employees with a $600 average salary and $650K in benefit costs."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Transform the given data into three variables: y_values, data, x_values\n# y_values represents the metric list of each column except the first column\n# x_values represents the category list of each row except the first row\n# Data represent the numerical ndarray in the data, where each row corresponds to a category and each column corresponds to a metric\ny_values = [\"Number of Employees\", \"Average Salary ($)\", \"Total Cost of Benefits ($)\"]\ndata = np.array([[500, 520, 500], [550, 532, 520], [600, 550, 560], [650, 580, 600], [700, 600, 650]])\nx_values = [\"2019\", \"2020\", \"2021\", \"2022\", \"2023\"]\n\n# Plot the data with the type of 3D bar chart. use a 3D projection for the subplot. Create figure before plotting, i.e., add_subplot() follows plt.figure().\nfig = plt.figure(figsize=(16, 8))\nax = fig.add_subplot(111, projection='3d')\n\n# Iterate over y_values to plot each column of data, i.e., data[:, i]. \n# For the plotting of each column in data, use np.arange(len(x_labels)) and [i]*len(x_labels) to represent the X, Y coordinates \n# for each group of data to avoid overlapping of different data groups, and use ax.bar3d to draw a set of bars, \n# in which ensure that each group of bars is correctly aligned on x-axis.\nfor i in range(len(y_values)):\n    x_positions = np.arange(len(x_values))\n    y_positions = [i]*len(x_values)\n    ax.bar3d(x_positions, y_positions, np.zeros(len(x_values)), 0.8, 0.8, data[:,i], shade=True)\n\n# Set the dimensions of the bars (width, depth, colors, alpha, etc) differently on x-dimension or y-dimension to ensure they are distinct and non-overlapping, providing clear visualization. Rotate the X-axis labels for better readability. Y-axis does not need title.\nax.set_xlabel('Year')\nax.set_ylabel('Metrics')\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\n\n# Drawing techniques such as background grids can be used.\nax.grid(False)\n\n# Use ax.set_xticks and ax.set_yticks to align the label position with data position. \n# Use ax.set_xticklabels(x_values) to label x-axis. \n# Use ax.set_yticklabels(y_values) to label y-axis.\nax.set_xticklabels(x_values, rotation=30)\nax.set_yticklabels(y_values)\n\n# The title of the figure should be  Human Resources and Employee Management Trends - 2019 to 2023.\nax.set_title(\"Human Resources and Employee Management Trends - 2019 to 2023\")\n\n# Automatically resize the image by tight_layout() before savefig().\nplt.tight_layout()\n\n# The image must be saved as ./3D/png/22_202312251044.png.\nplt.savefig(\"./3D/png/22_202312251044.png\")\n\n# Clear the current image state at the end of the code.\nplt.clf()"
        },
        "QA": {
            "input": "What was the average salary in the year 2021?",
            "output": "$550"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_13",
        "img": "./3D-Bar/png/3D-Bar_13.png",
        "topic": "Food and Beverage Industry",
        "title": " Food and Beverage Industry Market Overview",
        "csv": "Company \\t Market Share (%) \\t Revenue ($ Billion) \\t Growth Rate \\n McDonalds \\t 20 \\t 200 \\t 300 \\n KFC \\t 15 \\t 150 \\t 180 \\n Burger King \\t 10 \\t 100 \\t 60 \\n Starbucks \\t 15 \\t 50 \\t 40 \\n Subway \\t 12 \\t 20 \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates key data for five companies in the food and beverage industry: McDonald's, KFC, Burger King, Starbucks, and Subway. It shows each company's market share percentage, revenue in billions, and growth rate. McDonald's has a 20% market share, $200 billion in revenue, and a growth rate of 300%. KFC holds a 15% market share with $150 billion revenue and a 180% growth. Burger King has a 10% market share, $100 billion revenue, and a growth rate of 60%. Starbucks also represents a 15% market share, but with $50 billion revenue and a 40% growth rate, while Subway has a 12% market share, $20 billion in revenue, and a growth rate of 20%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ny_values = ['Market Share (%)', 'Revenue ($ Billion)', 'Growth Rate']\ndata = np.array([[20, 200, 300], [15, 150, 180], [10, 100, 60], [15, 50, 40], [12, 20, 20]])\nx_values = ['McDonalds', 'KFC', 'Burger King', 'Starbucks', 'Subway']\n\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111, projection='3d')\n\nx_pos = np.arange(len(x_values))\n\nfor i in range(len(y_values)):\n    y_pos = [i] * len(x_values)\n    ax.bar3d(x_pos, y_pos, np.zeros(len(x_values)), 0.5, 0.5, data[:, i],\n            shade=True, color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd'], alpha=0.8)\n\nax.set_xticks(x_pos)\nax.set_xticklabels(x_values)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values)\nax.grid(True, linestyle='-', color='grey')\nax.set_title('Food and Beverage Industry Market Overview')\n\nplt.tight_layout()\nplt.savefig('./3D/png/8.png')\nplt.cla()"
        },
        "QA": {
            "input": "What is the revenue growth rate of KFC?",
            "output": "180%"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_5",
        "img": "./3D-Bar/png/3D-Bar_5.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Financial and Volunteer Support for Nonprofit Organizations - 2019 to 2023",
        "csv": "Year \\t Donations Received (K USD) \\t Number of Donations \\t Number of Volunteers \\n 2019 \\t 100000 \\t 100000 \\t 200000 \\n 2020 \\t 125000 \\t 125000 \\t 300000 \\n 2021 \\t 150000 \\t 150000 \\t 400000 \\n 2022 \\t 175000 \\t 175000 \\t 500000 \\n 2023 \\t 200000 \\t 200000 \\t 600000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This 3D bar chart illustrates the growth of financial and volunteer support received by nonprofit organizations from 2019 to 2023. The data shows an increase across three parameters: \"Donations Received (K USD),\" \"Number of Donations,\" and \"Number of Volunteers\" for each year. In 2019, donations received amounted to $100,000K with 100,000 donations and 200,000 volunteers. By 2023, donations rose to $200,000K, with an equal number of 200,000 donations, and the volunteer count reached 600,000. Each year reflects an increase, indicating a positive trend in support for the sector."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ny_values = ['Donations Received (K USD)', 'Number of Donations', 'Number of Volunteers']\nx_values = ['2019', '2020', '2021', '2022', '2023']\ndata = np.array([[100000, 100000, 200000],\n                 [125000, 125000, 300000],\n                 [150000, 150000, 400000],\n                 [175000, 175000, 500000],\n                 [200000, 200000, 600000]])\n\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\n\nx_pos = np.arange(len(x_values))\n\nfor i in range(len(y_values)):\n    y_pos = [i] * len(x_values)\n    ax.bar3d(x_pos, y_pos, np.zeros(len(x_values)), 1, 1, data[:, i], alpha=0.5)\n\nax.set_xticks(x_pos)\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticklabels(x_values, rotation=-30, ha='left')\nax.set_yticklabels(y_values)\n\nplt.title('Financial and Volunteer Support for Nonprofit Organizations - 2019 to 2023')\nplt.tight_layout()\nplt.savefig('./3D/png/7_202312251000.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the amount of donations received in the year 2021?",
            "output": "150,000 K USD"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_4",
        "img": "./3D-Bar/png/3D-Bar_4.png",
        "topic": "Food and Beverage Industry",
        "title": " Comprehensive Overview of the Food and Beverage Industry Market",
        "csv": "Category \\t Sales Volume (Units) \\t Average Price ($) \\t Number of Listings \\n Fast Food \\t 200 \\t 50 \\t 300 \\n Bakery \\t 150 \\t 70 \\t 400 \\n Beverages \\t 500 \\t 25 \\t 500 \\n Groceries \\t 400 \\t 40 \\t 400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart provides a comprehensive overview of the food and beverage industry market, scrutinizing sales volume, average price, and number of listings across four categories. Fast Food shows sales of 200 units at an average price of $50, with 300 listings, while Bakery items have sold 150 units at $70, with 400 listings. Beverages lead with 500 units sold at $25, accompanied by 500 listings. Last, Groceries follow with 400 units sold and an average price of $40, equaling the 400 listings."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ny_values = ['Sales Volume (Units)', 'Average Price ($)', 'Number of Listings']\nx_values = ['Fast Food', 'Bakery', 'Beverages', 'Groceries'] \ndata = np.array([[200, 50, 300], [150, 70, 400], [500, 25, 500], [400, 40, 400]])\n\nfor i in range(len(y_values)):\n    ys = [i] * len(x_values)\n    ax.bar3d(np.arange(len(x_values)), ys, [0] * len(x_values), 0.5, 0.5, data[:, i], alpha=0.3 * (i+1))\n\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values, rotation=45)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values, ha='left')\nax.set_title('Comprehensive Overview of the Food and Beverage Industry Market')\nplt.tight_layout()\nplt.savefig('./3D/png/2_202312251044.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more listings are there for Beverages compared to Fast Food?",
            "output": "200"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_29",
        "img": "./3D-Bar/png/3D-Bar_29.png",
        "topic": "Government and Public Policy",
        "title": " Government Fiscal Policy Analysis - 2019 to 2023",
        "csv": "Year \\t Government Expenditure ($Billion) \\t Tax Revenue ($Billion) \\t Public Debt (% of GDP) \\n 2019 \\t 2.3 \\t 3.5 \\t 8 \\n 2020 \\t 2.4 \\t 3.6 \\t 8.2 \\n 2021 \\t 2.5 \\t 3.7 \\t 8.4 \\n 2022 \\t 2.6 \\t 3.8 \\t 8.6 \\n 2023 \\t 2.7 \\t 3.9 \\t 8.8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart represents the Government Fiscal Policy from 2019 to 2023, showing Government Expenditure and Tax Revenue in $Billion, alongside Public Debt as a percentage of GDP. In 2019, expenditure was at $2.3 billion with tax revenue at $3.5 billion and debt at 8% of GDP. The pattern shows a steady increase in both expenditure and tax revenue, with expenditure rising from $2.3 to $2.7 billion and revenue from $3.5 to $3.9 billion from 2019 to 2023, while public debt as a percentage of GDP marginally increases from 8% to 8.8% during the same period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ny_values = [\"Government Expenditure ($Billion)\", \"Tax Revenue ($Billion)\", \"Public Debt (% of GDP)\"]\ndata = np.array([[2.3, 3.5, 8], [2.4, 3.6, 8.2], [2.5, 3.7, 8.4], [2.6, 3.8, 8.6], [2.7, 3.9, 8.8]])\nx_values = [\"2019\", \"2020\", \"2021\", \"2022\", \"2023\"]\n\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, projection=\"3d\")\nfor i in range(data.shape[1]):\n    ax.bar3d(np.arange(len(x_values)), [i]*len(x_values), np.zeros(len(x_values)), \n             0.8, 0.5, data[:, i], alpha=0.5, color=[plt.cm.jet(i/data.shape[1])])\n\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticklabels(x_values, rotation=45, wrap = True)\nax.set_yticklabels(y_values, ha='left')\nax.set_title(\"Government Fiscal Policy Analysis - 2019 to 2023\")\nplt.tight_layout()\nplt.savefig('./3D/png/6.png')\nplt.clf()"
        },
        "QA": {
            "input": "Between 2019 and 2023, did Public Debt as a percentage of GDP increase each year?",
            "output": "Yes"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_21",
        "img": "./3D-Bar/png/3D-Bar_21.png",
        "topic": "Food and Beverage Industry",
        "title": " Food and Beverage Industry Consumption and Prices - Overview",
        "csv": "Category \\t Consumption (Million Tonnes) \\t Average Price ($/Tonne) \\t Number of Suppliers \\n Dairy \\t 100 \\t 500 \\t 300 \\n Fruits \\t 150 \\t 400 \\t 250 \\n Vegetables \\t 200 \\t 350 \\t 450 \\n Grains \\t 250 \\t 300 \\t 600 \\n Oils \\t 50 \\t 550 \\t 200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This 3D bar chart provides an overview of the food and beverage industry, detailing consumption in million tonnes, average price per tonne, and the number of suppliers for five categories. Dairy products show 100 million tonnes consumption, at an average price of $500 per tonne, supplied by 300 entities. Fruit consumption stands at 150 million tonnes, priced at $400 per tonne, with 250 suppliers. Vegetables lead with 200 million tonnes, a price of $350, and the most suppliers at 450. Grains are at 250 million tonnes, $300 price, and the highest supplier count of 600. Oils are least consumed at 50 million tonnes, but have the highest price of $550, with 200 suppliers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Transform the given data into three variables\ny_values = ['Consumption (Million Tonnes)', 'Average Price ($/Tonne)', 'Number of Suppliers']\ndata = np.array([[100, 500, 300], [150, 400, 250], [200, 350, 450], [250, 300, 600], [50, 550, 200]])\nx_values = ['Dairy', 'Fruits', 'Vegetables', 'Grains', 'Oils']\n\n# Create figure\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot data\nfor i in range(len(y_values)):\n    X = np.arange(len(x_values))\n    Y = [i] * len(x_values)\n    Z = data[:, i]\n    ax.bar3d(X, Y, np.zeros_like(Z), 1, 1, Z, shade=True, alpha=0.3 * (i + 1))\n\n# Set the title of the figure\nax.set_title('Food and Beverage Industry Consumption and Prices - Overview')\n\n# Set the dimensions of the bars\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\n\n# Label x-axis\nax.set_xticklabels(x_values, rotation=45)\n\n# Label y-axis\nax.set_yticklabels(y_values)\n\n# Resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./3D/png/3.png')\n\n# Clear the image state\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the highest average price per tonne?",
            "output": "Oils"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_40",
        "img": "./3D-Bar/png/3D-Bar_40.png",
        "topic": "Education and Academics",
        "title": " Academic Performance of Students - Elementary to College Level",
        "csv": "Level \\t Average GPA \\t Average SAT Score \\t Number of Students \\n Elementary \\t 370 \\t 1100 \\t 500 \\n Middle \\t 390 \\t 1200 \\t 1000 \\n High School \\t 380 \\t 1300 \\t 2000 \\n College \\t 360 \\t 1400 \\t 3000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates the academic performance of students across different education levels, measured by Average GPA, Average SAT Score, and Number of Students. At the elementary level, the average GPA is 370, the SAT score is 1100, and there are 500 students. For the middle level, the average GPA rises slightly to 390 with a SAT score of 1200 and a student population of 1000. High school students show an average GPA of 380, SAT score of 1300, and a significantly larger group of 2000 students. College students average a GPA of 360, the lowest recorded, but have the highest SAT score at 1400 and the largest number of students, 3000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ny_values = [\"Average GPA\", \"Average SAT Score\", \"Number of Students\"]\nx_values = [\"Elementary\", \"Middle\", \"High School\", \"College\"]\ndata = np.array([[370, 1100, 500], [390, 1200, 1000], [380, 1300, 2000], [360, 1400, 3000]])\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    ax.bar3d(xs, ys, np.zeros(len(x_values)), 0.5, 0.5, data[:, i], shade=True, color='r')\n\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticklabels(x_values, rotation=45)\nax.set_yticklabels(y_values)\nfig.suptitle(\"Academic Performance of Students - Elementary to College Level\")\n\nplt.tight_layout()\nplt.savefig('./3D/png/4_202312251036.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more students are there in college compared to high school?",
            "output": "1000 students"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_43",
        "img": "./3D-Bar/png/3D-Bar_43.png",
        "topic": "Retail and E-commerce",
        "title": " Growth of Retail and E-commerce Sales - 2019 to 2023",
        "csv": "Year \\t Online Sales ($Billion) \\t Retail Store Sales ($Billion) \\t Total Retail Sales ($Billion) \\n 2019 \\t 2.5 \\t 3.4 \\t 5.9 \\n 2020 \\t 3.7 \\t 3.8 \\t 7.5 \\n 2021 \\t 5.1 \\t 4.2 \\t 9.3 \\n 2022 \\t 6.2 \\t 4.6 \\t 10.8 \\n 2023 \\t 7.6 \\t 4.8 \\t 12.4 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates the growth in retail and e-commerce sales from 2019 to 2023. In 2019, online sales were at $2.5 billion, retail store sales at $3.4 billion, and total retail sales summed up to $5.9 billion. There is a year-on-year increase in all categories, with online sales reaching $7.6 billion, retail store sales hitting $4.8 billion, and total retail sales growing to $12.4 billion by 2023. Each year's data is shown with corresponding bars indicating the value in billions for online sales, retail store sales, and total retail sales."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ny_values = ['Online Sales ($Billion)', 'Retail Store Sales ($Billion)', 'Total Retail Sales ($Billion)']\ndata = np.array([[2.5, 3.4, 5.9], [3.7, 3.8, 7.5], [5.1, 4.2, 9.3], [6.2, 4.6, 10.8], [7.6, 4.8, 12.4]])\nx_values = ['2019', '2020', '2021', '2022', '2023']\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    zs = data[:,i]\n    ax.bar3d(xs, ys, np.zeros(len(xs)), 0.5, 0.5, zs, alpha=0.6)\n\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticklabels(x_values, rotation=45)\nax.set_yticklabels(y_values)\n\nplt.title(\"Growth of Retail and E-commerce Sales - 2019 to 2023\")\nplt.tight_layout()\nplt.savefig('./3D/png/16_202312251044.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much did the total retail sales increase from 2019 to 2023?",
            "output": "6.5 billion dollars"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_8",
        "img": "./3D-Bar/png/3D-Bar_8.png",
        "topic": "Human Resources and Employee Management",
        "title": " HR and Employee Management Insights by Type",
        "csv": "Employee Type \\t Headcount \\t Average Salary ($) \\t Average Vacation Days \\n Interns \\t 45 \\t 22 \\t 27 \\n Full-Time \\t 40 \\t 50 \\t 14 \\n Part-Time \\t 15 \\t 20 \\t 37 \\n Contractors \\t 25 \\t 40 \\t 45 \\n Remote \\t 20 \\t 45 \\t 14 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart provides HR and Employee Management Insights by Type, showcasing data on headcount, average salary, and average vacation days. Interns number 45 with an average salary of $22,000 and 27 vacation days. Full-time employees are 40 in headcount, earning an average salary of $50,000 with 14 vacation days. There are 15 part-time workers earning $20,000 with 37 vacation days. Contractors total 25, with an average salary of $40,000 and 45 vacation days. Finally, there are 20 remote employees, earning $45,000 on average with 14 vacation days."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ny_values = ['Headcount', 'Average Salary ($)', 'Average Vacation Days']\nx_values = ['Interns', 'Full-Time', 'Part-Time', 'Contractors', 'Remote']\n\ndata = np.array([[45,22,27],\n                 [40,50,14],\n                 [15,20,37],\n                 [25,40,45],\n                 [20,45,14]])\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i]*len(x_values)\n    ax.bar3d(xs, ys, np.zeros(len(x_values)), 1, 1, data[:,i], alpha=0.6, color='#2196F3')\n\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticklabels(x_values)\nax.set_yticklabels(y_values)\nax.set_title('HR and Employee Management Insights by Type')\n\nfig.tight_layout()\nfig.savefig('./3D/png/18_202312251044.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many average vacation days do Remote employees have?",
            "output": "14"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_33",
        "img": "./3D-Bar/png/3D-Bar_33.png",
        "topic": "Science and Engineering",
        "title": " Science and Engineering Student Enrollment Trends - 2019 to 2023",
        "csv": "Year \\t Computer Science Students (Thousands) \\t Engineering Students (Thousands) \\t Physics Students (Thousands) \\t Chemistry Students (Thousands) \\n 2019 \\t 20 \\t 50 \\t 30 \\t 40 \\n 2020 \\t 25 \\t 52 \\t 33 \\t 45 \\n 2021 \\t 30 \\t 55 \\t 37 \\t 50 \\n 2022 \\t 35 \\t 58 \\t 40 \\t 55 \\n 2023 \\t 40 \\t 60 \\t 45 \\t 60 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This 3D bar chart illustrates the enrollment trends of students in various scientific and engineering disciplines from 2019 to 2023. In 2019, there were 20,000 Computer Science students, 50,000 Engineering students, 30,000 Physics students, and 40,000 Chemistry students. The data shows a steady increase across all fields, with Computer Science enrollment rising to 40,000, Engineering to 60,000, Physics to 45,000, and Chemistry to 60,000 by 2023. Each year is represented with distinct bars for the four disciplines, depicting growth over the five-year span."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(111, projection='3d')\n\ny_values = [\"Computer Science Students (Thousands)\", \"Engineering Students (Thousands)\", \"Physics Students (Thousands)\", \"Chemistry Students (Thousands)\"]\ndata = np.array([[20, 50, 30, 40], [25, 52, 33, 45], [30, 55, 37, 50], [35, 58, 40, 55], [40, 60, 45, 60]])\nx_values = [\"2019\", \"2020\", \"2021\", \"2022\", \"2023\"]\n\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    ax.bar3d(xs, ys, np.zeros(len(x_values)), 1, 1, data[:, i], color='#0099FF', alpha=0.2 * (i + 1))\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values, rotation=45)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values, ha='left', rotation=-15)\nax.set_title(\"Science and Engineering Student Enrollment Trends - 2019 to 2023\")\nfig.tight_layout()\nfig.savefig('./3D/png/2_202312251036.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more chemistry students enrolled in 2023 compared to 2019?",
            "output": "20,000 students"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_41",
        "img": "./3D-Bar/png/3D-Bar_41.png",
        "topic": "Agriculture and Food Production",
        "title": " Food Production Trends - 2019 to 2023",
        "csv": "Year \\t Fruit Production (Million Tonnes) \\t Vegetable Production (Million Tonnes) \\t Livestock Production (Million Tonnes) \\t Grain Production (Million Tonnes) \\n 2019 \\t 20 \\t 30 \\t 40 \\t 50 \\n 2020 \\t 18 \\t 27 \\t 37 \\t 47 \\n 2021 \\t 25 \\t 35 \\t 42 \\t 52 \\n 2022 \\t 22 \\t 32 \\t 40 \\t 50 \\n 2023 \\t 27 \\t 38 \\t 45 \\t 55 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates food production trends from 2019 to 2023 across four categories: fruit, vegetable, livestock, and grain. It shows fluctuations in million tonnes over the years: fruit production ranged from 18 to 27, vegetable from 27 to 38, livestock from 37 to 45, and grain from 47 to 55. There is a notable increase in all categories from 2020 to 2023."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Transform the given data into three variables: y_values, data, x_values.\ny_values = ['Fruit Production (Million Tonnes)', 'Vegetable Production (Million Tonnes)', 'Livestock Production (Million Tonnes)', 'Grain Production (Million Tonnes)']\nx_values = ['2019', '2020', '2021', '2022', '2023']\ndata = np.array([[20, 30, 40, 50], [18, 27, 37, 47], [25, 35, 42, 52], [22, 32, 40, 50], [27, 38, 45, 55]])\n\n#create figure before plotting\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(1, 1, 1, projection='3d')\n\n#iterate over y_values to plot each column of data\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    # Plot the data with the type of 3D bar chart\n    ax.bar3d(xs, ys, np.zeros(len(x_values)), 0.2, 0.2, data[:,i], shade=True, color='b', alpha=0.7)\n\n# Set the dimensions of the bars (width, depth, colors, alpha, etc) differently on x-dimension or y-dimension to ensure they are distinct and non-overlapping\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticklabels(x_values)\nax.set_yticklabels(y_values, ha='left')\nax.set_title('Food Production Trends - 2019 to 2023')\nax.set_xlabel('Year')\n#rotate the X-axis labels for better readability\nplt.xticks(rotation=20)\n# Drawing techniques such as background grids can be used\nax.grid(True)\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n# The image must be saved as ./3D/png/1_202312251044.png\nplt.savefig('./3D/png/1_202312251044.png')\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "How many million tonnes of livestock production were there in 2021?",
            "output": "42"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_10",
        "img": "./3D-Bar/png/3D-Bar_10.png",
        "topic": "Social Media and the Web",
        "title": " Popular Social Media Platforms User Trends - 2015 to 2019",
        "csv": "Year \\t Facebook Users (million) \\t Twitter Users (million) \\t Instagram Users (million) \\t Youtube Users (million) \\n 2015 \\t 1.5 \\t 0.3 \\t 0.8 \\t 1.5 \\n 2016 \\t 2.0 \\t 0.4 \\t 1.2 \\t 2.0 \\n 2017 \\t 2.5 \\t 0.5 \\t 1.6 \\t 2.5 \\n 2018 \\t 3.0 \\t 0.6 \\t 2.0 \\t 3.0 \\n 2019 \\t 3.5 \\t 0.7 \\t 2.4 \\t 3.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates the growth trends in millions of users for four popular social media platforms\u2014Facebook, Twitter, Instagram, and YouTube\u2014from 2015 to 2019. In 2015, Facebook and YouTube each had 1.5 million users, with Instagram at 0.8 million and Twitter at 0.3 million. By 2019, Facebook and YouTube users increased to 3.5 million, while Instagram surged to 2.4 million and Twitter to 0.7 million. The data indicates a steady annual increase in users for all platforms over the five-year period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ny_values = [\"Facebook Users (million)\", \"Twitter Users (million)\", \"Instagram Users (million)\", \"Youtube Users (million)\"]\ndata = np.array([[1.5, 0.3, 0.8, 1.5],\n                 [2.0, 0.4, 1.2, 2.0],\n                 [2.5, 0.5, 1.6, 2.5],\n                 [3.0, 0.6, 2.0, 3.0],\n                 [3.5, 0.7, 2.4, 3.5]])\nx_values = [\"2015\", \"2016\", \"2017\", \"2018\", \"2019\"]\n\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(111, projection='3d')\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    ax.bar3d(xs,ys,[0] * len(xs), dx=0.3, dy=0.3, dz=data[:,i], color=plt.cm.Set1(i/len(y_values)), alpha=0.8)\n\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values, rotation=45)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values)\nax.set_title(\"Popular Social Media Platforms User Trends - 2015 to 2019\")\nplt.tight_layout()\nplt.savefig('./3D/png/4_202312270030.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many million Youtube users were there in 2019?",
            "output": "3.5"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_22",
        "img": "./3D-Bar/png/3D-Bar_22.png",
        "topic": "Environment and Sustainability",
        "title": " Environmental Sustainability in Energy Production - 2019 to 2023",
        "csv": "Year \\t Renewable Energy Production (Million KWh) \\t Coal Production (Million KWh) \\t Natural Gas Production (Million KWh) \\t Oil Production (Million KWh) \\n 2019 \\t 2400 \\t 3000 \\t 4000 \\t 2500 \\n 2020 \\t 2600 \\t 2700 \\t 4500 \\t 2400 \\n 2021 \\t 2700 \\t 2500 \\t 4700 \\t 2300 \\n 2022 \\t 3000 \\t 2600 \\t 4800 \\t 2200 \\n 2023 \\t 3200 \\t 2700 \\t 5000 \\t 2100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates the energy production from different sources over a period of five years from 2019 to 2023. It shows the production in million kWh for renewable energy, coal, natural gas, and oil. In 2019, renewable energy production was 2400 million kWh, coal was 3000, natural gas was 4000, and oil was 2500. By 2023, renewable energy production increased to 3200 million kWh, while coal production had a slight decrease and then an increase to 2700 million kWh, natural gas production climbed steadily to 5000 million kWh, and oil production consistently decreased to 2100 million kWh."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Transform the given data into three variables\ny_values = ['Renewable Energy Production (Million KWh)', 'Coal Production (Million KWh)', 'Natural Gas Production (Million KWh)', 'Oil Production (Million KWh)']\nx_values = ['2019', '2020', '2021', '2022', '2023']\ndata = np.array([[2400, 2600, 2700, 3000, 3200],\n                 [3000, 2700, 2500, 2600, 2700],\n                 [4000, 4500, 4700, 4800, 5000],\n                 [2500, 2400, 2300, 2200, 2100]])\n\n# Create figure before plotting\nfig = plt.figure(figsize=(15, 8))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i]*len(x_values)\n    ax.bar3d(xs, ys, [0]*len(x_values), 1, 1, data[i,:], shade=True, alpha=0.5, color=plt.cm.tab20(i))\n\n# Set the dimensions of the bars\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticklabels(x_values, rotation='vertical')\nax.set_yticklabels(y_values, ha='left', rotation=-15)\n\n# Set title for the figure\nax.set_title(\"Environmental Sustainability in Energy Production - 2019 to 2023\")\n\n# Resize the image before savefig\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./3D/png/2_202312270030.png')\n\n# Clear the current image state\nplt.close()"
        },
        "QA": {
            "input": "How much Renewable Energy was produced in 2023?",
            "output": "3200 Million KWh"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_23",
        "img": "./3D-Bar/png/3D-Bar_23.png",
        "topic": "Food and Beverage Industry",
        "title": " Food and Beverage Industry Sales Analysis",
        "csv": "Item \\t Quantity Sold (Units) \\t Gross Revenue ($) \\t Average Price ($) \\n Beverages \\t 10000 \\t 20000 \\t 20200 \\n Dairy \\t 7500 \\t 15000 \\t 20000 \\n Fruits \\t 6500 \\t 13000 \\t 20400 \\n Vegetables \\t 9000 \\t 18000 \\t 25000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates sales data in the food and beverage industry, focusing on items, quantity sold, gross revenue, and average price. Beverages lead with 10,000 units sold and $20,000 in gross revenue at an average price of $2.00. Dairy follows with 7,500 units, $15,000 revenue, and a $2.00 average price. Fruits have 6,500 units sold for $13,000, averaging $2.00 per unit. Vegetables are at 9,000 units with $18,000 revenue, their average price being the highest at $2.00."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# transform the given data into three variables: y_values, data, x_values\ny_values = ['Quantity Sold (Units)', 'Gross Revenue ($)', 'Average Price ($)']\ndata = np.array([[10000, 20000, 20200], [7500, 15000, 20000], [6500, 13000, 20400], [9000, 18000, 25000]])\nx_values = ['Beverages', 'Dairy', 'Fruits', 'Vegetables']\n\n# create figure\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111, projection='3d')\n\n# plot data\nfor i in range(len(y_values)):\n    xpos = np.arange(len(x_values))\n    ypos = [i] * len(x_values)\n    dx = 0.5\n    dy = 0.5\n    dz = data[:, i]\n\n    if i == 0:\n        ax.bar3d(xpos, ypos, np.zeros(len(x_values)), dx, dy, dz, color='#ff8100', alpha=1, edgecolor='black')\n    elif i == 1:\n        ax.bar3d(xpos, ypos, np.zeros(len(x_values)), dx, dy, dz, color='#3d9bff', alpha=1, edgecolor='black')\n    elif i == 2:\n        ax.bar3d(xpos, ypos, np.zeros(len(x_values)), dx, dy, dz, color='#4cd137', alpha=1, edgecolor='black')\n\n# set labels\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticklabels(x_values, rotation=20)\nax.set_yticklabels(y_values)\nax.set_title('Food and Beverage Industry Sales Analysis')\nplt.tight_layout()\n\n# save figure\nplt.savefig('./3D/png/5_202312251036.png')\n\n# clear current image state\nplt.cla()"
        },
        "QA": {
            "input": "Which item has the highest Average Price ($)?",
            "output": "Vegetables"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_18",
        "img": "./3D-Bar/png/3D-Bar_18.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare Trends - 2019 to 2023",
        "csv": "Year \\t Number of Vaccines Administered (Millions) \\t Number of Check-Ups (Millions) \\t Number of Hospitalizations (Millions) \\n 2019 \\t 110 \\t 120 \\t 130 \\n 2020 \\t 120 \\t 130 \\t 125 \\n 2021 \\t 115 \\t 125 \\t 125 \\n 2022 \\t 125 \\t 140 \\t 140 \\n 2023 \\t 135 \\t 155 \\t 145 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates healthcare trends from 2019 to 2023, tracking the number of vaccines administered, check-ups, and hospitalizations, all in millions. In 2019, 110 million vaccines were administered, with 120 million check-ups and 130 million hospitalizations. The year 2020 saw a slight increase in all categories. In 2021, vaccines slightly decreased to 115 million, with stable check-ups and hospitalizations. Both 2022 and 2023 experienced upward trends with higher figures: 125 million vaccines in 2022 and 135 million in 2023; check-ups rose to 140 million in 2022 and 155 million in 2023; hospitalizations also increased to 140 million in 2022 and 145 million in 2023."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# transform the data into three variables\ny_values = ['Number of Vaccines Administered (Millions)', 'Number of Check-Ups (Millions)', 'Number of Hospitalizations (Millions)']\nx_values = ['2019', '2020', '2021', '2022', '2023']\ndata = np.array([[110, 120, 130], [120, 130, 125], [115, 125, 125], [125, 140, 140], [135, 155, 145]])\n\n# create the figure\nfig = plt.figure(figsize=(10, 5))\nax = fig.add_subplot(111, projection='3d')\n\n# plot the data\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    ax.bar3d(xs, ys, [0] * len(x_values), 0.5, 0.5, data[:, i], shade=True, color='green', alpha=0.5)\n\n# set the x-axis and y-axis labels\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values, rotation=90, wrap=True)\n\n# add grids\nax.grid(True)\n\n# set the title\nax.set_title('Healthcare Trends - 2019 to 2023')\n\n# automatically resize the image\nplt.tight_layout()\n\n# save the image\nplt.savefig('./3D/png/18_202312251036.png')\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many check-ups were there in 2023?",
            "output": "155 million"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_39",
        "img": "./3D-Bar/png/3D-Bar_39.png",
        "topic": "Retail and E-commerce",
        "title": " Retail and E-commerce Shopping Trends - 2020 to 2024",
        "csv": "Year \\t Online Shopping Volume (Units) \\t Store Shopping Volume (Units) \\t Total Shopping Volume (Units) \\n 2020 \\t 20 \\t 50 \\t 70 \\n 2021 \\t 25 \\t 60 \\t 85 \\n 2022 \\t 30 \\t 70 \\t 100 \\n 2023 \\t 35 \\t 80 \\t 115 \\n 2024 \\t 40 \\t 90 \\t 130 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D-Bar chart illustrates the retail and e-commerce shopping trends from 2020 to 2024. It shows the annual volume of online and store shopping in units, as well as the total shopping volume. In 2020, online shopping made up 20 units, store shopping 50 units, with a total of 70 units. By 2024, the online shopping volume is projected to double to 40 units, and store shopping to reach 90 units, leading to a total volume of 130 units. Each year demonstrates a growth in shopping volumes across both online and store shopping mediums."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ny_values = [\"Online Shopping Volume (Units)\", \"Store Shopping Volume (Units)\", \"Total Shopping Volume (Units)\"]\ndata = np.array([[20,50,70], [25,60,85], [30,70,100], [35,80,115], [40,90,130]])\nx_values = [\"2020\", \"2021\", \"2022\", \"2023\", \"2024\"]\n\nfig = plt.figure(figsize=(10,7))\nax = fig.add_subplot(111,projection='3d')\n\nfor i in range(len(y_values)):\n    xpos = np.arange(len(x_values))\n    ypos = [i]*len(x_values)\n    dx = np.ones(len(x_values))\n    dy = np.ones(len(x_values))\n    dz = data[:,i]\n\n    ax.bar3d(xpos, ypos, np.zeros(len(x_values)), dx, dy, dz, color='#86D2F4', alpha=1)\n\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticklabels(x_values)\nax.set_yticklabels(y_values, ha='left')\nax.set_title(\"Retail and E-commerce Shopping Trends - 2020 to 2024\")\n\nplt.tight_layout()\nplt.savefig(\"./3D/png/7_202312251044.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the Total Shopping Volume in 2022?",
            "output": "100"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_2",
        "img": "./3D-Bar/png/3D-Bar_2.png",
        "topic": "Sports and Entertainment",
        "title": " Sports and Entertainment Attendance Trends - 2019 to 2023",
        "csv": "Year \\t Football Attendance (Millions) \\t Cinema Attendance (Millions) \\t Music Concert Attendance (Millions) \\n 2019 \\t 4.2 \\t 3.6 \\t 2.5 \\n 2020 \\t 1.6 \\t 2.8 \\t 2.1 \\n 2021 \\t 2.2 \\t 3.4 \\t 2.3 \\n 2022 \\t 3.7 \\t 3.9 \\t 2.7 \\n 2023 \\t 4.3 \\t 4.2 \\t 3.2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates attendance trends in sports and entertainment categories from 2019 to 2023. In 2019, football had 4.2 million attendees, cinema had 3.6 million, and music concerts had 2.5 million. The year 2020 saw a drop, with football at 1.6 million, cinema at 2.8 million, and concerts at 2.1 million. Attendance rose in 2021 with football reaching 2.2 million, cinema 3.4 million, and concerts 2.3 million. In 2022, further increases are noticeable with 3.7 million for football, 3.9 million for cinema, and 2.7 million for concerts. By 2023, football attendance jumped to 4.3 million, cinema to 4.2 million, and concerts to 3.2 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d') \n\ny_values = ['Football Attendance (Millions)','Cinema Attendance (Millions)','Music Concert Attendance (Millions)']\nx_values = ['2019', '2020', '2021', '2022', '2023']\ndata = np.array([[4.2, 3.6, 2.5], [1.6, 2.8, 2.1], [2.2, 3.4, 2.3], [3.7, 3.9, 2.7], [4.3, 4.2, 3.2]])\n\nfor i in range(len(y_values)):\n    xpos = np.arange(len(x_values))\n    ypos = [i] * len(x_values)\n    zpos = np.zeros(len(x_values))\n    dx = np.ones(len(x_values))\n    dy = np.ones(len(x_values))\n    dz = data[:, i]\n    ax.bar3d(xpos, ypos, zpos, dx, dy, dz, color='#00ceaa', alpha=0.5)\n    \nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values, rotation=30)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values)\nax.set_zlabel('Attendance (Millions)')\n\nplt.title('Sports and Entertainment Attendance Trends - 2019 to 2023')\nplt.tight_layout()\nplt.savefig('./3D/png/13_202312251036.png')\nplt.clf()"
        },
        "QA": {
            "input": "What was the Music Concert Attendance in the year 2020?",
            "output": "2.1 million"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_1",
        "img": "./3D-Bar/png/3D-Bar_1.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing and Production Analysis by Region",
        "csv": "Region \\t Number of Employees \\t Average Working Hours \\t Total Productivity (Units) \\n North \\t 1000 \\t 4000 \\t 4500 \\n South \\t 900 \\t 4500 \\t 4000 \\n East \\t 1200 \\t 3500 \\t 4200 \\n West \\t 1100 \\t 3800 \\t 4600 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This 3D bar chart represents a manufacturing and production analysis by region, showcasing the number of employees, average working hours, and total productivity (measured in units). The North region employs 1000 workers, averages 4000 working hours, and produces 4500 units. The South has 900 employees, 4500 working hours, and a productivity of 4000 units. In the East, there are 1200 employees, 3500 average working hours, and the productivity stands at 4200 units. Lastly, the West region has 1100 employees, 3800 working hours, and the highest productivity at 4600 units."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ny_values = [\"Number of Employees\", \"Average Working Hours\", \"Total Productivity (Units)\"]\nx_values = [\"North\", \"South\", \"East\", \"West\"]\ndata = np.array([[1000, 4000, 4500], \n              [900, 4500, 4000], \n              [1200, 3500, 4200], \n              [1100, 3800, 4600]])\n\nfig = plt.figure(figsize=(8, 5))\nax = fig.add_subplot(111, projection='3d')\n\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    ax.bar3d(xs, ys, [0] * len(x_values), 0.5, 0.5, data[:, i], shade=True, alpha=0.7, label=y_values[i])\n\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticklabels(x_values)\nax.set_yticklabels(y_values, ha='left')\nax.set_title('Manufacturing and Production Analysis by Region')\nplt.tight_layout()\nplt.savefig('./3D/png/17_202312251036.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which region has the highest average working hours?",
            "output": "South"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_15",
        "img": "./3D-Bar/png/3D-Bar_15.png",
        "topic": "Environment and Sustainability",
        "title": " Global Energy Production and Emissions Trends - 2015 to 2019",
        "csv": "Year \\t Renewable Energy Production (kWh) \\t Non-Renewable Energy Production (kWh) \\t CO2 Emissions (tones) \\n 2015 \\t 4500 \\t 6000 \\t 7000 \\n 2016 \\t 4800 \\t 6300 \\t 7300 \\n 2017 \\t 5100 \\t 6700 \\t 7600 \\n 2018 \\t 5400 \\t 7000 \\t 8000 \\n 2019 \\t 5600 \\t 7400 \\t 8700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates global energy production and emission trends over five years, from 2015 to 2019. For each year, the chart shows the amount of energy produced from renewable sources, the production of energy through non-renewable sources, and the total CO2 emissions measured in tones. Starting in 2015, there are 4500 kWh of renewable energy production, 6000 kWh from non-renewable, and 7000 tones of CO2 emissions. Each year, there is a progressive increase across all three parameters, with renewable energy reaching 5600 kWh, non-renewable hitting 7400 kWh, and CO2 emissions at 8700 tones by 2019."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Transform the given data into three variables: y_values, data, x_values.\ny_values = [\"Renewable Energy Production (kWh)\", \"Non-Renewable Energy Production (kWh)\", \"CO2 Emissions (tones)\"]\ndata = np.array([[4500,4800,5100,5400,5600],\n                 [6000,6300,6700,7000,7400],\n                 [7000,7300,7600,8000,8700]])\nx_values = [\"2015\",\"2016\",\"2017\",\"2018\",\"2019\"]\n\n# Plot the data with the type of 3D bar chart.\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\n\n# Iterate over y_values to plot each column of data, i.e., data[:, i].\nfor i in range(len(y_values)):\n    # For the plotting of each column in data, use np.arange(len(x_labels)) and [i]*len(x_labels) to represent the X, Y coordinates for each group of data to avoid overlapping of different data groups, and use ax.bar3d to draw a set of bars, in which ensure that each group of bars is correctly aligned on x-axis.\n    xpos = np.arange(len(x_values))\n    ypos = [i]*len(x_values)\n    dx = 0.5\n    dy = 0.5\n    dz = data[i,:]\n\n    # Set the dimensions of the bars (width, depth, colors, alpha, etc) differently on x-dimension or y-dimension to ensure they are distinct and non-overlapping, providing clear visualization.\n    ax.bar3d(xpos, ypos, np.zeros(len(x_values)), dx, dy, dz, color='#0fc2f2', alpha=0.7)\n\n# Rotate the X-axis labels for better readability.\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values, rotation=45)\n\n# Y-axis does not need title.\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values)\n\n# Drawing techniques such as background grids can be used.\nax.grid(b=True, which='major', axis='both', linestyle='--', color='gray', alpha=0.3)\n\n# The title of the figure should be Global Energy Production and Emissions Trends - 2015 to 2019.\nax.set_title(\"Global Energy Production and Emissions Trends - 2015 to 2019\")\n\n# Automatically resize the image by tight_layout() before savefig().\nplt.tight_layout()\n\n# The image must be saved as ./3D/png/11_202312251044.png.\nfig.savefig('./3D/png/11_202312251044.png')\n\n# Clear the current image state at the end of the code.\nplt.close()"
        },
        "QA": {
            "input": "In which year was the difference between non-renewable and renewable energy production the largest?",
            "output": "2019"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_9",
        "img": "./3D-Bar/png/3D-Bar_9.png",
        "topic": "Agriculture and Food Production",
        "title": " Regional Analysis of Food Production in Agriculture",
        "csv": "Region \\t Vegetable Production (Tonnes) \\t Fruit Production (Tonnes) \\t Grain Production (Tonnes) \\t Poultry Production (Tonnes) \\n North \\t 4500 \\t 6000 \\t 7000 \\t 8000 \\n South \\t 3000 \\t 5000 \\t 8000 \\t 9500 \\n East \\t 4500 \\t 4800 \\t 6500 \\t 7500 \\n West \\t 5500 \\t 6600 \\t 7500 \\t 8500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart represents regional agriculture production in tonnes across four categories: vegetables, fruits, grains, and poultry. The North region produces 4500 tonnes of vegetables, 6000 of fruits, 7000 of grains, and 8000 of poultry. The South generates 3000 tonnes of vegetables, 5000 of fruits, 8000 of grains, and the highest poultry at 9500 tonnes. The East has balanced production with 4500 tonnes of vegetables, 4800 of fruits, 6500 of grains, and 7500 of poultry. Finally, the West leads in vegetable and fruit production with 5500 and 6600 tonnes respectively, along with 7500 of grains and 8500 of poultry."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ny_values = ['Vegetable Production (Tonnes)', 'Fruit Production (Tonnes)', 'Grain Production (Tonnes)', 'Poultry Production (Tonnes)']\ndata = np.array([[4500, 6000, 7000, 8000],\n                 [3000, 5000, 8000, 9500],\n                 [4500, 4800, 6500, 7500],\n                 [5500, 6600, 7500, 8500]])\nx_values = ['North', 'South', 'East', 'West']\n\nfig = plt.figure(figsize=(12,8))\nax = fig.add_subplot(projection='3d')\n\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    ax.bar3d(xs, ys, [0] * len(x_values), 0.5, 0.5, data[:, i], alpha=0.5, color='#FFA500')\n\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticklabels(x_values)\nax.set_yticklabels(y_values, ha='left', rotation=-15)\nax.set_title('Regional Analysis of Food Production in Agriculture')\n\nplt.tight_layout()\nplt.savefig(r'./3D/png/4_202312251044.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which region has the highest production of poultry?",
            "output": "West"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_31",
        "img": "./3D-Bar/png/3D-Bar_31.png",
        "topic": "Environment and Sustainability",
        "title": " Climate Change and Renewable Energy Trends - 2019 to 2023",
        "csv": "Year \\t Average Temperature (\u00b0C) \\t Carbon Emissions (Gigatonnes of CO2) \\t Renewable Energy Production (Hundred Kilowatt-hours) \\n 2019 \\t 15 \\t 38 \\t 30 \\n 2020 \\t 17 \\t 36 \\t 32 \\n 2021 \\t 16 \\t 37 \\t 34 \\n 2022 \\t 18 \\t 35 \\t 36 \\n 2023 \\t 17 \\t 38 \\t 38 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart visualizes climate and energy trends from 2019 to 2023. It shows average temperatures ranging from 15\u00b0C to 18\u00b0C, with fluctuations across the years. Carbon emissions vary between 35 and 38 gigatonnes of CO2, while renewable energy production increases steadily from 30 to 38 hundred kilowatt-hours over the five-year span."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ny_values = ['Average Temperature (\u00b0C)', 'Carbon Emissions (Gigatonnes of CO2)', 'Renewable Energy Production (Hundred Kilowatt-hours)']\ndata = np.array([[15,38,30],[17,36,32],[16,37,34],[18,35,36],[17,38,38]])\nx_values = ['2019','2020','2021','2022','2023']\n\nfig = plt.figure(figsize=(12,8))\nax = fig.add_subplot(111, projection='3d')\n\nfor i in range(len(y_values)):\n    xpos = np.arange(len(x_values))\n    ypos = [i] * len(x_values)\n    ax.bar3d(xpos, ypos, np.zeros(len(x_values)), 1, 1, data[:,i], alpha=0.5, color='red')\n\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values,rotation=45)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values, ha='left', rotation=-20)\nplt.title('Climate Change and Renewable Energy Trends - 2019 to 2023')\nplt.tight_layout()\nplt.savefig('./3D/png/7_202312270030.png')\nplt.cla()"
        },
        "QA": {
            "input": "By how much did the renewable energy production increase from 2019 to 2023?",
            "output": "8 hundred kilowatt-hours"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_47",
        "img": "./3D-Bar/png/3D-Bar_47.png",
        "topic": "Manufacturing and Production",
        "title": " Global Manufacturing and Production Trends - 2019 to 2023",
        "csv": "Year \\t Automotive Production (Units) \\t Electronics Production (Units) \\t Textiles Production (Units) \\t Pharmaceuticals Production (Units) \\n 2019 \\t 25000 \\t 30000 \\t 45000 \\t 50000 \\n 2020 \\t 30000 \\t 35000 \\t 40000 \\t 51000 \\n 2021 \\t 35000 \\t 40000 \\t 42000 \\t 52000 \\n 2022 \\t 40000 \\t 45000 \\t 46000 \\t 53000 \\n 2023 \\t 45000 \\t 50000 \\t 50000 \\t 54000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates the global manufacturing and production trends across four industries from 2019 to 2023. The data tracks production units in automotive, electronics, textiles, and pharmaceuticals. In 2019, production stood at 25,000 units for automotive, 30,000 for electronics, 45,000 for textiles, and 50,000 for pharmaceuticals. By 2023, automotive production increased to 45,000 units, electronics to 50,000, textiles to 50,000, and pharmaceuticals to 54,000 units. Each year denotes a consistent growth across all sectors, with the pharmaceuticals industry showing a steady, albeit smaller, increase compared to others."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ny_values = [\"Automotive Production (Units)\", \"Electronics Production (Units)\", \"Textiles Production (Units)\", \"Pharmaceuticals Production (Units)\"]\nx_values = [\"2019\", \"2020\", \"2021\", \"2022\", \"2023\"]\ndata = np.array([[25000, 30000, 45000, 50000],\n                  [30000, 35000, 40000, 51000],\n                  [35000, 40000, 42000, 52000],\n                  [40000, 45000, 46000, 53000],\n                  [45000, 50000, 50000, 54000]])\n\nfig = plt.figure(figsize=(10, 7))\nax = fig.add_subplot(111, projection='3d')\n\nfor i in range(len(y_values)):\n    ax.bar3d(np.arange(len(x_values)), [i]*len(x_values), np.zeros(len(x_values)), 0.5, 0.5, data[:,i], cmap='Blues')\n\nax.set_title('Global Manufacturing and Production Trends - 2019 to 2023')\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values, rotation=30)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values, ha='left')\n\nax.grid(True)\nplt.tight_layout()\nplt.savefig('./3D/png/15_202312251036.png')\nplt.clf()"
        },
        "QA": {
            "input": "In which year did Textiles Production reach 50,000 units?",
            "output": "2023"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_24",
        "img": "./3D-Bar/png/3D-Bar_24.png",
        "topic": "Social Media and the Web",
        "title": " Global Social Media and Web Landscape - 2019",
        "csv": "Country \\t Number of Social Network Users (Millions) \\t Time Spent on Social Media (Minutes/Day) \\t Number of Websites (Millions) \\n USA \\t 245 \\t 140 \\t 100 \\n India \\t 500 \\t 90 \\t 50 \\n China \\t 750 \\t 80 \\t 200 \\n UK \\t 60 \\t 120 \\t 120 \\n Australia \\t 23 \\t 100 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates statistics from 2019 regarding the social media and web landscape in five countries. It shows the number of social network users in millions, the average time spent on social media per day in minutes, and the number of websites in millions. The USA has 245 million social network users spending 140 minutes daily, with 100 million websites. India has 500 million users with 90 daily minutes and 50 million websites. China leads with 750 million users, 80 minutes daily, and 200 million websites. The UK has 60 million users, 120 minutes, and 120 million websites, while Australia has 23 million users, spending 100 minutes daily and has 80 million websites."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Transform the given data \ny_values = [\"Number of Social Network Users (Millions)\", \"Time Spent on Social Media (Minutes/Day)\", \"Number of Websites (Millions)\"]\ndata = np.array([[245, 140, 100], [500, 90, 50], [750, 80, 200], [60, 120, 120], [23, 100, 80]]) \nx_values = [\"USA\", \"India\", \"China\", \"UK\", \"Australia\"]\n\n# Create figure\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i]*len(x_values)\n    ax.bar3d(xs, ys, np.zeros(len(x_values)), 0.5, 0.5, data[:,i], color=plt.cm.viridis(i/len(y_values)), alpha=0.8)\n\n# Set labels\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values, rotation=45, ha='right')\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values, ha='left')\n\n# Set title\nax.set_title(\"Global Social Media and Web Landscape - 2019\")\n\n# Set background grids\nax.grid(b=True, which='major', axis='both')\n# Rotate the X-axis labels for better readability\nax.view_init(elev=30, azim=-20)\n\n# Resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig(\"./3D/png/7_202312251036.png\")\n\n# Clear the current image state\nplt.cla()\nplt.clf()\nplt.close()"
        },
        "QA": {
            "input": "Which country spends more time on social media per day, India or the UK?",
            "output": "UK"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_28",
        "img": "./3D-Bar/png/3D-Bar_28.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare Capacity Overview by Region",
        "csv": "Category \\t No. of Hospital Beds \\t No. of Primary Care Providers \\t No. of Specialists \\n Urban \\t 500 \\t 400 \\t 200 \\n Suburban \\t 300 \\t 200 \\t 100 \\n Rural \\t 200 \\t 100 \\t 50 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates the healthcare capacity overview by region, delineating the number of hospital beds, primary care providers, and specialists in urban, suburban, and rural areas. In urban regions, there are 500 hospital beds, 400 primary care providers, and 200 specialists. Suburban areas have 300 hospital beds, 200 primary care providers, and 100 specialists. Lastly, rural areas are shown with 200 hospital beds, 100 primary care providers, and 50 specialists."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Transform the given data into three variables: y_values, data, x_values\ny_values = [\"No. of Hospital Beds\",\"No. of Primary Care Providers\",\"No. of Specialists\"]\ndata = np.array([[500,400,200],\n                 [300,200,100],\n                 [200,100,50]])\nx_values = [\"Urban\", \"Suburban\", \"Rural\"]\n\n# Create figure before plotting\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\n# Iterate over y_values to plot each column of data\nfor i in range(len(y_values)):\n    xpos = np.arange(len(x_values))\n    ypos = [i] * len(x_values)\n    dx = np.ones(len(x_values))\n    dy = np.ones(len(x_values))\n    dz = data[:,i]\n    ax.bar3d(xpos, ypos, np.zeros(len(x_values)), dx, dy, dz, alpha=0.6, color='#00ceaa')\n\n# Set the dimension of the bars to provide clear visualization\nax.set_xlim3d(0, 3)\nax.set_ylim3d(0, 3)\nax.set_zlim3d(0, 600)\n\n# Rotate the X-axis labels for better readability\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values, rotation=45)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values)\n\n# Set grids in the background\nax.grid(True)\n\n# Set title\nax.set_title(\"Healthcare Capacity Overview by Regio\")\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# Save the image\nplt.savefig(\"./3D/png/10_202312251000.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many hospital beds are there in rural areas?",
            "output": "200"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_35",
        "img": "./3D-Bar/png/3D-Bar_35.png",
        "topic": "Arts and Culture",
        "title": " Arts and Culture Facilities Around the World",
        "csv": "Country \\t Number of Museums \\t Number of Art Galleries \\t Number of Theatres \\t Number of Concert Halls \\n USA \\t 500 \\t 750 \\t 200 \\t 150 \\n Canada \\t 400 \\t 600 \\t 150 \\t 100 \\n UK \\t 350 \\t 500 \\t 100 \\t 75 \\n Germany \\t 450 \\t 650 \\t 125 \\t 90 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates the quantity of arts and culture facilities in four countries. It shows the USA has 500 museums, 750 art galleries, 200 theatres, and 150 concert halls. Canada follows with 400 museums, 600 art galleries, 150 theatres, and 100 concert halls. The UK is presented with 350 museums, 500 art galleries, 100 theatres, and 75 concert halls. Germany rounds out the list with 450 museums, 650 art galleries, 125 theatres, and 90 concert halls."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Transform the given data into three variables: y_values, data, x_values. \ny_values = ['Number of Museums', 'Number of Art Galleries', 'Number of Theatres', 'Number of Concert Halls']\ndata = np.array([[500, 750, 200, 150],\n                 [400, 600, 150, 100],\n                 [350, 500, 100, 75],\n                 [450, 650, 125, 90]])\nx_values = ['USA', 'Canada', 'UK', 'Germany']\n\n# Create figure before plotting, i.e., add_subplot() follows plt.figure().\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111, projection='3d')\n\n# Iterate over y_values to plot each column of data, i.e., data[:, i]. \nfor i in range(len(y_values)):\n    # For the plotting of each column in data, use np.arange(len(x_labels)) and [i]*len(x_labels) to represent the X, Y coordinates for each group of data to avoid overlapping of different data groups, and use ax.bar3d to draw a set of bars, in which ensure that each group of bars is correctly aligned on x-axis. \n    xpos = np.arange(len(x_values))\n    ypos = [i] * len(x_values)\n    dx = 0.4\n    dy = 0.4\n    # Set the dimensions of the bars (width, depth, colors, alpha, etc) differently on x-dimension or y-dimension to ensure they are distinct and non-overlapping, providing clear visualization.\n    dz = data[:, i]\n    ax.bar3d(xpos, ypos, np.zeros(len(x_values)), dx, dy, dz, color='#00ceaa')\n\n# Rotate the X-axis labels for better readability.\nax.set_xticks(xpos)\nax.set_xticklabels(x_values, rotation=30)\n\n# Y-axis does not need title.\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values)\n\n# The title of the figure should be Arts and Culture Facilities Around the World.\nax.set_title('Arts and Culture Facilities Around the World')\n\n# Automatically resize the image by tight_layout() before savefig().\nplt.tight_layout()\n\n# The image must be saved as ./3D/png/3_202312251000.png.\nplt.savefig('./3D/png/3_202312251000.png')\n\n# Clear the current image state at the end of the code.\nplt.clf()"
        },
        "QA": {
            "input": "How many art galleries are there in Germany?",
            "output": "650"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_30",
        "img": "./3D-Bar/png/3D-Bar_30.png",
        "topic": "Arts and Culture",
        "title": " Arts and Culture Participation Trends - 2019 to 2023",
        "csv": "Year \\t Painting \\t Sculpture \\t Photography \\t Music \\n 2019 \\t 1200 \\t 500 \\t 700 \\t 500 \\n 2020 \\t 1000 \\t 550 \\t 650 \\t 550 \\n 2021 \\t 1100 \\t 600 \\t 750 \\t 570 \\n 2022 \\t 1050 \\t 700 \\t 780 \\t 620 \\n 2023 \\t 1200 \\t 1680 \\t 790 \\t 640 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates trends in the participation in various arts and cultural activities from 2019 to 2023. It includes data for painting, sculpture, photography, and music. In 2019, there were 1200 events for painting, 500 for sculpture, 700 for photography, and 500 for music. By 2023, the figures shifted to 1200 for painting, a significant increase to 1680 for sculpture, 790 for photography, and 640 for music, showing changes over the years. The data points for each year and category are displayed in a visually distinct manner on the chart."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ny_values = ['Painting', 'Sculpture', 'Photography', 'Music']\ndata = np.array([[1200, 500, 700, 500],\n [1000, 550, 650, 550],\n [1100, 600, 750, 570],\n [1050, 700, 780, 620],\n [1200, 1680, 790, 640]])\nx_values = ['2019', '2020', '2021', '2022', '2023']\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, projection='3d')\ncolors = ['b', 'g', 'r', 'c']\n\nfor i in range(len(y_values)):\n    x_pos = np.arange(len(x_values))\n    y_pos = [i]*len(x_values)\n    ax.bar3d(x_pos, y_pos, np.zeros(len(x_values)), 1, 1, data[:,i], color=colors[i], alpha=0.5)\n\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values)\nax.set_title('Arts and Culture Participation Trends - 2019 to 2023')\nax.view_init(elev=30., azim=60)\nplt.tight_layout()\nplt.savefig('./3D/png/23_202312251036.png')\nplt.clf()"
        },
        "QA": {
            "input": "What was the highest expenditure category in the year 2023?",
            "output": "Sculpture"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_49",
        "img": "./3D-Bar/png/3D-Bar_49.png",
        "topic": "Energy and Utilities",
        "title": " Energy Production and Generation Trends - 2019 to 2023",
        "csv": "Year \\t Coal Production (Million Tonnes) \\t Oil Production (Million Barrels) \\t Nuclear Energy Generation (GWh) \\t Renewable Energy Generation (GWh) \\n 2019 \\t 2600 \\t 3000 \\t 3000 \\t 4000 \\n 2020 \\t 2580 \\t 3200 \\t 3200 \\t 4300 \\n 2021 \\t 2650 \\t 3500 \\t 3500 \\t 4700 \\n 2022 \\t 2630 \\t 3700 \\t 3700 \\t 5000 \\n 2023 \\t 2650 \\t 4000 \\t 4000 \\t 5400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates trends in energy production and generation from 2019 to 2023. It compares coal production (million tonnes), oil production (million barrels), nuclear energy generation (GWh), and renewable energy generation (GWh). In 2019, coal production was at 2600 million tonnes, oil at 3000 million barrels, nuclear energy at 3000 GWh, and renewables at 4000 GWh. By 2023, coal production remains stable at 2650, while oil increases to 4000 million barrels, nuclear energy climbs to 4000 GWh, and renewable generation reaches 5400 GWh."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ny_values = ['Coal Production (Million Tonnes)', 'Oil Production (Million Barrels)', 'Nuclear Energy Generation (GWh)', 'Renewable Energy Generation (GWh)']\ndata = np.array([[2600, 3000, 3000, 4000], \n                 [2580, 3200, 3200, 4300],\n                 [2650, 3500, 3500, 4700],\n                 [2630, 3700, 3700, 5000],\n                 [2650, 4000, 4000, 5400]])\nx_values = ['2019', '2020', '2021', '2022', '2023']\n\nfig = plt.figure(figsize=(15, 8))\nax = fig.add_subplot(111, projection='3d')\nX = np.arange(len(x_values))\nfor i in range(len(y_values)):\n    ax.bar3d(X, [i]*len(x_values), np.zeros(len(x_values)), 1, 1, data[:, i], shade=True, color='r')\n\nax.set_xticks(X)\nax.set_yticks(range(len(y_values)))\nax.set_xticklabels(x_values, rotation=45)\nax.set_yticklabels(y_values, ha='left')\nax.set_title('Energy Production and Generation Trends - 2019 to 2023')\nplt.tight_layout()\nplt.savefig('./3D/png/20_202312270030.png')\nplt.clf()"
        },
        "QA": {
            "input": "What was the renewable energy generation in 2022?",
            "output": "5000 GWh"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_20",
        "img": "./3D-Bar/png/3D-Bar_20.png",
        "topic": "Sports and Entertainment",
        "title": " Sports and Entertainment Industry Growth - Viewership, Events and Revenue",
        "csv": "Type \\t Viewership (Million) \\t Events \\t Revenue ($ Billion) \\n Outdoor Sports \\t 200 \\t 400 \\t 400 \\n Indoor Sports \\t 400 \\t 600 \\t 700 \\n Music Concerts \\t 250 \\t 300 \\t 550 \\n TV Shows \\t 500 \\t 650 \\t 900 \\n Movies \\t 350 \\t 450 \\t 650 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates the growth indicators for the Sports and Entertainment Industry, including viewership in millions, number of events, and revenue in billion dollars. Outdoor Sports show a viewership of 200 million, with 400 events, and revenue at $400 billion. Indoor Sports have a viewership of 400 million, 600 events, and reach $700 billion in revenue. Music Concerts attract 250 million viewers, hold 300 events, and accumulate $550 billion. TV Shows lead with 500 million viewership, 650 events, and $900 billion in revenue, while Movies garner 350 million viewers, host 450 events, and generate $650 billion in revenue."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ny_values = ['Viewership (Million)', 'Events', 'Revenue ($ Billion)']\ndata = np.array([[200, 400, 400], [400, 600, 700], [250, 300, 550], [500, 650, 900], [350, 450, 650]])\nx_values = ['Outdoor Sports', 'Indoor Sports', 'Music Concerts', 'TV Shows', 'Movies']\n\nfig = plt.figure(figsize=(9, 6))\nax = fig.add_subplot(111, projection='3d')\n\nfor i in range(len(y_values)):\n    ys = [i] * len(x_values)\n    xs = np.arange(len(x_values))\n    ax.bar3d(xs, ys, np.zeros(len(x_values)), 0.7, 0.7, data[:, i], alpha=0.4, color='green', linewidth=0)\n\nax.set_xticks(xs)\nax.set_xticklabels(x_values, rotation=45)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values, ha='left')\nax.set_title('Sports and Entertainment Industry Growth - Viewership, Events and Revenue')\n\nplt.tight_layout()\nplt.savefig('./3D/png/23_202312251044.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which type has the least viewership: Outdoor Sports, Indoor Sports, Music Concerts, TV Shows, or Movies?",
            "output": "Outdoor Sports"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_26",
        "img": "./3D-Bar/png/3D-Bar_26.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing and Production Analysis by Plant",
        "csv": "Plant \\t Machinery Output (Units) \\t Raw Material Usage (Kilograms) \\t Finished Products (Units) \\t Labour Cost ($000) \\n Plant A \\t 50 \\t 50 \\t 55 \\t 80 \\n Plant B \\t 30 \\t 30 \\t 33 \\t 60 \\n Plant C \\t 40 \\t 40 \\t 44 \\t 70 \\n Plant D \\t 45 \\t 45 \\t 40 \\t 75 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates a manufacturing and production analysis of four plants. Plant A shows a machinery output of 50 units, uses 50 kilograms of raw material, produces 55 finished units, and has a labor cost of $80,000. Plant B's output is 30 units, with the same amount of raw material used, resulting in 33 finished units, at a labor cost of $60,000. Plant C has a machinery output and raw material usage of 40 kilograms each, produces 44 finished units, and incurs $70,000 in labor costs. Plant D outputs 45 units, uses 45 kilograms of raw material, produces 40 finished units, and has a labor cost of $75,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# transform the given data into three variables: y_values, data, x_values\ndata = np.array([[50, 50, 55, 80], \n                 [30, 30, 33, 60], \n                 [40, 40, 44, 70], \n                 [45, 45, 40, 75]])\ny_values = [\"Machinery Output (Units)\", \"Raw Material Usage (Kilograms)\", \"Finished Products (Units)\", \"Labour Cost ($000)\"]\nx_values = [\"Plant A\", \"Plant B\", \"Plant C\", \"Plant D\"]\n\n# Create figure before plotting\nfig = plt.figure()\nax = fig.add_subplot(1, 1, 1, projection=\"3d\") \n\n# Plot the data with the type of 3D bar chart\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    ax.bar3d(xs, ys, np.zeros(len(x_values)), 1, 1, data[:, i], shade=True, alpha=0.5)\n\n# Set the dimensions of the bars (width, depth, colors, alpha, etc)\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticklabels(x_values)\nax.set_yticklabels(y_values)\nax.tick_params(axis='x', rotation=45)\nax.set_xlabel(\"Plant\")\n\n# Drawing techniques such as background grids can be used\nax.grid(linestyle='--')\n\n# Automatically resize the image by tight_layout() before savefig()\nfig.tight_layout()\n\n# The title of the figure should be  Manufacturing and Production Analysis by Plant\nax.set_title(\"Manufacturing and Production Analysis by Plant\")\n\n# Save the image\nfig.savefig(r\"./3D/png/21_202312270030.png\")\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "Which plant has the least difference between Machinery Output and Finished Products?",
            "output": "Plant D"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_6",
        "img": "./3D-Bar/png/3D-Bar_6.png",
        "topic": "Transportation and Logistics",
        "title": " Comparing Transportation Modes for Logistics - Capacity, Speed, and Cost",
        "csv": "Mode \\t Capacity (People) \\t Speed (km/hr) \\t Cost ($) \\n Air \\t 200 \\t 800 \\t 1500 \\n Train \\t 2000 \\t 200 \\t 600 \\n Bus \\t 50 \\t 100 \\t 100 \\n Truck \\t 10 \\t 80 \\t 200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart presents data comparing various transportation modes in terms of capacity, speed, and cost. Air transport can carry 200 people, travels at 800 km/hr, and costs $1500. Trains have a capacity of 2000 people, travel at 200 km/hr, and cost $600. Buses can accommodate 50 people, have a speed of 100 km/hr, and cost $100. Trucks carry the least with capacity for 10 people, moving at 80 km/hr, and have a cost of $200."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ny_values = ['Capacity (People)', 'Speed (km/hr)', 'Cost ($)']\nx_values = ['Air', 'Train', 'Bus', 'Truck']\ndata = np.array([[200, 800, 1500], [2000, 200, 600], [50, 100, 100], [10, 80, 200]])\n\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot(111, projection='3d')\n\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    ax.bar3d(xs, ys, np.zeros(len(x_values)), 0.5, 0.5, data[:, i], shade=True, alpha=0.8)\n\nax.set_title('Comparing Transportation Modes for Logistics - Capacity, Speed, and Cost')\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticklabels(x_values, rotation=15)\nax.set_yticklabels(y_values)\nfig.tight_layout()\n\nplt.savefig('./3D/png/6_202312251044.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which mode of transport has the highest capacity?",
            "output": "Train"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_44",
        "img": "./3D-Bar/png/3D-Bar_44.png",
        "topic": "Technology and the Internet",
        "title": " Digital Transformation - Internet, Smartphone, Computer, and Tablet Market Shares 2017-2021",
        "csv": "Year \\t Internet Users (Millions) \\t Smartphone Market Share (%) \\t Computer Market Share (%) \\t Tablet Market Share (%) \\n 2017 \\t 3 \\t 50 \\t 30 \\t 10 \\n 2018 \\t 4.2 \\t 60 \\t 25 \\t 15 \\n 2019 \\t 6 \\t 70 \\t 20 \\t 20 \\n 2020 \\t 7.5 \\t 80 \\t 15 \\t 25 \\n 2021 \\t 9 \\t 90 \\t 10 \\t 30 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates the growth in internet users (in millions) and changes in market share percentages for smartphones, computers, and tablets from 2017 to 2021. In 2017, there were 3 million internet users with smartphones at a 50% market share, computers at 30%, and tablets at 10%. Each subsequent year shows an increase in internet users, peaking at 9 million in 2021. Smartphone market share also rose annually, reaching 90% in 2021, while computer and tablet market shares adjusted inversely, with computer share decreasing to 10% and tablet share growing to 30% by 2021."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Transform the given data into three variables: y_values, data, x_values.\ny_values = ['Internet Users (Millions)','Smartphone Market Share (%)','Computer Market Share (%)','Tablet Market Share (%)']\ndata = np.array([[3,50,30,10],[4.2,60,25,15],[6,70,20,20],[7.5,80,15,25],[9,90,10,30]])\nx_values = ['2017', '2018', '2019', '2020', '2021']\n\n# Plot the data with the type of 3D bar chart.\nfig = plt.figure(figsize=(15, 8))\nax = fig.add_subplot(111, projection='3d')\n\n# Iterate over y_values to plot each column of data.\nfor i in range(len(y_values)):\n    x_pos = np.arange(len(x_values))\n    y_pos = [i]*len(x_values)\n    x_data = data[:,i]\n    ax.bar3d(x_pos, y_pos, np.zeros(len(x_values)), 0.2, 0.2, x_data,\n             shade = True, color = 'b', alpha = 0.5)\n\n# Set the dimensions of the bars (width, depth, colors, alpha, etc) differently on x-dimension or y-dimension to ensure they are distinct and non-overlapping.\nax.w_xaxis.set_ticklabels(x_values)\nax.w_yaxis.set_ticklabels(y_values)\nax.set_xlabel('Years')\nax.set_title('Digital Transformation - Internet, Smartphone, Computer, and Tablet Market Shares 2017-2021')\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticks(np.arange(len(x_values)))\nax.view_init(30, -135)\nplt.tight_layout()\nplt.savefig('./3D/png/12_202312251044.png')\nplt.clf()"
        },
        "QA": {
            "input": "By how many millions did the number of internet users increase from 2018 to 2021?",
            "output": "4.8 million"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_16",
        "img": "./3D-Bar/png/3D-Bar_16.png",
        "topic": "Education and Academics",
        "title": " Academic Performance of Students - Kindergarten to 5th Grade",
        "csv": "Grade \\t Average Test Score (%) \\t Average Homework Score (%) \\t Average Class Participation Score (%) \\t Average Final Grade (%) \\n Kindergarten \\t 85 \\t 90 \\t 95 \\t 90 \\n 1st Grade \\t 80 \\t 85 \\t 90 \\t 85 \\n 2nd Grade \\t 75 \\t 80 \\t 85 \\t 80 \\n 3rd Grade \\t 70 \\t 75 \\t 80 \\t 75 \\n 4th Grade \\t 65 \\t 70 \\t 75 \\t 70 \\n 5th Grade \\t 60 \\t 65 \\t 70 \\t 65 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart visualizes the academic performance of students from Kindergarten to 5th Grade. It shows average scores for test performance, homework, class participation, and final grades. Starting with Kindergarten, the average scores show a decreasing trend by grade: from 85% in tests, 90% in homework, and 95% in participation, leading to a 90% final grade, down to 5th Grade with 60% test scores, 65% homework scores, 70% participation, and a 65% final grade."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables\ny_values = ['Average Test Score (%)', 'Average Homework Score (%)', 'Average Class Participation Score (%)', 'Average Final Grade (%)']\ndata = np.array([[85, 90, 95, 90], [80, 85, 90, 85], [75, 80, 85, 80], [70, 75, 80, 75], [65, 70, 75, 70], [60, 65, 70, 65]])\nx_values = ['Kindergarten', '1st Grade', '2nd Grade', '3rd Grade', '4th Grade', '5th Grade']\n\n# Create figure before plotting\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(111, projection='3d')\n\n# Iterate over y_values to plot each column of data\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    bottom = np.zeros(len(x_values))\n    width = 0.7\n    depth = 0.5\n    # Plot the data with the type of 3D bar chart\n    ax.bar3d(xs, ys, bottom, width, depth, data[:, i], shade=True, color=plt.cm.Spectral(i/len(y_values)))\n\n# Set the dimensions of the bars\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values, rotation=90)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values, ha='left')\n\n# Set the title of the figure\nax.set_title('Academic Performance of Students - Kindergarten to 5th Grade')\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./3D/png/22_202312270030.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "What is the Average Final Grade (%) for the 2nd Grade?",
            "output": "80"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_42",
        "img": "./3D-Bar/png/3D-Bar_42.png",
        "topic": "Real Estate and Housing Market",
        "title": " Real Estate Market Analysis by Region",
        "csv": "Region \\t Sales Volume (Units) \\t Average Price ($000) \\t Number of Listings \\n North \\t 500 \\t 250 \\t 700 \\n South \\t 600 \\t 300 \\t 800 \\n East \\t 450 \\t 200 \\t 650 \\n West \\t 550 \\t 275 \\t 750 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates a real estate market analysis by region, detailing sales volume (in units), average prices (in $000), and the number of listings. The North region shows a sales volume of 500 units, an average price of $250,000, and 700 listings. The South displays higher figures with 600 units sold, an average price of $300,000, and 800 listings. In the East, there are 450 units sold, the average price is the lowest at $200,000, and there are 650 listings. The West reports sales of 550 units, an average price of $275,000, and 750 listings."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ny_values = ['Sales Volume (Units)', 'Average Price ($000)', 'Number of Listings']\ndata = np.array([[500, 250, 700],\n                 [600, 300, 800],\n                 [450, 200, 650],\n                 [550, 275, 750]])\nx_values = ['North', 'South', 'East', 'West']\n\nfig = plt.figure(figsize=(8, 5))\nax = fig.add_subplot(111, projection='3d')\n\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    ax.bar3d(xs, ys, np.zeros(len(x_values)), 0.5, 0.5, data[:, i], shade=True)\n\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values)\nax.set_title('Real Estate Market Analysis by Region')\nax.tick_params(labelsize=8)\nax.view_init(elev=25, azim=-25)\n\nplt.tight_layout()\nplt.savefig('./3D/png/12.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many units were sold in the East region?",
            "output": "450"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_36",
        "img": "./3D-Bar/png/3D-Bar_36.png",
        "topic": "Sports and Entertainment",
        "title": " Sports and Entertainment Industry Revenue Trends - 2019 to 2023",
        "csv": "Year \\t Sports Revenue ($ Billion) \\t Entertainment Revenue ($ Billion) \\t Number of Sports Events \\t Number of Entertainment Events \\n 2019 \\t 60 \\t 90 \\t 100 \\t 200 \\n 2020 \\t 65 \\t 95 \\t 110 \\t 205 \\n 2021 \\t 70 \\t 100 \\t 120 \\t 210 \\n 2022 \\t 75 \\t 105 \\t 230 \\t 215 \\n 2023 \\t 80 \\t 110 \\t 140 \\t 220 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates the trends in sports and entertainment industry revenues along with the number of events from 2019 to 2023. In 2019, sports revenue was $60 billion and entertainment revenue was $90 billion, with 100 sports events and 200 entertainment events. By 2023, sports revenue increased to $80 billion, and entertainment revenue reached $110 billion, with 140 sports events and 220 entertainment events, showcasing a clear growth over the five-year period. The year 2022 marked a significant increase in the number of sports events to 230."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Transform the given data\ny_values = ['Sports Revenue ($ Billion)', 'Entertainment Revenue ($ Billion)', 'Number of Sports Events', 'Number of Entertainment Events']\nx_values = ['2019', '2020', '2021', '2022', '2023']\ndata = np.array([[60, 90, 100, 200], [65, 95, 110, 205], [70, 100, 120, 210], [75, 105, 230, 215], [80, 110, 140, 220]])\n\n# Create figure\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot(111, projection='3d')\n\n# Plotting the data\nfor i in range(len(y_values)):\n    xpos = np.arange(len(x_values))\n    ypos = [i]*len(x_values)\n    zpos = np.zeros(len(x_values))\n    dx = 0.5 * np.ones(len(x_values))\n    dy = 0.4 * np.ones(len(x_values))\n    dz = data[:, i]\n\n    ax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=plt.cm.jet(i/len(y_values)))\n\n# Customizing axis labels\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values, rotation=90, fontsize=10)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values, fontsize=10)\n\n# Setting title and adjusting view\nax.set_title('Sports and Entertainment Industry Revenue Trends - 2019 to 2023', fontsize=16)\nax.view_init(30, -35)\n\n# Drawing techniques such as background grids can be used\nax.grid(True)\n\n# Rotate the X-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# Save image\nplt.savefig('./3D/png/15.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage increase in sports revenue from 2019 to 2023?",
            "output": "33%"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_34",
        "img": "./3D-Bar/png/3D-Bar_34.png",
        "topic": "Transportation and Logistics",
        "title": " Transportation and Logistics Profitability Analysis",
        "csv": "Mode \\t Passengers (Million) \\t Revenue ($ Billion) \\t Distance (Miles) \\n Air \\t 1.8 \\t 22 \\t 25 \\n Rail \\t 3 \\t 25 \\t 6.5 \\n Road \\t 3.5 \\t 4.5 \\t 45 \\n Water \\t 2 \\t 15 \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates a Transportation and Logistics Profitability Analysis across four modes of transport: Air, Rail, Road, and Water. Air transport shows 1.8 million passengers, generating $22 billion in revenue over 25 miles. Rail transport has 3 million passengers with $25 billion revenue at 6.5 miles. Road transport is used by 3.5 million passengers, earning $4.5 billion over 45 miles. Finally, Water transport accommodates 2 million passengers and generates $15 billion in revenue across 10 miles."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the transportation and logistics profitability analysis\ny_values = [\"Passengers (Million)\", \"Revenue ($ Billion)\", \"Distance (Miles)\"]\ndata = np.array([[1.8, 22, 25], [3, 25, 6.5], [3.5, 4.5, 4.5], [2, 15, 10]])\nx_values = [\"Air\", \"Rail\", \"Road\", \"Water\"]\n\n# Create figure\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\n\n# Plotting the data\nfor i in range(len(y_values)):\n    ax.bar3d(np.arange(len(x_values)), [i]*len(x_values), np.zeros(len(x_values)), \n             0.8, 0.4, data[:, i], color=plt.cm.jet(i/len(y_values)), alpha=0.6)\n\n# Customizing axis labels\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values, rotation=20, fontsize=10)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values, fontsize=10)\n\n# Setting title\nax.set_title(\"Transportation and Logistics Profitability Analysis\", fontsize=16)\n\n# Adjusting layout and saving figure\nplt.tight_layout()\n\n# Save the image\nplt.savefig(\"./3D/png/12_202312251000.png\")\n\n# Clear the current image state \nplt.clf()"
        },
        "QA": {
            "input": "How much greater is the revenue from rail compared to water transportation?",
            "output": "$10 billion"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_19",
        "img": "./3D-Bar/png/3D-Bar_19.png",
        "topic": "Science and Engineering",
        "title": " Science and Engineering Workforce Trends",
        "csv": "Field \\t Number of Scientists \\t Number of Engineers \\t Number of Graduates \\n Physics \\t 200 \\t 400 \\t 1000 \\n Chemistry \\t 175 \\t 325 \\t 875 \\n Biology \\t 150 \\t 300 \\t 750 \\n Mathematics \\t 125 \\t 275 \\t 625 \\n Computer Science \\t 100 \\t 250 \\t 500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This 3D bar chart illustrates various fields' workforce trends, highlighting the number of scientists, engineers, and graduates. In physics, there are 200 scientists, 400 engineers, and 1,000 graduates. Chemistry showcases 175 scientists, 325 engineers, and 875 graduates, while biology accounts for 150 scientists, 300 engineers, and 750 graduates. In mathematics, there are 125 scientists, 275 engineers, and 625 graduates, and computer science has 100 scientists, 250 engineers, and 500 graduates."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ny_values=['Number of Scientists', 'Number of Engineers', 'Number of Graduates']\nx_values=['Physics', 'Chemistry', 'Biology', 'Mathematics', 'Computer Science']\ndata=np.array([[200,400,1000],[175,325,875],[150,300,750],[125,275,625],[100,250,500]]).T\n\nfig = plt.figure(figsize=(7,6)) \nax = fig.add_subplot(111, projection='3d') \n\nx_data, y_data = np.meshgrid(np.arange(len(x_values)), np.arange(len(y_values))) \nx_data = x_data.flatten() \ny_data = y_data.flatten() \nz_data = data.flatten() \n\nax.bar3d(x_data, y_data, np.zeros(len(z_data)), 1, 1, z_data, shade=True, alpha=0.9) \n\nax.set_xticks(np.arange(len(x_values))) \nax.set_xticklabels(x_values,rotation=20) \nax.set_yticks(np.arange(len(y_values))) \nax.set_yticklabels(y_values, ha='left')\nax.set_title('Science and Engineering Workforce Trends')\n\nfig.tight_layout()\nplt.savefig('./3D/png/19.png')\nplt.show()\nplt.clf()"
        },
        "QA": {
            "input": "Which field has the smallest difference between the number of scientists and the number of engineers?",
            "output": "Mathematics"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_14",
        "img": "./3D-Bar/png/3D-Bar_14.png",
        "topic": "Environment and Sustainability",
        "title": " Environmental Sustainability Comparison Across Countries",
        "csv": "Country \\t CO2 Emission (MtCO2e) \\t Renewable Energy Production (TWh) \\t Energy Efficiency (MtCO2e/GDP) \\t Water Usage (billion cubic meters) \\n China \\t 9700 \\t 3000 \\t 900 \\t 800 \\n USA \\t 5100 \\t 2000 \\t 600 \\t 400 \\n India \\t 3900 \\t 1000 \\t 400 \\t 200 \\n Russia \\t 2600 \\t 3000 \\t 500 \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This 3D bar chart illustrates a comparison of environmental sustainability aspects across four countries. It showcases data points for CO2 emissions (in MtCO2e), renewable energy production (in TWh), energy efficiency (as MtCO2e/GDP), and water usage (in billion cubic meters). China leads in CO2 emissions at 9700 MtCO2e and has high renewable energy production of 3000 TWh, with significant water usage at 800 billion cubic meters. The USA follows with 5100 MtCO2e in emissions and 2000 TWh of renewable energy. India has lower figures in all categories, whereas Russia matches China\u2019s renewable energy production but with lower emissions and water usage."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ny_values = ['CO2 Emission (MtCO2e)', 'Renewable Energy Production (TWh)', 'Energy Efficiency (MtCO2e/GDP)', 'Water Usage (billion cubic meters)']\ndata = np.array([[9700, 3000, 900, 800],\n                [5100, 2000, 600, 400],\n                [3900, 1000, 400, 200],\n                [2600, 3000, 500, 100]])\nx_values = ['China', 'USA', 'India', 'Russia']\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, projection='3d')\nax.set_title('Environmental Sustainability Comparison Across Countries')\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    ax.bar3d(xs, ys, np.zeros(len(x_values)), 0.5, 0.5, data[:, i], shade=True, color='orange')\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticklabels(x_values)\nax.set_yticklabels(y_values)\nax.tick_params(axis='x', rotation=45)\nax.grid(True)\nplt.tight_layout()\nplt.savefig('./3D/png/9.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest energy efficiency as measured in MtCO2e/GDP?",
            "output": "China"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_3",
        "img": "./3D-Bar/png/3D-Bar_3.png",
        "topic": "Social Sciences and Humanities",
        "title": " Socio-economic Indicators Comparison Across Countries",
        "csv": "Country \\t GDP per Capita (K USD) \\t Life Expectancy (Years) \\t Unemployment Rate (%) \\n USA \\t 63 \\t 78.1 \\t 37 \\n Canada \\t 50 \\t 81.9 \\t 77 \\n UK \\t 45 \\t 81.5 \\t 39 \\n Australia \\t 60 \\t 82.5 \\t 52 \\n New Zealand \\t 45 \\t 82.0 \\t 42 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates socio-economic indicators across five countries, showing GDP per capita in thousands of USD, life expectancy in years, and unemployment rate as a percentage. The USA features a GDP per capita of 63K USD, life expectancy at 78.1 years, and an unemployment rate of 37%. Canada has a 50K USD GDP per capita, life expectancy at 81.9 years, and an unemployment rate of 77%. The UK's figures are 45K USD GDP per capita, 81.5 years life expectancy, and a 39% unemployment rate. Australia shows a 60K USD GDP per capita, 82.5 years life expectancy, and a 52% unemployment rate, whereas New Zealand has a 45K USD GDP per capita, 82 years life expectancy, and a 42% unemployment rate."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Transform data to variables\ny_values = [\"GDP per Capita (K USD)\", \"Life Expectancy (Years)\", \"Unemployment Rate (%)\"]\ndata = np.array([[63, 78.1, 37], [50, 81.9, 77], [45, 81.5, 39], [60, 82.5, 52], [45, 82.0, 42]])\nx_values = [\"USA\", \"Canada\", \"UK\", \"Australia\", \"New Zealand\"]\n\n# Create figure\nfig = plt.figure(figsize=(9, 5))\nax = fig.add_subplot(111, projection='3d')\n\n# Set X, Y coordinates\nX = np.arange(len(x_values))\nY = np.arange(len(y_values))\nX, Y = np.meshgrid(X, Y)\n\n# Plot 3D bar chart\nfor i in range(len(y_values)):\n    ax.bar3d(X[i], Y[i], np.zeros_like(data[:, i]), 1, 1, data[:, i], alpha=0.5, shade=True, color='lightblue')\n\n# Set X-axis labels\nx_range = np.arange(len(x_values))\nax.set_xticks(x_range)\nax.set_xticklabels(x_values, rotation=45)\n\n# Set Y-axis labels\ny_range = np.arange(len(y_values))\nax.set_yticks(y_range)\nax.set_yticklabels(y_values)\n# Rotate the X-axis labels for better readability\nax.view_init(elev=30, azim=20)\n# Set figure title\nax.set_title(\"Socio-economic Indicators Comparison Across Countries\")\n\n# Set size\nplt.tight_layout()\n\n# Save figure\nplt.savefig('./3D/png/11.png')\n\n# Clear image\nplt.clf()"
        },
        "QA": {
            "input": "Which country has the highest unemployment rate according to the data?",
            "output": "Canada"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_38",
        "img": "./3D-Bar/png/3D-Bar_38.png",
        "topic": "Food and Beverage Industry",
        "title": " Food and Beverage Consumption in Different Establishments",
        "csv": "Restaurant \\t Alcoholic Beverages (Litres) \\t Non-Alcoholic Beverages (Litres) \\t Food (Kilograms) \\n Fast Food \\t 400 \\t 600 \\t 1000 \\n Fine Dining \\t 200 \\t 500 \\t 800 \\n Cafe \\t 300 \\t 550 \\t 750 \\n Catering \\t 450 \\t 620 \\t 900 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This 3D bar chart illustrates the consumption of food and beverages across various types of dining establishments. Fast Food restaurants consume 400 litres of alcoholic beverages, 600 litres of non-alcoholic beverages, and 1000 kilograms of food. Fine Dining establishments consume 200 litres of alcohol, 500 litres of non-alcoholic beverages, and 800 kilograms of food. Cafes follow with 300 litres of alcoholic beverages, 550 litres of non-alcoholic beverages, and 750 kilograms of food. Lastly, Catering services show consumption of 450 litres of alcohol, 620 litres of non-alcoholic drinks, and 900 kilograms of food."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ny_values = ['Alcoholic Beverages (Litres)', 'Non-Alcoholic Beverages (Litres)', 'Food (Kilograms)']\ndata = np.array([[400, 600, 1000], [200, 500, 800], [300, 550, 750], [450, 620, 900]])\nx_values = ['Fast Food', 'Fine Dining', 'Cafe', 'Catering']\n\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(1, 1, 1, projection='3d')\n\nfor i in range(len(y_values)):\n    ax.bar3d(x=np.arange(len(x_values)), \n             y=[i]*len(x_values), \n             z=0, \n             dx=0.5, \n             dy=0.2, \n             dz=data[:, i], \n             color='#00a8f3')\n\nax.set_title('Food and Beverage Consumption in Different Establishments')\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values, rotation=30)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values, ha='left')\n\nplt.tight_layout()\nplt.savefig('./3D/png/19_202312270030.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which restaurant has the highest consumption of non-alcoholic beverages?",
            "output": "Catering"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_37",
        "img": "./3D-Bar/png/3D-Bar_37.png",
        "topic": "Arts and Culture",
        "title": " Cultural Landscape of Different Regions",
        "csv": "Region \\t Museums (No.) \\t Galleries (No.) \\t Theatres (No.) \\t Cultural Events (No.) \\n North \\t 20 \\t 30 \\t 15 \\t 40 \\n South \\t 25 \\t 35 \\t 25 \\t 50 \\n East \\t 15 \\t 20 \\t 10 \\t 30 \\n West \\t 30 \\t 40 \\t 20 \\t 45 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This 3D bar chart illustrates the cultural landscape of four regions, showcasing the quantity of museums, galleries, theatres, and cultural events each region hosts. The North region has 20 museums, 30 galleries, 15 theatres, and 40 cultural events. In the South region, there are 25 museums, 35 galleries, 25 theatres, and 50 cultural events. The East features 15 museums, 20 galleries, 10 theatres, and 30 cultural events. The West leads with 30 museums, 40 galleries, 20 theatres, and 45 cultural events."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ny_values = [\"Museums (No.)\", \"Galleries (No.)\", \"Theatres (No.)\", \"Cultural Events (No.)\"]\nx_values = [\"North\", \"South\", \"East\", \"West\"]\ndata = np.array([[20, 30, 15, 40], [25, 35, 25, 50], [15, 20, 10, 30], [30, 40, 20, 45]])\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, projection='3d')\n\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i]*len(x_values)\n    cs = ['b', 'g', 'r', 'c']\n    ax.bar3d(xs, ys, [0]*len(x_values), 0.5, 0.5, data[:, i], edgecolor = cs, color = cs)\n\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values)\nax.set_title(\"Cultural Landscape of Different Regions\")\nax.view_init(elev=20., azim=-35)\n\nplt.tight_layout()\nplt.savefig(\"./3D/png/1.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which region has the highest number of galleries?",
            "output": "West"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_11",
        "img": "./3D-Bar/png/3D-Bar_11.png",
        "topic": "Retail and E-commerce",
        "title": " Retail and E-commerce Market Trends - Regional Comparison",
        "csv": "Region \\t Online Retail Sales ($ Million) \\t Retail Store Sales ($ Million) \\t E-commerce Share \\n North \\t 400 \\t 500 \\t 600 \\n South \\t 500 \\t 750 \\t 500 \\n East \\t 600 \\t 800 \\t 600 \\n West \\t 550 \\t 650 \\t 450 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart presents a regional comparison of retail and e-commerce market trends, showing figures for online and in-store retail sales, along with e-commerce share. For the North region, online retail sales are $400 million, store sales are $500 million, and the e-commerce share stands at $600 million. The South shows $500 million in online sales, $750 million in store sales, and a $500 million e-commerce share. The East region has $600 million in online sales, $800 million in store sales, and a $600 million e-commerce share. Lastly, the West records $550 million in online sales, $650 million in store sales, and a $450 million e-commerce share."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#transform the given data into 3 variables\ny_values = [\"Online Retail Sales ($ Million)\", \"Retail Store Sales ($ Million)\", \"E-commerce Share\"]\nx_values = [\"North\", \"South\", \"East\", \"West\"]\ndata = np.array([[400, 500, 600], [500, 750, 500], [600, 800, 600], [550, 650, 450]])\n\n#plot the data\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d') \n\n#iterate over y_values to plot each column of data\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    zs = data[:,i]\n    ax.bar3d(xs, ys, np.zeros(len(x_values)), 0.2, 0.2, zs, shade=True, alpha=0.8, cmap='autumn')\n\n#dimensions of bars\nax.set_xlabel('Region')\nax.set_ylabel('Metric')\nax.set_zlabel('Value')\n\n#rotate x-axis labels for better readability\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values, rotation=45)\nax.set_yticks(np.arange(len(y_values)))\nax.set_yticklabels(y_values)\n\n#figure title\nplt.title('Retail and E-commerce Market Trends - Regional Compariso')\n\n#resize the image\nplt.tight_layout()\n\n#savefig\nplt.savefig('./3D/png/21_202312251044.png')\n\n#clear the current figure\nplt.clf()"
        },
        "QA": {
            "input": "What is the value of Online Retail Sales in the East region?",
            "output": "600 million"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_12",
        "img": "./3D-Bar/png/3D-Bar_12.png",
        "topic": "Transportation and Logistics",
        "title": " Transportation and Logistics Cost Analysis by Mode of Transport",
        "csv": "Mode of Transport \\t Freight Volume (Million Tonnes) \\t Passenger Volume (Millions) \\t Average Cost per Mile($) \\n Road \\t 2 \\t 1.2 \\t 0.3 \\n Rail \\t 1.5 \\t 0.8 \\t 0.4 \\n Air \\t 4 \\t 1.5 \\t 1.5 \\n Sea \\t 2.2 \\t 0.6 \\t 0.2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates a cost analysis of transportation and logistics by mode of transport. It showcases freight and passenger volumes alongside their respective average costs per mile. Road transport reports a freight volume of 2 million tonnes, a passenger volume of 1.2 million, and an average cost of $0.3 per mile. Rail transport shows a freight volume of 1.5 million tonnes, a passenger volume of 0.8 million, and an average cost of $0.4 per mile. Air transport has the highest figures with 4 million tonnes of freight, 1.5 million passengers, and an average cost of $1.5 per mile. Lastly, sea transport has 2.2 million tonnes in freight volume, 0.6 million passengers, and the lowest cost at $0.2 per mile."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# transform data into three variables\ny_values = [\"Freight Volume (Million Tonnes)\", \"Passenger Volume (Millions)\", \"Average Cost per Mile($)\"]\ndata = np.array([[2, 1.2, 0.3], [1.5, 0.8, 0.4], [4, 1.5, 1.5], [2.2, 0.6, 0.2]])\nx_values = [\"Road\", \"Rail\", \"Air\", \"Sea\"]\n \n# Create figure before plotting\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n \n# Plot the data with the type of 3D bar chart\nfor i in range(len(y_values)):\n    xs = np.arange(len(x_values))\n    ys = [i] * len(x_values)\n    ax.bar3d(xs, ys, np.zeros(len(x_values)), 0.8, 0.6, data[:,i], shade=True, color='b', alpha=0.8)\n \n# Set the dimensions of the bars (width, depth, colors, alpha, etc) differently on x-dimension or y-dimension to ensure they are distinct and non-overlapping\nax.set_xticks(np.arange(len(x_values)))\nax.set_yticks(np.arange(len(y_values)))\nax.set_xticklabels(x_values)\nax.set_yticklabels(y_values)\n \n# rotate the X-axis labels for better readability\nax.set_xticklabels(x_values, rotation=30)\n \n# Drawing techniques such as background grids can be used\nax.grid(linestyle='-', linewidth='0.5', color='grey')\n# Rotate the X-axis labels for better readability\nax.view_init(elev=30, azim=30)\n# Set the title of the figure\nax.set_title('Transportation and Logistics Cost Analysis by Mode of Transport')\n \n# Automatically resize the image by tight_layout() before savefig\nplt.tight_layout()\n \n# Save the figure\nplt.savefig('./3D/png/11_202312270030.png')\n \n# Clear the current image state at the end of the code\nplt.cla()"
        },
        "QA": {
            "input": "Which mode of transport has the smallest freight volume?",
            "output": "Rail"
        }
    },
    {
        "chart_type": "3D-Bar",
        "imgname": "3D-Bar_17",
        "img": "./3D-Bar/png/3D-Bar_17.png",
        "topic": "Education and Academics",
        "title": " Academic Performance by Grade Level - Average Scores",
        "csv": "Grade Level \\t Average Math Score \\t Average Reading Score \\t Average Writing Score \\n Grade 3 \\t 80 \\t 90 \\t 85 \\n Grade 4 \\t 85 \\t 95 \\t 90 \\n Grade 5 \\t 90 \\t 100 \\t 95 \\n Grade 6 \\t 95 \\t 105 \\t 100 \\n Grade 7 \\t 105 \\t 110 \\t 105 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The 3D bar chart illustrates the academic performance across various grade levels, highlighting their average math, reading, and writing scores. Grade 3 students have scores of 80 in math, 90 in reading, and 85 in writing. In Grade 4, scores increase to 85 in math, 95 in reading, and 90 in writing. Grade 5 students score 90, 100, and 95 in math, reading, and writing, respectively. For Grade 6, the scores are 95 in math, 105 in reading, and 100 in writing. Lastly, Grade 7 students show a further improvement with scores of 105 in math, 110 in reading, and 105 in writing."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \n\ny_values = ['Average Math Score', 'Average Reading Score', 'Average Writing Score']\nx_values = ['Grade 3', 'Grade 4', 'Grade 5', 'Grade 6', 'Grade 7'] \ndata = np.array([[80, 90, 85], [85, 95, 90], [90, 100, 95], [95, 105, 100], [105, 110, 105]])\n\nfig = plt.figure(figsize=(10, 8)) \nax = fig.add_subplot(111, projection='3d') \n\nfor i in range(len(y_values)): \n    xs = np.arange(len(x_values)) \n    ys = [i] * len(x_values)\n    ax.bar3d(xs, ys, np.zeros(len(xs)), 0.8, 0.5, data[:, i], color='b', alpha=0.7) \n\nax.set_xlabel('Grade Level') \nax.set_xticks(np.arange(len(x_values))) \nax.set_xticklabels(x_values, rotation=45)\nax.set_ylabel('Scores') \nax.set_yticks(np.arange(len(y_values))) \nax.set_yticklabels(y_values, rotation=-15, ha='left')\n\nplt.title('Academic Performance by Grade Level - Average Scores')\nplt.tight_layout() \nplt.savefig('./3D/png/22.png') \nplt.clf()"
        },
        "QA": {
            "input": "What is the difference between the average reading score and the average math score in Grade 6?",
            "output": "10 points"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_30",
        "img": "./box/png/box_30.png",
        "topic": "Healthcare and Health",
        "title": " Examination Time Distribution in Healthcare Checkups (2021)",
        "csv": "Health Checkup \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n General Checkup \\t 30 \\t 45 \\t 60 \\t 90 \\t 120 \\t [] \\n Eye Checkup \\t 15 \\t 20 \\t 30 \\t 45 \\t 60 \\t [120] \\n Blood Test \\t 10 \\t 15 \\t 20 \\t 30 \\t 45 \\t [60;90] \\n Dental Checkup \\t 20 \\t 30 \\t 45 \\t 60 \\t 90 \\t [120] \\n Cardiac Checkup \\t 30 \\t 45 \\t 60 \\t 75 \\t 90 \\t [120] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box-plot chart titled \"Examination Time Distribution in Healthcare Checkups (2021)\" reveals the spread and central tendency of time taken for different health checkups. For a general checkup, times range from a minimum of 30 minutes to a maximum of 120 minutes, with no outliers. An eye checkup has times ranging from 15 to 60 minutes with an outlier at 120 minutes. Blood tests range from 10 to 45 minutes and include outliers at 60 and 90 minutes. Dental checkups vary from 20 to 90 minutes, also with an outlier at 120 minutes. Finally, cardiac checkups take between 30 and 90 minutes, with a single outlier at 120 minutes."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data into two 2D lists\ndata = [[30, 45, 60, 90, 120],\n        [15, 20, 30, 45, 60],\n        [10, 15, 20, 30, 45],\n        [20, 30, 45, 60, 90],\n        [30, 45, 60, 75, 90]]\noutliers = [[], [120], [60, 90], [120], [120]]\n\n# Create figure before plotting\nfig = plt.figure(figsize=(6, 5))\n\n# Plot the data with the type of box plot\nax = fig.add_subplot()\nax.boxplot(data, whis=1.5)\n\n# Iterate through outlier list and plot outliers manually\nfor i, outlier in enumerate(outliers):\n    if outlier:\n        ax.plot(np.full(len(outlier), i+1), outlier, 'ro')\n\n# Drawing techniques such as background grids\nax.grid(True)\n\n# Adjust the label\nax.set_xticklabels(['General\\nCheckup', 'Eye\\nCheckup', 'Blood\\nTest', 'Dental\\nCheckup', 'Cardiac\\nCheckup'], rotation=45, wrap=True)\nax.set_ylabel('Duration (Minutes)')\n\n# Add title\nax.set_title('Examination Time Distribution in Healthcare Checkups (2021)')\n\n# Resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./box/png/25_202312251608.png')\n\n# Clear the figure\nplt.clf()"
        },
        "QA": {
            "input": "What is the median examination time for a Blood Test?",
            "output": "20 minutes"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_15",
        "img": "./box/png/box_15.png",
        "topic": "Sports and Entertainment",
        "title": " Entertainment Duration Distribution in 2020",
        "csv": "Entertainment Type \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Movies \\t 2 \\t 3 \\t 4 \\t 5 \\t 6 \\t [] \\n TV Series \\t 2.5 \\t 4 \\t 5.5 \\t 7 \\t 9 \\t [10] \\n Music \\t 1 \\t 2 \\t 3 \\t 4 \\t 5 \\t [6;7] \\n Online Games \\t 1.5 \\t 2.5 \\t 3.5 \\t 4.5 \\t 6 \\t [7.5;8.5] \\n Live Events \\t 3 \\t 4.5 \\t 6 \\t 7.5 \\t 9 \\t [2] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This box plot illustrates the duration distribution for various entertainment types in 2020. The data shows the minimum, first quartile (Q1), median, third quartile (Q3), and maximum values of entertainment duration, as well as outliers. For 'Movies', the range is from 2 to 6 hours without any outliers. 'TV Series' span from 2.5 to 9 hours, with an outlier at 10 hours. 'Music' durations range from 1 to 5 hours, including outliers at 6 and 7 hours. 'Online Games' have durations from 1.5 to 6 hours, with outliers at 7.5 and 8.5 hours. Lastly, 'Live Events' range from 3 to 9 hours, with an outlier at 2 hours."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport numpy as np\n\n# Restructure data into 2D lists\ndata = [[2, 3, 4, 5, 6], [2.5, 4, 5.5, 7, 9], [1, 2, 3, 4, 5], [1.5, 2.5, 3.5, 4.5, 6], [3, 4.5, 6, 7.5, 9]]\noutliers = [[], [10], [6, 7], [7.5, 8.5], [2]]\n\n# Plot the data\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\n\nax.set_title('Entertainment Duration Distribution in 2020')\nax.set_ylabel('Duration (Hours)')\n\nlabels = ['Movies', 'TV Series', 'Music', 'Online Games', 'Live Events']\nax.boxplot(data, whis=1.5, labels=labels)\n\n# Draw outliers\nfor i, outlier in enumerate(outliers):\n    if outlier:\n        ax.plot(np.full(len(outlier), i+1), outlier, 'r^')\n\n# Draw background grids\nax.grid(axis='y', alpha=0.75)\n\n# Resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./box/png/28_202312270030.png')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many outliers does Online Games have in its distribution?",
            "output": "2"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_49",
        "img": "./box/png/box_49.png",
        "topic": "Human Resources and Employee Management",
        "title": " Working Hours Distribution of Different Job Titles in 2020",
        "csv": "Job Title \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Manager \\t 30 \\t 40 \\t 45 \\t 50 \\t 55 \\t [] \\n Engineer \\t 35 \\t 40 \\t 47 \\t 54 \\t 60 \\t [63] \\n Accountant \\t 25 \\t 32 \\t 38 \\t 42 \\t 48 \\t [52;58] \\n Analyst \\t 40 \\t 45 \\t 52 \\t 60 \\t 65 \\t [70] \\n Technician \\t 28 \\t 35 \\t 40 \\t 45 \\t 50 \\t [60] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart represents the distribution of working hours across different job titles in 2020. It shows the range from the minimum to the maximum working hours for Managers (30-55), Engineers (35-60), Accountants (25-48), Analysts (40-65), and Technicians (28-50). Outliers are marked for each job category, with none for Managers, one (63) for Engineers, two (52, 58) for Accountants, one (70) for Analysts, and one (60) for Technicians. The median working hours for Managers, Engineers, Accountants, Analysts, and Technicians are 45, 47, 38, 52, and 40, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure data into two 2D lists \ndata = [[30, 40, 45, 50, 55],\n        [35, 40, 47, 54, 60],\n        [25, 32, 38, 42, 48],\n        [40, 45, 52, 60, 65],\n        [28, 35, 40, 45, 50]]\noutliers = [[], [63], [52, 58], [70], [60]]\nline_labels = ['Manager', 'Engineer', 'Accountant', 'Analyst', 'Technician']\n# Create figure and plot\nfig, ax = plt.subplots(figsize=(8,6))\nax.boxplot(data, whis=1.5)\n\n# Plot outliers\nfor i, outlier in enumerate(outliers):\n    if outlier:\n        ax.plot(np.full(len(outlier), i+1), outlier, 'o', color='#000000', markersize=4)\n\n# Draw background grid\nax.grid(axis='y', linestyle='--', alpha=0.6)\nax.set_xticklabels(line_labels)\n\n# Set y-axis label\nax.set_ylabel('Hours Worked (Weekly)')\n\n# Set figure title\nax.set_title('Working Hours Distribution of Different Job Titles in 2020')\n\n# Tight layout and save figure\nplt.tight_layout()\nplt.savefig('./box/png/21_202312251608.png')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference between Q3 and Q1 for the Accountant job title?",
            "output": "10 hours"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_12",
        "img": "./box/png/box_12.png",
        "topic": "Retail and E-commerce",
        "title": " Sales Revenue Distribution in Retail Stores (2020)",
        "csv": "Retail Store \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Store A \\t 30 \\t 90 \\t 150 \\t 210 \\t 300 \\t [] \\n Store B \\t 45 \\t 75 \\t 130 \\t 190 \\t 280 \\t [400] \\n Store C \\t 60 \\t 120 \\t 180 \\t 240 \\t 320 \\t [10;15] \\n Store D \\t 15 \\t 60 \\t 100 \\t 140 \\t 200 \\t [300] \\n Store E \\t 20 \\t 50 \\t 90 \\t 130 \\t 170 \\t [320] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart illustrates sales revenue distribution for five retail stores in 2020. Store A's revenue range shows a minimum of 30, first quartile (Q1) at 90, median at 150, third quartile (Q3) at 210, and maximum of 300, with no outliers. Store B has a minimum of 45, Q1 at 75, median at 130, Q3 at 190, and maximum at 280, with an outlier at 400. Store C's revenue details are a minimum of 60, Q1 at 120, median at 180, Q3 at 240, and maximum at 320, with outliers at 10 and 15. Store D has a minimum of 15, Q1 at 60, median at 100, Q3 at 140, maximum at 200, and an outlier at 300. Store E's range has a minimum of 20, Q1 at 50, median at 90, Q3 at 130, and a maximum of 170, with an outlier at 320."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#restructure data into two 2D lists\ndata_list1 = [[30,90,150,210,300], [45,75,130,190,280], [60,120,180,240,320], [15,60,100,140,200], [20,50,90,130,170]]\ndata_list2 = [[], [400], [10,15], [300], [320]]\nline_labels = ['Store A', 'Store B', 'Store C', 'Store D', 'Store E']\n#draw and save a chart\nplt.figure(figsize=(10,6)) #create figure\nax = plt.subplot() #add_subplot\nax.boxplot(data_list1, whis=1.5) #plot box plot\n\n#plot outliers\nfor i, outlier in enumerate(data_list2):\n    if len(outlier) > 0:\n        ax.plot(np.repeat(i + 1, len(outlier)), outlier, 'ro')\n\nax.grid(linestyle='dotted') #draw background grids\n\n#set title, x-axis and y-axis\nax.set_title('Sales Revenue Distribution in Retail Stores (2020)')\nax.set_xlabel('Retail Store')\nax.set_xticklabels(line_labels)\nax.set_ylabel('Sales Revenue (dollars)')\n\n#resize and save image\nplt.tight_layout()\nplt.savefig('./box/png/42_202312270030.png')\n\n#clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the median sales revenue for Store D?",
            "output": "$100"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_24",
        "img": "./box/png/box_24.png",
        "topic": "Transportation and Logistics",
        "title": " Delivery Time Distribution of Transportation and Logistics Services in 2021",
        "csv": "Delivery Service \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Delivery Company A \\t 10 \\t 30 \\t 45 \\t 60 \\t 75 \\t [] \\n Delivery Company B \\t 20 \\t 35 \\t 50 \\t 70 \\t 90 \\t [120;135] \\n Delivery Company C \\t 15 \\t 40 \\t 55 \\t 70 \\t 85 \\t [2;5] \\n Delivery Company D \\t 5 \\t 25 \\t 37 \\t 50 \\t 62 \\t [80] \\n Delivery Company E \\t 13 \\t 32 \\t 45 \\t 60 \\t 77 \\t [95] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart illustrates the delivery time distribution for five delivery companies in 2021. Delivery Company A has times ranging from a minimum of 10 minutes to a maximum of 75 minutes without outliers. Delivery Company B's times range from 20 to 90 minutes with outliers at 120 and 135 minutes. Delivery Company C ranges from 15 to 85 minutes with outliers at 2 and 5 minutes. Delivery Company D shows a range from 5 to 62 minutes with a single outlier at 80 minutes. Finally, Delivery Company E has times between 13 and 77 minutes with an outlier at 95 minutes."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport numpy as np\n\ndata = [[10,30,45,60,75],\n        [20,35,50,70,90],\n        [15,40,55,70,85],\n        [5,25,37,50,62],\n        [13,32,45,60,77]]\noutliers = [[],\n            [120,135],\n            [2,5],\n            [80],\n            [95]]\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot()\nax.boxplot(data, whis=1.5)\n\nfor i, outlier in enumerate(outliers):\n    if outlier:\n        ax.plot([i+1] * len(outlier), outlier, \"o\")\n\nax.set_title(\"Delivery Time Distribution of Transportation and Logistics Services in 2021\")\nax.set_xlabel(\"Delivery Service\")\nax.set_ylabel(\"Delivery Time (Minutes)\")\n\nlabels = [\"Delivery Company A\", \"Delivery Company B\", \"Delivery Company C\", \"Delivery Company D\", \"Delivery Company E\"]\nax.set_xticklabels(labels, rotation=45, ha=\"right\", wrap=True)\nax.grid(True)\n\nfig.tight_layout()\nfig.savefig(\"./box/png/25_202312270030.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which delivery company has the smallest median delivery time?",
            "output": "Delivery Company D"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_7",
        "img": "./box/png/box_7.png",
        "topic": "Retail and E-commerce",
        "title": " Product Price Distribution in Various Retail Stores (2021)",
        "csv": "Retail Store \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Department Store \\t 20 \\t 50 \\t 80 \\t 110 \\t 150 \\t [] \\n Shopping Mall \\t 15 \\t 40 \\t 65 \\t 90 \\t 120 \\t [200] \\n Grocery Store \\t 10 \\t 30 \\t 50 \\t 70 \\t 100 \\t [150;300] \\n Online Store \\t 5 \\t 25 \\t 45 \\t 65 \\t 85 \\t [95;110] \\n Discount Store \\t 25 \\t 60 \\t 75 \\t 90 \\t 105 \\t [120;150] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box plot shows product price distribution across five types of retail stores in 2021. Department Stores have a price range from a minimum of 20 to a maximum of 150, with a median at 80. Shopping Malls show a range from 15 to 120 with an outlier at 200, and a median of 65. Grocery Stores range from 10 to 100, with two outliers at 150 and 300, and a median of 50. Online Stores exhibit a range from 5 to 85, with outliers at 95 and 110, and a median of 45. Discount Stores have a price span from 25 to 105, with outliers at 120 and 150, and a 75 median."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data\ndata = {\n    'Department Store': [20, 50, 80, 110, 150],\n    'Shopping Mall': [15, 40, 65, 90, 120],\n    'Grocery Store': [10, 30, 50, 70, 100],\n    'Online Store': [5, 25, 45, 65, 85],\n    'Discount Store': [25, 60, 75, 90, 105]\n}\n\n# Plot the data\nfig = plt.figure(figsize=(15,8))\nax = fig.add_subplot(111)\nax.set_title('Product Price Distribution in Various Retail Stores (2021)')\nax.grid()\n\nbp = ax.boxplot(data.values())\nlabels = data.keys()\nax.set_ylabel('Price (USD)')\nax.set_xticklabels(labels, rotation=45, ha='right', wrap=True)\n\n# Plot the outliers\noutliers_dict = {\n    'Department Store': [],\n    'Shopping Mall': [200],\n    'Grocery Store': [150, 300],\n    'Online Store': [95, 110],\n    'Discount Store': [120, 150]\n}\nx = 0\nfor label in labels:\n    outliers = outliers_dict[label]\n    if len(outliers) > 0:\n        for outlier in outliers:\n            ax.plot(x + 1, outlier, marker='o', color='red', ms=4.5)\n    x += 1\n\nfig.tight_layout()\nplt.savefig('./box/png_val/box_7.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the range of product prices at shopping malls excluding outliers?",
            "output": "$105"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_8",
        "img": "./box/png/box_8.png",
        "topic": "Human Resources and Employee Management",
        "title": " Salary Distribution of Employees in Human Resources in 2021",
        "csv": "Employee Type \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Entry-level \\t 20000 \\t 40000 \\t 60000 \\t 80000 \\t 100000 \\t [] \\n Experienced \\t 45000 \\t 65000 \\t 90000 \\t 115000 \\t 150000 \\t [200000] \\n Managerial \\t 60000 \\t 87000 \\t 120000 \\t 150000 \\t 200000 \\t [10000] \\n Senior Level \\t 80000 \\t 100000 \\t 130000 \\t 170000 \\t 220000 \\t [250000] \\n Executive \\t 100000 \\t 150000 \\t 200000 \\t 250000 \\t 300000 \\t [310000] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart illustrates the salary distribution for different employee types in Human Resources in 2021. Entry-level salaries range from a minimum of $20,000 to a maximum of $100,000 without outliers. Experienced employees have salaries between $45,000 and $150,000, with an outlier at $200,000. Managerial positions show a range from $60,000 to $200,000, with a low outlier at $10,000. Senior-level salaries span from $80,000 to $220,000, with a high outlier at $250,000. Executives have the highest range, $100,000 to $300,000, with one outlier at $310,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data\nHome_Type = [\"Entry-level\",\"Experienced\",\"Managerial\",\"Senior Level\",\"Executive\"]\nMin_Salary = [20000,45000,60000,80000,100000]\nQ1_Salary = [40000,65000,87000,100000,150000]\nMedian_Salary = [60000,90000,120000,130000,200000]\nQ3_Salary = [80000,115000,150000,170000,250000]\nMax_Salary = [100000,150000,200000,220000,300000]\nOutlier_Salary = [[], [200000], [10000], [250000], [310000]]\n\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(111)\nax.set_title(\"Salary Distribution of Employees in Human Resources in 2021\")\nax.boxplot(np.array([Min_Salary, Q1_Salary, Median_Salary, Q3_Salary, Max_Salary]), labels=Home_Type, showmeans=True)\n\n# Plot the outliers\nfor x in range(len(Home_Type)):\n    y = Outlier_Salary[x]\n    if len(y) > 0:\n        x_coords = np.repeat(x+1, len(y))\n        ax.plot(x_coords, y, \"bx\")\nax.set_ylabel('Salary (USD)')\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"./box/png_val/box_8.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the median salary of Senior Level employees?",
            "output": "$130,000"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_33",
        "img": "./box/png/box_33.png",
        "topic": "Sports and Entertainment",
        "title": " Event Duration Distribution in Sports and Entertainment in 2021",
        "csv": "Entertainment Type \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Movies \\t 90 \\t 150 \\t 200 \\t 250 \\t 300 \\t [] \\n Music \\t 45 \\t 75 \\t 120 \\t 180 \\t 240 \\t [360] \\n Video Games \\t 60 \\t 120 \\t 180 \\t 240 \\t 300 \\t [20;15] \\n Sports \\t 15 \\t 60 \\t 90 \\t 120 \\t 180 \\t [240] \\n Theatre \\t 20 \\t 50 \\t 80 \\t 110 \\t 150 \\t [270] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box plot illustrates the distribution of event durations across various types of entertainment in 2021. For movies, the durations range from a minimum of 90 minutes to a maximum of 300, with a median at 200. Music events span from 45 to 240 minutes, with a median of 120 minutes and an outlier at 360 minutes. Video game sessions show durations from 60 to 300 minutes, with a median of 180 minutes and outliers at 20 and 15 minutes. Sports events range from 15 to 180 minutes, with a median of 90 minutes and an outlier at 240 minutes. Theatre durations are between 20 and 150 minutes, with a median of 80 minutes and an outlier at 270 minutes."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.pyplot as mpl\nimport numpy as np\n\ndata = [[90,150,200,250,300],\n        [45,75,120,180,240],\n        [60,120,180,240,300],\n        [15,60,90,120,180],\n        [20,50,80,110,150]]\noutliers = [[], [360], [20,15], [240], [270]]\n\nfig = plt.figure(figsize=(10, 5))\nax = fig.add_subplot(111)\n\ncategories = ['Movies','Music','Video Games','Sports','Theatre']\nax.boxplot(data, whis=1.5, labels=categories)\n\n# Add outlier data points\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot(np.repeat(i+1, len(outlier)), outlier, 'ro', alpha=0.6)\n\n# Add grid to the plot\nax.grid(True)\n\n# Add x-axis label\nax.set_xlabel('Entertainment Type', fontsize=14, labelpad=15, fontweight='bold')\n# Add y-axis label\nax.set_ylabel('Duration (Minutes)', fontsize=14, labelpad=15, fontweight='bold')\n# Add title\nax.set_title('Event Duration Distribution in Sports and Entertainment in 2021', fontsize=15, fontweight=\"bold\")\n\n# Automatically adjust subplot parameters to give specified padding\nplt.tight_layout()\n\n# Save the plot\nplt.savefig(r'./box/png/45_202312270030.png')\n\n# Clear the current image state\nplt.cla()"
        },
        "QA": {
            "input": "Are there outliers in the Sports event duration data?",
            "output": "Yes"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_27",
        "img": "./box/png/box_27.png",
        "topic": "Government and Public Policy",
        "title": " Program Cost Distribution in Government and Public Policy in 2020",
        "csv": "Government Program \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Healthcare \\t 1000 \\t 3000 \\t 5000 \\t 7000 \\t 10000 \\t [] \\n Education \\t 1500 \\t 3000 \\t 4500 \\t 6000 \\t 9000 \\t [12000] \\n Infrastructure \\t 2000 \\t 4000 \\t 6000 \\t 8000 \\t 12000 \\t [1000;20000] \\n Welfare \\t 500 \\t 2500 \\t 4000 \\t 6500 \\t 9000 \\t [15000] \\n Security \\t 1500 \\t 3500 \\t 5000 \\t 7000 \\t 10000 \\t [11500] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart represents the distribution of costs for different government programs in 2020. Healthcare has a minimum of $1000 and a maximum of $10000 with no outliers. Education shows a wider range from $1500 to $9000, with an outlier at $12000. Infrastructure sees costs ranging from $2000 to $12000, with outliers at $1000 and $20000. Welfare has minima and maxima at $500 and $9000, respectively, and an outlier at $15000. Lastly, Security's costs are between $1500 and $10000, with one outlier noted at $11500."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data into two 2D lists.\ndata_list = [[1000, 3000, 5000, 7000, 10000], \n             [1500, 3000, 4500, 6000, 9000], \n             [2000, 4000, 6000, 8000, 12000], \n             [500, 2500, 4000, 6500, 9000], \n             [1500, 3500, 5000, 7000, 10000]]\n\noutlier_list = [[], \n                [12000], \n                [1000, 20000], \n                [15000], \n                [11500]]\nline_labels = ['Healthcare', 'Education', 'Infrastructure', 'Welfare', 'Security']\n\n# Plot the data with the type of box plot.\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\nax.boxplot(data_list, whis=1.5)\n\n# Plot outliers manually.\nfor i, outlier in enumerate(outlier_list):\n    if len(outlier) > 0:\n        ax.plot(np.repeat(i + 1, len(outlier)), outlier, 'ro')\n\n# Drawing techniques such as background grids can be used\nax.grid(color='gray', linestyle='dashed')\n\nx_range = np.arange(len(line_labels)) + 1\nax.set_xticks(x_range)\nax.set_xticklabels(line_labels)\n\n# Set the title of y-axis.\nax.set_ylabel('Cost (USD)')\n\n# Set the title of figure.\nax.set_title('Program Cost Distribution in Government and Public Policy in 2020')\n\n# Automatically resize the image by tight_layout() before savefig().\nfig.tight_layout()\n\n# Save the figure as the specified path.\nfig.savefig('./box/png/2_202312270030.png')\n\n# Clear the current image state.\nplt.clf()"
        },
        "QA": {
            "input": "Which government program has the lowest median cost?",
            "output": "Welfare"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_17",
        "img": "./box/png/box_17.png",
        "topic": "Business and Finance",
        "title": " Stock Value Distribution in Business and Finance Companies (2021)",
        "csv": "Stock Company \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Company A \\t 20 \\t 200 \\t 400 \\t 600 \\t 800 \\t [] \\n Company B \\t 30 \\t 250 \\t 450 \\t 650 \\t 850 \\t [1000] \\n Company C \\t 50 \\t 300 \\t 500 \\t 700 \\t 900 \\t [5;1000] \\n Company D \\t 100 \\t 400 \\t 550 \\t 700 \\t 950 \\t [1100] \\n Company E \\t 60 \\t 400 \\t 500 \\t 800 \\t 900 \\t [1050] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart illustrates the stock value distribution for five companies: Company A to E in 2021. It shows the range from minimum to maximum stock values, as well as the first quartile (Q1), median, and third quartile (Q3) values for each. For instance, Company A has a minimum of 20, a Q1 of 200, a median of 400, a Q3 of 600, and a maximum of 800. Company B through E shows similar data but with different values, including outliers for Companies B, C, D, and E, which are beyond their respective maximum values."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data into two 2D lists\nvalues = [[20,200,400,600,800], \n          [30,250,450,650,850], \n          [50,300,500,700,900], \n          [100,400,550,700,950], \n          [60,400,500,800,900]] \noutliers = [[], [1000], [5,1000], [1100], [1050]]\n\n# Create figure before plotting\nfig, ax = plt.subplots(figsize=(10,5))\n\n# Plot the data with the type of box plot\nax.boxplot(values, whis=1.5, \n           boxprops=dict(linewidth=2, color='black'),\n           whiskerprops=dict(linewidth=2, color='black'),\n           capprops=dict(linewidth=2, color='black'),\n           medianprops=dict(linewidth=2, color='black'),\n           flierprops=dict(marker='o', markerfacecolor='black', markersize=7))\n\n# Use enumerate to iterate through the outliers list\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot(np.repeat(i+1, len(outlier)), outlier, \"o\", markerfacecolor=\"black\", markersize=7)\n\n# Drawing techniques such as background grids\nax.grid(axis='y', linestyle='--', linewidth=1, alpha=0.3)\n\n# The title of y-axis should be given with its unit\nax.set_ylabel('Value (USD)')\nax.set_xticklabels(['Company A', 'Company B', 'Company C', 'Company D', 'Company E'], rotation=45, wrap=True)\nax.set_title('Stock Value Distribution in Business and Finance Companies (2021)')\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\nplt.savefig('./box/png/32_202312270030.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "Which company has the highest maximum stock value without considering outliers?",
            "output": "Company C"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_34",
        "img": "./box/png/box_34.png",
        "topic": "Education and Academics",
        "title": " Academic Performance Distribution in Universities in 2021",
        "csv": "Institution \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n University A \\t 2.0 \\t 2.7 \\t 3.0 \\t 3.4 \\t 4.0 \\t [] \\n University B \\t 2.2 \\t 2.8 \\t 3.2 \\t 3.6 \\t 4.2 \\t [4.5] \\n University C \\t 2.4 \\t 3.0 \\t 3.4 \\t 3.8 \\t 4.4 \\t [1.2;4.3;4.5] \\n University D \\t 2.1 \\t 2.6 \\t 3.1 \\t 3.5 \\t 4.1 \\t [3.9;4.2] \\n University E \\t 2.3 \\t 2.9 \\t 3.3 \\t 3.7 \\t 4.3 \\t [4.1] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart presents the academic performance distribution across five universities in 2021. It illustrates the minimum, first quartile (Q1), median, third quartile (Q3), and maximum grade scores, along with outliers. University A's data range from 2.0 to 4.0 without outliers, while University B extends from 2.2 to 4.2 and includes an outlier at 4.5. University C has a range of 2.4 to 4.4, with outliers at 1.2, 4.3, and 4.5. University D's grades range from 2.1 to 4.1, with outliers at 3.9 and 4.2. University E has a grade distribution from 2.3 to 4.3 and an outlier at 4.1."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data into two 2D lists\ndata_list1 = [[2.0,2.7,3.0,3.4,4.0],\n              [2.2,2.8,3.2,3.6,4.2],\n              [2.4,3.0,3.4,3.8,4.4],\n              [2.1,2.6,3.1,3.5,4.1],\n              [2.3,2.9,3.3,3.7,4.3]]\ndata_list2 = [[],\n              [4.5],\n              [1.2,4.3,4.5],\n              [3.9,4.2],\n              [4.1]]\n\n# Create figure before plotting\nfig = plt.figure(figsize=(12,6))\nax = fig.add_subplot(111)\n\n# Plot the data with the type of box plot\nax.boxplot(data_list1, labels=[\"University A\", \"University B\", \"University C\", \"University D\", \"University E\"], whis=1.5)\n\n# Iterate through the outliers list, which gives both the outlier values and their corresponding category index i\nfor i, outlier in enumerate(data_list2):\n    if len(outlier) > 0:\n        ax.plot([i + 1] * len(outlier), outlier, 'ro')\n\n# Drawing techniques such as background grids can be used\nax.yaxis.grid(True)\n\n# The title of y-axis should be given with its unit\nax.set_ylabel('GPA (Grade)')\n\n# The title of the figure should be  Academic Performance Distribution in Universities in 2021\nax.set_title('Academic Performance Distribution in Universities in 2021')\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./box/png/30_202312270030.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the median academic performance score at University C?",
            "output": "3.4"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_5",
        "img": "./box/png/box_5.png",
        "topic": "Government and Public Policy",
        "title": " Government Expenditure Distribution in Public Policy in 2021",
        "csv": "Policy Type \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Taxation \\t 0 \\t 100 \\t 250 \\t 500 \\t 1000 \\t [] \\n Social Welfare \\t 50 \\t 200 \\t 400 \\t 600 \\t 800 \\t [1500] \\n Education \\t 10 \\t 100 \\t 150 \\t 300 \\t 500 \\t [20;30] \\n Healthcare \\t 20 \\t 200 \\t 400 \\t 600 \\t 800 \\t [1000;1100] \\n Defense \\t 100 \\t 500 \\t 750 \\t 900 \\t 1200 \\t [20;30] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart illustrates the distribution of government expenditure on different public policies in 2021. For taxation, the range is from a minimum of 0 to a maximum of 1000, with quartiles at 100, 250, and 500, and no outliers. In social welfare, the expenditure spans from 50 to 800, with quartiles at 200, 400, and 600, and an outlier at 1500. Education shows a minimum of 10, maximum of 500, quartiles at 100, 150, and 300, and outliers at 20 and 30. Healthcare has funds ranging from 20 to 800, quartiles at 200, 400, and 600, and outliers at 1000 and 1100. Defense policy\u2019s expenditure lies between 100 and 1200, with quartiles at 500, 750, and 900, and outliers at 20 and 30."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [[0, 100, 250, 500, 1000], \n        [50, 200, 400, 600, 800, 1500], \n        [10, 100, 150, 300, 500, 20, 30], \n        [20, 200, 400, 600, 800, 1000, 1100], \n        [100, 500, 750, 900, 1200, 20, 30]]\n\noutliers = [[], [1500], [20, 30], [1000, 1100], [20, 30]]\n\nfig, ax = plt.subplots(figsize=(12, 8))\n\nax.boxplot([data[i][:5] for i in range(5)])\n\nfor i, outlier in enumerate(outliers):\n    if outlier:\n        x = [i + 1] * len(outlier)\n        ax.plot(x, outlier, 'o')\n\nax.set_title('Government Expenditure Distribution in Public Policy in 2021')\nax.set_ylabel('Cost (USD)')\nax.set_xticklabels(['Taxation', 'Social Welfare', 'Education', 'Healthcare', 'Defense'], rotation=45, ha='right', wrap=True)\nax.grid()\n\nfig.tight_layout()\nfig.savefig('./box/png/3_202312251315.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which policy type has the highest median expenditure according to the data?",
            "output": "Defense"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_25",
        "img": "./box/png/box_25.png",
        "topic": "Government and Public Policy",
        "title": " Program Cost Distribution in US Government in 2021",
        "csv": "Government Program \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Education \\t 200 \\t 400 \\t 600 \\t 800 \\t 1000 \\t [] \\n Healthcare \\t 300 \\t 500 \\t 700 \\t 900 \\t 1200 \\t [1500] \\n Housing \\t 400 \\t 600 \\t 800 \\t 1000 \\t 1200 \\t [50;1300] \\n Social Welfare \\t 500 \\t 700 \\t 900 \\t 1100 \\t 1300 \\t [1400] \\n Transportation \\t 400 \\t 500 \\t 700 \\t 900 \\t 1100 \\t [1250;1300] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart illustrates the cost distribution of five US government programs in 2021, showing the minimum, first quartile (Q1), median, third quartile (Q3), maximum costs, and outliers. Education ranges between 200 and 1000 with no outliers. Healthcare costs stretch from 300 to 1200, including an outlier at 1500. Housing costs show a broad spread from 400 to 1200 with outliers at 50 and 1300. Social Welfare spans from 500 to 1300 with an additional outlier at 1400. Lastly, Transportation displays a distribution from 400 to 1100, accompanied by outliers at 1250 and 1300."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [[200,400,600,800,1000],\n        [300,500,700,900,1200],[400,600,800,1000,1200],\n        [500,700,900,1100,1300],[400,500,700,900,1100]]\noutliers = [[],[1500],[50,1300],[1400],[1250,1300]]\nline_labels = ['Education', 'Healthcare', 'Housing', 'Scoidal Welfare', 'Transportation']\n\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\n\nax.set_title(\"Program Cost Distribution in US Government in 2021\")\nax.set_xticklabels(line_labels)\nax.set_ylabel(\"Cost (USD)\")\nax.boxplot(data, whis=1.5)\n\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot(np.repeat(i+1, len(outlier)), outlier, \"o\")\n\nax.grid(True)\nplt.tight_layout()\nplt.savefig(\"./box/png/29_202312251608.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How many outliers are there in the Transportation program cost?",
            "output": "2"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_44",
        "img": "./box/png/box_44.png",
        "topic": "Agriculture and Food Production",
        "title": " Shelf Life Distribution of Different Types of Food Items",
        "csv": "Food Type \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Fresh Produce \\t 2 \\t 7 \\t 14 \\t 21 \\t 30 \\t [] \\n Dairy Products \\t 10 \\t 30 \\t 60 \\t 90 \\t 120 \\t [180] \\n Canned Foods \\t 200 \\t 300 \\t 400 \\t 500 \\t 600 \\t [750] \\n Frozen Foods \\t 120 \\t 240 \\t 360 \\t 480 \\t 600 \\t [720] \\n Ready Meals \\t 15 \\t 30 \\t 45 \\t 60 \\t 90 \\t [180] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box plot illustrates the shelf life distribution of various food items, with each category showing a range from minimum to maximum shelf life and potential outliers. Fresh produce ranges from 2 to 30 days without outliers, dairy products span from 10 to 120 days with an outlier at 180 days. Canned foods show a range from 200 to 600 days, with an outlier at 750 days. Frozen foods have a shelf life spread between 120 and 600 days, with an outlier at 720 days. Lastly, ready meals vary from 15 to 90 days and also have an outlier at 180 days."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data into two 2D lists.\ndata_list1 = [[2, 7, 14, 21, 30], [10, 30, 60, 90, 120], [200, 300, 400, 500, 600], [120, 240, 360, 480, 600], [15, 30, 45, 60, 90]]\ndata_list2 = [[],[180],[750],[720],[180]]\nline_labels = ['Fresh Produce', 'Dairy Product', 'Canned Foods', 'Frozen Foods', 'Ready Meals']\n# Plot the data with the type of box plot.\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111)\nax.boxplot(data_list1, whis=1.5)\n\n# Set labels and titles\nax.set_xlabel('Food Type')\nax.set_xticklabels(line_labels)\nax.set_ylabel('Shelf Life (Days)')\nax.set_title('Shelf Life Distribution of Different Types of Food Items')\n\n# Use enumerate to iterate through the outliers list\nfor i, outlier in enumerate(data_list2):\n    if len(outlier) != 0:\n        # Plot outliers manually using ax.plot for each category\n        ax.plot([i + 1] * len(outlier), outlier, 'r.')\n\n# Drawing techniques such as background grids\nax.grid(True, linestyle='-.')\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./box/png/39_202312270030.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which food type has the highest median shelf life?",
            "output": "Canned Foods"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_29",
        "img": "./box/png/box_29.png",
        "topic": "Arts and Culture",
        "title": " Art Piece Price Distribution in Galleries (2021)",
        "csv": "Art Gallery \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Gallery A \\t 0.3 \\t 2.5 \\t 4.8 \\t 6.5 \\t 8.0 \\t [] \\n Gallery B \\t 0.5 \\t 3.0 \\t 5.2 \\t 7.5 \\t 9.0 \\t [14.0] \\n Gallery C \\t 0.7 \\t 3.5 \\t 5.7 \\t 7.9 \\t 10.0 \\t [0.2;13.2;14.0] \\n Gallery D \\t 0.2 \\t 2.0 \\t 4.3 \\t 6.0 \\t 7.5 \\t [12.5;13.8] \\n Gallery E \\t 0.4 \\t 2.5 \\t 4.6 \\t 6.2 \\t 7.8 \\t [13.0] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart illustrates the distribution of art piece prices across five galleries (A, B, C, D, E) in 2021. Each gallery's data shows minimum, first quartile (Q1), median, third quartile (Q3), maximum values, along with outliers. Gallery A's prices range from 0.3 to 8.0 with the median at 4.8, without outliers. Gallery B spans 0.5 to 9.0 with a median of 5.2 and one outlier at 14.0. Gallery C's range extends from 0.7 to 10.0 with a median of 5.7, having outliers at 0.2, 13.2, and 14.0. Gallery D has a price distribution from 0.2 to 7.5 with the median at 4.3 and outliers at 12.5 and 13.8. Lastly, Gallery E's prices vary from 0.4 to 7.8 with a median of 4.6 and a single outlier at 13.0."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data into two 2D lists. \ndata = [[0.3, 2.5, 4.8, 6.5, 8.0], \n        [0.5, 3.0, 5.2, 7.5, 9.0], \n        [0.7, 3.5, 5.7, 7.9, 10.0], \n        [0.2, 2.0, 4.3, 6.0, 7.5], \n        [0.4, 2.5, 4.6, 6.2, 7.8]]\noutliers = [[], [14.0], [0.2, 13.2, 14.0], [12.5, 13.8], [13.0]]\n\n# Set the figure size\nplt.figure(figsize=(10, 8))\n\n# Plot the data with the type of box plot.\nax = plt.subplot()\nax.boxplot(data, whis=1.5, showmeans=True)\n\n# Plot the outliers manually\nfor i, outlier in enumerate(outliers):\n    if outlier:\n        ax.plot(np.repeat(i + 1, len(outlier)), outlier, 'ro')\n\n# Labels for x-axis\nax.set_xticklabels(['Gallery A', 'Gallery B', 'Gallery C', 'Gallery D', 'Gallery E'])\n\n# Labels for y-axis\nax.set_ylabel('Price (USD)')\n\n# Background grid\nax.grid(linestyle='dotted')\n\n# Figure title\nplt.title('Art Piece Price Distribution in Galleries (2021)')\n\n# Resize image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('./box/png/26_202312251608.png')\n\n# Clear image\nplt.clf()"
        },
        "QA": {
            "input": "Which art gallery has the smallest interquartile range (IQR) in their art piece price distribution?",
            "output": "Gallery D"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_6",
        "img": "./box/png/box_6.png",
        "topic": "Business and Finance",
        "title": " Investment Return Distribution in 2021",
        "csv": "Investment Type \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Stocks \\t 1 \\t 5 \\t 10 \\t 15 \\t 20 \\t [] \\n Bonds \\t 2 \\t 5.5 \\t 10.5 \\t 16 \\t 22 \\t [25] \\n Mutual Funds \\t 3 \\t 6 \\t 11 \\t 17 \\t 23 \\t [1;2;26] \\n ETFs \\t 2.5 \\t 6.5 \\t 11.5 \\t 17.5 \\t 23.5 \\t [3;25] \\n Options \\t 1.5 \\t 4.5 \\t 9.5 \\t 14.5 \\t 19.5 \\t [22;27] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart titled \"Investment Return Distribution in 2021\" illustrates the spread of returns across five types of investments. For each category\u2014Stocks, Bonds, Mutual Funds, ETFs, and Options\u2014the chart indicates the minimum, first quartile (Q1), median, third quartile (Q3), and maximum value of returns. Stocks range from 1 to 20 with no outliers. Bonds display returns from 2 to 22, with an outlier at 25. Mutual Funds have returns spreading from 3 to 23, with outliers at 1, 2, and 26. ETFs range from 2.5 to 23.5 with outliers of 3 and 25. Options have a spread from 1.5 to 19.5, with outliers at 22 and 27."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure data\nlabels = [\"Stocks\", \"Bonds\", \"Mutual Funds\", \"ETFs\", \"Options\"]\nstocks_data = [1, 5, 10, 15, 20]\nbonds_data = [2, 5.5, 10.5, 16, 22, 25]\nmutual_funds_data = [3, 6, 11, 17, 23, 1, 2, 26]\netfs_data = [2.5, 6.5, 11.5, 17.5, 23.5, 3, 25]\noptions_data = [1.5, 4.5, 9.5, 14.5, 19.5, 22, 27]\ndata = [stocks_data, bonds_data, mutual_funds_data, etfs_data, options_data]\n\n# Create figure\nfig = plt.figure(figsize=(12, 6))\nax = fig.add_subplot(111)\n\n# Plot boxplot\nbp = ax.boxplot(data, labels=labels, patch_artist=True, showmeans=True)\n\n# Formatting\nax.set_title(\"Investment Return Distribution in 2021\")\nax.set_ylabel(\"Return (%)\")\nax.grid(True, ls=\"--\", lw=.5)\nax.set_axisbelow(True)\n\n# Outliers\noutlier_list = [\n    (stocks_data, []),\n    (bonds_data, [25]),\n    (mutual_funds_data, [1, 2, 26]),\n    (etfs_data, [3, 25]),\n    (options_data, [22, 27])\n]\n\nfor i, (outlier_data, outlier_points) in enumerate(outlier_list):\n    x = i + 1\n    for point in outlier_points:\n        if len(outlier_points) > 0:\n            ax.plot(x, point, marker=\"o\", color=\"black\")\n\n# Fonts\nfont = {\n    \"family\": \"DejaVu Sans\",\n    \"size\": 10\n}\nplt.rc(\"font\", **font)\nplt.xticks(rotation=90)\n\n# Tight layout\nfig.tight_layout()\nplt.savefig(\"./box/png/2_202312251044.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which investment type has the highest maximum value excluding outliers?",
            "output": "Mutual Funds"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_9",
        "img": "./box/png/box_9.png",
        "topic": "Human Resources and Employee Management",
        "title": " Salary Distribution in Employee Types in 2020",
        "csv": "Employee Type \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Full Time \\t 45000 \\t 50000 \\t 70000 \\t 90000 \\t 120000 \\t [] \\n Part Time \\t 25000 \\t 30000 \\t 40000 \\t 60000 \\t 80000 \\t [120000;150000] \\n Contract \\t 30000 \\t 35000 \\t 45000 \\t 60000 \\t 75000 \\t [90000;100000] \\n Internship \\t 15000 \\t 20000 \\t 25000 \\t 30000 \\t 40000 \\t [45000] \\n Seasonal \\t 10000 \\t 15000 \\t 20000 \\t 25000 \\t 30000 \\t [35000] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box plot represents the salary distribution across different employee types in 2020. Full-Time employees have a range from $45,000 to $120,000 with no outliers. Part-Time salaries span from $25,000 to $80,000, with outliers at $120,000 and $150,000. Contract workers show a range from $30,000 to $75,000 and outliers at $90,000 and $100,000. Internship salaries are between $15,000 and $40,000, with an outlier at $45,000. Lastly, Seasonal workers have salaries ranging from $10,000 to $30,000 with an outlier at $35,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data\ndata = [[45000,50000,70000,90000,120000],\n        [25000,30000,40000,60000,80000],\n        [30000,35000,45000,60000,75000],\n        [15000,20000,25000,30000,40000],\n        [10000,15000,20000,25000,30000]]\noutliers = [[], \n            [120000,150000], \n            [90000,100000], \n            [45000], \n            [35000]]\n\n# Plot the chart\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111)\nax.boxplot(data, whis=1.5)\n\n# Plot Outliers\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot(np.repeat(i+1, len(outlier)), outlier, 'o')\n\n# Adjust the chart\nax.set_title('Salary Distribution in Employee Types in 2020')\nax.set_xlabel('Employee Type')\nax.set_ylabel('Salary (USD)')\nax.set_xticklabels(['Full Time', 'Part Time', 'Contract', 'Internship', 'Seasonal'])\n\n# Add grids\nax.yaxis.grid(True, linestyle='-', which='major', color='lightgrey', alpha=0.5)\nax.set_axisbelow(True)\n\n# Resize the chart\nplt.tight_layout()\n\n# Save the chart\nplt.savefig('./box/png/4_202312251520.png')\n\n# Clear the current image state\nplt.cla()"
        },
        "QA": {
            "input": "What is the median salary for a 'Part Time' employee in 2020?",
            "output": "40000"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_39",
        "img": "./box/png/box_39.png",
        "topic": "Social Sciences and Humanities",
        "title": " Grades Distribution in Social Sciences and Humanities in 2021",
        "csv": "Topic Area \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Psychology \\t 50 \\t 60 \\t 70 \\t 80 \\t 90 \\t [] \\n Sociology \\t 45 \\t 55 \\t 65 \\t 75 \\t 85 \\t [95] \\n Anthropology \\t 40 \\t 50 \\t 60 \\t 70 \\t 80 \\t [90] \\n Economics \\t 35 \\t 45 \\t 55 \\t 65 \\t 75 \\t [85] \\n Philosophy \\t 30 \\t 40 \\t 50 \\t 60 \\t 70 \\t [80] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart illustrates the grades distribution across five disciplines within the social sciences and humanities in 2021. Psychology shows no outliers with a minimum grade of 50 and a maximum of 90. Sociology has grades ranging from 45 to 85, with an outlier at 95. Anthropology features a minimum of 40, maximum of 80, and an outlier at 90. Economics displays grades between 35 and 75, with an outlier of 85. Lastly, Philosophy's grades span from 30 to 70, with a single outlier at 80. Each discipline has quartile values and a median representing the central tendency."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = [[50, 60, 70, 80, 90],\n        [45, 55, 65, 75, 85],\n        [40, 50, 60, 70, 80],\n        [35, 45, 55, 65, 75],\n        [30, 40, 50, 60, 70]]\n\noutliers = [[], [95], [90], [85], [80]]\n\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot()\n\nax.boxplot(data, whis=1.5, labels=['Psychology', 'Sociology', 'Anthropology', 'Economics', 'Philosophy'], showmeans=True)\n\nfor i, outlier in enumerate(outliers):\n    if outlier:\n        ax.plot([i + 1] * len(outlier), outlier, 'r^')\n\nax.set_title('Grades Distribution in Social Sciences and Humanities in 2021')\nax.set_ylabel('Grades')\nax.grid(axis='y', alpha=0.75)\n\nfig.tight_layout()\nfig.savefig(r'./box/png/21_202312270030.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many outlier values are present in the data for Sociology?",
            "output": "1"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_11",
        "img": "./box/png/box_11.png",
        "topic": "Real Estate and Housing Market",
        "title": " Price Distribution of Different Property Types in the Housing Market (2020)",
        "csv": "Property Type \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Condos \\t 200 \\t 400 \\t 600 \\t 800 \\t 1000 \\t [] \\n Townhomes \\t 400 \\t 600 \\t 800 \\t 1000 \\t 1200 \\t [2000] \\n Single-Family Homes \\t 500 \\t 800 \\t 1000 \\t 1200 \\t 1500 \\t [3000;6000] \\n Multi-Family Homes \\t 300 \\t 600 \\t 900 \\t 1200 \\t 1500 \\t [1700;2500] \\n Luxury Properties \\t 1000 \\t 1500 \\t 2000 \\t 2500 \\t 3000 \\t [6000] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box plot chart illustrates the price distribution for five different property types in the housing market for 2020. Condos show a range from a minimum of 200 to a maximum of 1000, with no outliers. Townhomes range from 400 to 1200 with an outlier at 2000. Single-Family Homes have prices spread from 500 to 1500, with outliers at 3000 and 6000. Multi-Family Homes vary from 300 to 1500, with outliers at 1700 and 2500. Luxury Properties' prices extend from 1000 to 3000 with an outlier at 6000. The medians for these properties fall at 600, 800, 1000, 900, and 2000, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Price Distribution of Different Property Types in the Housing Market (2020)\nProperty_Type = np.array(['Condos', 'Townhomes', 'Single-Family Homes', 'Multi-Family Homes', 'Luxury Properties'])\nMin_Price = np.array([200, 400, 500, 300, 1000])\nQ1_Price = np.array([400, 600, 800, 600, 1500])\nMedian_Price = np.array([600, 800, 1000, 900, 2000])\nQ3_Price = np.array([800, 1000, 1200, 1200, 2500])\nMax_Price = np.array([1000, 1200, 1500, 1500, 3000])\noutliers = [[], [2000], [3000, 6000], [1700, 2500], [6000]]\nfig = plt.figure(figsize=(12,7))\nax = fig.add_subplot(111)\n\nax.boxplot(np.array([Min_Price, Q1_Price, Median_Price, Q3_Price, Max_Price]), labels=Property_Type, patch_artist=True, showfliers=False)\n\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot([i+1] * len(outlier), outlier, 'go', alpha=0.3, markersize=8)\n\nax.set_title('Price Distribution of Different Property Types in the Housing Market (2020)', fontsize=15)\nax.set_ylabel('Price (USD)', fontsize=13)\n\nplt.xticks(rotation=45, fontsize=10, wrap=True)\n\nplt.tight_layout()\n\nplt.savefig('./box/png/25.png', dpi=300)\n\nplt.clf()"
        },
        "QA": {
            "input": "What is the median price for Single-Family Homes?",
            "output": "1000"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_46",
        "img": "./box/png/box_46.png",
        "topic": "Science and Engineering",
        "title": " Compressive Strength Distribution of Materials in Engineering (2021)",
        "csv": "Material \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Steel \\t 100 \\t 250 \\t 400 \\t 550 \\t 700 \\t [] \\n Concrete \\t 150 \\t 250 \\t 400 \\t 550 \\t 650 \\t [800] \\n Aluminum \\t 50 \\t 200 \\t 350 \\t 500 \\t 600 \\t [10;30] \\n Copper \\t 75 \\t 200 \\t 350 \\t 475 \\t 600 \\t [700] \\n Plastic \\t 25 \\t 100 \\t 225 \\t 350 \\t 400 \\t [500] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box plot visualizes the compressive strength distribution of materials in engineering for the year 2021. It includes Steel, Concrete, Aluminum, Copper, and Plastic. Steel's strength ranges from 100 to 700, with quartiles at 250, 400, and 550. Concrete shows a range from 150 to 650 and an outlier at 800; its quartiles are at 250, 400, and 550. Aluminum ranges from 50 to 600 with outliers at 10 and 30, and quartiles at 200, 350, and 500. Copper's range is 75 to 600 with an outlier at 700 and quartiles at 200, 350, and 475. Plastic has the narrowest range from 25 to 400 and an outlier at 500, with quartiles at 100, 225, and 350."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_list = [[100, 250, 400, 550, 700],\n             [150, 250, 400, 550, 650],\n             [50, 200, 350, 500, 600],\n             [75, 200, 350, 475, 600],\n             [25, 100, 225, 350, 400]]\noutlier_list = [[], [800], [10, 30], [700], [500]]\n\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\n\nax.boxplot(data_list, whis=1.5)\n\nax.set_title('Compressive Strength Distribution of Materials in Engineering (2021)')\nax.set_xlabel('Material')\nax.set_ylabel('Strength (KPa)')\nax.set_xticklabels(['Steel', 'Concrete', 'Aluminum', 'Copper', 'Plastic'])\n\nfor i, outlier in enumerate(outlier_list):\n    if outlier:\n        ax.plot(np.full(len(outlier), i+1), outlier, 'ro', alpha=0.5)\n\nax.grid()\n\nfig.tight_layout()\nplt.savefig('./box/png/35_202312270030.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the median compressive strength for Plastic?",
            "output": "225"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_4",
        "img": "./box/png/box_4.png",
        "topic": "Social Media and the Web",
        "title": " Followers Distribution on Different Social Networks in 2020",
        "csv": "Social Network \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Facebook \\t 1000 \\t 3000 \\t 5000 \\t 7000 \\t 10000 \\t [] \\n Instagram \\t 500 \\t 1500 \\t 3000 \\t 5000 \\t 7000 \\t [20000] \\n Twitter \\t 500 \\t 1500 \\t 2500 \\t 4000 \\t 6000 \\t [50;150;10000] \\n Youtube \\t 500 \\t 2000 \\t 4000 \\t 6000 \\t 8000 \\t [16000] \\n Tiktok \\t 200 \\t 500 \\t 1000 \\t 1500 \\t 2000 \\t [3000] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart illustrates the distribution of followers across different social networks in 2020. Data points include minimum, first quartile (Q1), median, third quartile (Q3), maximum, and outliers. For Facebook, values range from a minimum of 1000 to a maximum of 10000, with no outliers. Instagram shows a span from 500 to 7000, with an outlier at 20000. Twitter's followers range from 500 to 6000, with outliers at 50, 150, and 10000. Youtube has a range of 500 to 8000, with an outlier at 16000. Tiktok's followers are between 200 and 2000, with an outlier at 3000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# restructure the data into two 2D lists\ndata = [[1000, 3000, 5000, 7000, 10000], [500, 1500, 3000, 5000, 7000], [500, 1500, 2500, 4000, 6000], [500, 2000, 4000, 6000, 8000], [200, 500, 1000, 1500, 2000]]\noutliers = [[], [20000], [50, 150, 10000], [16000], [3000]]\n\n# plot the boxplot\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(111)\n\n# set the whis parameter as 1.5 in ax.boxplot\nax.boxplot(data, whis=1.5)\n\n# manual outliers plotting\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot([i + 1] * len(outlier), outlier, 'ro')\n\n# set title, labels and grid\nax.set_title('Followers Distribution on Different Social Networks in 2020')\nax.set_ylabel('Followers (Number)')\nax.set_xticklabels(['Facebook', 'Instagram', 'Twitter', 'Youtube', 'Tiktok'], fontsize=10, rotation=30)\nax.yaxis.grid(True)\n\n# auto resize\nplt.tight_layout()\n\n# save image\nplt.savefig('./box/png/17_202312270030.png')\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the median number of followers on Twitter?",
            "output": "2500"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_35",
        "img": "./box/png/box_35.png",
        "topic": "Environment and Sustainability",
        "title": " Pollution Concentration Distribution in the Environment (2020)",
        "csv": "Pollution Level \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Particulate Matter \\t 50 \\t 90 \\t 150 \\t 200 \\t 300 \\t [] \\n Carbon Monoxide \\t 20 \\t 50 \\t 90 \\t 130 \\t 180 \\t [250] \\n Nitrogen Oxide \\t 60 \\t 120 \\t 180 \\t 240 \\t 320 \\t [400] \\n Volatile Organic Compounds \\t 15 \\t 60 \\t 100 \\t 140 \\t 200 \\t [250;350] \\n Sulphur Dioxide \\t 30 \\t 70 \\t 110 \\t 160 \\t 210 \\t [320;400] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This box chart illustrates the distribution of pollution concentration levels for various pollutants in the environment in 2020. The chart plots five pollutants with values for the minimum, first quartile (Q1), median, third quartile (Q3), and maximum. Particulate Matter ranges from 50 to 300 with no outliers. Carbon Monoxide spans from 20 to 180, with an outlier at 250. Nitrogen Oxide has values from 60 to 320 with an outlier at 400. Volatile Organic Compounds range from 15 to 200 with outliers at 250 and 350. Lastly, Sulphur Dioxide measures from 30 to 210, with outliers at 320 and 400."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# restructure data\ncategory = ['Particulate Matter', 'Carbon Monoxide', 'Nitrogen Oxide', 'Volatile Organic Compounds', 'Sulphur Dioxide']\nmin_data = [50, 20, 60, 15, 30]\nq1_data = [90, 50, 120, 60, 70]\nmedian_data = [150, 90, 180, 100, 110]\nq3_data = [200, 130, 240, 140, 160]\nmax_data = [300, 180, 320, 200, 210]\noutliers_data = [[], [250], [400], [250, 350], [320, 400]]\n\n# create figure\nfig = plt.figure(figsize=(15,7))\n\n# plot data\n# transform data into 2D list\nbox_data = np.array([min_data, q1_data, median_data, q3_data, max_data])\nax = fig.add_subplot(1, 1, 1)\nax.boxplot(box_data)\nax.set_xticklabels(category)\nax.set_title('Pollution Concentration Distribution in the Environment (2020)')\nax.set_ylabel('Concentration (ppm)')\n\n# plot outliers\nfor i, outlier in enumerate(outliers_data):\n    if len(outlier) > 0:\n        for outlier_value in outlier:\n            ax.plot([i + 1], [outlier_value], marker='o', color='red')\n\n# set background grid\nax.yaxis.grid(True)\nax.xaxis.grid(True)\n\n# resize image\nplt.tight_layout()\n# save figure\nplt.savefig('./box/png/5_202312251315.png')\n\n# clear figure\nplt.clf()"
        },
        "QA": {
            "input": "What is the maximum pollution level for Sulphur Dioxide?",
            "output": "210"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_32",
        "img": "./box/png/box_32.png",
        "topic": "Science and Engineering",
        "title": " Processing Duration Distribution in Science and Engineering (2021)",
        "csv": "Process \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Chemical Reaction \\t 3 \\t 7 \\t 12 \\t 16 \\t 20 \\t [] \\n Heat Treatment \\t 4 \\t 10 \\t 14 \\t 18 \\t 22 \\t [30] \\n Laser Cutting \\t 2 \\t 6 \\t 10 \\t 14 \\t 18 \\t [0.5;20] \\n Welding \\t 5 \\t 9 \\t 13 \\t 17 \\t 21 \\t [19.5] \\n Plating \\t 4 \\t 8 \\t 12 \\t 16 \\t 20 \\t [18] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart titled \"Processing Duration Distribution in Science and Engineering (2021)\" presents the statistical spread of processing times for different procedures. The chart outlines minimum, first quartile (Q1), median, third quartile (Q3), and maximum values for five processes. Chemical Reaction shows a range from 3 to 20 with no outliers, while Heat Treatment ranges from 4 to 22 with an outlier at 30. Laser Cutting spans from 2 to 18, with outliers at 0.5 and 20. Welding's duration is between 5 and 21 with an outlier at 19.5. Plating varies from 4 to 20 with an outlier at 18."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# restructure data into two 2d list\ndata = [[3,7,12,16,20], [4,10,14,18,22,30], [2,6,10,14,18,0.5,20], [5,9,13,17,21,19.5], [4,8,12,16,20, 18]]\noutliers = [[], [30], [0.5, 20], [19.5], [18]]\n\n# create figure and draw box plot\nfig, ax = plt.subplots(figsize=(10, 6))\nax.boxplot(np.array([data[i][:5] for i in range(5)]).T, whis=1.5, patch_artist=True)\n\n# add outlier points\nfor i, outlier in enumerate(outliers):\n    if len(outlier) != 0:\n        ax.plot(np.repeat(i + 1, len(outlier)), outlier, 'o', markersize=4,\n                color='black', alpha=0.6)\n\n# set labels\nax.set_xticklabels(['Chemical Reaction', 'Heat Treatment', 'Laser Cutting', 'Welding', 'Plating'], fontsize=12)\nax.set_ylabel('Processing Duration (Hours)', fontsize=14)\nax.set_title('Processing Duration Distribution in Science and Engineering (2021)', fontsize=16)\n\n# draw background grids\nax.grid(True, axis='y', ls='--', lw=.5, alpha=0.8)\n\n# shrink image size\nplt.tight_layout()\n\n# save figure\nplt.savefig('./box/png/7_202312251608.png')\n\n# clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the median processing duration for Plating?",
            "output": "12"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_19",
        "img": "./box/png/box_19.png",
        "topic": "Agriculture and Food Production",
        "title": " Crop Yield Distribution in Agriculture and Food Production (2021)",
        "csv": "Crop Type \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Wheat \\t 1000 \\t 2000 \\t 3000 \\t 4000 \\t 5000 \\t [] \\n Rice \\t 1200 \\t 2500 \\t 3500 \\t 4500 \\t 5500 \\t [6000] \\n Maize \\t 1400 \\t 2700 \\t 3700 \\t 4700 \\t 5700 \\t [100;6500] \\n Soybean \\t 1100 \\t 2400 \\t 3400 \\t 4400 \\t 5400 \\t [6000;7000] \\n Barley \\t 1300 \\t 2600 \\t 3600 \\t 4600 \\t 5600 \\t [6000] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box plot chart represents crop yield distribution for various crops in 2021. The minimum, first quartile (Q1), median, third quartile (Q3), and maximum values are shown for each crop. Wheat has a range of 1000-5000 with no outliers. Rice's values extend from 1200 to 5500, with a single outlier at 6000. Maize has a broader yield span from 1400 to 5700, with outliers at 100 and 6500. Soybean yields vary from 1100 to 5400, with outliers at 6000 and 7000. Lastly, Barley's yield is distributed between 1300 and 5600 with an outlier at 6000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \n\n# Restructure the data into two 2D lists. \ndata = [[1000, 2000, 3000, 4000, 5000], \n        [1200, 2500, 3500, 4500, 5500], \n        [1400, 2700, 3700, 4700, 5700],\n        [1100, 2400, 3400, 4400, 5400], \n        [1300, 2600, 3600, 4600, 5600]]\noutliers = [[], [6000], [100, 6500], [6000, 7000], [6000]]\nline_labels = ['Wheat', 'Rice', 'Maize', 'Soybean', 'Barley']\n\n# Plot the data with the type of box plot. \nfig, ax = plt.subplots(figsize=(8, 6))\nax.boxplot(data, whis=1.5)\n\n# Outliers are plotted manually using ax.plot for each category.\nfor i, outlier in enumerate(outliers):\n    if outlier:\n        ax.plot(np.repeat(i + 1, len(outlier)), outlier, 'o', c='red')\n\n# Drawing techniques such as background grids can be used.\nax.grid()\n\n# The title of y-axis should be given with its unit.\nax.set_xticklabels(line_labels)\nax.set_ylabel('Yield (kg/ha)')\n\n# The title of the figure should be  Crop Yield Distribution in Agriculture and Food Production (2021).\nax.set_title('Crop Yield Distribution in Agriculture and Food Production (2021)')\n\n# Automatically resize the image by tight_layout() before savefig().\nplt.tight_layout()\n\n# The image must be saved as ./box/png/34_202312251608.png.\nplt.savefig('./box/png/34_202312251608.png')\n\n# Clear the current image state at the end of the code.\nplt.clf()"
        },
        "QA": {
            "input": "What is the median yield for soybean?",
            "output": "3400"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_45",
        "img": "./box/png/box_45.png",
        "topic": "Science and Engineering",
        "title": " Cost of Science and Engineering Technologies in 2021",
        "csv": "Technology \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Robotics \\t 100 \\t 200 \\t 300 \\t 400 \\t 500 \\t [] \\n Automation \\t 150 \\t 250 \\t 350 \\t 450 \\t 550 \\t [650] \\n Artificial Intelligence \\t 200 \\t 300 \\t 400 \\t 500 \\t 600 \\t [700;800] \\n Biomedical Engineering \\t 50 \\t 100 \\t 150 \\t 200 \\t 250 \\t [300;350] \\n Nanotechnology \\t 100 \\t 150 \\t 200 \\t 250 \\t 300 \\t [350;400] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box-and-whisker chart illustrates the cost distribution for five different science and engineering technologies in 2021. For Robotics, costs range from a minimum of 100 to a maximum of 500, with no outliers. Automation has a range from 150 to 550, and it includes an outlier at 650. Artificial Intelligence shows costs between 200 and 600, with outliers at 700 and 800. Biomedical Engineering has a range from 50 to 250, with outliers at 300 and 350. Lastly, Nanotechnology costs spread from 100 to 300, with outliers at 350 and 400."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data into two 2D lists\ndata = [[100, 200, 300, 400, 500],\n        [150, 250, 350, 450, 550],\n        [200, 300, 400, 500, 600],\n        [50, 100, 150, 200, 250],\n        [100, 150, 200, 250, 300]]\n\noutliers = [[], [650], [700, 800], [300, 350], [350, 400]]\nline_labels = ['Robotics', 'Automation', 'Artificial Intelligence', 'Biomedical Engineering', 'Nanotechnology']\n\n# Plot the data with the type of box plot\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\nax.boxplot(data, whis=1.5)\n\n# Manually plot the outliers\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot([i + 1] * len(outlier), outlier, \"o\")\n\n# Add grid\nax.grid(ls=\"--\", alpha=0.5)\n\n# Set title, x-axis title, y-axis title\nax.set_title(\"Cost of Science and Engineering Technologies in 2021\")\nax.set_xlabel(\"Technology\")\nax.set_xticklabels(line_labels)\n\nax.set_ylabel(\"Cost (USD)\")\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save figure\nplt.savefig(\"./box/png/22_202312251608.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many outliers are there in the cost data for Artificial Intelligence technology?",
            "output": "2"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_38",
        "img": "./box/png/box_38.png",
        "topic": "Human Resources and Employee Management",
        "title": " Salary Range Distribution of Different Employee Groups in 2020",
        "csv": "Employee Group \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Entry Level \\t 25000 \\t 30000 \\t 45000 \\t 60000 \\t 75000 \\t [] \\n Experienced \\t 35000 \\t 45000 \\t 55000 \\t 70000 \\t 85000 \\t [90000;95000] \\n Managerial \\t 45000 \\t 60000 \\t 75000 \\t 90000 \\t 105000 \\t [110000] \\n Senior \\t 55000 \\t 70000 \\t 80000 \\t 95000 \\t 110000 \\t [125000] \\n Executive \\t 65000 \\t 80000 \\t 95000 \\t 110000 \\t 125000 \\t [] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart illustrates the salary range distribution for different employee groups in 2020. Entry-level salaries range from $25,000 (Min) to $75,000 (Max), with a median of $45,000. Experienced group salaries have a Min of $35,000, a Q1 at $45,000, Median at $55,000, Q3 at $70,000, Max at $85,000, with outliers at $90,000 and $95,000. Managerial level ranges from $45,000 to $105,000 with an outlier at $110,000 and the median at $75,000. Senior-level employees have salaries spreading from $55,000 to $110,000, with an outlier at $125,000, and the median at $80,000. The Executive group's range is $65,000 to $125,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Restructure data\ndata = {'Employee Group': ['Entry Level', 'Experienced', 'Managerial', 'Senior', 'Executive'], \n        'Min Salary (USD)': [25000, 35000, 45000, 55000, 65000],\n        'Q1 Salary (USD)': [30000, 45000, 60000, 70000, 80000],\n        'Median Salary (USD)': [45000, 55000, 75000, 80000, 95000],\n        'Q3 Salary (USD)': [60000, 70000, 90000, 95000, 110000],\n        'Max Salary (USD)': [75000, 85000, 105000, 110000, 125000],\n        'Outlier Salary (USD)': [[], [90000, 95000], [110000], [125000], []]\n       }\n\n# Create figure and plot data\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(111)\ndata_values = [data['Min Salary (USD)'], data['Q1 Salary (USD)'], data['Median Salary (USD)'],\n               data['Q3 Salary (USD)'], data['Max Salary (USD)']]\nbp = ax.boxplot(np.array(data_values), patch_artist=True, labels=data['Employee Group'])\n\n# Plot outliers manually\nfor i, outlier in enumerate(data['Outlier Salary (USD)']):\n    if outlier:\n        ax.plot([i + 1]*len(outlier), outlier, 'ro')\n\n# Customize figure\nax.set_title('Salary Range Distribution of Different Employee Groups in 2020')\nax.set_ylabel('Salary Range (USD)')\nax.grid(linestyle='--')\n\n# Auto adjust figure and save\nplt.tight_layout()\nplt.savefig('./box/png/7_202312251315.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which employee group has the smallest interquartile range in their salary distribution?",
            "output": "Entry Level"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_1",
        "img": "./box/png/box_1.png",
        "topic": "Agriculture and Food Production",
        "title": " Crop Yield Distribution in Agriculture and Food Production in 2021",
        "csv": "Crop Type \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Wheat \\t 1 \\t 3 \\t 4.5 \\t 6 \\t 7.5 \\t [] \\n Rice \\t 2 \\t 4 \\t 5.5 \\t 7 \\t 9 \\t [10;11] \\n Corn \\t 1.5 \\t 3.5 \\t 4.7 \\t 6.1 \\t 8.5 \\t [0.5] \\n Soybean \\t 2.5 \\t 4.5 \\t 6 \\t 7.5 \\t 9.5 \\t [15] \\n Barley \\t 1.2 \\t 3.2 \\t 4.3 \\t 5.8 \\t 7.2 \\t [9.9] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box plot illustrates crop yield distribution for Wheat, Rice, Corn, Soybean, and Barley in 2021. Wheat shows no outliers with a range from 1 to 7.5. Rice has outliers at 10 and 11, with a range from 2 to 9. Corn features a lower outlier at 0.5, stretching from 1.5 to 8.5. Soybean has an upper outlier at 15, with its range between 2.5 and 9.5. Lastly, Barley has an outlier at 9.9, and its values fall between 1.2 and 7.2. Each crop's box plot indicates its minimum, first quartile, median, third quartile, and maximum yield values."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = [[1,3,4.5,6,7.5],\n        [2,4,5.5,7,9],\n        [1.5,3.5,4.7,6.1,8.5],\n        [2.5,4.5,6,7.5,9.5],\n        [1.2,3.2,4.3,5.8,7.2]]\n\noutliers = [[], [10, 11], [0.5], [15], [9.9]]\nline_labels = ['Wheat', 'Rice', 'Corn', 'Soybean', 'Barley']\n\nfig = plt.figure(figsize=(8,4))\nax = fig.add_subplot(111)\nax.boxplot(data, whis=1.5)\nax.set_title('Crop Yield Distribution in Agriculture and Food Production in 2021')\nax.set_xticklabels(line_labels)\nax.set_ylabel('Yield (Tonnes)')\n\nfor i, outlier in enumerate(outliers):\n    if outlier:\n        ax.plot(np.repeat(i+1, len(outlier)), outlier, 'r*', markersize=10)\n\nplt.grid(True, lw=1, ls='--', c='.9')\nplt.tight_layout()\nplt.savefig('./box/png/38_202312270030.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the median yield of Soybean?",
            "output": "6"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_13",
        "img": "./box/png/box_13.png",
        "topic": "Law and Legal Affairs",
        "title": " Sentencing Penalty Distribution in Law Courts in 2021",
        "csv": "Court \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Local Court \\t 2 \\t 3 \\t 4 \\t 5 \\t 6 \\t [] \\n State Court \\t 3 \\t 4 \\t 5 \\t 6 \\t 7 \\t [8] \\n District Court \\t 4 \\t 5 \\t 6 \\t 7 \\t 8 \\t [10;11] \\n Supreme Court \\t 5 \\t 6 \\t 7 \\t 8 \\t 9 \\t [12;13] \\n Appellate Court \\t 6 \\t 7 \\t 8 \\t 9 \\t 10 \\t [14] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This box plot illustrates the distribution of sentencing penalties across five different types of law courts in 2021. The data shows the minimum, first quartile, median, third quartile, and maximum penalty values for each court type, as well as outliers. Local Court has penalties ranging from 2 to 6 with no outliers. State Court ranges from 3 to 7 with an outlier at 8. District Court extends from 4 to 8 with outliers at 10 and 11. Supreme Court has a span from 5 to 9 with outliers at 12 and 13. Lastly, Appellate Court shows a range from 6 to 10 with an outlier at 14."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\nplt.figure(figsize=(10,7))\nax = plt.subplot()\n\ndata = [[2,3,4,5,6], [3,4,5,6,7], [4,5,6,7,8], [5,6,7,8,9], [6,7,8,9,10]]\nCourts = ['Local Court', 'State Court', 'District Court', 'Supreme Court', 'Appellate Court']\noutliers = [[], [8], [10, 11], [12, 13], [14]]\n\nax.boxplot(data, labels=Courts, showmeans=True, patch_artist=True)\n\n#iterate through the outliers\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot([i+1] * len(outlier), outlier, 'ro', alpha=0.6)\nax.set_ylabel('Penalty (Years)')\nax.set_title('Sentencing Penalty Distribution in Law Courts in 2021')\n\nfor b in ax.artists:\n    b.set_facecolor('#cccccc')\n    b.set_edgecolor('#000000')\n\nplt.tight_layout()\nplt.savefig('./box/png_val/box_13.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the median sentencing penalty of the State Court?",
            "output": "5"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_47",
        "img": "./box/png/box_47.png",
        "topic": "Environment and Sustainability",
        "title": " Carbon Footprint Distribution of Different Sectors in 2021",
        "csv": "Carbon Footprint \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Household \\t 0.2 \\t 1.2 \\t 2.5 \\t 3.9 \\t 6.5 \\t [] \\n Transportation \\t 2.4 \\t 5.6 \\t 9.1 \\t 13.0 \\t 17.2 \\t [21.2] \\n Manufacturing \\t 11.8 \\t 17.4 \\t 23.2 \\t 30.1 \\t 38.5 \\t [36.2;41.2] \\n Agriculture \\t 8.2 \\t 14.6 \\t 19.8 \\t 26.0 \\t 33.6 \\t [35.9;40.2] \\n Waste \\t 3.4 \\t 7.8 \\t 11.5 \\t 16.2 \\t 21.5 \\t [34.2] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart illustrates the distribution of carbon footprint statistics for different sectors in 2021. Each sector's carbon footprint is denoted by its minimum (Min), first quartile (Q1), median, third quartile (Q3), and maximum (Max) values, with any outliers specifically mentioned. Household footprints range from 0.2 to 6.5 with no outliers. Transportation extends from 2.4 to 17.2 with an outlier at 21.2. Manufacturing shows a spread from 11.8 to 38.5 with outliers at 36.2 and 41.2. Agriculture's footprint is between 8.2 and 33.6 with outliers at 35.9 and 40.2. Lastly, waste varies from 3.4 to 21.5 with an outlier at 34.2."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Restructure the data into two 2D lists\ndata = [[0.2, 1.2, 2.5, 3.9, 6.5], [2.4, 5.6, 9.1, 13.0, 17.2], [11.8, 17.4, 23.2, 30.1, 38.5], \n        [8.2, 14.6, 19.8, 26.0, 33.6], [3.4, 7.8, 11.5, 16.2, 21.5]]\noutliers = [[], [21.2], [36.2, 41.2], [35.9, 40.2], [34.2]]\n\n# Plot the data with the type of box plot\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\nbp = ax.boxplot(data, whis=1.5, patch_artist=True)\n\n# Adjust parameters in ax.boxplot\nfor box in bp['boxes']:\n    box.set(color='#1f77b4', linewidth=2)\n    box.set(facecolor='#1f77b4', alpha=0.2)\nfor whisker in bp['whiskers']:\n    whisker.set(color='#1f77b4', linewidth=2)\nfor cap in bp['caps']:\n    cap.set(color='#1f77b4', linewidth=2)\nfor median in bp['medians']:\n    median.set(color='#ff7f0e', linewidth=2)\n\n# Plot outliers manually\nfor i, outlier in enumerate(outliers):\n    if outlier:\n        ax.plot(np.repeat(i + 1, len(outlier)), outlier, 'ro', markersize=6)\n\n# Add grid and axis label\nax.set_xticklabels(['Household', 'Transportation', 'Manufacturing', 'Agriculture', 'Waste'])\nax.set_ylabel('Carbon Footprint (KgCO2)', rotation=90, fontsize=12, labelpad=20)\nax.yaxis.set_label_coords(-0.08, 0.5)\nax.yaxis.grid(True)\n\n# Set title of figure\nplt.title('Carbon Footprint Distribution of Different Sectors in 2021', fontsize=14)\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('./box/png/37_202312251608.png')\n\n# Clear current image\nplt.clf()"
        },
        "QA": {
            "input": "What is the median carbon footprint of the Agriculture sector?",
            "output": "19.8"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_26",
        "img": "./box/png/box_26.png",
        "topic": "Arts and Culture",
        "title": " Performance Duration Distribution in Arts and Culture (2020)",
        "csv": "Art Form \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Painting \\t 2 \\t 4 \\t 6 \\t 8 \\t 10 \\t [] \\n Music \\t 3 \\t 5 \\t 7 \\t 9 \\t 12 \\t [14] \\n Sculpture \\t 1 \\t 3 \\t 5 \\t 7 \\t 9 \\t [11;13] \\n Dance \\t 4 \\t 7 \\t 10 \\t 13 \\t 16 \\t [18] \\n Theater \\t 2 \\t 5 \\t 7 \\t 9 \\t 12 \\t [14;17] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This box plot represents the distribution of performance durations across different art forms during 2020. Each art form's data is presented as a five-number summary showing the minimum, first quartile (Q1), median, third quartile (Q3), and maximum duration of performances. For Painting, the duration ranges from 2 to 10 with no outliers. Music shows a range from 3 to 12, plus an outlier at 14. Sculpture has a span from 1 to 9, with outliers at 11 and 13. Dance durations range from 4 to 16, with an outlier at 18. Theater has ranges of 2 to 12, with outliers at 14 and 17."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(12,8))\n\ndata = [[2,4,6,8,10],\n        [3,5,7,9,12,14],\n        [1,3,5,7,9,11,13],\n        [4,7,10,13,16,18],\n        [2,5,7,9,12,14,17]]\noutliers = [data[i][5:] if len(data[i]) > 5 else [] for i in range(len(data))]\nlabels = [\"Painting\",\"Music\",\"Sculpture\",\"Dance\",\"Theater\"]\n\nplt.boxplot(np.array([data[i][:5] for i in range(5)]).T,labels=labels,showmeans=True,meanline=True,showfliers=False)\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        plt.plot([i+1] * len(outlier), outlier, 'go', alpha=0.3, markersize=8)\nplt.title(\"Performance Duration Distribution in Arts and Culture (2020)\")\nplt.xticks(rotation=45, ha='right', wrap=True)\nplt.ylabel('Duration (Hours)')\nplt.tight_layout()\nplt.savefig(\"./box/png_val/box_26.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which art form has the highest maximum value excluding outliers?",
            "output": "Dance"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_31",
        "img": "./box/png/box_31.png",
        "topic": "Healthcare and Health",
        "title": " Recovery Time Distribution For Common Diseases in 2020",
        "csv": "Disease \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Flu \\t 4 \\t 10 \\t 15 \\t 20 \\t 30 \\t [] \\n Cold \\t 3 \\t 7 \\t 11 \\t 17 \\t 28 \\t [35] \\n Allergies \\t 2 \\t 5 \\t 9 \\t 13 \\t 22 \\t [27;40] \\n Pneumonia \\t 6 \\t 11 \\t 16 \\t 21 \\t 35 \\t [2;3] \\n Bronchitis \\t 5 \\t 9 \\t 14 \\t 19 \\t 24 \\t [39] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box plot illustrates the distribution of recovery times for common diseases in 2020. It provides statistical data ranges, including minimum, first quartile (Q1), median, third quartile (Q3), and maximum values. For the flu, the box plot values are Min 4, Q1 10, Median 15, Q3 20, and Max 30, with no outliers. The common cold has values Min 3, Q1 7, Median 11, Q3 17, and Max 28, with one outlier at 35. Allergies show Min 2, Q1 5, Median 9, Q3 13, Max 22, with outliers at 27 and 40. Pneumonia presents Min 6, Q1 11, Median 16, Q3 21, Max 35, and outliers at 2 and 3. Finally, bronchitis values are Min 5, Q1 9, Median 14, Q3 19, Max 24, with an outlier at 39."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [[4, 10, 15, 20, 30], [3, 7, 11, 17, 28], [2, 5, 9, 13, 22], [6, 11, 16, 21, 35], [5, 9, 14, 19, 24]]\noutliers = [[], [35], [27, 40], [2, 3], [39]]\n\nfig = plt.figure(figsize=(14,8))\nax = fig.add_subplot()\nax.boxplot(data, whis=1.5)\n\nlabels = ['Flu', 'Cold', 'Allergies', 'Pneumonia', 'Bronchitis']\nax.set_xticklabels(labels, fontsize=14)\nax.set_ylabel('Recovery Time (Days)', fontsize=14)\nax.set_title('Recovery Time Distribution For Common Diseases in 2020', fontsize=16)\n\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot(np.repeat(i+1, len(outlier)), outlier, 'r.', markersize=10)\n\nax.grid(alpha=0.25)\nplt.tight_layout()\nplt.savefig('./box/png/47_202312251608.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "What is the maximum recovery time for Allergies without considering outliers?",
            "output": "22"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_48",
        "img": "./box/png/box_48.png",
        "topic": "Food and Beverage Industry",
        "title": " Delivery Time Distribution of Popular Restaurants in 2021",
        "csv": "Restaurant \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n McDonald's \\t 10 \\t 25 \\t 35 \\t 45 \\t 60 \\t [] \\n KFC \\t 20 \\t 30 \\t 40 \\t 50 \\t 70 \\t [90] \\n Pizza Hut \\t 15 \\t 25 \\t 30 \\t 40 \\t 60 \\t [5;75] \\n Burger King \\t 12 \\t 20 \\t 30 \\t 40 \\t 50 \\t [65] \\n Subway \\t 15 \\t 20 \\t 30 \\t 35 \\t 45 \\t [50;60] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This box plot chart depicts the delivery time distribution for five popular restaurants in 2021. McDonald's has a minimum delivery time of 10 minutes and a maximum of 60, with the middle 50% of times between 25 and 45 minutes. KFC ranges from 20 to 70 minutes, showing an outlier at 90 minutes. Pizza Hut has a span from 15 to 60 minutes with outliers at 5 and 75 minutes. For Burger King, times range from 12 to 50 minutes, with an outlier at 65 minutes. Finally, Subway's delivery times are between 15 and 45 minutes, including outliers at 50 and 60 minutes."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [[10, 25, 35, 45, 60],\n        [20, 30, 40, 50, 70],\n        [15, 25, 30, 40, 60],\n        [12, 20, 30, 40, 50],\n        [15, 20, 30, 35, 45]]\n\n# outliers\noutlier = [[], [90], [5, 75], [65], [50, 60]]\n\n# create figure and subplot\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# plot box plot with given data\nax.boxplot(data, whis=1.5, labels=['McDonald\\'s', 'KFC', 'Pizza Hut', 'Burger King', 'Subway'])\n\n# plot outliers if any\nfor i, o in enumerate(outlier):\n    if len(o) > 0:\n        x = np.repeat(i + 1, len(o))\n        ax.plot(x, o, 'ro')\n\n# set title\nax.set_title('Delivery Time Distribution of Popular Restaurants in 2021')\n\n# set y label\nax.set_ylabel('Delivery Time (Minutes)')\n\n# draw background grids\nax.grid(True, axis='y', ls='--', lw='.5')\n\n# resize the image\nplt.tight_layout()\n\n# save the image\nplt.savefig('./box/png/7_202312270030.png')\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the median delivery time for Pizza Hut?",
            "output": "30"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_3",
        "img": "./box/png/box_3.png",
        "topic": "Technology and the Internet",
        "title": " Product Price Distribution in Technology and the Internet (2021)",
        "csv": "Tech Product \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Smartphone \\t 150 \\t 250 \\t 320 \\t 400 \\t 550 \\t [] \\n Laptop \\t 600 \\t 850 \\t 1000 \\t 1300 \\t 1800 \\t [2100] \\n Tablet \\t 300 \\t 400 \\t 500 \\t 600 \\t 800 \\t [50;950] \\n Wearable \\t 50 \\t 90 \\t 120 \\t 150 \\t 200 \\t [225;300] \\n Smart TV \\t 400 \\t 650 \\t 850 \\t 1000 \\t 1400 \\t [1600] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart illustrates the price distribution for various tech products in 2021, including the minimum, first quartile (Q1), median, third quartile (Q3), maximum, and outliers. Smartphones range from 150 to 550, with no outliers. Laptops span from 600 to 1800, with a single outlier at 2100. Tablets have a range of 300 to 800, with outliers at both 50 and 950. Wearables vary from 50 to 200 with outliers at 225 and 300. Smart TVs are priced between 400 and 1400, with an outlier at 1600."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Restructure the data into two 2D lists. \ndata = [[150,250,320,400,550],\n        [600,850,1000,1300,1800],\n        [300,400,500,600,800],\n        [50,90,120,150,200],\n        [400,650,850,1000,1400]]\n\noutliers = [[], [2100], [50, 950], [225, 300], [1600]]\n\n# Plot the data\nfig = plt.figure(figsize=(15, 8))\nax = fig.add_subplot(111)\n\n# Add box plot\nbox = ax.boxplot(data, whis=1.5)\n\n# Set labels\nax.set_xticklabels(['Smartphone', 'Laptop', 'Tablet', 'Wearable', 'Smart TV'])\nax.set_ylabel('Price (USD)')\n\n# Plot outliers\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot( np.repeat(i+1, len(outlier)), outlier, \"ro\")\n\n# Add grids\nplt.grid(axis='y', alpha=0.75)\n\n# Set title\nax.set_title('Product Price Distribution in Technology and the Internet (2021)')\n\n# Resize and save\nplt.tight_layout()\nplt.savefig('./box/png/16_202312251608.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the maximum price of Smart TVs compared to the maximum price of Smartphones?",
            "output": "$850"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_14",
        "img": "./box/png/box_14.png",
        "topic": "Education and Academics",
        "title": " Funding Distribution in School Districts in 2021",
        "csv": "School District \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n District A \\t 30 \\t 60 \\t 90 \\t 120 \\t 150 \\t [] \\n District B \\t 25 \\t 50 \\t 80 \\t 110 \\t 140 \\t [200] \\n District C \\t 20 \\t 40 \\t 70 \\t 100 \\t 130 \\t [5;40] \\n District D \\t 10 \\t 35 \\t 60 \\t 85 \\t 110 \\t [180] \\n District E \\t 15 \\t 45 \\t 75 \\t 105 \\t 135 \\t [160] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart represents funding distribution across five school districts in 2021. District A displays a range from a minimum of 30 to a maximum of 150, with no outliers. District B extends from 25 to 140 and includes an outlier at 200. District C has values spreading from 20 to 130 with outliers at 5 and another at 40. District D ranges from 10 to 110 and shows an outlier at 180. Lastly, District E has a funding spread from 15 to 135 with an outlier at 160. Each district displays varied funding quartiles (Q1, Median, Q3) indicating different distributions of financial resources."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata =[[30, 60, 90, 120, 150],\n            [25, 50, 80, 110, 140, 200],\n            [20, 40, 70, 100, 130, 5, 40],\n            [10, 35, 60, 85, 110, 180],\n            [15, 45, 75, 105, 135, 160]]\noutliers = [data[i][5:] if len(data[i]) > 5 else [] for i in range(len(data))]\n# Create and set up the figure\nplt.figure(figsize=(10, 8))\nax = plt.subplot()\n# Set figure title\nplt.title(\"Funding Distribution in School Districts in 2021\")\n# Set x-axis label\nax.set_xlabel(\"School Districts\")\n# Set y-axis label\nax.set_ylabel(\"Funding (Million)\")\n# Plot data as boxplot\nax.boxplot(np.array([data[i][:5] for i in range(5)]).T,\n           labels=[\"District A\", \"District B\", \"District C\", \"District D\", \"District E\"])\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot([i+1] * len(outlier), outlier, 'ro', alpha=0.6)\n# Automatically resize the image\nplt.tight_layout()\n# Save figure\nplt.savefig(\"./box/png/9.png\")\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the maximum funding in District A compared to District C?",
            "output": "$20 million"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_10",
        "img": "./box/png/box_10.png",
        "topic": "Real Estate and Housing Market",
        "title": " Property Price Distribution in the Real Estate Market in 2020",
        "csv": "Property Type \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Single Family Home \\t 135000 \\t 155000 \\t 175000 \\t 195000 \\t 215000 \\t [] \\n Apartment \\t 110000 \\t 120000 \\t 130000 \\t 140000 \\t 150000 \\t [350000] \\n Condo \\t 95000 \\t 105000 \\t 115000 \\t 125000 \\t 135000 \\t [14000;90000] \\n Townhouse \\t 120000 \\t 130000 \\t 145000 \\t 155000 \\t 165000 \\t [180000] \\n Vacation Home \\t 200000 \\t 220000 \\t 230000 \\t 240000 \\t 250000 \\t [] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The boxplot showcases price distributions for five property types in the real estate market in 2020. Single Family Homes range from $135,000 to $215,000 without outliers. Apartments show prices from $110,000 to $150,000, with an outlier at $350,000. Condos have prices between $95,000 and $135,000 with outliers at $14,000 and $90,000. Townhouses range from $120,000 to $165,000 with an outlier at $180,000. Vacation Homes have prices from $200,000 to $250,000, also without outliers. The plot includes minimum, first quartile, median, third quartile, and maximum values for each property type."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata =[[135000,155000,175000,195000,215000],\n       [110000,120000,130000,140000,150000],\n       [95000,105000,115000,125000,135000],\n       [120000,130000,145000,155000,165000],\n       [200000,220000,230000,240000,250000]]\noutliers = [[], [350000], [14000,90000], [180000], []]\n\n# Set up figure\nfig = plt.figure(figsize=(20, 10))\nax = fig.add_subplot()\n\n# Plot boxplots\nax.boxplot(data, whis=1.5, showmeans=True, showfliers=False, patch_artist=True)\n\n# Plot outliers\nfor i, outlier in enumerate(outliers):\n    if outlier:\n        x_outlier = [i + 1] * len(outlier)\n        ax.plot(x_outlier, outlier, \"o\", color=\"black\")\n\n# Set labels\nlabels = [\"Single Family Home\", \"Apartment\", \"Condo\", \"Townhouse\", \"Vacation Home\"]\nax.set_xticklabels(labels, rotation=30, va=\"top\", ha=\"right\", wrap=True)\nax.set_ylabel(\"Property Price (USD)\")\n\n# Set background grid\nax.grid(linestyle=\"--\", alpha=0.7)\nax.set_title(\"Property Price Distribution in the Real Estate Market in 2020\")\n\n# Set layout\nplt.tight_layout()\n\n# Save figure\nplt.savefig(\"./box/png/3_202312251608.png\")\n\n# Clear figure state\nplt.clf()"
        },
        "QA": {
            "input": "What is the price range for Condos, from Q1 to Q3?",
            "output": "$105,000 to $125,000"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_16",
        "img": "./box/png/box_16.png",
        "topic": "Social Media and the Web",
        "title": " Social Media User Distribution in 2021",
        "csv": "Social Network \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Facebook \\t 2.5 \\t 3.7 \\t 5.0 \\t 6.2 \\t 7.5 \\t [] \\n Twitter \\t 1.2 \\t 1.7 \\t 2.2 \\t 2.7 \\t 3.2 \\t [4.6] \\n Instagram \\t 1.0 \\t 1.5 \\t 2.0 \\t 2.5 \\t 3.0 \\t [0.02;4.3;6.6] \\n Snapchat \\t 0.8 \\t 1.2 \\t 1.7 \\t 2.2 \\t 2.7 \\t [3.6;5.5] \\n LinkedIn \\t 0.5 \\t 1.0 \\t 1.5 \\t 2.0 \\t 2.5 \\t [4.8] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box plot represents the distribution of social media users across five different platforms in 2021, detailing minimum, first quartile (Q1), median, third quartile (Q3), maximum values, and any outliers. For Facebook, user values range from 2.5 to 7.5, with the median at 5.0, and no outliers. Twitter shows a range of 1.2 to 3.2, with a median of 2.2 and an outlier at 4.6. Instagram's data spans from 1.0 to 3.0, with a median of 2.0 and outliers at 0.02, 4.3, and 6.6. Snapchat's user range is 0.8 to 2.7, with a median of 1.7 and outliers at 3.6 and 5.5. Finally, LinkedIn ranges from 0.5 to 2.5, with a median of 1.5, and an outlier at 4.8."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data into two 2D lists\ndata = [[2.5, 3.7, 5.0, 6.2, 7.5],\n        [1.2, 1.7, 2.2, 2.7, 3.2],\n        [1.0, 1.5, 2.0, 2.5, 3.0],\n        [0.8, 1.2, 1.7, 2.2, 2.7],\n        [0.5, 1.0, 1.5, 2.0, 2.5]]\noutliers = [[], [4.6], [0.02, 4.3, 6.6], [3.6, 5.5], [4.8]]\nline_labels = ['Facebook', 'Twitter', 'Instagram', 'Snapchat', 'LinkedIn']\n\n# Create figure before plotting\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Plot the data with the type of box plot\nax.boxplot(data, whis=1.5)\n\n# Outliers are plotted manually using ax.plot for each category\nfor i, outlier in enumerate(outliers):\n    if outlier:\n        ax.plot(np.repeat(i + 1, len(outlier)), outlier, 'o', color='#000000')\n\n# Drawing techniques such as background grids can be used\nax.yaxis.grid(True)\n\n# The title of y-axis should be given with its unit\nax.set_ylabel('Users (Million)')\nax.set_xticklabels(line_labels)\n\n# The title of the figure should be Social Media User Distribution in 2021\nplt.title('Social Media User Distribution in 2021')\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n# The image must be saved as ./box/png/8_202312251520.png\nplt.savefig('./box/png/8_202312251520.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "What is the range of the median user distribution values for the social networks listed?",
            "output": "1.5 to 5.0"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_50",
        "img": "./box/png/box_50.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Donations Distribution in Nonprofit Organizations in 2020",
        "csv": "Nonprofit Organization \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Organization A \\t 10 \\t 50 \\t 100 \\t 200 \\t 300 \\t [] \\n Organization B \\t 20 \\t 75 \\t 125 \\t 250 \\t 400 \\t [1000] \\n Organization C \\t 30 \\t 90 \\t 140 \\t 250 \\t 450 \\t [20;500] \\n Organization D \\t 25 \\t 80 \\t 120 \\t 200 \\t 350 \\t [] \\n Organization E \\t 15 \\t 60 \\t 110 \\t 180 \\t 300 \\t [1000] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart illustrates the distribution of donations received by five nonprofit organizations in 2020. It shows the minimum, first quartile (Q1), median, third quartile (Q3), and maximum donation amounts. Organization A's donations ranged from 10 to 300 with no outliers. Organization B's donations spanned from 20 to 400, with an outlier at 1000. Organization C received donations from 30 to 450, with outliers at both 20 and 500. Organization D had donations between 25 and 350 without any outliers. Lastly, Organization E's donations ranged from 15 to 300, with an outlier at 1000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(8,6))\nax = plt.subplot()\ndata = [[10,50,100,200,300], [20,75,125,250,400,1000], [30,90,140,250,450,20,500], [25,80,120,200,350], [15,60,110,180,300,1000]]\noutliers = [data[i][5:] if len(data[i]) > 5 else [] for i in range(len(data))]\nlabels = ['Organization A','Organization B','Organization C','Organization D','Organization E']\nax.boxplot(np.array([data[i][:5] for i in range(5)]).T, labels=labels)\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot([i+1] * len(outlier), outlier, 'ro', alpha=0.6)\nax.set_title('Donations Distribution in Nonprofit Organizations in 2020')\nax.set_xlabel('Nonprofit Organization')\nax.set_ylabel('Donations (Dollars)')\nplt.tight_layout()\nplt.savefig('./box/png/14.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the third quartile (Q3) donation value for Organization E?",
            "output": "180"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_37",
        "img": "./box/png/box_37.png",
        "topic": "Retail and E-commerce",
        "title": " Spending Distribution in Retail Types in 2021",
        "csv": "Retail Type \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Grocery Shopping \\t 10 \\t 30 \\t 50 \\t 70 \\t 100 \\t [] \\n Clothing Shopping \\t 20 \\t 50 \\t 80 \\t 110 \\t 150 \\t [200] \\n Online Shopping \\t 15 \\t 40 \\t 65 \\t 90 \\t 120 \\t [130;160] \\n Home Appliance \\t 25 \\t 60 \\t 90 \\t 120 \\t 170 \\t [190] \\n Home Decoration \\t 15 \\t 50 \\t 80 \\t 110 \\t 140 \\t [180] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart titled \"Spending Distribution in Retail Types in 2021\" visualizes the spread of spending across five retail categories with minimum, first quartile (Q1), median, third quartile (Q3), and maximum values. For Grocery Shopping, spend ranges from a minimum of 10 to a maximum of 100 with no outliers. Clothing Shopping has a minimum of 20, a median of 80, and an outlier at 200. Online Shopping's spread is from 15 to 120 with outliers at 130 and 160. Home Appliance expenditure extends from 25 to 170 with an outlier at 190. Lastly, Home Decoration spending varies from 15 to 140 with an outlier at 180."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data\nretail_type = ['Grocery Shopping', 'Clothing Shopping', 'Online Shopping', 'Home Appliance', 'Home Decoration']\nmin_spend = [10, 20, 15, 25, 15]\nQ1_spend = [30, 50, 40, 60, 50]\nmedian_spend = [50, 80, 65, 90, 80]\nQ3_spend = [70, 110, 90, 120, 110]\nmax_spend = [100, 150, 120, 170, 140]\noutliers = [[], [200], [130, 160], [190], [180]]\n\n# Plotting\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\nax.set_title('Spending Distribution in Retail Types in 2021')\nax.set_ylabel('Spending ($)')\n\n# Transform the data into a 2D list\ndata = [min_spend, Q1_spend, median_spend, Q3_spend, max_spend]\ndata = np.array(data).T.tolist()\n\n# Plot the box plot\nax.boxplot(data, showmeans=True, meanline=True)\n\n# Plot the outliers\nfor i, outlier in enumerate(outliers):\n    if outlier:\n        ax.plot([i + 1] * len(outlier), outlier, 'ro')\n\n# Drawing techniques\nax.grid(linestyle='--', alpha=0.5)\n\n# Add labels\nax.set_xticklabels(retail_type, rotation=45, ha='right', wrap=True)\n\n# Resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./box/png/14_202312251520.png')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many outliers are there in the Online Shopping category?",
            "output": "2"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_21",
        "img": "./box/png/box_21.png",
        "topic": "Sports and Entertainment",
        "title": " Score Distribution of Sports Teams in 2020",
        "csv": "Sports Team \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Team A \\t 20 \\t 50 \\t 70 \\t 90 \\t 120 \\t [] \\n Team B \\t 25 \\t 60 \\t 80 \\t 95 \\t 125 \\t [150] \\n Team C \\t 30 \\t 65 \\t 75 \\t 100 \\t 130 \\t [95;160] \\n Team D \\t 15 \\t 55 \\t 75 \\t 85 \\t 115 \\t [150;180] \\n Team E \\t 35 \\t 70 \\t 80 \\t 90 \\t 110 \\t [125] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box plot represents score distribution for five sports teams in 2020. Team A's scores range from a minimum of 20 to a maximum of 120, with a median score of 70. Team B's scores span from 25 to 125 and include an outlier at 150. Team C has a wider range, from 30 to 130, and outliers at 95 and 160. Team D's scores extend from 15 to 115, also with outliers at 150 and 180. Team E's distribution is from 35 to 110 with an outlier at 125. Each team has a box indicating the interquartile range from Q1 to Q3."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n# Import Libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure data\ndata = [\n    [20, 50, 70, 90, 120],\n    [25, 60, 80, 95, 125],\n    [30, 65, 75, 100, 130],\n    [15, 55, 75, 85, 115],\n    [35, 70, 80, 90, 110]\n]\n\noutliers = [\n    [],\n    [150],\n    [95, 160],\n    [150, 180],\n    [125]\n]\n\n# Plot\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot()\n\nax.boxplot(data, whis=1.5)\n\n# Add Outliers\nfor i, o in enumerate(outliers):\n    if o:\n        x = np.full(len(o), i + 1)\n        ax.plot(x, o, 'ro', fillstyle='none', markersize=5)\n\n# Set Labels\nax.set_title('Score Distribution of Sports Teams in 2020', fontsize=14)\nax.set_ylabel('Score (Points)', fontsize=12)\nax.set_xticklabels(['Team A', 'Team B', 'Team C', 'Team D', 'Team E'], fontsize=12, rotation=45, ha='right', wrap=True)\n\n# Set Background\nax.grid(True, alpha=0.3, axis='y')\n\n# Save Figure\nplt.tight_layout()\nplt.savefig('./box/png/48_202312270030.png', dpi=100)\n\n# Clear\nplt.cla()"
        },
        "QA": {
            "input": "What is the median score of Team C?",
            "output": "75"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_18",
        "img": "./box/png/box_18.png",
        "topic": "Energy and Utilities",
        "title": " Electrical Output Distribution of Power Plants in 2020",
        "csv": "Power Plant \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Plant A \\t 100 \\t 500 \\t 1000 \\t 1500 \\t 2000 \\t [] \\n Plant B \\t 150 \\t 600 \\t 1100 \\t 1600 \\t 2100 \\t [2500] \\n Plant C \\t 200 \\t 700 \\t 1200 \\t 1700 \\t 2200 \\t [50;3000] \\n Plant D \\t 250 \\t 800 \\t 1300 \\t 1800 \\t 2300 \\t [2500;2900] \\n Plant E \\t 300 \\t 900 \\t 1400 \\t 1900 \\t 2400 \\t [2800] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart illustrates the electrical output distribution of five power plants in 2020, displaying minimum, first quartile (Q1), median, third quartile (Q3), maximum, and any outliers. Power Plant A's output ranges from 100 to 2000 without outliers. Plant B has an output range of 150 to 2100 with an outlier at 2500. Plant C's range is 200 to 2200, with outliers at 50 and 3000. Plant D spans from 250 to 2300, with outliers at 2500 and 2900. Lastly, Plant E shows a range from 300 to 2400 with a single outlier at 2800."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [[100, 500, 1000, 1500, 2000], [150, 600, 1100, 1600, 2100], [200, 700, 1200, 1700, 2200], [250, 800, 1300, 1800, 2300], [300, 900, 1400, 1900, 2400]]\noutliers = [[], [2500], [50, 3000], [2500, 2900], [2800]]\n\nline_labels = ['Plant A', 'Plant B', 'Plant C', 'Plant D', 'Plant E']\n\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot(111)\nax.boxplot(data, whis=1.5, patch_artist=True)\n\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot([i + 1] * len(outlier), outlier, \"ro\")\n\nax.set_title(\"Electrical Output Distribution of Power Plants in 2020\")\nax.set_xticklabels(line_labels)\nax.set_ylabel(\"Output (KW)\")\nax.grid(color='#95a5a6', linestyle='--', linewidth=1, axis='y', alpha=0.7)\n\nfig.tight_layout()\nplt.savefig(\"./box/png/3_202312251520.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which power plant had outliers beyond the higher end of its output distribution?",
            "output": "Plant C"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_28",
        "img": "./box/png/box_28.png",
        "topic": "Science and Engineering",
        "title": " Project Cost Distribution in Engineering Fields (2021)",
        "csv": "Engineering Field \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Construction \\t 1000 \\t 3000 \\t 5000 \\t 7000 \\t 15000 \\t [] \\n Chemical \\t 2000 \\t 4000 \\t 6000 \\t 8000 \\t 14000 \\t [20000] \\n Mechanical \\t 1500 \\t 3000 \\t 5000 \\t 7000 \\t 12000 \\t [0.5;18000] \\n Electrical \\t 2500 \\t 4500 \\t 6500 \\t 8500 \\t 13000 \\t [15500] \\n Computer \\t 1000 \\t 3000 \\t 5000 \\t 7000 \\t 11000 \\t [18000] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box plot illustrates project cost distribution across different engineering fields in 2021. For Construction, costs range from a minimum of 1000 to a maximum of 15000, with median costs at 5000. Chemical engineering shows a range from 2000 to 14000, median at 6000, and an outlier at 20000. Mechanical engineering ranges from 1500 to 12000, with a median of 5000, and outliers at 0.5 and 18000. Electrical engineering costs span from 2500 to 13000, with a median of 6500 and an outlier at 15500. Computer engineering has a span of 1000 to 11000, median at 5000, with an outlier at 18000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\ndata = [[1000, 3000, 5000, 7000, 15000],\n        [2000, 4000, 6000, 8000, 14000],\n        [1500, 3000, 5000, 7000, 12000],\n        [2500, 4500, 6500, 8500, 13000],\n        [1000, 3000, 5000, 7000, 11000]]\n\noutliers = [[],\n            [20000],\n            [0.5, 18000],\n            [15500],\n            [18000]]\n\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(1, 1, 1)\n\nax.set_title('Project Cost Distribution in Engineering Fields (2021)')\nax.set_ylabel('Cost (Dollars)')\n\ncategory = ['Construction', 'Chemical', 'Mechanical', 'Electrical', 'Computer']\nax.boxplot(data, whis=1.5, labels=category)\n\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot([i + 1] * len(outlier), outlier, 'r*')\n\nsns.set_style('whitegrid')\nplt.tight_layout()\nplt.savefig('./box/png/18_202312251608.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the median project cost in the Mechanical field?",
            "output": "5000"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_2",
        "img": "./box/png/box_2.png",
        "topic": "Retail and E-commerce",
        "title": " Product Price Distribution in Different Types of Stores in 2021",
        "csv": "Store \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Department Store \\t 5 \\t 20 \\t 50 \\t 90 \\t 120 \\t [] \\n Grocery Store \\t 7 \\t 25 \\t 60 \\t 100 \\t 150 \\t [200] \\n Online Store \\t 12 \\t 30 \\t 70 \\t 110 \\t 160 \\t [2;180] \\n Boutique \\t 10 \\t 35 \\t 60 \\t 80 \\t 130 \\t [170] \\n Discount Store \\t 3 \\t 15 \\t 40 \\t 70 \\t 100 \\t [200;220] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart illustrates the distribution of product prices at different types of stores in 2021. It includes the minimum, first quartile (Q1), median, third quartile (Q3), and maximum values, along with outliers. Department Stores range from a minimum of 5 to a maximum of 120 with no outliers. Grocery Stores have a price range from 7 to 150, with an outlier at 200. Online Stores span from 12 to 160 and have outliers at 2 and 180. Boutiques show a range from 10 to 130, with an outlier at 170. Lastly, Discount Stores have product prices ranging from 3 to 100, with outliers at 200 and 220."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data\nstore = ['Department Store', 'Grocery Store', 'Online Store', 'Boutique', 'Discount Store']\nmin_price = [5, 7, 12, 10, 3]\nQ1_price = [20, 25, 30, 35, 15]\nmedian_price = [50, 60, 70, 60, 40]\nQ3_price = [90, 100, 110, 80, 70]\nmax_price = [120, 150, 160, 130, 100]\noutliers = [[], [200], [2, 180], [170], [200, 220]]\n\n# Plot the data\nfig, ax = plt.subplots(figsize=(10, 6))\nax.set_title('Product Price Distribution in Different Types of Stores in 2021')\nax.set_ylabel('Price (USD)')\nax.set_xlabel('Type of Store')\nax.set_xticklabels(store, rotation=45, wrap=True)\n\n# Transform the data into a 2D list\ndata = np.array([min_price, Q1_price, median_price, Q3_price, max_price])\n\n# Plot the box plot\nax.boxplot(data, showmeans=True)\n\n# Plot the outlier\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot(np.repeat(i + 1, len(outlier)), outlier, 'ro', alpha=0.5)\n\n# Add background grids\nax.yaxis.grid(True)\nax.xaxis.grid(False)\n\n# Resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./box/png/4_202312251315.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the median product price in an Online Store?",
            "output": "70"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_40",
        "img": "./box/png/box_40.png",
        "topic": "Agriculture and Food Production",
        "title": " Crop Yield Distribution in Agriculture and Food Production (2021)",
        "csv": "Produce Type \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Wheat \\t 100 \\t 300 \\t 500 \\t 700 \\t 900 \\t [] \\n Corn \\t 200 \\t 400 \\t 600 \\t 800 \\t 1000 \\t [1500] \\n Rice \\t 150 \\t 350 \\t 550 \\t 750 \\t 950 \\t [100;1700] \\n Soybeans \\t 250 \\t 450 \\t 650 \\t 850 \\t 1050 \\t [1350;1800] \\n Barley \\t 110 \\t 310 \\t 510 \\t 710 \\t 910 \\t [1600] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This box plot chart represents the distribution of crop yields for various produce types in 2021. Wheat shows a range from a minimum of 100 to a maximum of 900 with no outliers. Corn's yield ranges between 200 and 1000 with an outlier at 1500. Rice has a distribution from 150 to 950 and includes outliers at 100 and 1700. Soybeans' yield extends from 250 to 1050, with outliers at 1350 and 1800. Lastly, Barley ranges from 110 to 910 with an outlier at 1600. The median values are prominently marked for each crop type: 500 for Wheat, 600 for Corn, 550 for Rice, 650 for Soybeans, and 510 for Barley."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [[100, 300, 500, 700, 900], \n        [200, 400, 600, 800, 1000], \n        [150, 350, 550, 750, 950], \n        [250, 450, 650, 850, 1050], \n        [110, 310, 510, 710, 910]]\n\noutliers = [[], [1500], [100, 1700], [1350, 1800], [1600]]\n\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot()\nax.boxplot(data, whis=1.5, showmeans=True, labels=['Wheat', 'Corn', 'Rice', 'Soybeans', 'Barley'])\nplt.title('Crop Yield Distribution in Agriculture and Food Production (2021)', fontsize=14)\nplt.ylabel('Yield (Kg/Ha)', fontsize=12)\n\nfor i, outlier in enumerate(outliers):\n    if outlier:\n        x_coord = [i + 1] * len(outlier)\n        ax.plot(x_coord, outlier, \"ro\")\n\nax.grid(axis='y', alpha=0.5)\n\nfig.tight_layout()\nplt.savefig('./box/png/39_202312251608.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "What is the range of the interquartile for Rice?",
            "output": "$400"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_36",
        "img": "./box/png/box_36.png",
        "topic": "Real Estate and Housing Market",
        "title": " Housing Price Distribution in Different Areas in 2021",
        "csv": "Area \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Central \\t 500 \\t 1000 \\t 2000 \\t 3000 \\t 4000 \\t [] \\n West \\t 600 \\t 1200 \\t 2200 \\t 3200 \\t 5000 \\t [7000] \\n North \\t 400 \\t 1100 \\t 1800 \\t 2500 \\t 3500 \\t [200;8000] \\n East \\t 300 \\t 900 \\t 1500 \\t 2100 \\t 3000 \\t [4500;7000] \\n South \\t 450 \\t 1300 \\t 1900 \\t 2700 \\t 3800 \\t [1800] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart presents the distribution of housing prices across five areas in 2021. Central area figures range from a minimum of 500 to a maximum of 4000, with no outliers. West area prices extend from 600 to 5000, with one outlier at 7000. North area values span from 400 to 3500, with outliers at 200 and 8000. East area housing prices vary between 300 and 3000, with outliers at 4500 and 7000. Lastly, the South area shows a range from 450 to 3800 and includes an outlier priced at 1800."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.array([[500,1000,2000,3000,4000],\n                 [600,1200,2200,3200,5000],\n                 [400,1100,1800,2500,3500],\n                 [300,900,1500,2100,3000],\n                 [450,1300,1900,2700,3800]])\noutliers = [[], [7000], [200, 8000], [4500, 7000], [1800]]\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(111)\nax.set_title('Housing Price Distribution in Different Areas in 2021')\nax.boxplot(data.T, labels=['Central','West','North','East','South'],\n           notch=True, sym='b+', vert=True, whis=1.5,showmeans=True)\n# Plot outliers manually\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot(np.repeat(i + 1, len(outlier)), outlier, 'ro', alpha=0.6)\n\nax.set_ylabel('Price (USD)')\nplt.tight_layout()\nplt.savefig('./box/png/20.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the range of the Q3 (3rd quartile) housing prices across all areas?",
            "output": "$2700"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_43",
        "img": "./box/png/box_43.png",
        "topic": "Healthcare and Health",
        "title": " Severity Scale of Common Diseases in Healthcare (2020)",
        "csv": "Disease \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Covid-19 \\t 3 \\t 6 \\t 8 \\t 9 \\t 10 \\t [] \\n Influenza \\t 2 \\t 4 \\t 7 \\t 8 \\t 9 \\t [1;10] \\n Measles \\t 1 \\t 4 \\t 5 \\t 7 \\t 8 \\t [9;10] \\n Mumps \\t 2 \\t 3 \\t 5 \\t 7 \\t 9 \\t [1;10] \\n Tuberculosis \\t 4 \\t 6 \\t 7 \\t 8 \\t 9 \\t [10] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box plot chart represents the severity scale of common diseases in 2020. For Covid-19, the minimum severity rating is 3, Q1 is 6, the median is 8, Q3 is 9, and the maximum is 10, with no outliers. Influenza shows a minimum of 2, Q1 of 4, a median of 7, Q3 of 8, and a maximum of 9, with outliers at severity 1 and 10. Measles ranges from a minimum of 1 to a maximum of 8, with outliers at 9 and 10. Mumps severity begins at 2 and goes up to 9, with outliers at 1 and 10. Tuberculosis has severity ratings from 4 to 9, with an outlier at 10."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data into two 2D lists\ndata = [[3,6,8,9,10],[2,4,7,8,9],[1,4,5,7,8],[2,3,5,7,9],[4,6,7,8,9]]\noutliers = [[],[1,10],[9,10],[1,10],[10]]\nline_labels = ['Covid-19', 'Influenza', 'Measles', 'Mumps', 'Tuberculosis']\n\n# Plot the data with the type of box plot\nfig, ax = plt.subplots()\nax.boxplot(data, whis=1.5)\n\n# Plot the outliers manually\nfor i, outlier in enumerate(outliers):\n    if len(outlier) != 0:\n        ax.plot(np.repeat(i + 1, len(outlier)), outlier, 'ro')\n\n# Set the title of y-axis\nax.set_xticklabels(line_labels)\nax.set_ylabel('Severity (Scale 1-10)')\n\n# Drawing techniques such as background grids\nax.yaxis.grid(True)\n\n# Set the title of the figure\nax.set_title('Severity Scale of Common Diseases in Healthcare (2020)')\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./box/png/36_202312251608.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which disease has the lowest median severity scale?",
            "output": "Measles"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_41",
        "img": "./box/png/box_41.png",
        "topic": "Environment and Sustainability",
        "title": " Greenhouse Gas Emission Distribution in Different Countries (2021)",
        "csv": "Greenhouse Gas Emission \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Country A \\t 2.5 \\t 4.2 \\t 5.7 \\t 7.4 \\t 9.2 \\t [] \\n Country B \\t 3.5 \\t 5.5 \\t 7.2 \\t 8.7 \\t 10.2 \\t [14.5] \\n Country C \\t 2.0 \\t 4.2 \\t 6.1 \\t 7.8 \\t 9.2 \\t [1.2;12.5;14.5] \\n Country D \\t 4.5 \\t 6.2 \\t 7.9 \\t 9.5 \\t 11.3 \\t [13.0;14.2] \\n Country E \\t 3.2 \\t 5.3 \\t 7.0 \\t 8.9 \\t 10.2 \\t [13.5] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box plot illustrates the distribution of greenhouse gas emissions across five different countries in 2021. Each country's data point shows the minimum, first quartile (Q1), median, third quartile (Q3), and maximum emission values. Country A's emission values range from 2.5 (Min) to 9.2 (Max) without outliers. Country B has a range from 3.5 to 10.2, with an outlier at 14.5. Country C shows a broader spread from 2.0 to 9.2 and includes outliers at 1.2, 12.5, and 14.5. Country D's emissions range from 4.5 to 11.3, with outliers at 13.0 and 14.2. Last, Country E has emissions spanning 3.2 to 10.2 and an outlier at 13.5."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data into two 2D lists\ndata = [[2.5, 4.2, 5.7, 7.4, 9.2], \n        [3.5, 5.5, 7.2, 8.7, 10.2], \n        [2.0, 4.2, 6.1, 7.8, 9.2],\n        [4.5, 6.2, 7.9, 9.5, 11.3],\n        [3.2, 5.3, 7.0, 8.9, 10.2]]\noutliers = [[], [14.5], [1.2, 12.5, 14.5], [13.0, 14.2], [13.5]]\n\n# Plot the data with the type of box plot\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111)\nax.boxplot(data, whis=1.5)\n\n# Plot the outliers manually\nfor i, outlier in enumerate(outliers):\n    if outlier:\n        ax.plot(np.repeat(i + 1, len(outlier)), outlier, 'o', markersize=6, color='blue')\n\n# Draw background grids\nax.grid(linestyle='--', alpha=0.5)\n\n# Set labels\nax.set_xticklabels(['Country A', 'Country B', 'Country C', 'Country D', 'Country E'], fontsize=10)\nax.set_ylabel('Emission (Tonnes)', fontsize=10)\n\n# Set title\nax.set_title('Greenhouse Gas Emission Distribution in Different Countries (2021)', fontsize=14)\n\n# Resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./box/png/44_202312270030.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the maximum greenhouse gas emission value for Country C without considering outliers?",
            "output": "9.2"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_20",
        "img": "./box/png/box_20.png",
        "topic": "Government and Public Policy",
        "title": " Efficiency Ranking of Government Agencies in 2021",
        "csv": "Government Agency \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Federal Agency \\t 60 \\t 80 \\t 90 \\t 95 \\t 99 \\t [] \\n State Agency \\t 75 \\t 85 \\t 90 \\t 95 \\t 98 \\t [100;102] \\n Local Agency \\t 50 \\t 70 \\t 85 \\t 90 \\t 95 \\t [110;112] \\n County Agency \\t 70 \\t 80 \\t 85 \\t 90 \\t 95 \\t [100;101] \\n Municipal Agency \\t 60 \\t 75 \\t 85 \\t 95 \\t 98 \\t [99;102] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box plot represents the efficiency ranking of various government agencies in 2021, showing minimum, first quartile (Q1), median, third quartile (Q3), maximum, and outliers for their scores. Federal Agency scores range from 60 to 99 without outliers. State Agency's scores are contained between 75 and 98, with outliers at 100 and 102. Local Agency scores span from 50 to 95 with outliers at 110 and 112. County Agency shows a range of 70 to 95, with outliers at 100 and 101. Municipal Agency has a range between 60 and 98 and outliers at 99 and 102."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data into two 2D lists\ndata = [[60,80,90,95,99], [75,85,90,95,98], [50,70,85,90,95], [70,80,85,90,95], [60,75,85,95,98]]\noutliers = [[], [100,102], [110,112], [100,101], [99,102]]\n\n# Plot the data with the type of box plot\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111)\nax.boxplot(data, whis=1.5)\n\n# Outliers are plotted manually using ax.plot for each category\nfor i, outlier in enumerate(outliers):\n    if outlier:\n        x = [i + 1] * len(outlier)\n        ax.plot(x, outlier, 'ro')\n\n# Adjust the parameters\nax.set_title('Efficiency Ranking of Government Agencies in 2021')\nax.set_xlabel('Government Agency')\nax.set_ylabel('Efficiency (%)')\nax.set_xticklabels(['Federal Agency', 'State Agency', 'Local Agency', 'County Agency', 'Municipal Agency'])\n\n# Add background grids\nax.grid(linestyle='--', alpha=0.3)\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./box/png/22_202312270030.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many outliers are there in total across all government agencies?",
            "output": "6"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_22",
        "img": "./box/png/box_22.png",
        "topic": "Tourism and Hospitality",
        "title": " Hotel Ratings Distribution in Tourism and Hospitality in 2021",
        "csv": "Hotel \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Hotel A \\t 2.5 \\t 3.3 \\t 4.0 \\t 4.7 \\t 5.0 \\t [] \\n Hotel B \\t 2.8 \\t 3.6 \\t 4.2 \\t 4.9 \\t 5.2 \\t [4.2] \\n Hotel C \\t 3.0 \\t 3.7 \\t 4.3 \\t 5.0 \\t 5.4 \\t [4.9;2.3] \\n Hotel D \\t 2.4 \\t 3.2 \\t 3.9 \\t 4.6 \\t 5.1 \\t [1.5;2.2;4.4] \\n Hotel E \\t 2.7 \\t 3.5 \\t 4.1 \\t 4.8 \\t 5.3 \\t [5.0] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart illustrates the distribution of hotel ratings in the tourism and hospitality sector for the year 2021. The hotels, labeled A through E, display a range of ratings from 'Min' to 'Max' with their respective quartiles (Q1, Median, Q3). Hotel A ranges between 2.5 to 5.0 without outliers, whereas Hotel B ranges from 2.8 to 5.2 with a single outlier at 4.2. Hotel C's ratings span from 3.0 to 5.4, with outliers at 4.9 and 2.3. Hotel D has a range of 2.4 to 5.1, with outliers at 1.5, 2.2, and 4.4. Lastly, Hotel E ranges from 2.7 to 5.3, with an outlier at 5.0."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data\ndata = [[2.5, 3.3, 4.0, 4.7, 5.0],\n        [2.8, 3.6, 4.2, 4.9, 5.2],\n        [3.0, 3.7, 4.3, 5.0, 5.4],\n        [2.4, 3.2, 3.9, 4.6, 5.1],\n        [2.7, 3.5, 4.1, 4.8, 5.3]]\n\noutliers = [[], [4.2], [4.9, 2.3], [1.5, 2.2, 4.4], [5.0]]\n\n# Plot the data\nfig = plt.figure(figsize=(10, 5))\nax = fig.add_subplot(111)\nax.boxplot(data, whis=1.5, patch_artist=True)\n\n# Manually plot outliers\nfor i, outlier in enumerate(outliers):\n    if outlier:\n        x = [i + 1] * len(outlier)\n        y = outlier\n        ax.plot(x, y, 'ro', markerfacecolor='black', alpha=0.6)\n\n# Set x-axis label\nax.set_xticklabels(['Hotel A', 'Hotel B', 'Hotel C', 'Hotel D', 'Hotel E'], rotation=90)\n\n# Set y-axis label\nax.set_ylabel('Rating (Out of 5)')\n\n# Add grid\nax.grid(linestyle='--', alpha=0.6)\n\n# Add title\nax.set_title('Hotel Ratings Distribution in Tourism and Hospitality in 2021')\n\n# Adjust layout automatically\nplt.tight_layout()\n\n# Save image\nplt.savefig('./box/png/27_202312270030.png')\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the median rating of Hotel D?",
            "output": "3.9"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_42",
        "img": "./box/png/box_42.png",
        "topic": "Technology and the Internet",
        "title": " Price Distribution of Technology Consumer Products in 2021",
        "csv": "Consumer Product \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Smartphone \\t 50 \\t 200 \\t 350 \\t 500 \\t 750 \\t [] \\n Tablet \\t 100 \\t 300 \\t 450 \\t 600 \\t 900 \\t [1000] \\n Smartwatch \\t 30 \\t 150 \\t 250 \\t 350 \\t 400 \\t [500;600] \\n Smart Speaker \\t 20 \\t 50 \\t 100 \\t 150 \\t 200 \\t [250;350] \\n Laptop \\t 500 \\t 800 \\t 1000 \\t 1200 \\t 1400 \\t [1600] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box chart illustrates the price distribution of various technology consumer products in 2021. It includes the minimum, first quartile (Q1), median, third quartile (Q3), and maximum price values, as well as any outliers for each product category. Smartphones range from 50 to 750, with no outliers. Tablets have a spread from 100 to 900, with an outlier at 1000. Smartwatches range from 30 to 400, with outliers at 500 and 600. Smart Speakers show a range from 20 to 200, with outliers at 250 and 350. Lastly, Laptops display a price range from 500 to 1400 with an outlier at 1600."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nconsumer_product = [\"Smartphone\", \"Tablet\", \"Smartwatch\", \"Smart Speaker\", \"Laptop\"]\nmin_price = [50, 100, 30, 20, 500]\nfirst_quartile = [200, 300, 150, 50, 800]\nmedian_price = [350, 450, 250, 100, 1000]\nthird_quartile = [500, 600, 350, 150, 1200]\nmax_price = [750, 900, 400, 200, 1400]\noutlier_price = [[], [1000], [500, 600], [250, 350], [1600]]\nline_labels = ['Smartphone', 'Tablet', 'Smartwatch', 'Smart Speaker', 'Laptop']\n\n# Restructure the data into two 2D lists\ndata = [min_price, first_quartile, median_price, third_quartile, max_price]\ndata = np.array(data)\n\n# Create figure before plotting\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot the data with the type of box plot\nax.boxplot(data, whis=1.5)\n\n# Manually plot outliers\nfor i, outlier in enumerate(outlier_price):\n    if len(outlier) > 0:\n        ax.scatter(np.full(len(outlier), i + 1), outlier, marker='x', s=100, color='r')\n\n# Drawing techniques such as background grids\nax.grid(axis='y', alpha=0.4)\nax.set_xticklabels(line_labels)\n\n# Title of y-axis with its unit\nplt.ylabel('Price (USD)')\n\n# Title of the figure\nplt.title('Price Distribution of Technology Consumer Products in 2021')\n\n# Automatically resize the image by tight_layout() \nplt.tight_layout()\n\n# Save fig\nplt.savefig('./box/png/24_202312251608.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many outliers does the Smartwatch have?",
            "output": "2"
        }
    },
    {
        "chart_type": "box",
        "imgname": "box_23",
        "img": "./box/png/box_23.png",
        "topic": "Real Estate and Housing Market",
        "title": " Home Price Distribution in Different Range in 2021",
        "csv": "Home Price Range \\t Min \\t Q1 \\t Median \\t Q3 \\t Max \\t Outlier \\n Low Range \\t 100000 \\t 150000 \\t 200000 \\t 250000 \\t 300000 \\t [] \\n Middle Range \\t 200000 \\t 250000 \\t 350000 \\t 400000 \\t 500000 \\t [550000] \\n High Range \\t 400000 \\t 500000 \\t 650000 \\t 750000 \\t 900000 \\t [1000000;1100000] \\n Luxury Range \\t 600000 \\t 700000 \\t 850000 \\t 950000 \\t 1100000 \\t [1200000] \\n Super Luxury Range \\t 800000 \\t 900000 \\t 1000000 \\t 1100000 \\t 1200000 \\t [] \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The box plot represents the distribution of home prices within five different price ranges in 2021. For Low Range homes, prices span from a minimum of \\$100,000 to a maximum of \\$300,000. Middle Range homes range between \\$200,000 to \\$500,000 with an outlier at \\$550,000. High Range homes show prices from \\$400,000 to \\$900,000 with outliers at \\$1,000,000 and \\$1,100,000. Luxury Range homes have a price spread from \\$600,000 to \\$1,100,000 with an outlier at \\$1,200,000. Finally, Super Luxury Range homes are priced from \\$800,000 to \\$1,200,000 with no outliers recorded."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = [[100000, 150000, 200000, 250000, 300000], [200000, 250000, 350000, 400000, 500000, 550000], [400000, 500000, 650000, 750000, 900000, 1000000, 1100000], [600000, 700000, 850000, 950000, 1100000, 1200000], [800000, 900000, 1000000, 1100000, 1200000]]\noutliers = [data[i][5:] if len(data[i]) > 5 else [] for i in range(len(data))]\n\n# Create figure\nfig = plt.figure(figsize=(14, 8))\n\n# Create axes\nax = fig.add_subplot(111)\n\n# Plot data\nax.boxplot(np.array([data[i][:5] for i in range(5)]).T, notch=True, patch_artist=True, labels=['Low Range','Middle Range','High Range','Luxury Range','Super Luxury Range'])\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot([i+1] * len(outlier), outlier, 'go', alpha=0.3, markersize=8)\n# Set title\nax.set_title('Home Price Distribution in Different Range in 2021')\n\n# Set x and y axis labels\nax.set_xlabel('Price Range')\nax.set_ylabel('Price (USD)')\n\n# Rotate x-axis labels\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Resize image\nplt.tight_layout()\n\n# Save fig\nplt.savefig('./box/png/22.png')\n\n# Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "What is the median home price in the super luxury range?",
            "output": "$1,000,000"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_20",
        "img": "./bubble/png/bubble_20.png",
        "topic": "Arts and Culture",
        "title": " Market Valuation of Artworks by Popularity and Creativity.",
        "csv": "Artwork \\t Price (Millions) \\t Popularity (Score) \\t Demand (Score) \\t Creativity (Score) \\n Painting \\t 5 \\t 90 \\t 85 \\t 95 \\n Sculpture \\t 3 \\t 85 \\t 90 \\t 85 \\n Photograph \\t 2 \\t 75 \\t 80 \\t 90 \\n Installation \\t 1 \\t 75 \\t 70 \\t 95 \\n Performance \\t 1 \\t 80 \\t 75 \\t 90 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bubble chart illustrates market valuations of different types of artworks, highlighting their prices in millions, popularity scores, demand scores, and creativity scores. Paintings are priced at $5 million with a popularity score of 90, a demand score of 85, and a creativity score of 95. Sculptures have a $3 million price tag, 85 in popularity, 90 in demand, and 85 in creativity. Photographs are valued at $2 million, score 75 in both popularity and demand, and 90 in creativity. Installations come in at $1 million with equal popularity and demand scores of 75, and a high creativity score of 95. Lastly, performances also have a $1 million price, an 80 popularity score, a 75 demand score, and a 90 creativity score."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\nimport numpy as np\n\n# transform the given data into three variables\ndata_labels = ['Price (Millions)', 'Popularity (Score)', 'Demand (Score)', 'Creativity (Score)']\ndata = np.array([[5, 90, 85, 95], [3, 85, 90, 85], [2, 75, 80, 90], [1, 75, 70, 95], [1, 80, 75, 90]])\nline_labels = ['Painting', 'Sculpture', 'Photograph', 'Installation', 'Performance']\n\n# plot the data with the type of bubble chart\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot()\n\nfor i in range(data.shape[0]):\n    # normalize the color value to the range of cmap values\n    norm = colors.Normalize(vmin=data[:, 3].min()-5, vmax=data[:, 3].max())\n    cmap = cm.ScalarMappable(norm=norm, cmap='hsv')\n    # normalize the bubble size to range from 60 to 500\n    norm_size = colors.Normalize(vmin=data[:, 2].min(), vmax=data[:, 2].max())\n    size = np.interp(data[i, 2], (data[:, 2].min(), data[:, 2].max()), (600, 6000))\n    # plot the data\n    ax.scatter(data[i, 0], data[i, 1], c=cmap.to_rgba(data[i, 3]), s=size, label=None)\n    # scatter an empty point\n    ax.scatter([], [], c=cmap.to_rgba(data[i, 3]), s=20, label=line_labels[i]+f' ({data[i, 2]})')\n\n# plot the legend with the title\nax.legend(title=data_labels[2])\n\n# add a color bar for the bubble colors\ncbar = fig.colorbar(cmap, ax=ax)\ncbar.set_label(data_labels[3])\n\n# adjust the plotting techniques\nax.grid(True)\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.set_title('Market Valuation of Artworks by Popularity and Creativity.')\n\n# show the labels of two axes\nplt.xticks(np.arange(0, 6))\nplt.yticks(np.arange(70, 101))\n\n# automatically resize the image\nplt.tight_layout()\n\n# save the image\nplt.savefig('./bubble/png/1_2023122261326.png')\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the price of the Painting compared to the Photograph?",
            "output": "$3 million"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_36",
        "img": "./bubble/png/bubble_36.png",
        "topic": "Sports and Entertainment",
        "title": " Popular Sports and Their Impact on Revenue and Viewership",
        "csv": "Sport \\t Audience Size (Millions) \\t Revenue (Billion $) \\t Sponsorship (Score) \\t Viewership (Score) \\n Basketball \\t 700 \\t 80 \\t 90 \\t 95 \\n Football \\t 450 \\t 50 \\t 80 \\t 85 \\n Baseball \\t 350 \\t 40 \\t 75 \\t 80 \\n Ice Hockey \\t 250 \\t 30 \\t 70 \\t 75 \\n Soccer \\t 600 \\t 60 \\t 85 \\t 90 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart illustrates five popular sports alongside their audience sizes in millions, revenue in billion dollars, and scores for sponsorship and viewership. Basketball shows an audience size of 700 million, revenue of $80 billion, with sponsorship and viewership scores of 90 and 95, respectively. Football has an audience of 450 million, $50 billion in revenue, and scores of 80 for sponsorship and 85 for viewership. Baseball follows with 350 million audience, $40 billion revenue, and scores of 75 for sponsorship and 80 for viewership. Ice Hockey has a 250 million audience, $30 billion revenue, and 70 and 75 scores. Soccer features a 600 million audience, $60 billion revenue, and scores of 85 and 90."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.cm import ScalarMappable\nfrom matplotlib.colors import Normalize\n\n# Transform data\ndata_labels = ['Audience Size (Millions)', 'Revenue (Billion $)', 'Sponsorship (Score)', 'Viewership (Score)']\ndata = np.array([[700, 80, 90, 95], [450, 50, 80, 85], [350, 40, 75, 80], [250, 30, 70, 75], [600, 60, 85, 90]])\nline_labels = ['Basketball', 'Football', 'Baseball', 'Ice Hockey', 'Soccer']\n\n# Color mapping and normalization\ncmap = plt.get_cmap('viridis')\nnorm = plt.Normalize(vmin=min(data[:, 3]), vmax=max(data[:, 3]))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\n\n# Plot\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot()\nfor i, line_label in enumerate(line_labels):\n    color = cmap(norm(data[i, 3]))\n    ax.scatter(data[i, 0], data[i, 1], s=600 + 2000 * (data[i, 2] - data[:, 2].min()) / (data[:, 2].max() - data[:, 2].min()),  color=color, label=None)\n    ax.scatter([], [], s=20, color=color, label=line_label + f' {data[i, 2]}')\nax.legend(title=data_labels[2])\n\nfig.colorbar(sm, ax=ax, label=data_labels[3])\nax.set_title('Popular Sports and Their Impact on Revenue and Viewership')\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\nax.grid(True)\nplt.tight_layout()\nplt.savefig('./bubble/png/4_2023122261326.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much revenue is generated from soccer?",
            "output": "60 billion $"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_44",
        "img": "./bubble/png/bubble_44.png",
        "topic": "Sports and Entertainment",
        "title": " Popularity of Sports and Their Economic Impact",
        "csv": "Sport \\t Popularity (Score) \\t Participation (Million) \\t Revenue (Billion $) \\t Income (Score) \\n Football \\t 90 \\t 3.5 \\t 20 \\t 7 \\n Basketball \\t 85 \\t 2.8 \\t 25 \\t 8 \\n Baseball \\t 75 \\t 2.5 \\t 14 \\t 5 \\n Ice Hockey \\t 55 \\t 2.2 \\t 10 \\t 4 \\n Golf \\t 45 \\t 1.8 \\t 8 \\t 3 \\n Tennis \\t 40 \\t 1.2 \\t 5 \\t 2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart illustrates the varying parameters of six sports: Football, Basketball, Baseball, Ice Hockey, Golf, and Tennis. The chart covers each sport's popularity score, participation in millions, revenue in billion dollars, and income score. Football leads with a popularity score of 90, 3.5 million participation, $20 billion in revenue, and an income score of 7. Basketball follows, with an 85 popularity score, 2.8 million participation, the highest revenue at $25 billion, and an income score of 8. The other sports show lower metrics compared to Football and Basketball across the chart."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np\n\ndata_labels = [\"Popularity (Score)\", \"Participation (Million)\", \n               \"Revenue (Billion $)\", \"Income (Score)\"]\nline_labels = [\"Football\", \"Basketball\", \"Baseball\", \"Ice Hockey\", \n               \"Golf\", \"Tennis\"]\ndata = np.array([[90, 3.5, 20, 7],\n                 [85, 2.8, 25, 8],\n                 [75, 2.5, 14, 5],\n                 [55, 2.2, 10, 4],\n                 [45, 1.8, 8, 3],\n                 [40, 1.2, 5, 2]])\n\ncmap = cm.get_cmap(\"jet\")\nnorm = plt.Normalize(data[:, 2].min(), data[:, 2].max())\nnorm_c = plt.Normalize(data[:, 3].min(), data[:, 3].max())\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111)\n\nfor i in range(data.shape[0]):\n    line_label = line_labels[i] + \" \" + str(data[i, 2])\n    ax.scatter(data[i, 0], data[i, 1], s=2000 * norm(data[i, 2]) + 600, \n               c=cmap(norm_c(data[i, 3])), label=None)\n    ax.scatter([], [], c=cmap(norm_c(data[i, 3])), label=line_label, s=20)\n\nax.legend(title=data_labels[2], fontsize=8)\n\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label(data_labels[3])\n\nax.grid(linestyle=\"dashed\")\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.set_title(\"Popularity of Sports and Their Economic Impact\")\n\nplt.tight_layout()\nplt.savefig(\"./bubble/png/28_2023122270050.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the revenue in billions of dollars generated by Basketball?",
            "output": "25"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_30",
        "img": "./bubble/png/bubble_30.png",
        "topic": "Arts and Culture",
        "title": " Popularity and Creativity of Art Forms - Arts and Culture 2023",
        "csv": "Art Form \\t Popularity (Score) \\t Accessibility (Score) \\t Creativity (Score) \\t Financial Return (Score) \\n Music \\t 90 \\t 60 \\t 75 \\t 50 \\n Painting \\t 60 \\t 90 \\t 85 \\t 30 \\n Dance \\t 80 \\t 70 \\t 95 \\t 20 \\n Poetry \\t 70 \\t 80 \\t 90 \\t 40 \\n Theater \\t 50 \\t 75 \\t 75 \\t 60 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bubble chart represents the Popularity, Accessibility, Creativity, and Financial Return scores of different art forms in 2023. Music scores 90 in popularity, 60 in accessibility, 75 in creativity, and 50 in financial return. Painting has a score of 60 in popularity, 90 in accessibility, 85 in creativity, and 30 in financial return. Dance is rated 80 in popularity, 70 in accessibility, 95 in creativity, and 20 in financial return. Poetry holds a score of 70 in popularity, 80 in accessibility, 90 in creativity, and 40 in financial return. Theater scores 50 in popularity, 75 in accessibility, 75 in creativity, and 60 in financial return."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\nfrom matplotlib.colors import Normalize\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = ['Popularity (Score)', 'Accessibility (Score)', 'Creativity (Score)', 'Financial Return (Score)']\nline_labels = ['Music', 'Painting', 'Dance', 'Poetry', 'Theater']\ndata = np.array([[90, 60, 75, 50], [60, 90, 85, 30], [80, 70, 95, 20], [70, 80, 90, 40], [50, 75, 75, 60]])\n\n# Plot the data with the type of bubble chart\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(1,1,1)\n\n# Normalize the bubble size\nnorm = Normalize(60, 100)\n\n# Normalize the color value \ncmap = cm.get_cmap('RdYlGn_r')\nnorm_c = Normalize(20, 70)\n# Plot bubble chart\nfor i in range(data.shape[0]):\n    ax.scatter(data[i, 0], data[i, 1], s=norm(data[i, 2])*5000 + 600, c=cmap(norm_c(data[i, 3])), label=None)\n    ax.scatter([], [], s=20, c=cmap(norm_c(data[i, 3])), label=line_labels[i] + f' {data[i, 2]}')\n\n# Plot the legend\nax.legend(title=data_labels[2])\n\n# Add a color bar\nsm = cm.ScalarMappable(norm=norm_c, cmap=cmap)\nsm.set_array([])\nfig.colorbar(sm, ax=ax, label=data_labels[3])\n\n# Show the labels of two axes\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\n# Set the title of the figure\nplt.title('Popularity and Creativity of Art Forms - Arts and Culture 2023')\nplt.tight_layout()\nplt.savefig('./bubble/png/17.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference between the Financial Return Score of Music and Theater?",
            "output": "10 points"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_37",
        "img": "./bubble/png/bubble_37.png",
        "topic": "Technology and the Internet",
        "title": " High Speed Network Technologies and Their Cost, Coverage and Bandwidth",
        "csv": "Network \\t Data Transfer Rate (Mbps) \\t Bandwidth (GHz) \\t Cost ($) \\t Coverage (%) \\n Cable \\t 100 \\t 2 \\t 40 \\t 90 \\n DSL \\t 50 \\t 1 \\t 30 \\t 60 \\n Fiber \\t 1000 \\t 20 \\t 150 \\t 30 \\n Wi-Fi \\t 20 \\t 0.5 \\t 10 \\t 95 \\n 5G \\t 2000 \\t 30 \\t 300 \\t 70 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart presents five network technologies, highlighting their respective data transfer rates, bandwidths, costs, and coverage percentages. Cable offers a 100 Mbps transfer rate, 2 GHz bandwidth, at $40, with 90% coverage. DSL provides a 50 Mbps rate, 1 GHz bandwidth, at $30, achieving 60% coverage. Fiber boasts a 1000 Mbps transfer rate and 20 GHz bandwidth but costs $150 and covers 30%. Wi-Fi has a 20 Mbps rate, 0.5 GHz bandwidth, at $10, with the highest coverage of 95%. Finally, 5G leads with a 2000 Mbps data rate and 30 GHz bandwidth, costs $300, and has 70% coverage."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.cm import get_cmap\nfrom matplotlib.colors import Normalize\n\n# transform the given data into three variables\ndata_labels = [\"Data Transfer Rate (Mbps)\", \"Bandwidth (GHz)\", \"Cost ($)\", \"Coverage (%)\"]\n\ndata = np.array([\n    [100, 2, 40, 90],\n    [50, 1, 30, 60],\n    [1000, 20, 150, 30],\n    [20, 0.5, 10, 95],\n    [2000, 30, 300, 70]])\n\nline_labels = [\"Cable\", \"DSL\", \"Fiber\", \"Wi-Fi\", \"5G\"]\n\n# Create figure before plotting\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot the data with the type of bubble chart\ncmap = get_cmap(\"Set2\")\nnorm = Normalize(vmin=min(data[:, 3]), vmax=max(data[:, 3]))\n\nfor i, line_label in enumerate(line_labels):\n    ax.scatter(data[i, 0], data[i, 1], s=data[i, 2] * 5, c=cmap(norm(data[i, 3])), label=None)\n    ax.scatter([], [], c=cmap(norm(data[i, 3])), label=f\"{line_label} ({data[i, 2]})\")\n\n# Plot the legend with the title\nax.legend(title=data_labels[2])\n\n# Add a color bar\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, fraction=0.046, pad=0.04)\ncbar.set_label(data_labels[3])\n\n# Drawing techniques such as background grids and other parameter settings\nax.grid(True, ls='--', lw=0.5, c='k', alpha=0.3)\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\n# The title of the figure\nax.set_title(\"High Speed Network Technologies and Their Cost, Coverage and Bandwidth\")\n\n# Automatically resize the image\nfig.tight_layout()\n\n# Save the image\nfig.savefig('./bubble/png/15.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which network technology has the highest cost?",
            "output": "5G"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_14",
        "img": "./bubble/png/bubble_14.png",
        "topic": "Social Sciences and Humanities",
        "title": " Social Sciences and Humanities: Technology Usage, Creativity, Social Connectivity, and Education Level",
        "csv": "Topic \\t Technology Usage (%) \\t Creativity (Score) \\t Social Connectivity (Score) \\t Education Level (Score) \\n Europe \\t 90 \\t 80 \\t 75 \\t 70 \\n North America \\t 85 \\t 75 \\t 80 \\t 65 \\n Asia \\t 75 \\t 90 \\t 85 \\t 60 \\n South America \\t 80 \\t 70 \\t 90 \\t 55 \\n Africa \\t 70 \\t 65 \\t 95 \\t 50 \\n Australia \\t 65 \\t 60 \\t 100 \\t 45 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart represents data on technology usage, creativity score, social connectivity score, and education level score across six regions. Europe shows a technology usage of 90%, creativity score of 80, social connectivity score of 75, and education level score of 70. North America follows with technology usage at 85%, 75 for creativity, 80 for social connectivity, and 65 for education level. Asia reports 75% technology usage, the highest creativity score at 90, 85 for social connectivity, and 60 for education. South America has 80% technology usage, 70 creativity, the highest social connectivity at 90, and 55 for education level. Africa's numbers are 70% for technology usage, 65 for creativity, 95 for social connectivity, and 50 for education. Lastly, Australia shows 65% technology usage, the lowest creativity score at 60, the perfect social connectivity score at 100, and education score of 45."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\nfrom matplotlib.colors import Normalize\n\n#transform data\ndata_labels = ['Technology Usage (%)', 'Creativity (Score)', 'Social Connectivity (Score)', 'Education Level (Score)']\ndata = np.array([[90,80,75,70],\n                 [85,75,80,65],\n                 [75,90,85,60],\n                 [80,70,90,55],\n                 [70,65,95,50],\n                 [65,60,100,45]])\n\nline_labels = ['Europe', 'North America', 'Asia', 'South America', 'Africa', 'Australia']\n\n#plot\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\n\ncmap = cm.get_cmap('RdYlGn')\nnorm = Normalize(vmin=data[:,3].min(), vmax=data[:,3].max())\n\nfor i in range(len(data)):\n    ax.scatter(data[i, 0], data[i, 1], s=data[i, 2]*50, c=cmap(norm(data[i,3])), label=None)\n    ax.scatter([], [], c=cmap(norm(data[i,3])), label=line_labels[i] + ' ({})'.format(data[i,2]))\n\nax.legend(title=data_labels[2])\n\n#colorbar\nsm = cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nax.figure.colorbar(sm, ax=ax, label=data_labels[3])\n\n#configure\nax.grid(linestyle='--', alpha=0.5)\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.set_title('Social Sciences and Humanities: Technology Usage, Creativity, Social Connectivity, and Education Level')\n\nfig.tight_layout()\nfig.savefig('./bubble/png/22.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "Which region has the lowest education level score?",
            "output": "Australia"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_17",
        "img": "./bubble/png/bubble_17.png",
        "topic": "Business and Finance",
        "title": " Financial Performance of Top Business Companies in 2023",
        "csv": "Company \\t Revenue (Billion $) \\t Net Profit (Billion $) \\t Employees (Thousands) \\t Debt (Billion $) \\n Apple \\t 270 \\t 60 \\t 130 \\t 50 \\n Microsoft \\t 130 \\t 45 \\t 105 \\t 10 \\n Amazon \\t 350 \\t 80 \\t 220 \\t 35 \\n Facebook \\t 85 \\t 25 \\t 90 \\t 20 \\n Google \\t 160 \\t 50 \\t 100 \\t 30 \\n JPMorgan \\t 90 \\t 30 \\t 80 \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart visualizes the financial performance of six top business companies in 2023. Metrics include revenue, net profit, the number of employees, and debt in billions of dollars. Apple records $270 billion revenue, $60 billion net profit, with 130,000 employees and $50 billion debt. Microsoft has $130 billion revenue, $45 billion net profit, 105,000 employees, and $10 billion debt. Amazon leads with $350 billion revenue, $80 billion net profit, houses 220,000 employees, and has $35 billion debt. Facebook shows $85 billion revenue, $25 billion net profit, with 90,000 employees and $20 billion debt. Google has $160 billion revenue, $50 billion net profit, 100,000 employees, and $30 billion debt. JPMorgan reports $90 billion in revenue, $30 billion net profit, 80,000 employees, and $15 billion in debt."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\nfrom matplotlib.colors import Normalize\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = ['Revenue (Billion $)', 'Net Profit (Billion $)', 'Employees (Thousands)', 'Debt (Billion $)']\nline_labels = ['Apple', 'Microsoft', 'Amazon', 'Facebook', 'Google', 'JPMorgan']\ndata = np.array([[270, 60, 130, 50],\n                 [130, 45, 105, 10],\n                 [350, 80, 220, 35],\n                 [85, 25, 90, 20],\n                 [160, 50, 100, 30],\n                 [90, 30, 80, 15]])\n\n# Plot the data with the type of bubble chart\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot()\ncmap = cm.get_cmap('viridis')\nnorm = Normalize(vmin=data[:,3].min(), vmax=data[:,3].max())\n\n# For each row of data, the third value is mapped to the bubble size, and the fourth value is mapped to the color value.\nfor i, line_label in enumerate(line_labels):\n    ax.scatter(data[i, 0], data[i, 1], s=5000*data[i,2]/data[:,2].max() + 600, c=cmap(norm(data[i,3])), label=None)\n    ax.scatter([], [], c=cmap(norm(data[i,3])), label=line_label + f' {data[i, 2]}', s=20)\n\n# Plot the legend with the title\nax.legend(title=data_labels[2])\n\n# Add a color bar for the bubble colors\nsm = cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nplt.colorbar(sm, ax=ax, label=data_labels[3])\n\n# Drawing techniques such as background grids and other parameter settings can be adjusted\nax.grid(True, ls='--')\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\n# Set the title of the figure\nplt.title('Financial Performance of Top Business Companies in 2023')\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\nplt.savefig('./bubble/png/49_2023122270050.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "Which company has the lowest debt among those listed?",
            "output": "Microsoft"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_49",
        "img": "./bubble/png/bubble_49.png",
        "topic": "Business and Finance",
        "title": " Maximizing Profit Based on Investment Type and Risk Level - Business and Finance 2023",
        "csv": "Investment \\t Return (%) \\t Risk Level (Score) \\t Initial Capital (Million $) \\n Stock Market \\t 12 \\t 8 \\t 100 \\n Cryptocurrency \\t 20 \\t 10 \\t 200 \\n Mutual Funds \\t 7 \\t 6 \\t 500 \\n Real Estate \\t 15 \\t 9 \\t 1000 \\n Bonds \\t 9 \\t 7 \\t 300 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart titled \"Maximizing Profit Based on Investment Type and Risk Level - Business and Finance 2023\" presents data on different investment types along with their associated return percentages, risk levels, and initial capital outlays in millions of dollars. It shows the Stock Market with a 12% return, risk score of 8, and an initial capital of $100 million; Cryptocurrency with a 20% return, risk score of 10, and initial capital of $200 million; Mutual Funds with a 7% return, risk score of 6, and $500 million initial capital; Real Estate with a 15% return, a risk score of 9, and $1000 million initial capital; and Bonds with a 9% return, risk score of 7, and $300 million initial capital."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\nimport matplotlib.cm as cmx\nimport numpy as np\n\ndata_labels = ['Return (%)', 'Risk Level (Score)', 'Initial Capital (Million $)']\nline_labels = ['Stock Market', 'Cryptocurrency', 'Mutual Funds', 'Real Estate', 'Bonds']\ndata = np.array([[12, 8, 100],\n                [20, 10, 200],\n                [7, 6, 500],\n                [15, 9, 1000],\n                [9, 7, 300]])\n\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot(1,1,1)\n\ncmap = plt.get_cmap('gist_rainbow')\ncnorm = colors.Normalize(vmin=data[:, 2].min(), vmax=data[:, 2].max())\nscalar_map = cmx.ScalarMappable(norm=cnorm, cmap=cmap)\n\nfor i in range(len(data)):\n    ax.scatter(data[i, 0], data[i, 1], s=data[i, 2] * 10, c=scalar_map.to_rgba(data[i, 2]), label=None)\n    ax.scatter([], [], s=20, c=scalar_map.to_rgba(data[i, 2]), label=line_labels[i] + ' ' + str(data[i, 2]))\n\nax.legend(title=data_labels[2])\ncbar = plt.colorbar(scalar_map, ax=ax, orientation='horizontal', pad=0.03)\ncbar.set_label(data_labels[2], rotation=0)\n\nax.set_title('Maximizing Profit Based on Investment Type and Risk Level - Business and Finance 2023')\nax.grid(linestyle='--')\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\nplt.tight_layout()\nplt.savefig('./bubble/png/4.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "Which type of investment requires the highest initial capital?",
            "output": "Real Estate"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_6",
        "img": "./bubble/png/bubble_6.png",
        "topic": "Government and Public Policy",
        "title": " Tax Compliance and Revenue Collection Around the Globe",
        "csv": "Taxation \\t Revenue Collected (Billion $) \\t Compliance (Score) \\t Taxpayers (Millions) \\t Ease of Compliance (Score) \\n Income Tax \\t 3000 \\t 70 \\t 85 \\t 500 \\n Corporate Tax \\t 2500 \\t 75 \\t 80 \\t 700 \\n Property Tax \\t 1500 \\t 65 \\t 70 \\t 600 \\n GST \\t 1000 \\t 60 \\t 65 \\t 1200 \\n International Tax \\t 500 \\t 55 \\t 60 \\t 40 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart depicts global tax compliance and revenue collection based on different tax categories. Income Tax generated a revenue of $3000 billion with a compliance score of 70, and involves 85 million taxpayers with an ease of compliance score of 500. Corporate Tax yielded $2500 billion in revenue, a compliance score of 75, 80 million taxpayers, and an ease of compliance score of 700. Property Tax collected $1500 billion, with a compliance score of 65, 70 million taxpayers, and an ease of compliance score of 600. GST brought in $1000 billion, scored 60 in compliance, with 65 million taxpayers and an ease of compliance score of 1200. International Tax, with the least numbers, collected $500 billion, had a compliance score of 55, with 60 million taxpayers and an ease of compliance score of 40."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n\n# Transform the given data into three variables: data_labels, data, line_labels.\ndata_labels = np.array(['Revenue Collected (Billion $)','Compliance (Score)','Taxpayers (Millions)','Ease of Compliance (Score)'])\ndata = np.array([[3000,70,85,500],[2500,75,80,700],[1500,65,70,600],[1000,60,65,1200],[500,55,60,40]])\nline_labels = np.array(['Income Tax','Corporate Tax','Property Tax','GST','International Tax'])\n\n# Plot the data with the type of bubble chart.\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot()\n\n# For each row of data, the third value is mapped to the bubble size, and the fourth value is mapped to the color value.\n# The color should be normalized to the range of cmap values, \n# the bubble size should range from 60 to 500 by normalization, \n# and parameters can be set to accurately reflect the differences in data values.\nsc = ax.scatter(data[:,0], data[:,1], c=data[:,3], s=(data[:,2]-data[:, 2].min())*600 + 600, cmap=cm.get_cmap('Spectral'), label=None)\n\n# During each iteration of plotting, you must also scatter an empty point, \n# i.e., ax.scatter([], [], label=line_label), by keeping the same color. The size must be set as the default size, i.e., 20.\nfor i in range(len(line_labels)):\n    ax.scatter([], [], c=sc.cmap(sc.norm(data[i,3])), s=20, label=line_labels[i]+' '+str(data[i,2]))\n\n# Plot the legend with the title, by using ax.legend(title=data_labels[2]).\nax.legend(title=data_labels[2], loc='upper left')\n\n# Add a color bar for the bubble colors using the ScalarMappable object with Normalize based on the range of color value. \n# Place the color bar in a location that doesn't interfere with the legend or the main plot. \n# Set the title of the color bar by data_labels[3].\ncb = fig.colorbar(sc, ax=ax)\ncb.set_label(data_labels[3])\n\n# Drawing techniques such as background grids and other parameter settings can be adjusted.\nax.grid(axis='both')\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\n# Show the labels of two axes.\nax.set_title('Tax Compliance and Revenue Collection Around the Globe')\n\n# Automatically resize the image by tight_layout() before savefig().\nplt.tight_layout()\n\n# The image must be saved as ./bubble/png/6_2023122261440.png.\nplt.savefig('./bubble/png/6_2023122261440.png')\n\n# Clear the current image state at the end of the code.\nplt.clf()"
        },
        "QA": {
            "input": "How much revenue is collected from Property Tax?",
            "output": "1500 Billion $"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_39",
        "img": "./bubble/png/bubble_39.png",
        "topic": "Law and Legal Affairs",
        "title": " Assessing the Legal Requirements of Different Laws",
        "csv": "Law \\t Cost of Compliance (Million $) \\t Legality (Score) \\t Regulation Compliance (Score) \\t Business Impact (Score) \\n Tax Law \\t 200 \\t 75 \\t 85 \\t 90 \\n Contract Law \\t 150 \\t 70 \\t 90 \\t 80 \\n Employment Law \\t 100 \\t 80 \\t 75 \\t 60 \\n Intellectual Property Law \\t 50 \\t 90 \\t 80 \\t 75 \\n Corporate Law \\t 25 \\t 85 \\t 90 \\t 70 \\n Tort Law \\t 10 \\t 95 \\t 95 \\t 90 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart visualizes the legal requirements across various laws, depicting the cost of compliance in million dollars, alongside legality, regulation compliance, and business impact scores. Tax Law incurs a compliance cost of $200 million and has scores of 75, 85, and 90 in legality, regulation, and impact respectively. Contract Law costs $150 million with scores of 70, 90, and 80. Employment Law shows a $100 million cost and scores 80, 75, and 60. Intellectual Property Law costs $50 million and scores 90, 80, and 75. Corporate Law requires $25 million with 85, 90, and 70 scores, whereas Tort Law has the lowest compliance cost at $10 million and the highest scores of 95 in both legality and regulation and 90 in impact."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\nfrom matplotlib.colors import Normalize\n\n# Transform data into three variables\ndata_labels = ['Cost of Compliance (Million $)', 'Legality (Score)', 'Regulation Compliance (Score)', 'Business Impact (Score)']\ndata = np.array([[200, 75, 85, 90], \n                [150, 70, 90, 80],\n                [100, 80, 75, 60],\n                [50, 90, 80, 75],\n                [25, 85, 90, 70],\n                [10, 95, 95, 90]])\nline_labels = ['Tax Law', 'Contract Law', 'Employment Law', 'Intellectual Property Law', 'Corporate Law', 'Tort Law']\n\n# Create figure before plotting\nfig, ax = plt.subplots(figsize=(16, 10))\n\n# Plot the data with the type of bubble chart\nfor i in range(len(data)):\n    # Normalize the color to the range of cmap values\n    color = cm.jet(data[i, 3]/100)\n    # Normalize the bubble size to range from 60 to 500\n    size = 600 + (2000-600)*data[i, 2]/10\n    # Plot data\n    ax.scatter(data[i, 0], data[i, 1], c=color, s=size, label=None)\n    # Plot a empty point with the same color\n    ax.scatter([], [], c=color, s=20, label=line_labels[i] + f' {data[i, 2]}')\n\n# Plot the legend with the title\nax.legend(title=data_labels[2])\n\n# Add color bar for the bubble colors\nsm = cm.ScalarMappable(cmap=cm.jet, norm=Normalize(vmin=data[:, 3].min(), vmax=data[:, 3].max()))\nsm._A = []\ncbar = fig.colorbar(sm, ax=ax, orientation=\"vertical\")\ncbar.set_label(data_labels[3])\n\n# Add title\nax.set_title('Assessing the Legal Requirements of Different Laws')\n\n# Adjust the figure view better\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n# Automatically resize the image\nplt.tight_layout()\n# Save the figure\nplt.savefig('./bubble/png/29_2023122261326.png')\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the legality score for Intellectual Property Law?",
            "output": "90"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_4",
        "img": "./bubble/png/bubble_4.png",
        "topic": "Social Media and the Web",
        "title": " Social Media Usage and Engagement Statistics - 2021",
        "csv": "Platform \\t Number of Users (Millions) \\t Average Time Spent (Hours/Day) \\t Engagement (Score) \\t Ad Revenue (Billion $) \\n YouTube \\t 2 \\t 2 \\t 90 \\t 25 \\n Instagram \\t 1.5 \\t 1.4 \\t 80 \\t 10 \\n Twitter \\t 0.5 \\t 0.6 \\t 70 \\t 3 \\n Reddit \\t 0.4 \\t 0.4 \\t 60 \\t 1 \\n LinkedIn \\t 0.3 \\t 0.2 \\t 50 \\t 0.5 \\n WhatsApp \\t 0.2 \\t 0.2 \\t 40 \\t 0.2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart presents social media usage and engagement statistics for the year 2021. YouTube leads with 2 million users, an average of 2 hours spent per day, an engagement score of 90, and $25 billion in ad revenue. Instagram follows with 1.5 million users, 1.4 hours daily usage, an 80 engagement score, and $10 billion ad revenue. Twitter has 0.5 million users, 0.6 hours average use, a 70 engagement score, and $3 billion in revenue. Reddit's figures are 0.4 million users, 0.4 hours, 60 score, and $1 billion. LinkedIn has 0.3 million users, 0.2 hours, a score of 50, and $0.5 billion in revenue, while WhatsApp presents 0.2 million users, 0.2 hours, a 40 score, and $0.2 billion revenue."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\nfrom matplotlib.colors import Normalize\n\n# Transform the given data into three variables\ndata_labels = [\"Number of Users (Millions)\", \"Average Time Spent (Hours/Day)\", \"Engagement (Score)\", \"Ad Revenue (Billion $)\"]\ndata = np.array([[2, 2, 90, 25], [1.5, 1.4, 80, 10], [0.5, 0.6, 70, 3], [0.4, 0.4, 60, 1], [0.3, 0.2, 50, 0.5], [0.2, 0.2, 40, 0.2]])\nline_labels = [\"YouTube\", \"Instagram\", \"Twitter\", \"Reddit\", \"LinkedIn\", \"WhatsApp\"]\n\n# Plot the data with the type of bubble chart\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot()\n\n# For the plotting using plt.scatter\nnorm = Normalize(vmin=data[:,3].min(), vmax=data[:,3].max())\ncmap = cm.get_cmap(\"RdYlGn\")\n\nfor i in range(len(data)):\n    ax.scatter(data[i, 0], data[i, 1], s=data[i, 2] * 50 + 600, c=cmap(norm(data[i, 3])), label=None)\n    ax.scatter([], [], s=20, c=cmap(norm(data[i,3])), label=line_labels[i]+\" \"+str(data[i,3]))\n\n# Plot the legend with the title\nleg = ax.legend(title=data_labels[2])\n\n# Add a color bar for the bubble colors\nsm = cm.ScalarMappable(norm, cmap)\nsm.set_array([])\nfig.colorbar(sm, ax=ax, label=data_labels[3])\n\n# Adjust the figure view better\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\n# Set the title of the figure\nplt.title(\"Social Media Usage and Engagement Statistics - 2021\")\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the image\nplt.savefig(\"./bubble/png/25_2023122261326.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the total number of users (in millions) for Twitter and Reddit combined?",
            "output": "0.9 million"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_1",
        "img": "./bubble/png/bubble_1.png",
        "topic": "Energy and Utilities",
        "title": " Comparing Energy Output and Costs of Different Power Plants",
        "csv": "Power Plant \\t Energy Output (Megawatts) \\t Fuel Cost (Billion $) \\t Emissions (Kg/MWh) \\t Safety (Score) \\n Nuclear \\t 1800 \\t 1.5 \\t 25 \\t 9 \\n Wind \\t 1600 \\t 1.2 \\t 0 \\t 10 \\n Solar \\t 1400 \\t 2.0 \\t 0 \\t 8 \\n Hydro \\t 1200 \\t 0.8 \\t 0 \\t 10 \\n Coal \\t 1000 \\t 1.0 \\t 50 \\t 7 \\n Natural Gas \\t 500 \\t 1.2 \\t 20 \\t 8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart provides a comparison of energy outputs, fuel costs, emissions, and safety scores for six different types of power plants. Nuclear power has an energy output of 1800 megawatts, a fuel cost of 1.5 billion dollars, emissions of 25 kg/MWh, and a safety score of 9. Wind energy outputs at 1600 megawatts, with a fuel cost of 1.2 billion dollars, no emissions, and a safety score of 10. Solar power produces 1400 megawatts, has higher fuel costs at 2.0 billion dollars, no emissions, and an 8 in safety. Hydro has an output of 1200 megawatts, the lowest fuel cost of 0.8 billion dollars, zero emissions, and a top safety score of 10. Coal power outputs at 1000 megawatts, with a fuel cost of 1.0 billion dollars, the highest emissions at 50 kg/MWh, and the lowest safety score of 7. Lastly, natural gas produces 500 megawatts, with a fuel cost of 1.2 billion dollars, 20 kg/MWh emissions, and a safety score of 8."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\n\n# Transform the given data into three variables: data_labels, data, line_labels. \ndata_labels = [\"Energy Output (Megawatts)\", \"Fuel Cost (Billion $)\", \"Emissions (Kg/MWh)\", \"Safety (Score)\"]\ndata = np.array([[1800, 1.5, 25, 9], [1600, 1.2, 0, 10], [1400, 2.0, 0, 8], [1200, 0.8, 0, 10], [1000, 1.0, 50, 7], [500, 1.2, 20, 8]])\nline_labels = [\"Nuclear\", \"Wind\", \"Solar\", \"Hydro\", \"Coal\", \"Natural Gas\"]\n\n# Plot the data with the type of bubble chart. \nfig = plt.figure()\nax = fig.add_subplot()\n\n# For each row of data, the third value is mapped to the bubble size, and the fourth value is mapped to the color value.\n# Plot the data using plt.scatter, the color should be normalized to the range of cmap values, the bubble size should range from 60 to 500 by normalization.\ncmap = cm.get_cmap('Greens')\nnorm = cm.colors.Normalize(vmin=np.min(data[:,3]), vmax=np.max(data[:,3]))\nscalar_map = cm.ScalarMappable(norm=norm, cmap=cmap)\n\nfor i in range(len(data)):\n    size_val = (data[i,2] - np.min(data[:,2])) / (np.max(data[:,2]) - np.min(data[:,2])) * (500 - 60) + 60\n    ax.scatter(data[i,0], data[i,1], s=size_val, c=scalar_map.to_rgba(data[i,3]), label=None)\n    ax.scatter([], [], s=20, c=scalar_map.to_rgba(data[i,3]), label=line_labels[i] + \": \" + str(data[i,2]))\n\n# Plot the legend with the title, by using ax.legend(title=data_labels[2]). \nax.legend(title=data_labels[2])\n\n# Add a color bar for the bubble colors using the ScalarMappable object with Normalize based on the range of color value. Place the color bar in a location that doesn't interfere with the legend or the main plot. Set the title of the color bar by data_labels[3].\nplt.colorbar(scalar_map, ax=ax, extend='both').set_label(data_labels[3])\n\n# Drawing techniques such as background grids and other parameter settings can be adjusted. Show the labels of two axes.\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.grid(linestyle='--', linewidth=0.5)\nax.set_title('Comparing Energy Output and Costs of Different Power Plants')\n\n# Automatically resize the image by tight_layout() before savefig().\nplt.tight_layout()\nplt.savefig('./bubble/png/14_2023122270050.png')\n\n# Clear the current image state at the end of the code.\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the energy output of nuclear plants compared to natural gas plants?",
            "output": "1300 Megawatts"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_41",
        "img": "./bubble/png/bubble_41.png",
        "topic": "Social Media and the Web",
        "title": " Social Media Performance in 2021 - User Engagement and Ad Revenue",
        "csv": "Platform \\t User Engagement (Score) \\t Ad Revenue (Million $) \\t Content Quality (Score) \\t User Growth (Million) \\n YouTube \\t 90 \\t 30 \\t 8 \\t 2.3 \\n Facebook \\t 85 \\t 35 \\t 7 \\t 1.8 \\n Instagram \\t 80 \\t 25 \\t 9 \\t 1.2 \\n Twitter \\t 75 \\t 20 \\t 7 \\t 1.1 \\n TikTok \\t 70 \\t 15 \\t 10 \\t 0.7 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart presents social media performance in 2021, focusing on user engagement, ad revenue, content quality, and user growth across five platforms. YouTube registers a user engagement score of 90, ad revenue of $30 million, content quality at 8, and user growth of 2.3 million. Facebook scores 85 in engagement, generates $35 million in ad revenue, has a content quality score of 7, and user growth of 1.8 million. Instagram, Twitter, and TikTok show lower values in the same metrics, with TikTok having the highest content quality score of 10, despite the lowest ad revenue and user growth figures."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import get_cmap\n\ndata_labels = [\"User Engagement (Score)\", \"Ad Revenue (Million $)\", \"Content Quality (Score)\", \"User Growth (Million)\"]\ndata = np.array([[90,30,8,2.3], [85,35,7,1.8], [80,25,9,1.2], [75,20,7,1.1], [70,15,10,0.7]])\nline_labels = [\"YouTube\", \"Facebook\", \"Instagram\", \"Twitter\", \"TikTok\"]\n\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot()\n\nnorm = Normalize(vmin=min(data[:,3]), vmax=max(data[:,3]))\ncmap = get_cmap(\"jet\")\n\nfor i in range(len(data)):\n    ax.scatter(data[i, 0], data[i, 1], s=600 + 5000*(data[i, 2]-min(data[:,2]))/(max(data[:,2])-min(data[:,2])), c=cmap(norm(data[i, 3])), label=None)\n    ax.scatter([], [], c=cmap(norm(data[i, 3])), label=line_labels[i] + f' {data[i, 2]}')\n\nax.legend(title=data_labels[2])\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label(data_labels[3])\n\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.grid(linestyle=\"--\")\nax.set_title(\"Social Media Performance in 2021 - User Engagement and Ad Revenue\")\n\nplt.tight_layout()\nplt.savefig(\"./bubble/png/10_2023122261440.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How much is the User Growth for Instagram?",
            "output": "1.2 million"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_11",
        "img": "./bubble/png/bubble_11.png",
        "topic": "Agriculture and Food Production",
        "title": " Profitability of Different Crops in Agriculture and Food Production",
        "csv": "Crop \\t Production Volume (Million Tonnes) \\t Land Used (Million Hectares) \\t Profit Margin (%) \\n Wheat \\t 730 \\t 220 \\t 20 \\n Corn \\t 1150 \\t 180 \\t 25 \\n Rice \\t 490 \\t 160 \\t 15 \\n Soybeans \\t 350 \\t 120 \\t 30 \\n Bananas \\t 220 \\t 90 \\t 18 \\n Tomatoes \\t 200 \\t 80 \\t 19 \\n Apples \\t 120 \\t 70 \\t 17 \\n Grapes \\t 100 \\t 60 \\t 16 \\n Strawberries \\t 90 \\t 50 \\t 12 \\n Peaches \\t 80 \\t 40 \\t 14 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bubble chart illustrates data on various crops, detailing production volume (in million tonnes), land used (in million hectares), and profit margins (as a percentage). Wheat shows a production volume of 730 million tonnes, using 220 million hectares, with a profit margin of 20%. Corn follows with 1150 million tonnes produced on 180 million hectares, yielding a 25% profit margin. Rice is at 490 million tonnes, 160 million hectares, and a 15% margin. Others like soybeans, bananas, tomatoes, apples, grapes, strawberries, and peaches are included, displaying corresponding production, land usage, and profit margins."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\n\n# Transform the given data into three variables\ndata_labels = ['Production Volume (Million Tonnes)', 'Land Used (Million Hectares)', 'Profit Margin (%)']\ndata = [[730, 220, 20],\n        [1150, 180, 25],\n        [490, 160, 15],\n        [350, 120, 30],\n        [220, 90, 18],\n        [200,80,19],\n        [120,70,17],\n        [100,60,16],\n        [90,50,12],\n        [80,40,14]]\nline_labels = ['Wheat 20', 'Corn 25', 'Rice 15', 'Soybeans 30', 'Bananas 18', 'Tomatoes 19', 'Apples 17', 'Grapes 16', 'Strawberries 12', 'Peaches 14']\n\n# Plot the data with the type of bubble chart\nfig = plt.figure(figsize=(12,8))\nax = fig.add_subplot()\n\n# Set range for bubble size and color\nnorm = cm.colors.Normalize(vmin=15, vmax=30)\ns_mapping = np.linspace(600, 5000, len(data))\n\n# Plot each line and add a empty point\nfor i, d in enumerate(data):\n    ax.scatter(d[0], d[1], s=s_mapping[i], c=cm.jet(norm(d[2])), label=None)\n    ax.scatter([], [], c=cm.jet(norm(d[2])), label=line_labels[i], s=20)\n\n# Plot the legend\nax.legend(title=data_labels[2], loc='upper left', bbox_to_anchor=(1, 1))\n\n# Add a color bar\nsm = plt.cm.ScalarMappable(cmap=cm.jet, norm=norm)\nsm.set_array([])\ncbar = plt.colorbar(sm, orientation='horizontal', fraction=0.05)\ncbar.set_label(data_labels[2], labelpad=10)\n\n# Drawing techniques such as background grids can be used\nax.grid(True)\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\n# Set the title\nplt.title('Profitability of Different Crop Production and Land Use - Agriculture 2023')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./bubble/png/8.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which crop uses less land per million tonnes produced: soybeans or tomatoes?",
            "output": "Soybeans"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_9",
        "img": "./bubble/png/bubble_9.png",
        "topic": "Tourism and Hospitality",
        "title": " Tourism and Hospitality Performance in Popular Destinations",
        "csv": "Destination \\t Tourists (Millions) \\t Average Spending ($) \\t Satisfaction (Score) \\t Air Connectivity (Score) \\n Caribbean \\t 50 \\t 1000 \\t 9 \\t 8 \\n Europe \\t 80 \\t 1200 \\t 8 \\t 7 \\n SE Asia \\t 90 \\t 800 \\t 7 \\t 9 \\n USA \\t 95 \\t 1500 \\t 10 \\t 6 \\n Africa \\t 60 \\t 900 \\t 6 \\t 7 \\n South Pacific \\t 70 \\t 1100 \\t 5 \\t 8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart illustrates the Tourism and Hospitality Performance in six popular destinations, showing Tourists (Millions), Average Spending ($), Satisfaction (Score), and Air Connectivity (Score). The Caribbean attracts 50 million tourists, has an average spending of $1000, with a satisfaction score of 9 and air connectivity score of 8. Europe sees 80 million visitors, spending $1200 on average, satisfaction at 8, and connectivity score of 7. Southeast Asia has 90 million tourists, with $800 average spending, satisfaction score of 7, and the highest air connectivity score of 9. The USA leads with 95 million tourists, highest spending at $1500, a top satisfaction score of 10, but lower air connectivity scored at 6. Africa has 60 million tourists, $900 average spending, a satisfaction score of 6, and air connectivity of 7. The South Pacific receives 70 million tourists, with an $1100 average spending, the lowest satisfaction score of 5, and air connectivity of 8."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\n\n# Transform the given data into three variables\ndata_labels = ['Tourists (Millions)','Average Spending ($)','Satisfaction (Score)','Air Connectivity (Score)']\ndata = np.array([[50,1000,9,8],[80,1200,8,7],[90,800,7,9],[95,1500,10,6],[60,900,6,7],[70,1100,5,8]])\nline_labels = ['Caribbean','Europe','SE Asia','USA','Africa','South Pacific']\n\nfig, ax = plt.subplots(figsize=(12, 8))\n# Color mapping and normalization\ncmap = cm.RdYlGn\nnorm = plt.Normalize(vmin=min(data[:,3]), vmax=max(data[:,3]))\nsm = cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\n\nfor i in range(data.shape[0]):\n    bubble_size = (data[i,2] - data[:,2].min()) / (data[:,2].max() - data[:,2].min()) * (1000 - 600) + 600\n    bubble_color = cmap(norm(data[i,3]))\n    ax.scatter(data[i,0], data[i,1], s=bubble_size, color=bubble_color, label=None)\n    ax.scatter([], [], s=20, color=bubble_color, label=line_labels[i] + ' ' + str(data[i,2]))\n\nax.legend(title=data_labels[2], loc='upper left')\nplt.colorbar(sm, ax=ax, label=data_labels[3])\n\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nplt.title('Tourism and Hospitality Performance in Popular Destinations')\n\nplt.grid(True)\nplt.tight_layout()\nplt.savefig('./bubble/png/3_2023122270050.png')\nplt.close()"
        },
        "QA": {
            "input": "What is the Satisfaction Score for the South Pacific destination?",
            "output": "5"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_5",
        "img": "./bubble/png/bubble_5.png",
        "topic": "Science and Engineering",
        "title": " Advances in Science and Engineering - The Impact of Research Investment",
        "csv": "Technology \\t Research Investment (Billion $) \\t Patent Applications (Thousands) \\t Innovations (Score) \\t Engineering Graduates (Thousands) \\n Machine Learning \\t 25 \\t 500 \\t 8.5 \\t 3.2 \\n Artificial Intelligence \\t 20 \\t 400 \\t 7.6 \\t 2.4 \\n Robotics \\t 15 \\t 300 \\t 7.2 \\t 2.6 \\n Quantum Computing \\t 10 \\t 200 \\t 6.9 \\t 1.8 \\n Biometrics \\t 5 \\t 100 \\t 6.4 \\t 1.2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart titled \"Advances in Science and Engineering - The Impact of Research Investment\" details investments, patent applications, innovation scores, and engineering graduates across five technologies. In Machine Learning, $25 billion was invested, 500 patent applications filed, innovation scored at 8.5, with 3.2 thousand engineering graduates. Artificial Intelligence saw $20 billion in investment, 400 patent applications, a 7.6 innovation score, and 2.4 thousand graduates. Robotics had $15 billion investment, 300 patents, a 7.2 score, and 2.6 thousand graduates. Quantum Computing recorded $10 billion investment, 200 patents, a 6.9 score, and 1.8 thousand graduates. Biometrics had the least, with $5 billion investment, 100 patent applications, a 6.4 innovation score, and 1.2 thousand graduates."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\n\ndata_labels = [\"Research Investment (Billion $)\", \"Patent Applications (Thousands)\", \"Innovations (Score)\", \"Engineering Graduates (Thousands)\"]\ndata = [[25, 500, 8.5, 3.2], [20, 400, 7.6, 2.4], [15, 300, 7.2, 2.6], [10, 200, 6.9, 1.8], [5, 100, 6.4, 1.2]]\nline_labels = [\"Machine Learning\", \"Artificial Intelligence\", \"Robotics\", \"Quantum Computing\", \"Biometrics\"]\n\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111)\n\nfor i in range(len(data)):\n    cNorm = colors.Normalize(vmin=min([item[3] for item in data]), vmax=max([item[3] for item in data]))\n    scalarMap = cm.ScalarMappable(norm=cNorm, cmap=cm.get_cmap(\"Greens\"))\n    ax.scatter(data[i][0], data[i][1], c=scalarMap.to_rgba(data[i][3]), s=data[i][2]/max([item[2] for item in data])*1000+600, label=None)\n    ax.scatter([], [], c=scalarMap.to_rgba(data[i][3]), s=20, label=line_labels[i]+\" \"+data_labels[2]+str(data[i][2]))\n\nax.legend(title=data_labels[2], loc=\"upper left\")\nscalarMap.set_array(data)\ncbar = fig.colorbar(scalarMap, ax=ax)\ncbar.ax.set_title(data_labels[3])\n\nax.set_title(\"Advances in Science and Engineering - The Impact of Research Investment\")\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\nplt.grid()\nplt.tight_layout()\nplt.savefig(\"./bubble/png/2_2023122270050.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How many thousands of Engineering Graduates are there in the field of Artificial Intelligence?",
            "output": "2.4"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_47",
        "img": "./bubble/png/bubble_47.png",
        "topic": "Arts and Culture",
        "title": " Cultural Engagement and Awareness of Various Artforms",
        "csv": "Artform \\t Number of Participants (Million) \\t Engagement (Hours/Week) \\t Awareness (Score) \\t Creativity (Score) \\n Music \\t 1.2 \\t 9 \\t 7 \\t 8 \\n Theatre \\t 0.5 \\t 6 \\t 5 \\t 6 \\n Dance \\t 0.3 \\t 4 \\t 3 \\t 9 \\n Visual Arts \\t 0.7 \\t 3 \\t 4 \\t 10 \\n Crafts \\t 0.4 \\t 2 \\t 2 \\t 7 \\n Literature \\t 0.2 \\t 1 \\t 1 \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart illustrates cultural engagement and awareness across various artforms, based on data such as participant numbers (in millions), weekly engagement hours, and scores for awareness and creativity. Music leads with 1.2 million participants, 9 hours of weekly engagement, and scores of 7 for awareness and 8 for creativity. Theatre has 0.5 million participants, 6 engagement hours, an awareness score of 5, and a creativity score of 6. Dance follows with 0.3 million participants, 4 hours of engagement, an awareness score of 3, and a high creativity score of 9, while Visual Arts has 0.7 million participants, 3 engagement hours, an awareness score of 4, and the highest creativity score of 10. Crafts show 0.4 million participants, 2 engagement hours, scores of 2 for awareness and 7 for creativity. Lastly, Literature has the least participants at 0.2 million, with 1 engagement hour, and scores 1 for both awareness and creativity."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.cm import get_cmap\nfrom matplotlib.colors import Normalize\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = ['Number of Participants (Million)', 'Engagement (Hours/Week)', 'Awareness (Score)', 'Creativity (Score)']\ndata = np.array([[1.2, 9, 7, 8], [0.5, 6, 5, 6], [0.3, 4, 3, 9], [0.7, 3, 4, 10], [0.4, 2, 2, 7], [0.2, 1, 1, 5]])\nline_labels = ['Music', 'Theatre', 'Dance', 'Visual Arts', 'Crafts', 'Literature']\n\n# Create figure before plotting\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot()\ncmap = get_cmap('PuBu')\nnorm = Normalize(vmin=data[:, 3].min() - 1, vmax=data[:, 3].max())\n\n# Plot the data with the type of bubble chart\nfor i in range(len(data)):\n    ax.scatter(data[i, 0], data[i, 1], s=(data[i, 2]/data[:, 2].max())*5000, c=cmap(norm(data[i, 3])), label=None)\n    ax.scatter([], [], s=20, c=cmap(norm(data[i, 3])), label=f'{line_labels[i]} {data[i, 2]:.2f}')\n\n# Plot the legend with the title\nax.legend(title=data_labels[2])\n\n# Add a color bar for the bubble colors\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label(data_labels[3])\n\n# Show the labels of two axes\nplt.xlabel(data_labels[0])\nplt.ylabel(data_labels[1])\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.title('Cultural Engagement and Awareness of Various Artforms')\nplt.tight_layout()\nplt.savefig('./bubble/png/26_2023122270050.png')\n\n# Clear the current image state \nplt.clf()"
        },
        "QA": {
            "input": "How many more hours per week is the engagement in music compared to dance?",
            "output": "5 hours"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_43",
        "img": "./bubble/png/bubble_43.png",
        "topic": "Sports and Entertainment",
        "title": " Sports and Entertainment Events by Audience and Revenue",
        "csv": "Event \\t Attendance (Millions) \\t Revenue (Billion $) \\t Sponsorship (Million $) \\t Broadcast Audience (Millions) \\n Super Bowl \\t 100 \\t 7.5 \\t 750 \\t 150 \\n NBA Finals \\t 75 \\t 5 \\t 500 \\t 120 \\n World Cup \\t 500 \\t 10 \\t 1000 \\t 300 \\n Summer Olympics \\t 400 \\t 8 \\t 750 \\t 250 \\n March Madness \\t 50 \\t 3 \\t 400 \\t 90 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart illustrates various sports and entertainment events, comparing their attendance in millions, revenue in billion dollars, sponsorship in million dollars, and broadcast audience in millions. The Super Bowl shows attendance of 100 million, revenue of 7.5 billion dollars, sponsorship of 750 million dollars, and a broadcast audience of 150 million. The NBA Finals indicate 75 million attendees, 5 billion dollars in revenue, 500 million dollars from sponsorship, with a broadcast audience of 120 million. The World Cup commands 500 million spectators, 10 billion in revenue, 1000 million in sponsorship, and a broadcast audience of 300 million. The Summer Olympics host 400 million attendees, have 8 billion revenue, 750 million in sponsorship, and a broadcast audience of 250 million. Lastly, March Madness records 50 million attendees, 3 billion in revenue, 400 million from sponsorship, and a broadcast audience of 90 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\n\n# Transform data into three variables: data_labels, data, line_labels.\ndata_labels = [\"Attendance (Millions)\", \"Revenue (Billion $)\", \n               \"Sponsorship (Million $)\", \"Broadcast Audience (Millions)\"]\ndata = np.array([[100, 7.5, 750, 150], [75, 5, 500, 120], \n                 [500, 10, 1000, 300], [400, 8, 750, 250], \n                 [50, 3, 400, 90]])\nline_labels = [\"Super Bowl\", \"NBA Finals\", \"World Cup\", \n               \"Summer Olympics\", \"March Madness\"]\n\n# Create figure before plotting\nplt.figure(figsize=(12, 10))\nax = plt.subplot()\n\n# Plot the data with the type of bubble chart\nfor i in range(len(data)):\n    # Normalize color\n    color = cm.get_cmap(\"RdBu\")(data[i, 3] / data[:, 3].max())\n    # Normalize bubble size\n    size = (data[i, 2] - data[:, 2].min()) / (data[:, 2].max() - data[:, 2].min()) * (5000 - 600) + 600\n\n    # Plot each line\n    ax.scatter(data[i, 0], data[i, 1], c=color, s=size, label=None)\n    # Scatter an empty point\n    ax.scatter([], [], c=color, s=20, label=line_labels[i] + f' {data[i, 2]}')\n\n# Plot the legend with the title\nax.legend(title=data_labels[2])\n\n# Add a color bar\nsm = plt.cm.ScalarMappable(cmap=\"RdBu\", norm=plt.Normalize(vmin=data[:, 3].min(), vmax=data[:, 3].max()))\nsm._A = []\nplt.colorbar(sm, ax=ax, fraction=0.02, label=data_labels[3])\n\n# Adjusting techniques\nax.grid(True)\nax.set_title(\"Sports and Entertainment Events by Audience and Revenue\")\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the image\nplt.savefig(\"./bubble/png/34_2023122261326.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much is the Broadcast Audience for the NBA Finals?",
            "output": "120 million"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_13",
        "img": "./bubble/png/bubble_13.png",
        "topic": "Energy and Utilities",
        "title": " Efficiency and Cost of Various Power Plants - Energy and Utilities 2023",
        "csv": "Power Plant \\t Output Capacity (Megawatts) \\t Efficiency (%) \\t Environmental Impact (Score) \\t Cost (Billion $) \\n Coal \\t 4500 \\t 40 \\t 200 \\t 2.4 \\n Wind \\t 3000 \\t 60 \\t 500 \\t 1.8 \\n Solar \\t 1200 \\t 80 \\t 1000 \\t 1.2 \\n Nuclear \\t 2500 \\t 95 \\t 100 \\t 3.5 \\n Hydro \\t 1500 \\t 85 \\t 300 \\t 2.0 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart illustrates the efficiency and cost of various power plants, alongside their output capacity, efficiency percentage, environmental impact, and construction cost in 2023. Coal has an output capacity of 4500 Megawatts, an efficiency of 40%, an environmental impact score of 200, and a cost of 2.4 billion dollars. Wind shows 3000 Megawatts of output, 60% efficiency, a score of 500 for environmental impact, and costs 1.8 billion dollars. Solar has 1200 Megawatts output, 80% efficiency, the highest environmental score of 1000, and the lowest cost at 1.2 billion dollars. Nuclear offers 2500 Megawatts, a high efficiency of 95%, an environmental score of 100, and a cost of 3.5 billion dollars, while Hydro has 1500 Megawatts output, 85% efficiency, a 300 environmental score, and costs 2.0 billion dollars."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\n\n#Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = [\"Output Capacity (Megawatts)\", \"Efficiency (%)\", \"Environmental Impact (Score)\", \"Cost (Billion $)\"]\nline_labels = [\"Coal\", \"Wind\", \"Solar\", \"Nuclear\", \"Hydro\"]\ndata = np.array([[4500, 40, 200, 2.4],\n                 [3000, 60, 500, 1.8],\n                 [1200, 80, 1000, 1.2],\n                 [2500, 95, 100, 3.5],\n                 [1500, 85, 300, 2.0]])\n\n#Plot the data with the type of bubble chart\nfig = plt.figure(figsize=(15,10))\nax = fig.add_subplot()\n\n#Normalize the color and size\nnorm = mpl.colors.Normalize(vmin = data[:,-1].min(), \n                            vmax = data[:,-1].max())\ns_m = mpl.cm.ScalarMappable(cmap=\"RdYlGn\", norm=norm)\ns_m.set_array([])\n\nsizes = np.linspace(600, 5000, data.shape[0])\n\n#Plotting using plt.scatter\nfor i, line_label in enumerate(line_labels):\n    ax.scatter(data[i, 0], data[i, 1], \n               s=sizes[i], \n               c=s_m.to_rgba(data[i, -1]), \n               label=None)\n    ax.scatter([], [], c=s_m.to_rgba(data[i, -1]), label=line_label + \" \" + str(data[i, 2]), s=20)\n\n#Plot the legend with the title\nax.legend(title=data_labels[2])\n\n#Add a color bar for the bubble colors\ncbar = fig.colorbar(s_m, ax=ax)\ncbar.ax.set_ylabel(data_labels[3], rotation=-90, va=\"bottom\")\n\n#Adjust the figure view\nax.set_title(\"Efficiency and Cost of Various Power Plants - Energy and Utilities 2023\")\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.grid(True)\n\n#Automatically resize the image\nplt.tight_layout()\n\n#Save the image\nplt.savefig(\"./bubble/png/2_2023122261326.png\")\n\n#Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the Environmental Impact score of Wind power plants?",
            "output": "500"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_7",
        "img": "./bubble/png/bubble_7.png",
        "topic": "Real Estate and Housing Market",
        "title": "housing Market Performance by Property Type in 2021",
        "csv": "Property Type \\t Price (Million $) \\t Number of Houses \\t Area (Million Square Meters) \\t Market Performance (Score) \\n Single Family Homes \\t 2.5 \\t 50 \\t 3 \\t 7 \\n Apartments \\t 1.5 \\t 60 \\t 2 \\t 8 \\n Townhouses \\t 1.3 \\t 40 \\t 2.5 \\t 6 \\n Condos \\t 1.2 \\t 30 \\t 1.5 \\t 9 \\n Vacation Homes \\t 3 \\t 20 \\t 4 \\t 7 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart illustrates the housing market performance in 2021 by property type. Single Family Homes show a price of 2.5 million dollars, with 50 houses covering 3 million square meters, and a market performance score of 7. Apartments have a slightly lower price of 1.5 million dollars for 60 houses, over 2 million square meters, scoring an 8. Townhouses are priced at 1.3 million dollars with 40 houses over 2.5 million square meters, holding a score of 6. Condos reflect the lowest price of 1.2 million dollars, 30 houses, 1.5 million square meters, and the highest score of 9. Vacation Homes stand at 3 million dollars for 20 houses, spread over 4 million square meters, and a score of 7."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport matplotlib.colors as colors\nimport numpy as np\n\ndata_labels = [\"Price (Million $)\", \"Number of Houses\", \"Area (Million Square Meters)\", \"Market Performance (Score)\"]\ndata = np.array([[2.5, 50, 3, 7],\n                 [1.5, 60, 2, 8],\n                 [1.3, 40, 2.5, 6],\n                 [1.2, 30, 1.5, 9],\n                 [3, 20, 4, 7]])\n\nline_labels = [\"Single Family Homes\", \"Apartments\", \"Townhouses\", \"Condos\", \"Vacation Homes\"]\n\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\ncm = plt.cm.get_cmap('RdYlBu')\n\n# normalize the color value\nnorm = mpl.colors.Normalize(vmin=data[:,3].min(), vmax=data[:,3].max())\n\n# normalize the bubble size\ns_m = mpl.cm.ScalarMappable(cmap=cm, norm=norm)\ns_m.set_array([])\n\n# plot the bubble chart\nfor i in range(data.shape[0]):\n    # plot the bubble\n    ax.scatter(data[i, 0], data[i, 1], s=data[i, 2]*1000+60, c=cm(norm(data[i, 3])), label=None)\n    # plot an empty point with the same color\n    ax.scatter([], [], c=cm(norm(data[i, 3])), label=line_labels[i] + f' {data[i, 2]}')\n\n# legend\nax.legend(title=data_labels[2])\n# color bar\nfig.colorbar(s_m, ax=ax, label=data_labels[3])\n\n# other settings\nax.set_title(\"Housing Market Performance by Property Type in 2021\")\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\nplt.tight_layout()\nplt.savefig('./bubble/png/42_2023122270050.png')\n\nplt.cla()"
        },
        "QA": {
            "input": "Which property type has the greatest area?",
            "output": "Vacation Homes"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_33",
        "img": "./bubble/png/bubble_33.png",
        "topic": "Social Sciences and Humanities",
        "title": " Perception of Different Social Sciences and Humanities over Time",
        "csv": "Topic \\t Engagement (Score) \\t Popularity (Score) \\t Reach (Score) \\t Longevity (Score) \\n Psychology \\t 800 \\t 900 \\t 1000 \\t 750 \\n Philosophy \\t 650 \\t 700 \\t 950 \\t 900 \\n Literature \\t 900 \\t 800 \\t 850 \\t 950 \\n History \\t 750 \\t 700 \\t 950 \\t 800 \\n Sociology \\t 800 \\t 600 \\t 750 \\t 900 \\n Political Science \\t 850 \\t 700 \\t 950 \\t 800 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bubble chart visualizes the perception of different social sciences and humanities fields over time based on four metrics: Engagement, Popularity, Reach, and Longevity. Psychology scores 800, 900, 1000, and 750, respectively, for each metric. Philosophy scores 650 in Engagement, 700 in Popularity, 950 in Reach, and the highest in Longevity with 900. Literature follows with 900 in Engagement, 800 in Popularity, 850 in Reach, and 950 in Longevity. History scores 750, 700, 950, and 800. Sociology has scores of 800, 600, 750, and 900. Lastly, Political Science shows 850 in Engagement, 700 in Popularity, 950 in Reach, and 800 in Longevity."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\nfrom matplotlib.colors import Normalize\n\n# Transform the given data into three variables\ndata_labels = [\"Engagement (Score)\", \"Popularity (Score)\", \"Reach (Score)\", \"Longevity (Score)\"]\ndata = np.array([[800,900,1000,750],[650,700,950,900],[900,800,850,950],[750,700,950,800],[800,600,750,900],[850,700,950,800]])\nline_labels = [\"Psychology\", \"Philosophy\", \"Literature\", \"History\", \"Sociology\", \"Political Science\"]\n\n# Create figure\nfig, ax = plt.subplots(figsize=(15,10))\ncmap = plt.cm.hot\nnorm = Normalize(vmin=700, vmax=1000)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\n# Plot the data with the type of bubble chart\nfor i in range(data.shape[0]):\n    # Normalize color to the range of cmap values\n    c = cmap(norm(data[i, 3]))\n    # Normalize bubble size from 60 to 500\n    s = 600 + (data[i, 2]-750)/(1000-750)*(5000-600)\n    ax.scatter(data[i, 0], data[i, 1], c=c, s=s, label=None)\n    # During each iteration of plotting, you must also scatter an empty point\n    ax.scatter([], [], c=c, s=20, label=line_labels[i] + f' {data[i, 2]}')\n\n# Plot the legend with the title\nax.legend(title=data_labels[2])\n\n# Add a color bar for the bubble colors\ncbar = fig.colorbar(sm, ax=ax, fraction=0.0363, pad=0.03)\ncbar.set_label(data_labels[3], fontsize=18)\n\n# Show the labels of two axes\nax.set_xlabel(data_labels[0], fontsize=18)\nax.set_ylabel(data_labels[1], fontsize=18)\n\n# The title of the figure\nplt.title('Perception of Different Social Sciences and Humanities over Time', fontsize=30)\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./bubble/png/10_2023122261326.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which topic has the highest popularity score?",
            "output": "Psychology"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_38",
        "img": "./bubble/png/bubble_38.png",
        "topic": "Tourism and Hospitality",
        "title": " Maximizing Tourism Revenue and Satisfaction - Tourism and Hospitality 2023",
        "csv": "Destination \\t Average Spending (USD) \\t Tourist Arrivals (Millions) \\t Satisfaction Score \\t Tourism Contribution (%) \\n USA \\t 3000 \\t 72 \\t 90 \\t 25 \\n Japan \\t 4000 \\t 45 \\t 87 \\t 20 \\n UK \\t 2500 \\t 60 \\t 85 \\t 30 \\n France \\t 2000 \\t 68 \\t 83 \\t 15 \\n Italy \\t 3500 \\t 55 \\t 80 \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart outlines tourism metrics for five destinations, capturing average spending (USD), tourist arrivals (millions), satisfaction scores, and tourism contribution to the economy (%). The USA shows an average spending of $3000, with 72 million tourist arrivals, a satisfaction score of 90, and a 25% economic contribution. Japan's figures include $4000 average spending, 45 million arrivals, an 87 satisfaction score, and a 20% contribution. The UK has $2500 spending, 60 million arrivals, an 85 score, and the highest economic contribution of 30%. France and Italy have lower spending, at $2000 and $3500, fewer tourist arrivals, and lower satisfaction scores of 83 and 80, with contributions at 15% and 10%, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\nfrom matplotlib.colors import Normalize\n\n# Correcting the bubble chart for the Maximizing Tourism Revenue and Satisfaction\n\n# Data\ncountries = [\"USA\", \"Japan\", \"UK\", \"France\", \"Italy\"]\naverage_spending = np.array([3000, 4000, 2500, 2000, 3500])  # Average Spending (USD)\ntourist_arrivals = np.array([72, 45, 60, 68, 55])  # Tourist Arrivals (Millions)\nsatisfaction_score = np.array([90, 87, 85, 83, 80])  # Satisfaction Score\ntourism_contribution = np.array([25, 20, 30, 15, 10])  # Tourism Contribution (%)\n\n# Create figure\nfig, ax = plt.subplots(figsize=(14, 7))\n\n# Color mapping and normalization\ncmap = cm.get_cmap(\"Blues\")\nnorm = plt.Normalize(vmin=min(tourism_contribution), vmax=max(tourism_contribution))\nsm = cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\n\n# Plotting the data\nfor country, spending, arrivals, satisfaction, contribution in zip(countries, average_spending, tourist_arrivals, satisfaction_score, tourism_contribution):\n    size = (satisfaction - 80) * 1000 / 10 + 600\n    color = cmap(norm(contribution))\n    ax.scatter(spending, arrivals, s=size, color=color, alpha=0.6, edgecolor='black', label=None)\n    ax.scatter([], [], color=color, label=country + f'{satisfaction}', s=20)\n\n# Legend and color bar\nax.legend(title='Satisfaction Score', loc=\"upper right\")\ncbar = fig.colorbar(sm, ax=ax, fraction=0.1, pad=0.05, aspect=20)\ncbar.set_label('Tourism Contribution (%)')\n\n# Labels, grid, and title\nax.grid(True, linestyle=\"-.\", color=\"black\", alpha=0.3)\nax.set_xlabel('Average Spending (USD)')\nax.set_ylabel('Tourist Arrivals (Millions)')\nax.set_title(\"Maximizing Tourism Revenue and Satisfaction - Tourism and Hospitality 2023\")\n\n# Adjust layout and save the figure\nplt.tight_layout()\n# The image must be saved as ./bubble/png/1.png.\nplt.savefig(\"./bubble/png/1.png\")\n\n# Clear the current image state at the end of the code.\nplt.cla()"
        },
        "QA": {
            "input": "Which destination has the highest average spending?",
            "output": "Japan"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_26",
        "img": "./bubble/png/bubble_26.png",
        "topic": "Education and Academics",
        "title": " Student Performance and Academic Load - Education 2023",
        "csv": "Student \\t Grades (GPA) \\t Test Scores (% \\t A-F) \\t Enrollment (Number) \\t Course Load (Hours) \\n Freshman \\t 3.2 \\t 90 \\t 1000 \\t 16 \\n Sophomore \\t 3.5 \\t 92 \\t 900 \\t 17 \\n Junior \\t 3.7 \\t 95 \\t 850 \\t 18 \\n Senior \\t 3.9 \\t 97 \\t 800 \\t 19 \\n Graduate \\t 4.0 \\t 99 \\t 750 \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bubble chart illustrates the student performance metrics and academic load across five educational stages in 2023. Freshmen students have a GPA of 3.2, test scores of 90%, an enrollment number of 1000, and take 16 course hours. Sophomores have a GPA of 3.5, test scores of 92%, 900 enrollments, and a course load of 17 hours. Juniors show a GPA of 3.7, 95% test scores, 850 enrollments, and 18 hours of coursework. Seniors have a 3.9 GPA, 97% on tests, 800 enrollments, and a 19-hour course load. Graduate students have a perfect 4.0 GPA, 99% test scores, 750 enrollments, and a 20-hour course load."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\nfrom matplotlib.colors import Normalize\n\n# Transform the given data into three variables\ndata_labels = [\"Grades (GPA)\", \"Test Scores (%, A-F)\", \"Enrollment (Number)\", \"Course Load (Hours)\"]\ndata = np.array([[3.2, 90, 1000, 16],\n                [3.5, 92, 900, 17],\n                [3.7, 95, 850, 18],\n                [3.9, 97, 800, 19],\n                [4.0, 99, 750, 20]])\nline_labels = [\"Freshman\", \"Sophomore\", \"Junior\", \"Senior\", \"Graduate\"]\n\n# Plot the data with the type of bubble chart\nfig = plt.figure(figsize=(20, 10))\nax = fig.add_subplot()\n\nfor i in range(len(line_labels)):\n    # scatter an empty point\n    ax.scatter([], [], label=line_labels[i], s=20, color=cm.jet(Normalize(15, 20)(data[i, 3])))\n    # plot the data\n    ax.scatter(data[i, 0], data[i, 1], s=Normalize(700, 1000)(data[i, 2]) * 5000 + 600, label=None, color=cm.jet(Normalize(15, 20)(data[i, 3])))\n\n# plot the legend with the title\nax.legend(title=data_labels[2], fontsize=\"large\")\n\n# add a color bar\nsm = cm.ScalarMappable(cmap=cm.jet, norm=Normalize(vmin=15, vmax=20))\nsm.set_array([])\nplt.colorbar(sm, ax=ax, label=data_labels[3])\n\n# set labels, title, background grid\nax.set_title(\"Student Performance and Academic Load - Education 2023\")\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.grid(True)\n\n# resize the image\nplt.tight_layout()\n\n# save the image\nplt.savefig(\"./bubble/png/16_2023122261326.png\")\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many enrollment numbers are reported for Junior students?",
            "output": "850"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_21",
        "img": "./bubble/png/bubble_21.png",
        "topic": "Law and Legal Affairs",
        "title": " Evaluating the Performance of Law and Legal Affairs - 2021",
        "csv": "Type \\t Cases Filed (Millions) \\t Judgments (Millions) \\t Time Spent (Hours) \\t Satisfaction Level (Score) \\n Civil \\t 1.2 \\t 0.6 \\t 2.3 \\t 6 \\n Criminal \\t 0.9 \\t 0.4 \\t 4.5 \\t 5 \\n Administrative \\t 0.6 \\t 0.2 \\t 1.5 \\t 7 \\n Immigration \\t 0.3 \\t 0.1 \\t 2.5 \\t 8 \\n Constitutional \\t 0.2 \\t 0.05 \\t 1.0 \\t 9 \\n Taxation \\t 0.1 \\t 0.05 \\t 2.0 \\t 7 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bubble chart represents the performance of law and legal affairs across different types in 2021. The data includes cases filed and judgments in millions, time spent in hours, and satisfaction level on a score scale. Civil cases had 1.2 million filed with 0.6 million judgments and a satisfaction score of 6 after 2.3 hours spent. Criminal cases show 0.9 million filed, 0.4 million judgments, spending 4.5 hours with a satisfaction score of 5. Administrative, immigration, constitutional, and taxation cases are also displayed, with varied figures for cases filed and judgments ranging from 0.1 to 0.6 million, time spent from 1.0 to 2.5 hours, and satisfaction scores from 7 to 9."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n\ndata_labels = ['Cases Filed (Millions)', 'Judgments (Millions)', 'Time Spent (Hours)', 'Satisfaction Level (Score)']\ndata = np.array([[1.2, 0.6, 2.3, 6], [0.9, 0.4, 4.5, 5], [0.6, 0.2, 1.5, 7], [0.3, 0.1, 2.5, 8], [0.2, 0.05, 1.0, 9], [0.1, 0.05, 2.0, 7]])\nline_labels = ['Civil', 'Criminal', 'Administrative', 'Immigration', 'Constitutional', 'Taxation']\n\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\nscalar_map = cm.ScalarMappable(norm=plt.Normalize(vmin=np.min(data[:, 3]), vmax=np.max(data[:, 3])))\n\nfor i in range(data.shape[0]):\n    size = 500 * (data[i, 2] - np.min(data[:, 2])) / (np.max(data[:, 2]) - np.min(data[:, 2])) + 60\n    ax.scatter(data[i, 0], data[i, 1], c=scalar_map.to_rgba(data[i, 3]), s=size, label=None)\n    ax.scatter([], [], c=scalar_map.to_rgba(data[i, 3]), s=20, label=line_labels[i] + ' ' + str(data[i, 2]) + ' hours')\n\nax.legend(title=data_labels[2], loc='upper left', bbox_to_anchor=(0.0, 1.01))\ncbar = fig.colorbar(scalar_map, ax=ax, orientation='horizontal', aspect=50)\ncbar.ax.set_title(data_labels[3])\nax.grid()\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.set_title(\"Evaluating the Performance of Law and Legal Affairs - 2021\")\nplt.tight_layout()\nplt.savefig('./bubble/png/9_2023122270050.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the total number of cases filed for Immigration and Taxation combined?",
            "output": "0.4 million"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_27",
        "img": "./bubble/png/bubble_27.png",
        "topic": "Science and Engineering",
        "title": " Cost and Time Investment for Advanced Science and Engineering Technologies",
        "csv": "Technology \\t Research Cost (Million $) \\t Development Time (Months) \\t Usage (Million People) \\t Success Rate (%) \\n Artificial Intelligence \\t 150 \\t 48 \\t 500 \\t 85 \\n Quantum Computing \\t 100 \\t 38 \\t 100 \\t 90 \\n Robotics \\t 200 \\t 36 \\t 400 \\t 75 \\n Nanotechnology \\t 50 \\t 60 \\t 200 \\t 95 \\n Energy Storage \\t 80 \\t 24 \\t 150 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart represents the cost and time investment in advanced science and engineering technologies along with their usage and success rate. Artificial Intelligence has a research cost of 150 million dollars, development time of 48 months, usage by 500 million people, and an 85% success rate. Quantum Computing has a cost of 100 million dollars, takes 38 months to develop, with 100 million users, and a 90% success rate. Robotics shows a 200 million dollar investment, 36 months of development, 400 million users, and a 75% success rate. Nanotechnology costs 50 million dollars, takes 60 months, with 200 million users, and a 95% success rate. Lastly, Energy Storage requires 80 million dollars, 24 months, and is used by 150 million people, with an 80% success rate."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\n\ndata_labels = ['Research Cost (Million $)', 'Development Time (Months)', 'Usage (Million People)', 'Success Rate (%)']\ndata = np.array([[150, 48, 500, 85],\n                 [100, 38, 100, 90],\n                 [200, 36, 400, 75],\n                 [50, 60, 200, 95],\n                 [80, 24, 150, 80]])\nline_labels = ['Artificial Intelligence', 'Quantum Computing', 'Robotics', 'Nanotechnology', 'Energy Storage']\n\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot()\nnorm = cm.colors.Normalize(vmin=data[:, 3].min(), vmax=data[:, 3].max())\ns_m = cm.ScalarMappable(cmap=cm.RdYlGn, norm=norm)\ns_m.set_array([])\n\nfor i, line_label in enumerate(line_labels):\n    ax.scatter(data[i, 0], data[i, 1], s=(data[i, 2] - data[:, 2].min()) / (data[:, 2].max() - data[:, 2].min()) * 5000 + 600,\n               c=s_m.to_rgba(data[i, 3]), label=None)\n    ax.scatter([], [], s=20, c=s_m.to_rgba(data[i, 3]), label=line_label + f' {data[i, 2]}')\n\nax.legend(title=data_labels[2])\ncb = fig.colorbar(s_m, ticks=np.linspace(data[:, 3].min(), data[:, 3].max(), 5))\ncb.ax.set_title(data_labels[3])\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.set_title('Cost and Time Investment for Advanced Science and Engineering Technologies')\nplt.xticks(rotation=45)\nplt.yticks(rotation=45)\nplt.grid(True)\nplt.tight_layout()\nplt.savefig('./bubble/png/17_2023122261326.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more months does it take to develop nanotechnology compared to energy storage technologies?",
            "output": "36 months"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_12",
        "img": "./bubble/png/bubble_12.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Performance and Retention in Human Resources and Employee Management",
        "csv": "Employees \\t Productivity (Score) \\t Retention (Score) \\t Turnover (%) \\t Benefits (Score) \\n Office \\t 90 \\t 80 \\t 3 \\t 8 \\n Warehouse \\t 70 \\t 85 \\t 5 \\t 5 \\n Manufacturing \\t 85 \\t 90 \\t 2 \\t 10 \\n Sales \\t 95 \\t 75 \\t 4 \\t 7 \\n Logistics \\t 80 \\t 95 \\t 1 \\t 9 \\n IT \\t 100 \\t 80 \\t 2 \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart presents data on employee performance and retention across various departments. Productivity scores are: Office 90, Warehouse 70, Manufacturing 85, Sales 95, Logistics 80, IT 100. Retention scores follow with: Office 80, Warehouse 85, Manufacturing 90, Sales 75, Logistics 95, IT 80. Turnover percentages are listed as Office 3%, Warehouse 5%, Manufacturing 2%, Sales 4%, Logistics 1%, and IT 2%. Lastly, benefits scores are: Office 8, Warehouse 5, Manufacturing 10, Sales 7, Logistics 9, IT 10."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\n\ndata_labels = ['Productivity (Score)','Retention (Score)','Turnover (%)','Benefits (Score)']\ndata = np.array([[90,80,3,8],\n                 [70,85,5,5],\n                 [85,90,2,10],\n                 [95,75,4,7],\n                 [80,95,1,9],\n                 [100,80,2,10]])\nline_labels = ['Office','Warehouse','Manufacturing','Sales','Logistics','IT']\n\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot()\nnorm = plt.Normalize(vmin=data[:,3].min() - 1, vmax=data[:,3].max())\nscalar_map = cm.ScalarMappable(norm=norm, cmap=cm.Blues_r)\nfor i in range(data.shape[0]):\n    ax.scatter(data[i, 0], data[i, 1], s=data[i, 2]*5000/data[:,2].max(), c=scalar_map.to_rgba(data[i, 3]), label=None)\n    ax.scatter([], [], s=20, c=scalar_map.to_rgba(data[i, 3]), label=line_labels[i] + f' {data[i, 2]}')\nax.legend(title=data_labels[2], loc='upper left')\ncbar = fig.colorbar(scalar_map, ax=ax, shrink=0.8)\ncbar.set_label(data_labels[3], rotation=270, labelpad=20)\nplt.xlabel(data_labels[0])\nplt.ylabel(data_labels[1])\nplt.title('Employee Performance and Retention in Human Resources and Employee Management')\nplt.grid()\nplt.tight_layout()\nplt.savefig('./bubble/png/27_2023122270050.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the Retention (Score) for the Manufacturing department?",
            "output": "90"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_34",
        "img": "./bubble/png/bubble_34.png",
        "topic": "Social Sciences and Humanities",
        "title": " Perception of Education, Intelligence, and Career Paths by Gender in Social Sciences and Humanities",
        "csv": "Gender \\t Attitudes to Education (Score) \\t Perception of Intelligence (Score) \\t Career Path (Score) \\t Satisfaction (Score) \\n Men \\t 9 \\t 7 \\t 8 \\t 5 \\n Women \\t 8 \\t 8 \\t 9 \\t 7 \\n Non-Binary \\t 7 \\t 9 \\t 7 \\t 9 \\n Transgender \\t 6 \\t 7 \\t 8 \\t 8 \\n Intersex \\t 5 \\t 6 \\t 9 \\t 6 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart visualizes scores for attitudes to education, perception of intelligence, career paths, and satisfaction across different genders in social sciences and humanities. Men scored 9 for education attitudes, 7 for intelligence perception, 8 for career paths, and 5 for satisfaction. Women had scores of 8, 8, 9, and 7, respectively. Non-binary individuals scored 7, 9, 7, and 9, while transgender individuals scored 6, 7, 8, and 8. Intersex individuals' scores were 5 for attitudes to education, 6 for perception of intelligence, 9 for career paths, and 6 for satisfaction."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\nfrom matplotlib.colors import Normalize\n\n# transform the given data into three variables\ndata_labels = ['Attitudes to Education (Score)', 'Perception of Intelligence (Score)', 'Career Path (Score)', 'Satisfaction (Score)']\nline_labels = ['Men', 'Women', 'Non-Binary', 'Transgender', 'Intersex']\ndata = np.array([[9, 7, 8, 5], [8, 8, 9, 7], [7, 9, 7, 9], [6, 7, 8, 8], [5, 6, 9, 6]])\n\n# plot the data with type of bubble chart\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot()\ncmap = cm.get_cmap('viridis')\nscalar_map = cm.ScalarMappable(norm=Normalize(vmin=np.min(data[:, 3]), vmax=np.max(data[:, 3])), cmap=cmap)\n\nfor i in range(len(line_labels)):\n    # scatter an empty point\n    ax.scatter([], [], label=line_labels[i] + f' {data[i, 2]}', color=scalar_map.to_rgba(data[i, 3]), s=20)\n    # scatter not empty points\n    ax.scatter(data[i, 0], data[i, 1], label=None, color=scalar_map.to_rgba(data[i, 3]), s=600 + 5000*(data[i, 2]-np.min(data[:, 2]))/(np.max(data[:, 2])-np.min(data[:, 2])))\n\n# add legend with title and set legend location\nax.legend(title=data_labels[2], loc='lower center')\n\n# add color bar\ncb = fig.colorbar(scalar_map, ax=ax)\ncb.set_label(data_labels[3])\n\n# set background grid, labels and title\nax.grid(linestyle='dotted')\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nfig.suptitle('Perception of Education, Intelligence, and Career Paths by Gender in Social Sciences and Humanities')\n\n# automatically resize the image by tight_layout()\nplt.tight_layout()\n# save the image\nplt.savefig('./bubble/png/39_2023122270050.png')\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the 'Attitudes to Education (Score)' for Non-Binary individuals?",
            "output": "7"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_8",
        "img": "./bubble/png/bubble_8.png",
        "topic": "Social Media and the Web",
        "title": " Social Network Usage and Revenue in 2021",
        "csv": "Platform \\t Number of Users (Millions) \\t Time Spent (Minutes) \\t Ad Revenue (Billions $) \\t Engagement (Score) \\n Instagram \\t 1 \\t 240 \\t 20 \\t 9 \\n Twitter \\t 330 \\t 90 \\t 15 \\t 7 \\n Facebook \\t 2.5 \\t 180 \\t 50 \\t 10 \\n YouTube \\t 1.9 \\t 120 \\t 30 \\t 8 \\n TikTok \\t 750 \\t 60 \\t 10 \\t 9 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart illustrates social network usage and revenue in 2021 across five platforms. Instagram has 1 million users, with 240 minutes of time spent and $20 billion in ad revenue, scoring 9 on engagement. Twitter shows 330 million users, 90 minutes of time spent, an ad revenue of $15 billion, and an engagement score of 7. Facebook leads with 2.5 million users, 180 minutes spent, and $50 billion in ad revenue, alongside an engagement score of 10. YouTube has 1.9 million users, they spend 120 minutes, generate $30 billion in ad revenue, and have an engagement score of 8. TikTok reports 750 million users, 60 minutes of time spent, $10 billion in ad revenue, and a high engagement score of 9."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\n\n# Transform the given data into three variables: data_labels, data, line_labels \ndata_labels = ['Number of Users (Millions)', 'Time Spent (Minutes)', 'Ad Revenue (Billions $)', 'Engagement (Score)'] \ndata = np.array([[1, 240, 20, 9], [330, 90, 15, 7], [2.5, 180, 50, 10], [1.9, 120, 30, 8], [750, 60, 10, 9]]) \nline_labels = ['Instagram', 'Twitter', 'Facebook', 'YouTube', 'TikTok']\n\n# Plot the data with the type of bubble chart\nfig = plt.figure() \nax = fig.add_subplot() \n\n# Create figure before plotting, i.e., add_subplot() follows plt.figure()\nplt.title('Social Network Usage and Revenue in 2021')\n\n# For the plotting using plt.scatter, the color should be normalized to the range of cmap values\ncmap = cm.get_cmap('jet')\nnormalize = plt.Normalize(min(data[:,3]), max(data[:,3]))\ns_m = cm.ScalarMappable(cmap=cmap, norm=normalize)\ns_m.set_array([])\n\n# The bubble size should range from 60 to 500 by normalization\nsizes = np.interp(data[:,2], (data[:,2].min(), data[:,2].max()), (600, 5000))\n\n# Parameters can be set to accurately reflect the differences in data values\nfor i, line_label in enumerate(line_labels):\n    ax.scatter(data[i, 0], data[i, 1], s=sizes[i], c=s_m.to_rgba(data[i, 3]), label=None)\n    ax.scatter([], [], c=s_m.to_rgba(data[i, 3]), s=20, label=line_label + f' {data[i, 2]}')\n\n# Plot the legend with the title, by using ax.legend(title=data_labels[2])\nax.legend(title=data_labels[2])\n\n# Add a color bar for the bubble colors using the ScalarMappable object with Normalize\ncb = fig.colorbar(s_m, ax=ax, shrink=0.8)\ncb.set_label(data_labels[3], rotation=270, labelpad=20, fontsize='x-large')\n\n# Drawing techniques such as background grids and other parameter settings can be adjusted\nax.grid()\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\n# Show the labels of two axes\nax.set_yticks(data[:,1])\nax.set_yticklabels(data[:,1])\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# The image must be saved as ./bubble/png/47_2023122270050.png\nplt.savefig(\"./bubble/png/47_2023122270050.png\")\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "Which platform has the highest engagement score?",
            "output": "Facebook"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_45",
        "img": "./bubble/png/bubble_45.png",
        "topic": "Law and Legal Affairs",
        "title": " Legal Process Rates by Court Type in Law and Legal Affairs",
        "csv": "Court \\t Case Volume (Thousand) \\t Sentencing Rate (%) \\t Jury Rate (%) \\t Appeal Rate (%) \\n Supreme Court \\t 80 \\t 90 \\t 10 \\t 5 \\n District Court \\t 200 \\t 85 \\t 12 \\t 7 \\n Magistrate Court \\t 300 \\t 80 \\t 15 \\t 10 \\n County Court \\t 400 \\t 75 \\t 20 \\t 15 \\n Municipal Court \\t 500 \\t 70 \\t 25 \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bubble chart illustrates the legal process rates by court type in law and legal affairs. It compares the case volumes in thousands and the percentage rates for sentencing, jury involvement, and appeals in five different courts. The Supreme Court has a case volume of 80 thousand with sentencing, jury, and appeal rates at 90%, 10%, and 5% respectively. The District Court has 200 thousand cases, with 85%, 12%, and 7% rates. Magistrate Court shows 300 thousand cases, with rates of 80%, 15%, and 10%. County Court has 400 thousand cases, and rates of 75%, 20%, and 15%. Finally, the Municipal Court handles the highest volume of cases at 500 thousand, with rates of 70%, 25%, and 20%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfrom matplotlib.cm import ScalarMappable\nfrom matplotlib.colors import Normalize\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = [\"Case Volume (Thousand)\", \"Sentencing Rate (%)\", \"Jury Rate (%)\", \"Appeal Rate (%)\"]\ndata = np.array([[80, 90, 10, 5],\n                [200, 85, 12, 7],\n                [300, 80, 15, 10],\n                [400, 75, 20, 15],\n                [500, 70, 25, 20]])\nline_labels = [\"Supreme Court_10\", \"District Court_12\", \"Magistrate Court_15\", \"County Court_20\", \"Municipal Court_25\"]\n\n# Create figure before plotting\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(1, 1, 1)\n\n# Plot the data with the type of bubble chart\nsizes = (data[:, 2]/data[:, 2].max())*5000 + 600\ncolors = data[:, 3]\n\nfor i, line_label in enumerate(line_labels):\n    cmap = ScalarMappable(Normalize(min(colors), max(colors)), plt.cm.plasma)\n    ax.scatter(data[i, 0], data[i, 1], label=None,\n               s=sizes[i], color=cmap.to_rgba(colors[i]))\n    ax.scatter([], [], label=line_label,\n               s=20, color=cmap.to_rgba(colors[i]))\n\n# Plot the legend with the title\nax.legend(title=data_labels[2])\n\n# Add a color bar for the bubble colors\ncbar = fig.colorbar(cmap, ax=ax)\ncbar.set_label(data_labels[3])\n\n# Show the labels of two axes\nax.set_xlabel(\"Case Volume (Thousand)\")\nax.set_ylabel(\"Sentencing Rate (%)\")\n\n# The title of the figure\nax.set_title(\"Legal Process Rates by Court Type in Law and Legal Affairs\")\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the image\nplt.savefig(\"./bubble/png/12.png\")\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "What is the appeal rate for cases in the County Court?",
            "output": "15%"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_23",
        "img": "./bubble/png/bubble_23.png",
        "topic": "Government and Public Policy",
        "title": " Assessing the Effects of Government Policies on Economy, Politics and Environment",
        "csv": "Policy \\t Ease of Access (Score) \\t Economic Impact (Billion $) \\t Political Impact (Score) \\t Environmental Impact (Score) \\n Healthcare \\t 10 \\t 800 \\t 90 \\t 400 \\n Education \\t 8 \\t 1000 \\t 80 \\t 600 \\n Taxation \\t 7 \\t 1300 \\t 75 \\t 500 \\n Immigration \\t 8 \\t 850 \\t 85 \\t 400 \\n Security \\t 9 \\t 500 \\t 95 \\t 300 \\n Trade \\t 6 \\t 1200 \\t 85 \\t 200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart assesses government policies based on ease of access, economic impact in billion dollars, political impact, and environmental impact, all measured with specific scores. Healthcare policy has a score of 10 for accessibility, an economic impact of 800 billion dollars, a political impact score of 90, and an environmental impact score of 400. Education, with scores of 8 in ease of access and 80 in political impact, has an economic impact of 1000 billion dollars and the highest environmental impact score at 600. Taxation, immigration, security, and trade policies vary in their respective scores and economic impacts, which are detailed in the data."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.cm import ScalarMappable\nfrom matplotlib.colors import Normalize\n\n# Transform data\ndata_labels = ['Ease of Access (Score)', 'Economic Impact (Billion $)', 'Political Impact (Score)', 'Environmental Impact (Score)']\nline_labels = ['Healthcare', 'Education', 'Taxation', 'Immigration', 'Security', 'Trade']\ndata = np.array([[10, 800, 90, 400],\n                 [8, 1000, 80, 600],\n                 [7, 1300, 75, 500],\n                 [8, 850, 85, 400],\n                 [9, 500, 95, 300],\n                 [6, 1200, 85, 200]])\n\n# Create figure\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(1, 1, 1)\n\n# Create bubble chart\ncmap = plt.get_cmap('Set2')\nnorm = Normalize(vmin=data[:, 3].min(), vmax=data[:, 3].max())\nfor i in range(len(data)):\n    ax.scatter(data[i, 0], data[i, 1], s=(data[i, 2] - data[:, 2].min()) / (data[:, 2].max() - data[:, 2].min()) * 5000 + 600, c=cmap(norm(data[i, 3])), label=None)\n    ax.scatter([], [], c=cmap(norm(data[i, 3])), s=20, label=line_labels[i] + ' ' + str(data[i, 2]))\n\n# Plot legend\nax.legend(title=data_labels[2])\n\n# Create color bar\nsm = ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, fraction=0.046, pad=0.04)\ncbar.set_label(data_labels[3])\n\n# Set title and axes label\nplt.title('Assessing the Effects of Government Policies on Economy, Politics and Environment')\nplt.xlabel(data_labels[0])\nplt.ylabel(data_labels[1])\n\n# Adjust figure\nplt.tight_layout()\nplt.savefig('./bubble/png/11_2023122261440.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the Environmental Impact score for the Education policy?",
            "output": "600"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_10",
        "img": "./bubble/png/bubble_10.png",
        "topic": "Science and Engineering",
        "title": " Performance of Science and Engineering Technologies",
        "csv": "Technology \\t Productivity (Score) \\t Efficiency (Score) \\t Cost (Million $) \\t Time (Hours) \\n AI \\t 90 \\t 80 \\t 20 \\t 700 \\n Robotics \\t 70 \\t 90 \\t 15 \\t 1000 \\n Automation \\t 60 \\t 85 \\t 12 \\t 300 \\n Cloud Computing \\t 80 \\t 95 \\t 18 \\t 500 \\n Big Data \\t 75 \\t 87 \\t 20 \\t 400 \\n Quantum Computing \\t 85 \\t 92 \\t 16 \\t 200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart illustrates the performance of six science and engineering technologies in terms of productivity, efficiency, cost, and time. AI scores 90 in productivity, 80 in efficiency, and costs 20 million dollars with a time investment of 700 hours. Robotics scores 70 in productivity, 90 in efficiency, costs 15 million dollars, and takes 1000 hours. Automation has a productivity score of 60, efficiency of 85, cost of 12 million dollars, and requires 300 hours. Cloud Computing scores 80 in productivity, 95 in efficiency, carries an 18 million dollar cost, and takes 500 hours. Big Data has scores of 75 for productivity, 87 for efficiency, costs 20 million dollars, and demands 400 hours. Lastly, Quantum Computing scores 85 in productivity, 92 in efficiency, costs 16 million dollars, and needs 200 hours."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\n\ndata_labels = [\"Productivity (Score)\", \"Efficiency (Score)\", \"Cost (Million $)\", \"Time (Hours)\"]\nline_labels = [\"AI\", \"Robotics\", \"Automation\", \"Cloud Computing\", \"Big Data\", \"Quantum Computing\"]\ndata = np.array([[90, 80, 20, 700], [70, 90, 15, 1000], [60, 85, 12, 300], [80, 95, 18, 500], [75, 87, 20, 400], [85, 92, 16, 200]])\n\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot(111)\n\nfor i in range(len(line_labels)):\n    # normalize the size and color\n    size = (data[i, 2] - data[:, 2].min()) / (data[:, 2].max() - data[:, 2].min()) * 5000 + 600\n    color = (data[i, 3] - data[:, 3].min()) / (data[:, 3].max() - data[:, 3].min())\n    ax.scatter(data[i, 0], data[i, 1], s=size, c=cm.cool(color), label=None)\n    ax.scatter([], [], s=20, c=cm.cool(color), label=line_labels[i] + \": \" + str(data[i, 2]))\n\nax.legend(title=data_labels[2], bbox_to_anchor=(1, 1))\n\nnorm = cm.colors.Normalize(vmin=data[:, 3].min(), vmax=data[:, 3].max())\nsm = cm.ScalarMappable(cmap=cm.cool, norm=norm)\nsm.set_array([])\n\nplt.colorbar(sm, ax=ax, shrink=0.5, aspect=10, label=data_labels[3])\nax.set_title(\"Performance of Science and Engineering Technologies\")\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\nplt.grid()\nplt.tight_layout()\nplt.savefig('./bubble/png/9_2023122261326.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which technology has the lowest Cost and Time?",
            "output": "Automation"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_29",
        "img": "./bubble/png/bubble_29.png",
        "topic": "Government and Public Policy",
        "title": " Impact of Taxation on Economic Growth and Employment in Government and Public Policy",
        "csv": "Taxation \\t Revenue Collected (Billion $) \\t Compliance Rate (%) \\t Employment (Millions) \\t Economic Growth (Score) \\n Income Tax \\t 750 \\t 90 \\t 70 \\t 6 \\n Corporate Tax \\t 350 \\t 85 \\t 50 \\t 8 \\n Property Tax \\t 200 \\t 80 \\t 20 \\t 10 \\n Sales Tax \\t 500 \\t 75 \\t 40 \\t 7 \\n Import Tax \\t 150 \\t 70 \\t 30 \\t 9 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart presents various statistics regarding the impact of different types of taxation on economic growth and employment. It illustrates five categories: Income Tax, with $750 billion collected, a 90% compliance rate, 70 million jobs, and a growth score of 6; Corporate Tax with $350 billion, 85% compliance, 50 million jobs, and a score of 8; Property Tax with $200 billion, 80% compliance, 20 million jobs, and the highest growth score of 10; Sales Tax with $500 billion, 75% compliance, 40 million jobs, and a score of 7; and Import Tax with $150 billion, 70% compliance, 30 million jobs, and a score of 9."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom matplotlib.colors import Normalize\n\n# Transform the given data into three variables\ndata_labels = ['Revenue Collected (Billion $)', 'Compliance Rate (%)', 'Employment (Millions)', 'Economic Growth (Score)']\nline_labels = ['Income Tax', 'Corporate Tax', 'Property Tax', 'Sales Tax', 'Import Tax']\ndata = np.array([[750, 90, 70, 6], [350, 85, 50, 8], [200, 80, 20, 10], [500, 75, 40, 7], [150, 70, 30, 9]])\n\n# Plot the data with the type of bubble chart\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(1, 1, 1)\n\n# Normalize the color and the bubble size\ncolor_norm = Normalize(vmin=data[:, 3].min(), vmax=data[:, 3].max())\nsize_norm = Normalize(vmin=data[:, 2].min(), vmax=data[:, 2].max())\n\n# Plot the data\nfor i in range(len(line_labels)):\n    ax.scatter(data[i, 0], data[i, 1], s=size_norm(data[i, 2])*500+60, c=plt.cm.jet(color_norm(data[i, 3])), label=None)\n    ax.scatter([], [], s=20, c=plt.cm.jet(color_norm(data[i, 3])), label=f'{line_labels[i]} {data[i, 2]}')\n\n# Plot legend\nax.legend(title=data_labels[2])\n\n# Plot color bar\nsm = plt.cm.ScalarMappable(cmap=plt.cm.jet, norm=color_norm)\nsm._A = []\ncbar = plt.colorbar(sm, orientation='horizontal')\ncbar.ax.set_title(data_labels[3])\n\n# Adjust figure\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.grid(True)\nplt.title('Impact of Taxation on Economic Growth and Employment in Government and Public Policy')\nfig.tight_layout()\n\n# Save the figure\nplt.savefig('./bubble/png/38_2023122270050.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which tax type has the highest revenue collected?",
            "output": "Income Tax"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_50",
        "img": "./bubble/png/bubble_50.png",
        "topic": "Science and Engineering",
        "title": " Investment and Risk Assessment of Science and Engineering Projects",
        "csv": "Project \\t Cost (Billion $) \\t Duration (Years) \\t Energy Usage (Megawatt) \\t Risk Level (Score) \\n Fusion Reactor \\t 10 \\t 15 \\t 100 \\t 7 \\n Satellite Launch \\t 2 \\t 2 \\t 50 \\t 9 \\n Solar Farm \\t 1 \\t 5 \\t 25 \\t 6 \\n Earthquake Early Warning System \\t 3 \\t 7 \\t 10 \\t 8 \\n Autonomous Vehicle Network \\t 5 \\t 12 \\t 75 \\t 10 \\n Offshore Wind Farm \\t 4 \\t 10 \\t 45 \\t 7 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart illustrates the investment and risk assessment of six different science and engineering projects. The 'Fusion Reactor' project has a cost of 10 billion dollars, duration of 15 years, energy usage of 100 megawatts, and a risk score of 7. 'Satellite Launch' requires 2 billion dollars, spans 2 years, uses 50 megawatts, and has a risk score of 9. The 'Solar Farm' has a cost of 1 billion dollars, takes 5 years, consumes 25 megawatts, and has a risk score of 6. An 'Earthquake Early Warning System' costs 3 billion dollars, will take 7 years, uses 10 megawatts of energy, and has a risk level of 8. 'Autonomous Vehicle Network' is a 5 billion dollar project, with a 12-year duration, 75 megawatts energy usage, and the highest risk score of 10. Lastly, the 'Offshore Wind Farm' project costs 4 billion dollars, has a duration of 10 years, energy usage of 45 megawatts, and a risk score of 7."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom matplotlib.colors import Normalize\n\ndata_labels = ['Cost (Billion $)', 'Duration (Years)', 'Energy Usage (Megawatt)', 'Risk Level (Score)']\nline_labels = ['Fusion Reactor', 'Satellite Launch', 'Solar Farm', 'Earthquake Early Warning System', 'Autonomous Vehicle Network', 'Offshore Wind Farm']\ndata = np.array([[10, 15, 100, 7], [2, 2, 50, 9], [1, 5, 25, 6], [3, 7, 10, 8], [5, 12, 75, 10], [4, 10, 45, 7]])\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\n\nfor i in range(data.shape[0]):\n    cmap = cm.get_cmap('RdYlGn')\n    norm = Normalize(vmin=min(data[:, 3]), vmax=max(data[:, 3]))\n    size = Normalize(vmin=min(data[:, 2]), vmax=max(data[:, 2]))\n    sc = ax.scatter(data[i, 0], data[i, 1], s=size(data[i, 2]) * 500 + 60, c=[cmap(norm(data[i, 3]))], label=None)\n    ax.scatter([], [], s=20, c=sc.get_facecolors(), label=line_labels[i] + ' ' + str(data[i, 2]))\n    \nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.legend(title=data_labels[2])\n\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label(data_labels[3])\n\nplt.title('Investment and Risk Assessment of Science and Engineering Projects')\nplt.tight_layout()\nplt.savefig('./bubble/png/7_2023122270050.png')\n\nplt.close()"
        },
        "QA": {
            "input": "How much energy does the Solar Farm project use?",
            "output": "25 Megawatts"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_48",
        "img": "./bubble/png/bubble_48.png",
        "topic": "Agriculture and Food Production",
        "title": " Maximizing Profits with Sustainable Crop Production - Agriculture 2023",
        "csv": "Crop \\t Production Volume (Million Tonnes) \\t Land Used (Million Hectares) \\t Profit Margin (%) \\t Sustainability (Score) \\n Wheat \\t 730 \\t 220 \\t 20 \\t 8 \\n Corn \\t 1150 \\t 180 \\t 25 \\t 6 \\n Rice \\t 490 \\t 160 \\t 15 \\t 10 \\n Soybeans \\t 350 \\t 120 \\t 30 \\t 7 \\n Potatoes \\t 370 \\t 100 \\t 18 \\t 10 \\n Apples \\t 150 \\t 80 \\t 20 \\t 9 \\n Oranges \\t 220 \\t 90 \\t 15 \\t 7 \\n Bananas \\t 280 \\t 100 \\t 30 \\t 8 \\n Avocados \\t 60 \\t 50 \\t 25 \\t 6 \\n Pears \\t 90 \\t 40 \\t 20 \\t 10 \\n Tomatoes \\t 130 \\t 30 \\t 18 \\t 9 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bubble chart represents various crops with corresponding production volumes, land usage, profit margins, and sustainability scores for agriculture in 2023. Wheat shows a production volume of 730 million tonnes, using 220 million hectares, with a 20% profit margin and a sustainability score of 8. Corn's production volume is 1150 million tonnes on 180 million hectares, a 25% profit margin, and a sustainability score of 6. Rice, soybeans, potatoes, apples, oranges, bananas, avocados, pears, and tomatoes are also included with their respective data points for production, land used, profit, and sustainability."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.cm import get_cmap\nfrom matplotlib.colors import Normalize\n\n# Transform data into three variables\ndata_labels = [\"Production Volume (Million Tonnes)\", \"Land Used (Million Hectares)\", \"Profit Margin (%)\", \"Sustainability (Score)\"]\nline_labels = [\"Wheat\",\"Corn\",\"Rice\",\"Soybeans\",\"Potatoes\",\"Apples\",\"Oranges\",\"Bananas\",\"Avocados\",\"Pears\",\"Tomatoes\"]\ndata = np.array([[730,220,20,8],\n                 [1150,180,25,6],\n                 [490,160,15,10],\n                 [350,120,30,7],\n                 [370,100,18,10],\n                 [150,80,20,9],\n                 [220,90,15,7],\n                 [280,100,30,8],\n                 [60,50,25,6],\n                 [90,40,20,10],\n                 [130,30,18,9]])\n\n# Create figure\nfig, ax = plt.subplots(figsize=(15, 10))\n\n# Plot the data with the type of bubble chart\ncmap = get_cmap('tab20', lut=len(data))\nnorm = Normalize(vmin=data[:, 3].min(), vmax=data[:, 3].max())\nsizes = (data[:, 2] - data[:, 2].min()) / (data[:, 2].max() - data[:, 2].min()) * (5000 - 600) + 600\nfor i, line_label in enumerate(line_labels):\n    ax.scatter(data[i, 0], data[i, 1], s=sizes[i], c=cmap(norm(data[i, 3])), label=None)\n    ax.scatter([], [], c=cmap(norm(data[i, 3])), label=line_label + f' {data[i, 2]}', s=20)\n\n# Plot the legend with the title\nax.legend(title=data_labels[2], loc=\"lower right\")\n\n# Add a color bar for the bubble colors\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, shrink=0.7, anchor=(0.3, 0.5))\ncbar.ax.set_title(data_labels[3], fontsize=12)\n\n# Drawing techniques\nax.grid(True, linestyle='--', which='major',\n            color='grey', alpha=.25)\n\n# Show the labels of two axes\nax.set_xlabel(data_labels[0], fontsize=12)\nax.set_ylabel(data_labels[1], fontsize=12)\n\n# The title of the figure\nax.set_title(\"Maximizing Profits with Sustainable Crop Production - Agriculture 2023\", fontsize=16)\n\n# Resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"./bubble/png/5_2023122270050.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which crop has the highest production volume according to the data?",
            "output": "Corn"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_22",
        "img": "./bubble/png/bubble_22.png",
        "topic": "Transportation and Logistics",
        "title": " Assessing the Value of Different Transportation Modes",
        "csv": "Mode \\t Revenue (Billion $) \\t Cost (Billion $) \\t Efficiency (Score) \\t Safety (Score) \\n Road \\t 120 \\t 100 \\t 8 \\t 9 \\n Rail \\t 200 \\t 150 \\t 9 \\t 8 \\n Air \\t 400 \\t 300 \\t 10 \\t 10 \\n Maritime \\t 600 \\t 400 \\t 7 \\t 9 \\n Drone \\t 50 \\t 30 \\t 10 \\t 7 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart visualizes an assessment of different transportation modes based on their revenue, cost, efficiency, and safety scores. Road transport generates $120 billion in revenue with a $100 billion cost, scoring 8 in efficiency and 9 in safety. Rail shows $200 billion in revenue, costs $150 billion, and scores 9 in efficiency and 8 in safety. Air transport has $400 billion in revenue, $300 billion in cost, and perfect scores of 10 in both efficiency and safety. Maritime displays the highest revenue at $600 billion with a $400 billion cost, efficiency score of 7, and safety score of 9. Drone transport, though lesser in revenue and cost at $50 billion and $30 billion respectively, scores 10 in efficiency and 7 in safety."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\nfrom matplotlib.colors import Normalize\n\ndata_labels = ['Revenue (Billion $)', 'Cost (Billion $)', 'Efficiency (Score)', 'Safety (Score)']\ndata = np.array([[120, 100, 8, 9], [200, 150, 9, 8], [400, 300, 10, 10], [600, 400, 7, 9], [50, 30, 10, 7]])\nline_labels = ['Road', 'Rail', 'Air', 'Maritime', 'Drone']\n\nfig = plt.figure()\nax = fig.add_subplot(111)\n\nfor i in range (len(data)):\n    norm = Normalize(vmin=data[:,2].min(), vmax=data[:,2].max())\n    cmap = cm.ScalarMappable(norm=norm, cmap=cm.RdYlGn)\n    ax.scatter(data[i, 0], data[i, 1], s=(data[i, 2] - data[:,2].min())/(data[:,2].max() - data[:,2].min())*2000 + 600, c=cmap.to_rgba(data[i, 3]), label=None)\n    ax.scatter([], [], s=20, c=cmap.to_rgba(data[i, 3]), label=line_labels[i] + ' ' + str(data[i, 2]))\n\nax.legend(title=data_labels[2])\ncb = cmap.to_rgba(data[:,3])\ncb1 = fig.colorbar(cmap, ax=ax)\ncb1.ax.set_ylabel(data_labels[3], rotation=270, labelpad=20)\n\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.set_title('Assessing the Value of Different Transportation Modes')\nplt.grid(True)\nfig.tight_layout()\nfig.savefig('./bubble/png/31_2023122270050.png')\nplt.close()"
        },
        "QA": {
            "input": "What is the Efficiency score for Air mode of transportation?",
            "output": "10"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_3",
        "img": "./bubble/png/bubble_3.png",
        "topic": "Food and Beverage Industry",
        "title": " Profitability and Performance in the Food and Beverage Industry",
        "csv": "Restaurant \\t Revenue (Billion $) \\t Customer Satisfaction (Score) \\t Food Safety (Score) \\t Employee Satisfaction (Score) \\n Fast Food \\t 440 \\t 90 \\t 85 \\t 75 \\n Fine Dining \\t 100 \\t 95 \\t 90 \\t 80 \\n Cafes \\t 330 \\t 88 \\t 86 \\t 78 \\n Takeaway \\t 180 \\t 85 \\t 87 \\t 73 \\n Grocery \\t 210 \\t 80 \\t 83 \\t 70 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart provides data on different restaurant types, their revenue in billions of dollars, and three performance scores: customer satisfaction, food safety, and employee satisfaction. Fast Food generates $440 billion, with scores of 90, 85, and 75, respectively. Fine Dining brings in $100 billion and achieves higher scores: 95 in customer satisfaction, 90 in food safety, and 80 in employee satisfaction. Cafes have revenues of $330 billion, with scores of 88, 86, and 78. Takeaway restaurants report $180 billion in revenue and scores of 85, 87, and 73, while Grocery stores have $210 billion in revenue and the lowest performance scores of 80, 83, and 70."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom matplotlib.colors import Normalize\nimport numpy as np\n\n# Transform the given data into three variables\ndata_labels = [\"Revenue (Billion $)\", \"Customer Satisfaction (Score)\", \"Food Safety (Score)\", \"Employee Satisfaction (Score)\"]\ndata = np.array([[440, 90, 85, 75], [100, 95, 90, 80], [330, 88, 86, 78], [180, 85, 87, 73], [210, 80, 83, 70]])\nline_labels = [\"Fast Food\", \"Fine Dining\", \"Cafes\", \"Takeaway\", \"Grocery\"]\n\n# Plot the data with the type of bubble chart\nfig = plt.figure()\nax = fig.add_subplot()\nscalarMap = cm.ScalarMappable(norm=Normalize(vmin=min(data[:,3]), vmax=max(data[:,3])))\n\nfor i in range(data.shape[0]):\n    ax.scatter(data[i,0], data[i,1], c=scalarMap.to_rgba(data[i,3]), s=(data[i,2]-min(data[:,2]))/max(data[:,2]-min(data[:,2]))*500+60, label=None)\n    ax.scatter([], [], c=scalarMap.to_rgba(data[i,3]), s=20, label=line_labels[i] + \" \" + str(data[i,2]))\nax.legend(title=data_labels[2])\nfig.colorbar(scalarMap, ax=ax, label=data_labels[3])\n\n# Drawing techniques such as background grids and other parameter settings\nax.grid(True)\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.set_title(\"Profitability and Performance in the Food and Beverage Industry\")\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# The image must be saved as ./bubble/png/17_2023122270050.png\nplt.savefig('./bubble/png/17_2023122270050.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "Which restaurant type has the highest employee satisfaction score?",
            "output": "Fine Dining"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_31",
        "img": "./bubble/png/bubble_31.png",
        "topic": "Business and Finance",
        "title": " Financial Performance of the Top Tech Companies in 2023",
        "csv": "Company \\t Revenue (Billion $) \\t Employees \\t Market Share (%) \\t Investment (Billion $) \\n Google \\t 150 \\t 128000 \\t 45 \\t 10 \\n Amazon \\t 250 \\t 450000 \\t 30 \\t 20 \\n Apple \\t 300 \\t 130000 \\t 35 \\t 15 \\n Microsoft \\t 200 \\t 150000 \\t 20 \\t 25 \\n Tesla \\t 50 \\t 40000 \\t 10 \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart illustrates the financial performance of top tech companies in 2023, showing revenue, number of employees, market share, and investment for each company. Google has a revenue of $150 billion, 128,000 employees, a market share of 45%, and an investment of $10 billion. Amazon reports $250 billion in revenue, 450,000 employees, with a 30% market share, and $20 billion invested. Apple leads with $300 billion revenue, 130,000 employees, 35% market share, and $15 billion in investments. Microsoft has $200 billion in revenue, 150,000 employees, holds a 20% market share, and invests $25 billion. Tesla shows $50 billion in revenue, 40,000 employees, a market share of 10%, and $5 billion investment."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\nimport matplotlib.cm as cm\n\ndata_labels = [\"Revenue (Billion $)\", \"Employees\", \"Market Share (%)\", \"Investment (Billion $)\"]\nline_labels = [\"Google\", \"Amazon\", \"Apple\", \"Microsoft\", \"Tesla\"]\ndata = np.array([[150, 128000, 45, 10],\n                 [250, 450000, 30, 20],\n                 [300, 130000, 35, 15],\n                 [200, 150000, 20, 25],\n                 [50, 40000, 10, 5]])\n\n# plot the data with the type of bubble chart\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot()\n\n# normalize the data\nnorm = mcolors.Normalize(vmin=data[:, 3].min(), vmax=data[:, 3].max())\ncmap = cm.viridis\nm = cm.ScalarMappable(norm=norm, cmap=cmap)\n\n# plot the scatter points\nfor i in range(len(data)):\n    ax.scatter(data[i, 0], data[i, 1], s=data[i, 2]*20, c=m.to_rgba(data[i, 3]), label=None)\n    ax.scatter([], [], c=m.to_rgba(data[i, 3]), label=line_labels[i]+\" \"+str(data[i, 3]))\n\n# plot legend and colorbar\nax.legend(title=data_labels[2])\ncb = fig.colorbar(m, ax=ax)\ncb.set_label(data_labels[3])\n\n# set the title, labels and other parameters\nplt.title(\"Financial Performance of the Top Tech Companies in 2023\")\nplt.xlabel(data_labels[0])\nplt.ylabel(data_labels[1])\nplt.grid()\n\n# adjust the figure\nplt.tight_layout()\n\n# save the figure\nplt.savefig(\"./bubble/png/8_2023122261440.png\")\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which company has invested the most in 2023?",
            "output": "Microsoft"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_42",
        "img": "./bubble/png/bubble_42.png",
        "topic": "Retail and E-commerce",
        "title": " Profitability of Different Retail Shopping Categories in E-commerce",
        "csv": "Shopping Category \\t Revenue (Million $) \\t Customer Base (Millions) \\t Average Spend per Customer (Dollars) \\t Customer Satisfaction (Score) \\n Electronics \\t 1200 \\t 75 \\t 200 \\t 9 \\n Apparel \\t 800 \\t 50 \\t 100 \\t 7 \\n Home Furnishings \\t 500 \\t 30 \\t 120 \\t 7 \\n Groceries \\t 400 \\t 60 \\t 50 \\t 8 \\n Toys \\t 300 \\t 40 \\t 90 \\t 9 \\n Books \\t 200 \\t 20 \\t 40 \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bubble chart represents the profitability of various retail shopping categories in e-commerce. It compares the revenue, customer base, average spend per customer, and customer satisfaction scores across categories: Electronics, Apparel, Home Furnishings, Groceries, Toys, and Books. Electronics lead with a revenue of 1200 million dollars, a customer base of 75 million, an average spend of 200 dollars, and a satisfaction score of 9. The other categories show varying figures, with Books having the smallest revenue of 200 million dollars but the highest satisfaction score of 10. Revenue, customer base, and spending are presented in dollars, while satisfaction is a score out of 10."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nfrom matplotlib.cm import get_cmap\nimport numpy as np\n\ndata_labels = [\"Revenue (Million $)\", \"Customer Base (Millions)\", \"Average Spend per Customer (Dollars)\", \"Customer Satisfaction (Score)\"]\nline_labels = [\"Electronics\", \"Apparel\", \"Home Furnishings\", \"Groceries\", \"Toys\", \"Books\"]\ndata = np.array([[1200, 75, 200, 9], \n                 [800, 50, 100, 7], \n                 [500, 30, 120, 7], \n                 [400, 60, 50, 8], \n                 [300, 40, 90, 9], \n                 [200, 20, 40, 10]])\n\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot(1, 1, 1)\n\n# Normalize colors and bubble size\nnorm = plt.Normalize(data[:, 3].min(), data[:, 3].max())\ncmap = get_cmap('jet')\nbubble_size = np.linspace(600, 5000, data[:, 2].size)\n\nfor i, line_label in enumerate(line_labels):\n    ax.scatter(data[i, 0], data[i, 1], c=cmap(norm(data[i, 3])), s=bubble_size[i], label=None)\n    ax.scatter([], [], c=cmap(norm(data[i, 3])), s=20, label=f\"{line_label} {data[i, 2]}\")\n\n# Add legend with title\nax.legend(title=data_labels[2])\n\n# Add colorbar\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nplt.colorbar(sm, ax=ax, label=data_labels[3])\n\n# Adjust parameters\nax.grid(True)\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nplt.title(\"Profitability of Different Retail Shopping Categories in E-commerce\")\n\nfig.tight_layout()\nfig.savefig(\"./bubble/png/30_2023122270050.png\")\nplt.cla()"
        },
        "QA": {
            "input": "In which category is the average spend per customer the highest?",
            "output": "Electronics"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_16",
        "img": "./bubble/png/bubble_16.png",
        "topic": "Tourism and Hospitality",
        "title": " Tourism Statistics for Popular Destinations in the World",
        "csv": "Destination \\t Visitors (Millions) \\t Satisfaction Score (1-10) \\t Average Spending ($) \\t Hotel Capacity (Millions) \\n Caribbean \\t 12 \\t 8 \\t 1000 \\t 3.5 \\n USA \\t 90 \\t 7 \\t 2000 \\t 20 \\n Europe \\t 180 \\t 9 \\t 3000 \\t 45 \\n Asia \\t 170 \\t 7 \\t 2500 \\t 30 \\n Africa \\t 50 \\t 6 \\t 1500 \\t 10 \\n Australia \\t 25 \\t 9 \\t 3000 \\t 12 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart illustrates tourism statistics for six destinations worldwide. For each destination, visitors in millions, satisfaction scores, average spending in dollars, and hotel capacities in millions are depicted. The Caribbean shows 12 million visitors, a satisfaction score of 8, and an average spending of $1000 with a hotel capacity of 3.5 million. The USA has 90 million visitors, a satisfaction score of 7, $2000 average spending, and a hotel capacity of 20 million. Europe leads with 180 million visitors, the highest satisfaction score of 9, and the most considerable average spending of $3000, plus a hotel capacity of 45 million. Asia, Africa, and Australia also feature on the chart with their respective tourism metrics."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\nfrom matplotlib.colors import Normalize\n\n# Transform data into three variables: data_labels, data, line_labels.\ndata_labels = np.array([\"Visitors (Millions)\", \"Satisfaction Score (1-10)\", \"Average Spending ($)\", \"Hotel Capacity (Millions)\"])\ndata = np.array([[12, 8, 1000, 3.5],\n                 [90, 7, 2000, 20],\n                 [180, 9, 3000, 45],\n                 [170, 7, 2500, 30],\n                 [50, 6, 1500, 10],\n                 [25, 9, 3000, 12]])\nline_labels = np.array([\"Caribbean\", \"USA\", \"Europe\", \"Asia\", \"Africa\", \"Australia\"])\n\n# Create figure before plotting.\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot(1, 1, 1)\n\n# Plot the data with the type of bubble chart\n# Color should be normalized to the range of cmap values\n# Bubble size should range from 60 to 500\nfor i in range(len(data)):\n    cmap = cm.ScalarMappable(norm=Normalize(vmin=data[:, 3].min(), vmax=data[:, 3].max()), cmap=\"Blues\")\n    size = 600 + 5000 * (data[i, 2] - data[:, 2].min()) / (data[:, 2].max() - data[:, 2].min())\n    ax.scatter(data[i, 0], data[i, 1], s=size, c=cmap.to_rgba(data[i, 3]), label=None)\n    ax.scatter([], [], s=20, c=cmap.to_rgba(data[i, 3]), label=line_labels[i] + ' ' + str(data[i, 2]))\n\n# Plot the legend with the title.\nax.legend(title=data_labels[2])\n\n# Add a color bar for the bubble colors\ncbar = fig.colorbar(cmap, ax=ax)\ncbar.set_label(data_labels[3], rotation=270)\n\n# Adjusting techniques such as background grids and other parameter settings\nax.set_title(\"Tourism Statistics for Popular Destinations in the World\")\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.grid(True)\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# The image must be saved as ./bubble/png/20_2023122261326.png.\nplt.savefig('./bubble/png/20_2023122261326.png')\n\n# Clear the current image state at the end of the code.\nplt.clf()"
        },
        "QA": {
            "input": "How many more millions of visitors did Europe have compared to Asia?",
            "output": "10 million"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_18",
        "img": "./bubble/png/bubble_18.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare Outcomes and Costs for Common Diseases",
        "csv": "Disease \\t Mortality Rate (Per Million) \\t Treatment Success Rate (%) \\t Recovery Rate (%) \\t Cost of Treatment (Thousand $) \\n Cancer \\t 600 \\t 70 \\t 40 \\t 1000 \\n Heart Disease \\t 400 \\t 80 \\t 50 \\t 2000 \\n Diabetes \\t 300 \\t 90 \\t 60 \\t 3000 \\n Liver Disease \\t 200 \\t 60 \\t 30 \\t 4000 \\n Stroke \\t 100 \\t 75 \\t 20 \\t 5000 \\n Flu \\t 50 \\t 85 \\t 25 \\t 1000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart illustrates healthcare outcomes and costs for six common diseases. It compares the mortality rate per million, treatment success rate as a percentage, recovery rate as a percentage, and cost of treatment in thousand dollars. Cancer shows a mortality rate of 600, a treatment success rate of 70%, a recovery rate of 40%, and a treatment cost of $1,000K. Heart Disease has a lower mortality rate of 400 but higher treatment and recovery rates, and double the treatment cost of Cancer. Diabetes, Liver Disease, Stroke, and Flu have varying statistics with Diabetes having the highest treatment success and recovery rates and Stroke having the lowest recovery rate."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import get_cmap\n\ndata_labels = ['Mortality Rate (Per Million)', 'Treatment Success Rate (%)', 'Recovery Rate (%)', 'Cost of Treatment (Thousand $)']\ndata = np.array([[600, 70, 40, 1000],\n                 [400, 80, 50, 2000],\n                 [300, 90, 60, 3000],\n                 [200, 60, 30, 4000],\n                 [100, 75, 20, 5000],\n                 [50, 85, 25, 1000]])\nline_labels = ['Cancer', 'Heart Disease', 'Diabetes', 'Liver Disease', 'Stroke', 'Flu']\n\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot()\n\ncmap = get_cmap('jet')\nnorm = Normalize(vmin=data[:, 3].min(), vmax=data[:, 3].max())\n\nfor i in range(data.shape[0]):\n    ax.scatter(data[i, 0], data[i, 1], s=(data[i, 2]) * 100, c=cmap(norm(data[i, 3])), label=None)\n    ax.scatter([], [], c=cmap(norm(data[i, 3])), label=line_labels[i] + f' {data[i, 2]}')\n\nax.legend(title=data_labels[3])\n\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfig.colorbar(sm, label=data_labels[3])\nax.set_title('Healthcare Outcomes and Costs for Common Diseases')\n\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\nplt.tight_layout()\nplt.savefig('./bubble/png/50_2023122270050.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much does the treatment of Liver Disease cost compared to Stroke?",
            "output": "$1000 less"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_19",
        "img": "./bubble/png/bubble_19.png",
        "topic": "Science and Engineering",
        "title": " Impact of Science and Engineering Projects on the World",
        "csv": "Project \\t Cost (Billion $) \\t Research Time (Years) \\t Number of Scientists \\t Outcome (Score) \\n Fusion Reactor \\t 30 \\t 10 \\t 400 \\t 7 \\n Supercomputer \\t 20 \\t 7 \\t 300 \\t 9 \\n Space Station \\t 50 \\t 15 \\t 1000 \\t 8 \\n Vaccine Development \\t 15 \\t 5 \\t 200 \\t 10 \\n Autonomous Vehicle \\t 10 \\t 4 \\t 100 \\t 8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bubble chart illustrates various science and engineering projects, detailing their cost, research duration, team size, and outcomes. The Fusion Reactor project, with a cost of 30 billion dollars, a research period of 10 years, and 400 scientists, has an outcome score of 7. The Supercomputer project costs 20 billion dollars, takes 7 years of research with 300 scientists, and scores 9 in outcomes. A Space Station project has the highest cost at 50 billion dollars, 15 years of research, 1000 scientists, and scores an 8. Vaccine Development costs 15 billion dollars, has a 5-year research timeline with 200 scientists, and achieves the highest score of 10. Lastly, the Autonomous Vehicle project costs 10 billion dollars, takes 4 years of research with 100 scientists, and also scores an 8."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n\ndata_labels = ['Cost (Billion $)', 'Research Time (Years)', 'Number of Scientists', 'Outcome (Score)']\ndata = np.array([['Project', 'Cost (Billion $)', 'Research Time (Years)', 'Number of Scientists', 'Outcome (Score)'],\n                  ['Fusion Reactor', 30, 10, 400, 7],\n                  ['Supercomputer', 20, 7, 300, 9],\n                  ['Space Station', 50, 15, 1000, 8],\n                  ['Vaccine Development', 15, 5, 200, 10],\n                  ['Autonomous Vehicle', 10, 4, 100, 8]])\n\nline_labels = []\nfor i in range(1, data.shape[0]):\n    line_labels.append(data[i, 0] + ' ' + str(data[i, 3]))\n\nfig, ax = plt.subplots()\n\ncmap = cm.get_cmap('Spectral')\nnorm = plt.Normalize(0, data[1:, 3].astype(float).max())\nnorm_c = plt.Normalize(0, data[1:, -1].astype(float).max())\n\nfor i in range(1, data.shape[0]):\n    ax.scatter(data[i, 1].astype(int), data[i, 2].astype(int), s=norm(data[i, 3].astype(float)) * 500 + 60, c=cmap(norm_c(data[i, 4].astype(float))), label=None)\n    ax.scatter([], [], s=20, c=cmap(norm_c(data[i, 4].astype(float))), label=line_labels[i - 1])\n\nax.legend(title=data_labels[3])\n\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm_c)\nsm.set_array([])\nfig.colorbar(sm, ax=ax, label=data_labels[2])\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.grid(linestyle='--')\nax.set_title('Impact of Science and Engineering Projects on the World')\n\nplt.tight_layout()\nplt.savefig('./bubble/png/1_2023122270050.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which project has the least number of scientists working on it?",
            "output": "Autonomous Vehicle"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_40",
        "img": "./bubble/png/bubble_40.png",
        "topic": "Real Estate and Housing Market",
        "title": " Real Estate Prices and Market Conditions by Area",
        "csv": "Area \\t Average House Price ($) \\t Average Rental Price ($) \\t Average Days on Market \\t Vacancy Rate (%) \\n Downtown \\t 400000 \\t 3000 \\t 30 \\t 2 \\n Suburbs \\t 350000 \\t 2500 \\t 45 \\t 4 \\n Countryside \\t 250000 \\t 2000 \\t 60 \\t 6 \\n Coastal \\t 450000 \\t 3500 \\t 90 \\t 2 \\n Hilly \\t 300000 \\t 3000 \\t 120 \\t 8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart presents real estate prices and market conditions across five different areas. Downtown has an average house price of $400,000, an average rental price of $3,000, properties stay on the market for an average of 30 days, with a vacancy rate of 2%. In the suburbs, the average house price is $350,000, rental is $2,500, and days on market are 45 with a 4% vacancy rate. Countryside features $250,000 average house prices, $2,000 rentals, a 60-day market duration, and a 6% vacancy rate. The coastal area has a high house price of $450,000, $3,500 rentals, 90 days on market, and a 2% vacancy rate. The hilly region shows $300,000 house prices, $3,000 rental prices, the most extended market period at 120 days, and the highest vacancy rate at 8%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom matplotlib.colors import Normalize\nimport numpy as np\n\ndata_labels = ['Average House Price ($)', 'Average Rental Price ($)', 'Average Days on Market', 'Vacancy Rate (%)']\ndata = np.array([[400000, 3000, 30, 2], [350000, 2500, 45, 4], [250000, 2000, 60, 6], [450000, 3500, 90, 2], [300000, 3000, 120, 8]])\nline_labels = ['Downtown', 'Suburbs', 'Countryside', 'Coastal', 'Hilly']\n\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot(111)\nfor i in range(data.shape[0]):\n    size = (data[i, 2] - data[:, 2].min()) / (data[:, 2].max() - data[:, 2].min()) * 5000 + 600\n    norm_c = Normalize(vmin=data[:, 3].min(), vmax=data[:, 3].max())\n    c = cm.ScalarMappable(norm=norm_c, cmap=cm.jet).to_rgba(data[i, 3])\n    ax.scatter(data[i, 0], data[i, 1], s=size, c=c, label=None)\n    ax.scatter([], [], s=20, c=c, label=line_labels[i] + ' ' + str(data[i, 2]))\nax.legend(title=data_labels[2])\ncb = plt.colorbar(cm.ScalarMappable(norm=norm_c, cmap=cm.jet), ax=ax, orientation='horizontal', fraction=0.05)\ncb.set_label(data_labels[3])\nax.grid(True)\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.set_title('Real Estate Prices and Market Conditions by Area')\nplt.tight_layout()\nplt.savefig('./bubble/png/27_2023122261326.png')\nplt.cla()"
        },
        "QA": {
            "input": "What is the difference in average house prices between Downtown and Suburbs?",
            "output": "$50,000"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_2",
        "img": "./bubble/png/bubble_2.png",
        "topic": "Tourism and Hospitality",
        "title": " Global Tourism and Hospitality Performance in 2021",
        "csv": "Destination \\t Tourism Revenue (Billion $) \\t Travelers (Millions) \\t Satisfaction (Score) \\t Employment (Millions) \\n Europe \\t 850 \\t 340 \\t 7.5 \\t 7.2 \\n Asia \\t 1200 \\t 590 \\t 7.2 \\t 9.3 \\n North America \\t 700 \\t 190 \\t 8.0 \\t 4.1 \\n South America \\t 400 \\t 130 \\t 6.5 \\t 2.8 \\n Africa \\t 250 \\t 90 \\t 6.2 \\t 1.9 \\n Oceania \\t 150 \\t 50 \\t 7.0 \\t 0.9 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bubble chart illustrates the global tourism and hospitality performance in various regions for 2021. Europe generated $850 billion in tourism revenue, with 340 million travelers, a satisfaction score of 7.5, and employment figures at 7.2 million. Asia led in tourism revenue with $1200 billion, 590 million travelers, satisfaction at 7.2, and 9.3 million employed. North America saw $700 billion revenue, 190 million travelers, the highest satisfaction score of 8.0, and 4.1 million employment. South America and Africa had revenues of $400 billion and $250 billion, with satisfaction scores of 6.5 and 6.2, respectively. Oceania had the least, with $150 billion revenue, 50 million travelers, a satisfaction score of 7.0, and 0.9 million in employment."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np\n\ndata_labels = ['Tourism Revenue (Billion $)','Travelers (Millions)','Satisfaction (Score)','Employment (Millions)']\ndata = [['Europe',850,340,7.5,7.2],['Asia',1200,590,7.2,9.3],['North America',700,190,8.0,4.1],['South America',400,130,6.5,2.8],['Africa',250,90,6.2,1.9],['Oceania',150,50,7.0,0.9]]\nline_labels = [data[i][0]+' '+str(data[i][3]) for i in range(len(data))]\n\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot(1, 1, 1)\n\nsc = None\nnorm = cm.colors.Normalize(vmin=np.min(np.array([data[i][4] for i in range(len(data))])), vmax=np.array([data[i][4] for i in range(len(data))]).max())\ns_m = cm.ScalarMappable(cmap=cm.get_cmap('plasma'), norm=norm)\ns_m.set_array([])\nfor i in range(len(data)):\n    sc = ax.scatter(data[i][1], data[i][2], s= (data[i][3] - 6.2) / (8.0 - 6.2) * (5000-600) +600, c =s_m.to_rgba(data[i][4]), label=None)\n    ax.scatter([], [], c = s_m.to_rgba(data[i][4]), label=line_labels[i], s=20)\n\nax.legend(title=data_labels[2])\n\ncbar = fig.colorbar(s_m, ax=ax)\ncbar.set_label(data_labels[3], rotation=90)\n\nax.set_xticks(np.arange(200,1301,200))\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.grid(linestyle='--')\n\nplt.title('Global Tourism and Hospitality Performance in 2021')\n\nplt.tight_layout()\nplt.savefig('./bubble/png/6_2023122270050.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in satisfaction scores between Asia and North America?",
            "output": "0.8"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_24",
        "img": "./bubble/png/bubble_24.png",
        "topic": "Sports and Entertainment",
        "title": " Popularity and Financial Status of Sports and Entertainment Activities",
        "csv": "Sport/Activity \\t Popularity (Score) \\t Revenue (Billion $) \\t Participants (Millions) \\t Safety (Score) \\n Basketball \\t 90 \\t 70 \\t 2.5 \\t 80 \\n Football \\t 85 \\t 60 \\t 2 \\t 75 \\n Cricket \\t 80 \\t 50 \\t 1.5 \\t 70 \\n Tennis \\t 75 \\t 40 \\t 1 \\t 65 \\n Swimming \\t 70 \\t 30 \\t 0.5 \\t 60 \\n Skiing \\t 65 \\t 25 \\t 0.2 \\t 50 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart provides an overview of several sports/activities, illustrating their popularity, revenue, number of participants, and safety ratings. Basketball scores highly with a popularity rating of 90, revenue of $70 billion, 2.5 million participants, and a safety score of 80. Football follows with ratings of 85 in popularity, $60 billion in revenue, 2 million participants, and a safety score of 75. Cricket, Tennis, Swimming, and Skiing are shown with decreasing popularity scores, revenues, participant numbers, and safety scores respectively, indicating a hierarchy in terms of their overall standing in these aspects."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.cm import ScalarMappable\nfrom matplotlib.colors import Normalize\n\n# Data for the popularity and financial status of sports and entertainment activities\npopularity_scores = np.array([90, 85, 80, 75, 70, 65])  # Popularity (Score)\nrevenue = np.array([70, 60, 50, 40, 30, 25])  # Revenue (Billion $)\nparticipants = np.array([2.5, 2, 1.5, 1, 0.5, 0.2])  # Participants (Millions)\nsafety_scores = np.array([80, 75, 70, 65, 60, 50])  # Safety (Score)\n\n# Line labels\nline_labels = [f\"{popularity} {participants}\" for popularity, participants in zip(['Basketball', 'Football', 'Cricket', 'Tennis', 'Swimming', 'Skiing'], participants)]\n\n# Create figure\nfig, ax = plt.subplots(figsize=(15, 10))\n\n# Color mapping and normalization\ncmap = plt.cm.get_cmap('RdYlGn')\nnorm = Normalize(vmin=min(safety_scores), vmax=max(safety_scores))\nsm = ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\n\n# Plotting the data\nfor line_label, popularity, rev, participant, safety in zip(line_labels, popularity_scores, revenue, participants, safety_scores):\n    bubble_size = participant * 400 + 60\n    color = cmap(norm(safety))\n    ax.scatter(popularity, rev, s=bubble_size, color=color, alpha=0.6, edgecolor='black', label=None)\n    ax.scatter([], [], s=20, color=color, label=line_label)\n\n# Legend and color bar\nax.legend(title='Participants (Millions)', bbox_to_anchor=(0.9, 0.5))\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical')\ncbar.set_label('Safety (Score)')\n\n# Labels and title\nax.set_xlabel('Popularity (Score)')\nax.set_ylabel('Revenue (Billion $)')\nax.set_title('Popularity and Financial Status of Sports and Entertainment Activities')\n\n# Grid and layout adjustment\nax.grid(True)\nplt.tight_layout()\nplt.savefig('./bubble/png/7_2023122261326.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "How much revenue does Basketball generate in billions of dollars?",
            "output": "70"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_15",
        "img": "./bubble/png/bubble_15.png",
        "topic": "Environment and Sustainability",
        "title": " Environmental Impact of Different Countries - Sustainability 2023",
        "csv": "Carbon Footprint \\t Tonnes Per Year \\t Renewable Resources (%) \\t Pollution (Score) \\t Greenhouse Gases (MT) \\n China \\t 100000 \\t 20 \\t 300 \\t 20000 \\n US \\t 90000 \\t 25 \\t 400 \\t 17000 \\n India \\t 80000 \\t 30 \\t 450 \\t 15000 \\n Germany \\t 70000 \\t 35 \\t 500 \\t 13000 \\n UK \\t 60000 \\t 40 \\t 550 \\t 11000 \\n Japan \\t 50000 \\t 45 \\t 600 \\t 9000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This bubble chart illustrates various environmental metrics for six countries as of 2023: their carbon footprint in tonnes per year, percentage use of renewable resources, pollution score, and greenhouse gases emissions in metric tonnes (MT). China shows emission metrics, a carbon footprint of 100,000 tonnes, 20% renewable resources, a pollution score of 300, and 20,000 MT of greenhouse gases. The US, India, Germany, the UK, and Japan follow with their respective figures for the same categories, consistently reducing in footprint and emissions, but with higher use of renewables and greater pollution scores with each consecutive country."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\n\n# transform data\ndata_labels = ['Tonnes Per Year', 'Renewable Resources (%)', 'Pollution (Score)', 'Greenhouse Gases (MT)']\nline_labels = ['China', 'US', 'India', 'Germany', 'UK', 'Japan']\ndata = np.array([[100000, 20, 300, 20000], [90000, 25, 400, 17000], [80000, 30, 450, 15000], [70000, 35, 500, 13000], [60000, 40, 550, 11000], [50000, 45, 600, 9000]])\n\n# plotting\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot()\n\n# normalize the bubble size and color\nmin_bubble_size = 600\nmax_bubble_size = 2000\nnormalize_bubble_size = Normalize(vmin=min(data[:, 2]), vmax=max(data[:, 2]))\nbubble_size = [min_bubble_size + (x - min(data[:, 2])) * (max_bubble_size - min_bubble_size) / (max(data[:, 2]) - min(data[:, 2])) for x in data[:, 2]]\n\nmin_color_value = min(data[:, 3])\nmax_color_value = max(data[:, 3])\nnormalize_color_value = Normalize(vmin=min_color_value, vmax=max_color_value)\ncmap = plt.get_cmap('viridis')\n\n# plot the data of each line\nfor i in range(len(data)):\n    ax.scatter(data[i, 0], data[i, 1], s=bubble_size[i], c=cmap(normalize_color_value(data[i, 3])), label=None)\n    ax.scatter([], [], s=20, c=cmap(normalize_color_value(data[i, 3])), label=line_labels[i]+ ' ' + str(data[i, 2]))\n\n# plot the legend\nax.legend(title=data_labels[2], loc='lower left')\n\n\n# show the labels of two axes\nplt.xlabel(data_labels[0])\nplt.ylabel(data_labels[1])\n\n# plot the title\nplt.title('Environmental Impact of Different Countries - Sustainability 2023')\n\n# plot the color bar\nsm = ScalarMappable(cmap=cmap, norm=normalize_color_value)\nsm.set_array([])\ncax = fig.add_axes([0.88, 0.35, 0.03, 0.5])\ncbar = fig.colorbar(sm, cax=cax)\ncbar.ax.set_title(data_labels[3])\n\n# adjust the figure view\nplt.tight_layout()\n\n# save the figure\nplt.savefig('./bubble/png/3.png')\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What percentage of renewable resources does India use?",
            "output": "30%"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_32",
        "img": "./bubble/png/bubble_32.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare Trends - Health and Wellbeing 2023",
        "csv": "Health Issue \\t Incidence Rate (Per 1000) \\t Treatment Cost (USD) \\t Mortality Rate (%) \\t Recovery Rate (%) \\n Cardiovascular Disease \\t 30 \\t 5000 \\t 20 \\t 50 \\n Diabetes \\t 25 \\t 2500 \\t 15 \\t 60 \\n Cancer \\t 20 \\t 10000 \\t 10 \\t 70 \\n Respiratory Disease \\t 15 \\t 1000 \\t 5 \\t 80 \\n Mental Health \\t 10 \\t 500 \\t 2 \\t 90 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart titled \"Healthcare Trends - Health and Wellbeing 2023\" visually represents data on five health issues. It shows Cardiovascular Disease with an incidence rate of 30 per 1000, treatment cost of $5000, mortality rate of 20%, and recovery rate of 50%. Diabetes features an incidence rate of 25, treatment cost of $2500, mortality rate of 15%, and recovery rate of 60%. Cancer has a 20 incidence rate, $10,000 treatment cost, 10% mortality, and 70% recovery. Respiratory Disease shows a 15 incidence rate, $1000 treatment cost, 5% mortality, and 80% recovery. Lastly, Mental Health has an incidence of 10, $500 treatment cost, 2% mortality, and a 90% recovery rate."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.cm as cm\nfrom matplotlib.colors import Normalize\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = ['Incidence Rate (Per 1000)','Treatment Cost (USD)','Mortality Rate (%)','Recovery Rate (%)']\ndata = np.array([[30,5000,20,50], [25,2500,15,60], [20,10000,10,70], [15,1000,5,80], [10,500,2,90]])\nline_labels = ['Cardiovascular Disease','Diabetes','Cancer','Respiratory Disease','Mental Health']\n\n# Create figure before plotting\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(1, 1, 1)\n\n# Plot the data with the type of bubble chart\nfor i in range(data.shape[0]):\n    # Normalize the color to the range of cmap values\n    normalized_cmap = Normalize(vmin=min(data[:, 3]), vmax=max(data[:, 3]))\n    c = cm.ScalarMappable(norm=normalized_cmap, cmap=cm.rainbow)\n    # Normalize the bubble size to the range of 60-500\n    normalized_size = Normalize(vmin=min(data[:, 2]), vmax=max(data[:, 2]))\n    s = 5000 * (data[i, 2] - normalized_size.vmin) / (normalized_size.vmax - normalized_size.vmin) + 600\n    ax.scatter(data[i, 0], data[i, 1], s=s, c=c.to_rgba(data[i, 3]), label=None)\n    ax.scatter([], [], s=20, c=c.to_rgba(data[i, 3]), label=line_labels[i] + ' ' + str(data[i, 2]))\n\n# Plot the legend with the title\nax.legend(title=data_labels[2])\n\n# Add a color bar for the bubble colors\ncbar = fig.colorbar(c, ax=ax)\ncbar.ax.set_title(data_labels[3])\n\n# Drawing techniques such as background grids and other parameter settings can be adjusted\nax.grid()\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\n# Set the title of the figure\nax.set_title('Healthcare Trends - Health and Wellbeing 2023')\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n# Save the image\nplt.savefig('./bubble/png/43_2023122261326.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "Which health issue has the highest mortality rate according to the data?",
            "output": "Cardiovascular Disease"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_28",
        "img": "./bubble/png/bubble_28.png",
        "topic": "Food and Beverage Industry",
        "title": " Profit and Sustainability of Different Types of Restaurants in the Food and Beverage Industry",
        "csv": "Restaurant \\t Sales (Millions $) \\t Cost (Millions $) \\t Profit Margin (%) \\t Sustainability (Score) \\n Fast Food \\t 1200 \\t 300 \\t 25 \\t 4 \\n Casual Dining \\t 800 \\t 220 \\t 20 \\t 8 \\n Fine Dining \\t 400 \\t 150 \\t 30 \\t 7 \\n Home Delivery \\t 600 \\t 100 \\t 18 \\t 10 \\n Street Food \\t 500 \\t 90 \\t 16 \\t 6 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart illustrates data related to profit and sustainability of various restaurant categories in the food and beverage industry. Fast Food restaurants reported sales of 1200 million dollars, costs of 300 million, a profit margin of 25%, and a sustainability score of 4. Casual Dining showed 800 million in sales, 220 million in costs, a 20% profit margin, and a sustainability score of 8. Fine Dining had 400 million in sales, 150 million in costs, 30% profit margin, and a score of 7. Home Delivery made 600 million in sales, 100 million in costs, had an 18% profit margin, and the highest sustainability score of 10. Street Food reported 500 million in sales, 90 million costs, a 16% profit margin, and a sustainability score of 6."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\nfrom matplotlib.cm import get_cmap\nfrom matplotlib.colors import Normalize\n\n# Transform the given data into three variables\ndata_labels = ['Sales (Millions $)','Cost (Millions $)','Profit Margin (%)','Sustainability (Score)']\ndata = np.array([[1200, 300, 25, 4], \n                 [800, 220, 20, 8], \n                 [400, 150, 30, 7], \n                 [600, 100, 18, 10], \n                 [500, 90, 16, 6]])\nline_labels = ['Fast Food', 'Casual Dining', 'Fine Dining', 'Home Delivery', 'Street Food']\n\n# Plot the data with the type of bubble chart\nplt.figure(figsize=(10, 8))\nax = plt.subplot()\n\n# For each row of data, the third value is mapped to the bubble size\n# and the fourth value is mapped to the color value.\ncmap = get_cmap(\"Greens\")\nnorm = Normalize(vmin=min(data[:, 3]) - 1, vmax=max(data[:, 3]))\n\nfor i in range(len(data)):\n    sc = ax.scatter(data[i, 0], data[i, 1], s=data[i, 2]*20 + 60, c=cmap(norm(data[i, 3])), cmap='Greens', label=None)\n    ax.scatter([], [], c=cmap(norm(data[i, 3])), s=20, label=line_labels[i] + ' ' + str(data[i, 2]))\n\n# Plot the legend with the title\nax.legend(title=data_labels[2])\n\n# Add a color bar for the bubble colors\nsm = plt.cm.ScalarMappable(cmap='Greens', norm=plt.Normalize(vmin=np.min(data[:, 3]), vmax=np.max(data[:, 3])))\nsm._A = []\ncbar = plt.colorbar(sm, ax=ax, fraction=0.046, pad=0.04)\ncbar.set_label(data_labels[3])\n\n# Drawing techniques such as background grids and other parameter settings can be adjusted\nax.grid(linestyle='--', linewidth=1, alpha=0.5)\nax.tick_params(direction='in', length=10, width=2, grid_alpha=0.5)\n\n# Show the labels of two axes\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\n# The title of the figure\nax.set_title('Profit and Sustainability of Different Types of Restaurants in the Food and Beverage Industry')\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# The image must be saved as ./bubble/png/21_2023122270050.png\nplt.savefig('./bubble/png/21_2023122270050.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "Which restaurant type has the highest sustainability score?",
            "output": "Home Delivery"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_46",
        "img": "./bubble/png/bubble_46.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing and Production - Performance and Cost Comparison",
        "csv": "Company \\t Productivity (Units/Hour) \\t Quality (Score) \\t Employee Numbers (Thousands) \\t Cost of Production (Million $) \\n ABC Inc. \\t 300 \\t 90 \\t 20 \\t 200 \\n XYZ Corp. \\t 400 \\t 80 \\t 30 \\t 400 \\n UVW Ltd. \\t 350 \\t 85 \\t 25 \\t 350 \\n RST Co. \\t 250 \\t 70 \\t 35 \\t 400 \\n DEF Group \\t 200 \\t 75 \\t 15 \\t 250 \\n GHI Pty. \\t 150 \\t 65 \\t 10 \\t 150 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart illustrates a comparison of manufacturing and production performance metrics along with associated costs across six different companies. ABC Inc. produces 300 units per hour with a quality score of 90 and has 20,000 employees at a production cost of 200 million dollars. XYZ Corp. has a productivity of 400 units, a quality score of 80, 30,000 employees, and a cost of 400 million dollars. UVW Ltd. produces 350 units with a quality score of 85, has 25,000 employees, and a production cost of 350 million dollars. RST Co. produces 250 units per hour, with a quality score of 70, employing 35,000, and incurs a cost of 400 million dollars. DEF Group has a productivity of 200 units, a quality score of 75, with 15,000 employees, and a production cost of 250 million dollars. GHI Pty. has the lowest productivity at 150 units, a quality score of 65, 10,000 employees, and a production cost of 150 million dollars."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.cm import ScalarMappable\nfrom matplotlib.colors import Normalize\n\n# Transform the data into three variables\ndata=np.array([[300,90,20,200],[400,80,30,400],[350,85,25,350],[250,70,35,400],[200,75,15,250],[150,65,10,150]])\ndata_labels=['Productivity (Units/Hour)','Quality (Score)','Employee Numbers (Thousands)','Cost of Production (Million $)']\nline_labels=['ABC Inc.','XYZ Corp.','UVW Ltd.','RST Co.','DEF Group','GHI Pty.']\n\n# Plotting\nfig, ax = plt.subplots(figsize=(12, 8))\nnorm = Normalize(vmin=data[:,3].min(), vmax=data[:,3].max()) # Normalize color\nsm = ScalarMappable(cmap=\"Reds\", norm=norm) # Set cmap\nsm.set_array([])\n\n# Scatter the data\nfor i in range(data.shape[0]):\n    ax.scatter(data[i,0], data[i,1], s=600 + 5000*((data[i,3]-data[:,3].min())/(data[:,3].max()-data[:,3].min())), c=sm.to_rgba(data[i,3]), label=None) # Bubble size and color\n    ax.scatter([], [], s=20, c=sm.to_rgba(data[i,3]), label=line_labels[i] + f' {data[i, 2]}') # Add empty points\n\n# Plot the legend\nax.legend(title=data_labels[2])\n\n# Add color bar\ncbar=fig.colorbar(sm, orientation='vertical') # Add color bar\ncbar.set_label(data_labels[3]) # Set color bar title\n\n# Adjust the figure\nplt.title('Manufacturing and Production - Performance and Cost Compariso') # Set title\nax.set_xlabel(data_labels[0]) # Set x-axis label\nax.set_ylabel(data_labels[1]) # Set y-axis label\nplt.tight_layout() # Automatically resize the image\n\n# Save the figure\nplt.savefig('./bubble/png/47_2023122261326.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the total number of employees (in thousands) for XYZ Corp. and RST Co. combined?",
            "output": "65"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_35",
        "img": "./bubble/png/bubble_35.png",
        "topic": "Environment and Sustainability",
        "title": " Global Emission and Environmental Impact by Source",
        "csv": "Emission \\t Carbon Dioxide (Million Tonnes) \\t Methane (Million Tonnes) \\t Nitrous Oxide (Million Tonnes) \\t Environmental Impact (Score) \\n Transportation \\t 1000 \\t 25 \\t 60 \\t 400 \\n Energy Production \\t 1500 \\t 50 \\t 80 \\t 600 \\n Agriculture \\t 700 \\t 30 \\t 40 \\t 300 \\n Manufacturing \\t 500 \\t 20 \\t 30 \\t 200 \\n Households \\t 200 \\t 10 \\t 20 \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart visualizes global emissions and environmental impact by source. It features data on carbon dioxide, methane, and nitrous oxide emissions in million tonnes, along with an environmental impact score. Transportation emits 1000 million tonnes of CO2, 25 of methane, and 60 of N2O, with a score of 400. Energy production has 1500 million tonnes of CO2, 50 of methane, and 80 of N2O, and a score of 600. Agriculture contributes 700 million tonnes of CO2, 30 of methane, and 40 of N2O, with a score of 300. Manufacturing and households emit lower levels of these gases and have scores of 200 and 100, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np\n\n# Transform data into three variables\ndata_labels = ['Carbon Dioxide (Million Tonnes)', 'Methane (Million Tonnes)', 'Nitrous Oxide (Million Tonnes)', 'Environmental Impact (Score)']\nline_labels = ['Transportation', 'Energy Production', 'Agriculture', 'Manufacturing', 'Households']\ndata = np.array([[1000, 25, 60, 400],\n                 [1500, 50, 80, 600],\n                 [700, 30, 40, 300],\n                 [500, 20, 30, 200],\n                 [200, 10, 20, 100]])\n\n# Create figure and plot data\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(1, 1, 1)\n\n# Normalize data\ncmap = cm.get_cmap('RdYlBu_r')\nnorm = plt.Normalize(vmin=min(data[:, 3]), vmax=max(data[:, 3]))\nsizes = np.linspace(600, 5000, data.shape[0])\n\n# Scatter plot of data\nfor i in range(data.shape[0]):\n    ax.scatter(data[i, 0], data[i, 1], s=sizes[i], c=cmap(norm(data[i, 3])), label=None)\n    ax.scatter([], [], c=cmap(norm(data[i, 3])), label=line_labels[i] + ' (' + str(data[i, 2]) + ')', s=20)\n\n# Legend\nax.legend(title=data_labels[2])\n\n# Color bar\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfig.colorbar(sm, ax=ax, ticks=np.linspace(min(data[:, 3]), max(data[:, 3]), 5)).set_label(data_labels[3], rotation=90)\n\n# Set parameters\nax.grid(True, linestyle='-.')\nax.set_xlabel('Emission')\nax.set_ylabel('Methane (Million Tonnes)')\n# Save image\nfig.suptitle('Global Emission and Environmental Impact by Source')\nfig.tight_layout()\n\nfig.savefig('./bubble/png/6.png')\n\n# Clear figure\nplt.clf()"
        },
        "QA": {
            "input": "Which sector has the highest Environmental Impact score?",
            "output": "Energy Production"
        }
    },
    {
        "chart_type": "bubble",
        "imgname": "bubble_25",
        "img": "./bubble/png/bubble_25.png",
        "topic": "Law and Legal Affairs",
        "title": " Impact of Laws and Sentencing on Crime and Its Victims",
        "csv": "Crime \\t Sentence (Years) \\t Recidivism Rate (%) \\t Victim Impact (Score) \\t Law Enforcement Impact (Score) \\n Robbery \\t 8 \\t 13 \\t 85 \\t 100 \\n Burglary \\t 4 \\t 8 \\t 90 \\t 90 \\n Assault \\t 3 \\t 15 \\t 95 \\t 80 \\n Drug Trafficking \\t 20 \\t 17 \\t 75 \\t 95 \\n Money Laundering \\t 10 \\t 5 \\t 80 \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The bubble chart visualizes data on different crimes, detailing average sentence lengths, recidivism rates, and impacts on victims and law enforcement. Robbery has a sentence of 8 years, a 13% recidivism rate, a victim impact score of 85, and law enforcement impact score of 100. Burglary gets a 4-year sentence, has an 8% recidivism rate, with scores of 90 for victim impact and law enforcement. Assault sees a 3-year sentence, 15% recidivism, and impacts scores at 95 (victims) and 80 (law enforcement). Drug trafficking carries a 20-year sentence, 17% recidivism, and 75 and 95 impact scores. Money Laundering has a 10-year sentence, 5% recidivism, and 80 and 100 for impact scores."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom matplotlib.colors import Normalize\nimport numpy as np \n\ndata_labels = ['Sentence (Years)', 'Recidivism Rate (%)', 'Victim Impact (Score)', 'Law Enforcement Impact (Score)']\nline_labels = ['Robbery', 'Burglary', 'Assault', 'Drug Trafficking', 'Money Laundering']\ndata = np.array([[8, 13, 85, 100], [4, 8, 90, 90], [3, 15, 95, 80], [20, 17, 75, 95], [10, 5, 80, 100]])\n\nfig = plt.figure(figsize=(20, 10))\nax = fig.add_subplot()\n\n# Normalize the color values\nnorm = Normalize(vmin=min(data[:, 3]) - 10, vmax=max(data[:, 3]))\n\n# Normalize the bubble size\nsize_norm = Normalize(vmin=min(data[:, 2]), vmax=max(data[:, 2]))\nsize_mapper = cm.ScalarMappable(norm=size_norm, cmap=cm.Blues)\n\n# Plot the data\nfor i in range(len(data)):\n    ax.scatter(data[i, 0], data[i, 1], s=size_norm(data[i, 2]) * 5000 + 600, c=cm.Blues(norm(data[i, 3])), label=None)\n    ax.scatter([], [], c=cm.Blues(norm(data[i, 3])), label=f'{line_labels[i]} {data[i, 2]}')\n\n# Plot the legend\nax.legend(title=data_labels[2])\n\n# Color bar\nsm = cm.ScalarMappable(cmap=cm.Blues, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical', pad=0.01)\ncbar.set_label(data_labels[3])\n\n# Other settings\nax.set_title('Impact of Laws and Sentencing on Crime and Its Victims')\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.grid(color='gray', linestyle='--', linewidth=0.5, alpha=.3)\n\n# Resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./bubble/png/40_2023122261326.png')\nplt.close()"
        },
        "QA": {
            "input": "What is the score for Victim Impact in the case of Assault?",
            "output": "95"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_30",
        "img": "./candlestick/png/candlestick_30.png",
        "topic": "Sports and Entertainment",
        "title": " Sports and Entertainment Industry Financing Trend Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-07-26 \\t 10 \\t 11.2 \\t 12.5 \\t 9.3 \\n 2019-07-27 \\t 10.5 \\t 11.8 \\t 13.2 \\t 9.9 \\n 2019-07-28 \\t 11 \\t 11.4 \\t 12.3 \\t 10.5 \\n 2019-07-29 \\t 12 \\t 13 \\t 14 \\t 11.2 \\n 2019-07-30 \\t 12.8 \\t 13.2 \\t 14.6 \\t 11.8 \\n 2019-07-31 \\t 12.5 \\t 13.8 \\t 14.7 \\t 11.6 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This candlestick chart provides a six-day overview of the financing trend within the sports and entertainment industry, detailing the daily opening, closing, high, and low prices in dollars. The chart begins with the data from July 26, 2019, showing an opening price of $10, a closing price of $11.2, a high of $12.5, and a low of $9.3. The last entry, from July 31, 2019, lists an opening price of $12.5, a closing price of $13.8, a peak at $14.7, and a low of $11.6. The prices fluctuate throughout the period, with evident variations between the daily high and low values."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\nimport pandas as pd\n\ndf = pd.DataFrame([['2019-07-26', 10, 11.2, 12.5, 9.3], ['2019-07-27', 10.5, 11.8, 13.2, 9.9], ['2019-07-28', 11, 11.4, 12.3, 10.5], ['2019-07-29', 12, 13, 14, 11.2], ['2019-07-30', 12.8, 13.2, 14.6, 11.8], ['2019-07-31', 12.5, 13.8, 14.7, 11.6]], columns=['Date', 'Opening Price ($)', 'Closing Price ($)', 'High Price ($)', 'Low Price ($)'])\n\nfig = go.Figure(data=[go.Candlestick(x=df['Date'], open=df['Opening Price ($)'], high=df['High Price ($)'], low=df['Low Price ($)'], close=df['Closing Price ($)'])])\nfig.update_layout(title='Sports and Entertainment Industry Financing Trend Overview', xaxis_title='Date', yaxis_title='Price ($)', width=1800, height=1000, yaxis_range=[9.3, 14.7], font=dict(family='Courier New, monospace', size=22))\nfig.write_image('./candlestick_plotly/png/2_202312270043.png')"
        },
        "QA": {
            "input": "On what date was the Closing Price exactly $11.4?",
            "output": "2019-07-28"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_43",
        "img": "./candlestick/png/candlestick_43.png",
        "topic": "Science and Engineering",
        "title": " Financial Trend of Science and Engineering Companies - Monthly Overview",
        "csv": "Month \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-10 \\t 50.5 \\t 52 \\t 54.2 \\t 49.8 \\n 2019-11 \\t 53 \\t 52.1 \\t 55.2 \\t 51.9 \\n 2019-12 \\t 53 \\t 52 \\t 53 \\t 50.7 \\n 2020-01 \\t 54 \\t 55.7 \\t 56.6 \\t 53.4 \\n 2020-02 \\t 55 \\t 56.9 \\t 57.2 \\t 54 \\n 2020-03 \\t 56 \\t 57 \\t 60 \\t 50 \\n 2020-04 \\t 58 \\t 60 \\t 62 \\t 55 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart illustrates the financial trend of science and engineering companies on a monthly basis. It shows the opening, closing, high, and low stock prices over a period from October 2019 to April 2020. In October 2019, the stock opened at $50.5, closed at $52, while the high was $54.2, and the low was $49.8. Subsequent months show similar data, with opening and closing prices slightly increasing over time. By April 2020, the stock opened at $58, closed at $60, reached a high of $62, and had a low of $55."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.DataFrame({'Month': ['2019-10', '2019-11', '2019-12', '2020-01', '2020-02', '2020-03', '2020-04'],\n                   'Open Price ($)': [50.5, 53, 53, 54, 55, 56, 58],\n                   'Close Price ($)': [52, 52.1, 52, 55.7, 56.9, 57, 60],\n                   'High Price ($)': [54.2, 55.2, 53, 56.6, 57.2, 60, 62],\n                   'Low Price ($)': [49.8, 51.9, 50.7, 53.4, 54, 50, 55]\n                   })\n\nfig = go.Figure(data=[go.Candlestick(\n    x=df['Month'],\n    open=df['Open Price ($)'],\n    high=df['High Price ($)'],\n    low=df['Low Price ($)'],\n    close=df['Close Price ($)']\n)])\n\nfig.update_layout(\n    title_text=\"Financial Trend of Science and Engineering Companies - Monthly Overview\",\n    xaxis_rangeslider_visible=False,\n    yaxis_range=[min(df['Low Price ($)'])-1, max(df['High Price ($)'])+1],\n    width=800,\n    height=500,\n    font_size=10,\n)\n\nfig.write_image('./candlestick_plotly/png/13_202312270043.png')"
        },
        "QA": {
            "input": "What was the Lowest Price of the stock in February 2020?",
            "output": "$54"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_22",
        "img": "./candlestick/png/candlestick_22.png",
        "topic": "Energy and Utilities",
        "title": " Energy and Utilities Market Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2021-01-15 \\t 30.2 \\t 34.7 \\t 37.8 \\t 27.1 \\n 2021-01-22 \\t 34.2 \\t 38.1 \\t 41.4 \\t 32.7 \\n 2021-01-29 \\t 40 \\t 42.3 \\t 45.5 \\t 36.2 \\n 2021-02-05 \\t 41.2 \\t 45.3 \\t 47.5 \\t 39.3 \\n 2021-02-12 \\t 45.5 \\t 43.7 \\t 48 \\t 39.5 \\n 2021-02-19 \\t 43.8 \\t 41 \\t 45.7 \\t 37.9 \\n 2021-02-26 \\t 40.5 \\t 42.8 \\t 45.4 \\t 37.9 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart represents the weekly energy and utilities market overview, capturing data points for opening, closing, high, and low prices in dollars. Over seven weeks starting from January 15, 2021, fluctuating prices are shown. For instance, the week of January 15 opens at $30.2, closes higher at $34.7, reaches a peak at $37.8, and dips to $27.1. The closing prices demonstrate an overall upward trend until February 12, where it reaches $43.7 before declining in the following week to $41. The high and low prices for each week indicate the volatility within the market during this period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport mplfinance as mpf\nimport matplotlib.pyplot as plt\n\ndata=[[pd.to_datetime('2021-01-15'),30.2,34.7,37.8,27.1], \n      [pd.to_datetime('2021-01-22'),34.2,38.1,41.4,32.7], \n      [pd.to_datetime('2021-02-05'),40,42.3,45.5,36.2],\n      [pd.to_datetime('2021-02-12'),45.5,43.7,48,39.5],\n      [pd.to_datetime('2021-02-19'),43.8,41,45.7,37.9],\n      [pd.to_datetime('2021-02-26'),40.5,42.8,45.4,37.9]]\n\ndf = pd.DataFrame(data, columns=['Date','Open','Close','High','Low'])\ndf.set_index('Date', inplace=True)\ndf.rename(columns={'Open':'Open','Close':'Close','High':'High','Low':'Low'}, inplace=True)\n\nfig = plt.figure(figsize=(10,7))\nmpf.plot(df, type='candle', title='Energy and Utilities Market Overview', \n         savefig=dict(fname='./candlestick_mplfinance/png/14_202312252310.png'))"
        },
        "QA": {
            "input": "What was the high price of the market on 2021-02-05?",
            "output": "$47.5"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_25",
        "img": "./candlestick/png/candlestick_25.png",
        "topic": "Technology and the Internet",
        "title": " Financial Trend of Technology and the Internet - Weekly Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-05-01 \\t 46.5 \\t 48.9 \\t 50.7 \\t 44.2 \\n 2019-05-02 \\t 48.8 \\t 46.7 \\t 50.2 \\t 44.3 \\n 2019-05-03 \\t 47.5 \\t 45.2 \\t 48.9 \\t 43.7 \\n 2019-05-04 \\t 44.9 \\t 47.6 \\t 49.2 \\t 43.4 \\n 2019-05-05 \\t 46.1 \\t 48.2 \\t 49.5 \\t 45.3 \\n 2019-05-06 \\t 46.7 \\t 48.5 \\t 50.2 \\t 44.2 \\n 2019-05-07 \\t 49.3 \\t 48.9 \\t 50.1 \\t 47.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This candlestick chart represents daily financial data for a week, illustrating opening, closing, high, and low prices in dollars. The chart includes seven dates, starting from 2019-05-01 with an opening price of $46.5 and a closing one of $48.9, to 2019-05-07 with an opening price of $49.3 and closing at $48.9. High and low prices for the week ranged from $50.7 to $43.4 respectively. The data captures price fluctuations over seven consecutive days."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport mplfinance as mpf\n\ndata = [['2019-05-01', 46.5, 48.9, 50.7, 44.2], \n        ['2019-05-02', 48.8, 46.7, 50.2, 44.3],\n        ['2019-05-03', 47.5, 45.2, 48.9, 43.7],\n        ['2019-05-04', 44.9, 47.6, 49.2, 43.4],\n        ['2019-05-05', 46.1, 48.2, 49.5, 45.3],\n        ['2019-05-06', 46.7, 48.5, 50.2, 44.2],\n        ['2019-05-07', 49.3, 48.9, 50.1, 47.5]]\n\ndf = pd.DataFrame(data, columns=['Date', 'Open', 'Close', 'High', 'Low'])\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)\n\nmpf.plot(df, type='candle', title='Financial Trend of Technology and the Internet - Weekly Overview', figscale=3, figsize=(9, 6), savefig=dict(fname='./candlestick_mplfinance/png/16_202312270050.png'))"
        },
        "QA": {
            "input": "On which date did the stock have the lowest closing price?",
            "output": "2019-05-03"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_48",
        "img": "./candlestick/png/candlestick_48.png",
        "topic": "Social Sciences and Humanities",
        "title": " Financial Expenditure on Social Sciences and Humanities - Trends Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-05-01 \\t 160 \\t 150 \\t 170 \\t 150 \\n 2019-05-08 \\t 150 \\t 170 \\t 175 \\t 145 \\n 2019-05-15 \\t 170 \\t 165 \\t 178 \\t 165 \\n 2019-05-22 \\t 160 \\t 150 \\t 175 \\t 150 \\n 2019-05-29 \\t 140 \\t 170 \\t 176 \\t 140 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This candlestick chart illustrates the financial activity for a certain entity over the month of May 2019. It shows the opening, closing, high, and low prices for five dates. On May 1, the opening price was $160, with a close at $150, a high of $170, and a low equal to the closing price. Prices fluctuated, with the high reaching $178 on May 15 and the lowest opening price of $140 on May 29. The entity experienced varying performance, with an upward closing price movement on May 8 and May 29, suggestive of volatility during the period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\npio.renderers.default = \"browser\"\n\ndata = [['2019-05-01',160,150,170,150],\n        ['2019-05-08',150,170,175,145],\n        ['2019-05-15',170,165,178,165],\n        ['2019-05-22',160,150,175,150],\n        ['2019-05-29',140,170,176,140]]\nfig = go.Figure(data=[go.Candlestick(x=[d[0] for d in data],\n                    open=[d[1] for d in data],\n                    close=[d[2] for d in data],\n                    high=[d[3] for d in data],\n                    low=[d[4] for d in data])])\nfig.update_layout(title='Financial Expenditure on Social Sciences and Humanities - Trends Overview',\n                  yaxis_range=[min([d[4] for d in data]), max([d[3] for d in data])],\n                  width=800,\n                  height=700,\n                  font=dict(family=\"Arial\"))\nfig.write_image(\"./candlestick_plotly/png/39_202312252244.png\")"
        },
        "QA": {
            "input": "What was the increase in closing price from 2019-05-01 to 2019-05-29?",
            "output": "$20"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_1",
        "img": "./candlestick/png/candlestick_1.png",
        "topic": "Transportation and Logistics",
        "title": " Transportation & Logistics Company Stock Performance - 7-week Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-04-23 \\t 24.5 \\t 26.5 \\t 27.8 \\t 22.7 \\n 2019-04-30 \\t 26.6 \\t 26.8 \\t 28.5 \\t 25.2 \\n 2019-05-07 \\t 26.5 \\t 27 \\t 28.2 \\t 25.4 \\n 2019-05-14 \\t 27.5 \\t 27.3 \\t 29.2 \\t 25.8 \\n 2019-05-21 \\t 27.2 \\t 27.5 \\t 29.4 \\t 26.3 \\n 2019-05-28 \\t 27.4 \\t 26.2 \\t 28.7 \\t 25.7 \\n 2019-06-04 \\t 26.3 \\t 27 \\t 27.6 \\t 24.8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart will present 7 weeks of stock performance data for a Transportation & Logistics Company. For each week, it will show the opening and closing prices in dollars, along with the high and low prices. On 2019-04-23, the stock opened at $24.5 and closed at $26.5 with a high of $27.8 and a low of $22.7. The following weeks show similar data with opening prices ranging from $26.3 to $27.5, closing prices from $26.2 to $27.5, the highest prices reaching between $27.6 and $29.4, and the lowest prices varying from $24.8 to $26.3."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport mplfinance as mpf\nimport matplotlib.pyplot as plt\n\n# Create DataFrame\ndf = pd.DataFrame([['2019-04-23',24.5,26.5,27.8,22.7],['2019-04-30',26.6,26.8,28.5,25.2],['2019-05-07',26.5,27,28.2,25.4],['2019-05-14',27.5,27.3,29.2,25.8],['2019-05-21',27.2,27.5,29.4,26.3],['2019-05-28',27.4,26.2,28.7,25.7],['2019-06-04',26.3,27,27.6,24.8]],columns=['Date','Opening Price ($)','Closing Price ($)','High Price ($)','Low Price ($)'])\n\n# Convert 'Date' to datetime and set as index\ndf['Date']=pd.to_datetime(df['Date'])\ndf.set_index('Date',inplace=True)\n\n# Rename columns to match mplfinance column requirements\ndf.rename(columns={'Opening Price ($)':'Open','Closing Price ($)':'Close','High Price ($)':'High','Low Price ($)':'Low'},inplace=True)\n\n# Create candlestick chart with mplfinance\nmpf.plot(df,type='candle', figratio=(12,6),title='Transportation & Logistics Company Stock Performance - 7-week Overview',savefig=dict(fname='./candlestick_mplfinance/png/21_202312252310.png'))"
        },
        "QA": {
            "input": "On which date did the stock reach the highest high price?",
            "output": "2019-05-21"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_14",
        "img": "./candlestick/png/candlestick_14.png",
        "topic": "Education and Academics",
        "title": " Financial Trends of Education and Academics Sector",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-06-01 \\t 8.5 \\t 9.2 \\t 10.1 \\t 7.8 \\n 2019-06-08 \\t 9.3 \\t 10.2 \\t 11.1 \\t 8.3 \\n 2019-06-15 \\t 10.5 \\t 11.6 \\t 12.2 \\t 10.1 \\n 2019-06-22 \\t 11.1 \\t 12.2 \\t 13.1 \\t 10.5 \\n 2019-06-29 \\t 11.8 \\t 12.3 \\t 13.4 \\t 11.1 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart illustrates the financial trends of the Education and Academics sector, with weekly data points covering June 2019. On June 1st, the opening price was $8.5, closing at $9.2, peaking at $10.1, and dipping to $7.8. On June 8th, the opening price increased to $9.3, and the stock closed at $10.2, hitting a high of $11.1 and a low of $8.3. The subsequent weeks show a continued upward trend, with the closing price reaching $11.6 on June 15th and $12.2 on June 22nd. The final week recorded an opening price of $11.8 and a modest close at $12.3."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport mplfinance as mpf\n\n# Create the DataFrame\ndf = pd.DataFrame({'Date': ['2019-06-01','2019-06-08','2019-06-15','2019-06-22','2019-06-29'],\n                   'Opening Price ($)': [8.5,9.3,10.5,11.1,11.8],\n                   'Closing Price ($)': [9.2,10.2,11.6,12.2,12.3],\n                   'High Price ($)': [10.1,11.1,12.2,13.1,13.4],\n                   'Low Price ($)': [7.8,8.3,10.1,10.5,11.1]})\n\n# Convert the dates to datetime and set them as the index\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)\n\n# Rename the columns to match mplfinance column names\ndf.rename(columns={'Opening Price ($)': 'Open',\n                   'Closing Price ($)': 'Close',\n                   'High Price ($)': 'High',\n                   'Low Price ($)': 'Low'}, inplace=True)\n\n# Create the figure and plot the candlestick chart\nfig = plt.figure(figsize=(8, 5))\nmpf.plot(df,type='candle',title='Financial Trends of Education and Academics Sector',savefig=dict(fname='./candlestick_mplfinance/png/22_202312252310.png'))"
        },
        "QA": {
            "input": "What was the High Price on 2019-06-15?",
            "output": "$12.2"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_2",
        "img": "./candlestick/png/candlestick_2.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare and Health Stock Price Fluctuation - Weekly Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-04-21 \\t 10.5 \\t 12.2 \\t 14.1 \\t 9.1 \\n 2019-04-22 \\t 14.3 \\t 12.2 \\t 14.8 \\t 10.4 \\n 2019-04-23 \\t 11.3 \\t 13.7 \\t 15.8 \\t 10.2 \\n 2019-04-24 \\t 15.6 \\t 14.2 \\t 16.4 \\t 12.3 \\n 2019-04-25 \\t 13.5 \\t 14.7 \\t 16.2 \\t 11.8 \\n 2019-04-26 \\t 14.2 \\t 15.8 \\t 17.3 \\t 13.1 \\n 2019-04-27 \\t 15.5 \\t 14.1 \\t 16.2 \\t 12.8 \\n 2019-04-28 \\t 14.7 \\t 15.2 \\t 16.3 \\t 13.4 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This candlestick chart illustrates the stock price fluctuations for a healthcare and health company over eight days. For each day, the chart shows the opening price, closing price, as well as the high and low prices. On 2019-04-21, the stock opened at $10.5 and closed at $12.2, with a high of $14.1 and a low of $9.1. The data follow through to 2019-04-28, where the stock opened at $14.7, closed at $15.2, reached a high of $16.3, and a low of $13.4. Other dates include similar data, revealing the daily volatility of the stock\u2019s prices."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport mplfinance as mpf\nimport matplotlib.pyplot as plt\n\ndata=[('2019-04-21',10.5,12.2,14.1,9.1),('2019-04-22',14.3,12.2,14.8,10.4),('2019-04-23',11.3,13.7,15.8,10.2),('2019-04-24',15.6,14.2,16.4,12.3),('2019-04-25',13.5,14.7,16.2,11.8),('2019-04-26',14.2,15.8,17.3,13.1),('2019-04-27',15.5,14.1,16.2,12.8),('2019-04-28',14.7,15.2,16.3,13.4)]\n\ndf=pd.DataFrame(data, columns=['Date','Opening Price ($)','Closing Price ($)','High Price ($)','Low Price ($)'])\ndf['Date']=pd.to_datetime(df['Date'])\ndf=df.set_index('Date')\ndf.rename(columns={'Opening Price ($)':'Open','Closing Price ($)':'Close','High Price ($)':'High','Low Price ($)':'Low'}, inplace=True)\n\nmpf.plot(df, type='candle', figratio=(12,6),title='Healthcare and Health Stock Price Fluctuation - Weekly Overview',savefig=dict(fname='./candlestick_mplfinance/png/23_202312270050.png'))"
        },
        "QA": {
            "input": "What was the range between the High Price and Low Price on 2019-04-24?",
            "output": "$4.1"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_28",
        "img": "./candlestick/png/candlestick_28.png",
        "topic": "Social Media and the Web",
        "title": " Market Performance of Social Media and the Web Stocks - Weekly Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-04-26 \\t 90.5 \\t 92 \\t 94.2 \\t 87.8 \\n 2019-04-27 \\t 93 \\t 92.1 \\t 95.2 \\t 91.9 \\n 2019-04-28 \\t 93 \\t 92 \\t 93 \\t 90.7 \\n 2019-04-29 \\t 94 \\t 95.7 \\t 96.6 \\t 93.4 \\n 2019-04-30 \\t 95 \\t 96.9 \\t 97.2 \\t 94 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This candlestick chart depicts the market performance of a social media and web stock over a week. It details daily opening and closing prices along with the high and low prices for each day. On April 26th, the stock opened at $90.5 and closed at $92, with a high of $94.2 and a low of $87.8. The following days show slight variations, with the closing price peaking at $96.9 on April 30th after opening at $95, reaching a high of $97.2, and maintaining a low of $94 for that day."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(data=[go.Candlestick(x=['2019-04-26','2019-04-27','2019-04-28','2019-04-29','2019-04-30'],\n                open=[90.5,93,93,94,95],\n                high=[94.2,95.2,92,96.6,97.2],\n                low=[87.8,91.9,90.7,93.4,94],\n                close=[92,92.1,92,95.7,96.9])])\n\nfig.update_layout(title_text='Market Performance of Social Media and the Web Stocks - Weekly Overview', width=800, height=600, yaxis_range=[87.8,97.2])\nfig.write_image('./candlestick_plotly/png/48_202312252244.png')"
        },
        "QA": {
            "input": "On which date was the closing price the highest within the given period?",
            "output": "2019-04-30"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_23",
        "img": "./candlestick/png/candlestick_23.png",
        "topic": "Law and Legal Affairs",
        "title": " Financial Trends in the Law and Legal Affairs Sector",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-06-14 \\t 75.2 \\t 76.5 \\t 78.2 \\t 74.1 \\n 2019-06-21 \\t 77.1 \\t 76 \\t 79 \\t 74.3 \\n 2019-06-28 \\t 76.6 \\t 77.9 \\t 79.8 \\t 75.5 \\n 2019-07-05 \\t 76.7 \\t 77.2 \\t 78.5 \\t 75.2 \\n 2019-07-12 \\t 77.6 \\t 79.3 \\t 80.1 \\t 76.3 \\n 2019-07-19 \\t 78.5 \\t 79.6 \\t 81.2 \\t 77.1 \\n 2019-07-26 \\t 80.3 \\t 78.4 \\t 81.2 \\t 77.8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart titled \"Financial Trends in the Law and Legal Affairs Sector\" represents the weekly trading metrics for an unspecified financial entity over seven weeks. The data includes dates, opening prices, closing prices, weekly high prices, and weekly low prices. For example, on June 14, 2019, the opening price was $75.2, the closing price was $76.5, the high was $78.2, and the low was $74.1. Similarly, on July 26, 2019, the opening and closing prices were $80.3 and $78.4 respectively, with the week's high at $81.2 and the low at $77.8."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport mplfinance as mpf\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {'Date': ['2019-06-14','2019-06-21','2019-06-28','2019-07-05','2019-07-12','2019-07-19','2019-07-26'],\n        'Opening Price ($)': [75.2,77.1,76.6,76.7,77.6,78.5,80.3],\n        'Closing Price ($)': [76.5,76,77.9,77.2,79.3,79.6,78.4],\n        'High Price ($)': [78.2,79,79.8,78.5,80.1,81.2,81.2],\n        'Low Price ($)': [74.1,74.3,75.5,75.2,76.3,77.1,77.8]}\n\ndf = pd.DataFrame(data)\ndf['Date'] = pd.to_datetime(df['Date'])\ndf = df.set_index('Date')\ndf = df.rename(columns={'Opening Price ($)': 'Open', \n                        'Closing Price ($)': 'Close',\n                        'High Price ($)': 'High',\n                        'Low Price ($)': 'Low'})\n\nplt.figure(figsize=(12,6))\nmpf.plot(df, type='candle', title='Financial Trends in the Law and Legal Affairs Sector',\n          figscale=2, figratio=(8,4), savefig=dict(fname='./candlestick_mplfinance/png/7_202312270050.png'))"
        },
        "QA": {
            "input": "What was the high price exactly one week after the lowest low price was recorded?",
            "output": "$81.2"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_32",
        "img": "./candlestick/png/candlestick_32.png",
        "topic": "Human Resources and Employee Management",
        "title": " HR and Employee Management: Salary Overview",
        "csv": "Month \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2020-05 \\t 3700 \\t 2500 \\t 5000 \\t 100 \\n 2020-06 \\t 3750 \\t 2750 \\t 5500 \\t 200 \\n 2020-07 \\t 3900 \\t 3000 \\t 6000 \\t 300 \\n 2020-08 \\t 4000 \\t 3200 \\t 6500 \\t 400 \\n 2020-09 \\t 4100 \\t 3500 \\t 7000 \\t 500 \\n 2020-10 \\t 4200 \\t 3700 \\t 7500 \\t 600 \\n 2020-11 \\t 4250 \\t 4000 \\t 8000 \\t 700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart displays monthly salary data from May to November 2020. For each month, it shows opening and closing prices, along with the month's high and low prices. In May, the opening price was $3700 and the closing price was $2500, with the high at $5000 and low at $100. In the ensuing months, both opening and closing prices gradually increased, with the high prices escalating from $5500 in June to $8000 in November, while the low prices rose from $200 to $700 within the same period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.DataFrame({\"Month\": [\"2020-05\", \"2020-06\", \"2020-07\", \"2020-08\", \"2020-09\", \"2020-10\", \"2020-11\"],\n                   \"Average Salary ($)\": [3700, 3750, 3900, 4000, 4100, 4200, 4250],\n                   \"Minimum Salary ($)\": [2500, 2750, 3000, 3200, 3500, 3700, 4000],\n                   \"Maximum Salary ($)\": [5000, 5500, 6000, 6500, 7000, 7500, 8000],\n                   \"Employee Count\": [100, 200, 300, 400, 500, 600, 700]})\n\nfig = go.Figure(data=[go.Candlestick(x=df['Month'],\n                                    open=df['Minimum Salary ($)'],\n                                    high=df['Maximum Salary ($)'],\n                                    low=df['Minimum Salary ($)'],\n                                    close=df['Average Salary ($)'])])\nfig.update_layout(title_text='HR and Employee Management: Salary Overview',\n                  width=1000, height=500,\n                  yaxis_range=[2400, 8200])\nfig.write_image('./candlestick_plotly/png/3_202312251608.png')"
        },
        "QA": {
            "input": "What is the lowest low price reported over these months?",
            "output": "$100"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_49",
        "img": "./candlestick/png/candlestick_49.png",
        "topic": "Technology and the Internet",
        "title": " Technology and Internet Company Stock Performance - Weekly Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-05-01 \\t 25.3 \\t 29.8 \\t 30.2 \\t 24.9 \\n 2019-05-02 \\t 29.6 \\t 29.2 \\t 31.5 \\t 27.8 \\n 2019-05-03 \\t 29.7 \\t 30.2 \\t 31.2 \\t 28.3 \\n 2019-05-04 \\t 31.1 \\t 31.2 \\t 32.5 \\t 30.3 \\n 2019-05-05 \\t 31.8 \\t 31.6 \\t 33.2 \\t 30.8 \\n 2019-05-06 \\t 32.4 \\t 30.2 \\t 33.1 \\t 29.7 \\n 2019-05-07 \\t 30.2 \\t 31.1 \\t 31.8 \\t 29.4 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart depicts daily stock performance for a technology and internet company over a week in May 2019. It includes each day's opening, closing, high, and low prices in dollars. On May 1, the stock opened at $25.3 and closed at $29.8, with a high of $30.2 and a low of $24.9. Each subsequent day shows a similar pattern of fluctuation, with May 4 having an opening price of $31.1 and closing at $31.2, peaking at $32.5 and dipping to $30.3. The chart captures the volatility and trends in the company's stock for that week."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndata = [['2019-05-01', 25.3, 29.8, 30.2, 24.9], \n        ['2019-05-02', 29.6, 29.2, 31.5, 27.8], \n        ['2019-05-03', 29.7, 30.2, 31.2, 28.3], \n        ['2019-05-04', 31.1, 31.2, 32.5, 30.3], \n        ['2019-05-05', 31.8, 31.6, 33.2, 30.8], \n        ['2019-05-06', 32.4, 30.2, 33.1, 29.7], \n        ['2019-05-07', 30.2, 31.1, 31.8, 29.4]]\ndf = pd.DataFrame(data,columns=['Date','Opening Price ($)','Closing Price ($)','High Price ($)','Low Price ($)'])\n\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                open=df['Opening Price ($)'],\n                high=df['High Price ($)'],\n                low=df['Low Price ($)'],\n                close=df['Closing Price ($)'])])\nfig.update_layout(title={'text':'Technology and Internet Company Stock Performance - Weekly Overview', \n                         'y':0.9, \n                         'x':0.5, \n                         'xanchor': 'center', \n                         'yanchor': 'top'},\n                  yaxis_range=[24.9,33.2], \n                  width=800, \n                  height=400, \n                  font=dict(size=14))\n\nfig.write_image(\"./candlestick_plotly/png/4_202312270043.png\")"
        },
        "QA": {
            "input": "What was the high price on 2019-05-06?",
            "output": "33.1"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_50",
        "img": "./candlestick/png/candlestick_50.png",
        "topic": "Technology and the Internet",
        "title": " Technology and the Internet Stock Performance Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-04-26 \\t 120.5 \\t 122 \\t 126.2 \\t 119.8 \\n 2019-04-27 \\t 123 \\t 122.1 \\t 125.2 \\t 121.9 \\n 2019-04-28 \\t 125 \\t 124 \\t 125 \\t 121.7 \\n 2019-04-29 \\t 126 \\t 127.7 \\t 129.6 \\t 125.4 \\n 2019-04-30 \\t 127 \\t 128.9 \\t 130.2 \\t 127.6 \\n 2019-05-01 \\t 128 \\t 130 \\t 132 \\t 125.8 \\n 2019-05-02 \\t 129 \\t 130 \\t 134 \\t 127.9 \\n 2019-05-03 \\t 130 \\t 131 \\t 134 \\t 128 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart titled \"Technology and the Internet Stock Performance Overview\" illustrates the stock price movements over several days. It presents the opening, closing, high, and low prices. On April 26, 2019, the stock opened at $120.5 and closed at $122, with a high of $126.2 and a low of $119.8. The following days show fluctuations with the closing price peaking at $131 on May 3, 2019. Each candlestick represents a day's trading data, capturing the essence of market trends for the given period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport pandas as pd\n\n# Create Data\ndata = {'Date': ['2019-04-26','2019-04-27','2019-04-28','2019-04-29','2019-04-30','2019-05-01','2019-05-02','2019-05-03'],\n        'Opening Price ($)': [120.5,123,125,126,127,128,129,130],\n        'Closing Price ($)': [122,122.1,124,127.7,128.9,130,130,131],\n        'High Price ($)': [126.2,125.2,125,129.6,130.2,132,134,134],\n        'Low Price ($)': [119.8,121.9,121.7,125.4,127.6,125.8,127.9,128]}\n\n# Create Dataframe\ndf = pd.DataFrame(data)\n\n# Plot Candlestick Chart\nfig = make_subplots(rows=1, cols=1, shared_xaxes=True)\nfig.add_trace(go.Candlestick(x=df['Date'],\n                              open=df['Opening Price ($)'],\n                              high=df['High Price ($)'],\n                              low=df['Low Price ($)'],\n                              close=df['Closing Price ($)']), row=1, col=1)\n\n# Adjust Figure Layout\nfig.update_layout(title='Technology and the Internet Stock Performance Overview',\n                  width=1000, height=600,\n                  yaxis_range=[min(df['Low Price ($)'])-2, max(df['High Price ($)'])+2],\n                  font=dict(family=\"Courier New, monospace\", size=18, color=\"#7f7f7f\"))\nfig.update_xaxes(title_text=\"Date\")\nfig.update_yaxes(title_text=\"Price (USD)\")\n\n# Save Figure\nfig.write_image(\"./candlestick_plotly/png/26_202312252244.png\")"
        },
        "QA": {
            "input": "What was the low price for the stock on 2019-05-01?",
            "output": "125.8"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_24",
        "img": "./candlestick/png/candlestick_24.png",
        "topic": "Transportation and Logistics",
        "title": " Weekly Change in Logistics and Transportation Stock Price",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2020-07-14 \\t 72 \\t 71.2 \\t 73.6 \\t 70.4 \\n 2020-07-21 \\t 70.5 \\t 72.3 \\t 73.1 \\t 69.4 \\n 2020-07-28 \\t 73 \\t 71.9 \\t 73.4 \\t 69.2 \\n 2020-08-04 \\t 70.3 \\t 72.5 \\t 73.1 \\t 69.4 \\n 2020-08-11 \\t 73.4 \\t 71.2 \\t 74.2 \\t 69.8 \\n 2020-08-18 \\t 69.2 \\t 73.1 \\t 74.2 \\t 68.4 \\n 2020-08-25 \\t 71.9 \\t 72.4 \\t 73.8 \\t 70.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart illustrates the weekly changes in a logistics and transportation stock's price, detailing the opening, closing, high, and low prices. For instance, on 2020-07-14, the stock opened at $72 and closed slightly lower at $71.2, with a high of $73.6 and a low of $70.4. Contrastingly, on 2020-07-21, it opened at $70.5 and closed higher at $72.3, peaking at $73.1 and dipping to $69.4. The data set includes similar information for dates up to 2020-08-25, showing fluctuating stock values within defined high and low price points each week."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport mplfinance as mpf\nimport matplotlib.pyplot as plt\n\ndata = [['2020-07-14',72,71.2,73.6,70.4],\n        ['2020-07-21',70.5,72.3,73.1,69.4],\n        ['2020-07-28',73,71.9,73.4,69.2],\n        ['2020-08-04',70.3,72.5,73.1,69.4],\n        ['2020-08-11',73.4,71.2,74.2,69.8],\n        ['2020-08-18',69.2,73.1,74.2,68.4],\n        ['2020-08-25',71.9,72.4,73.8,70.5]]\n\ndf = pd.DataFrame(data, columns=['Date', 'Opening Price ($)', 'Closing Price ($)', 'High Price ($)', 'Low Price ($)'])\ndf['Date'] = pd.to_datetime(df['Date'])\ndf = df.set_index('Date')\ndf.rename(columns={'Opening Price ($)':'Open', 'Closing Price ($)':'Close', 'High Price ($)':'High', 'Low Price ($)':'Low'}, inplace=True)\n\nfig = plt.figure(figsize=(15,7))\nmpf.plot(df, type='candle', style='charles', title='Weekly Change in Logistics and Transportation Stock Price', ylabel='Price ($)', savefig=dict(fname='./candlestick_mplfinance/png/13_202312270050.png'))"
        },
        "QA": {
            "input": "What was the highest Low Price ($) recorded across the given dates?",
            "output": "$70.5"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_40",
        "img": "./candlestick/png/candlestick_40.png",
        "topic": "Tourism and Hospitality",
        "title": " Financial Trends of Tourism and Hospitality Sector",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-03-02 \\t 310 \\t 320 \\t 322 \\t 305 \\n 2019-03-09 \\t 320 \\t 325 \\t 330 \\t 315 \\n 2019-03-16 \\t 320 \\t 335 \\t 338 \\t 316 \\n 2019-03-23 \\t 340 \\t 335 \\t 342 \\t 330 \\n 2019-03-30 \\t 335 \\t 340 \\t 345 \\t 335 \\n 2019-04-06 \\t 350 \\t 348 \\t 352 \\t 345 \\n 2019-04-13 \\t 345 \\t 347 \\t 350 \\t 340 \\n 2019-04-20 \\t 355 \\t 345 \\t 357 \\t 342 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart depicts the financial trends of the tourism and hospitality sector, showing weekly price movements. For each date specified, the chart illustrates the opening and closing prices, as well as the weekly high and low prices. For instance, on 2019-03-02, the opening price was $310, the closing price $320, the highest price reached $322, and the lowest was $305. Similarly, on 2019-04-20, the opening price was $355, with a closing price of $345, a high of $357, and a low of $342. The data covers the period from March 2 to April 20, 2019."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndata = [['2019-03-02',310,320,322,305],\n        ['2019-03-09',320,325,330,315],\n        ['2019-03-16',320,335,338,316],\n        ['2019-03-23',340,335,342,330],\n        ['2019-03-30',335,340,345,335],\n        ['2019-04-06',350,348,352,345],\n        ['2019-04-13',345,347,350,340],\n        ['2019-04-20',355,345,357,342]]\n\ndf = pd.DataFrame(data,columns=['Date','Opening Price ($)','Closing Price ($)','High Price ($)','Low Price ($)'])\n\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],open=df['Opening Price ($)'],high=df['High Price ($)'],low=df['Low Price ($)'],close=df['Closing Price ($)'])])\n\nfig.update_layout(title_text=\"Financial Trends of Tourism and Hospitality Sector\",width=800, height=400, yaxis_range=[min(df['Low Price ($)'])-2,max(df['High Price ($)'])+2])\n\nfig.write_image('./candlestick_plotly/png/24_202312270043.png')"
        },
        "QA": {
            "input": "What was the High Price on the date when the Lowest Closing Price was recorded?",
            "output": "357$"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_39",
        "img": "./candlestick/png/candlestick_39.png",
        "topic": "Arts and Culture",
        "title": " Financial Trend of Arts and Culture Industry - Weekly Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-05-15 \\t 20.5 \\t 19.5 \\t 21.2 \\t 18.8 \\n 2019-05-22 \\t 20.8 \\t 22 \\t 22.9 \\t 20.2 \\n 2019-05-29 \\t 19.5 \\t 18 \\t 19.6 \\t 17.2 \\n 2019-06-05 \\t 19.5 \\t 20.5 \\t 21.2 \\t 19 \\n 2019-06-12 \\t 19.5 \\t 20.8 \\t 21.5 \\t 18.4 \\n 2019-06-19 \\t 20.2 \\t 19.7 \\t 20.8 \\t 18.7 \\n 2019-06-26 \\t 20.7 \\t 21.2 \\t 22 \\t 20.2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart illustrates the weekly financial trends of the arts and culture industry, detailing opening and closing prices, as well as the weekly high and low values. For instance, on 2019-05-15, the opening price was $20.5, closing at $19.5, with a high of $21.2 and a low of $18.8. The following weeks show fluctuations in prices, with opening and closing prices ranging from $19.5 to $20.8, and high-low ranges spanning from $17.2 to $22.9, reflecting the volatility within the weekly market movements."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(data=[go.Candlestick(x=['2019-05-15','2019-05-22','2019-05-29','2019-06-05','2019-06-12','2019-06-19','2019-06-26'], open=[20.5, 20.8, 19.5, 19.5, 19.5, 20.2, 20.7], high=[21.2, 22.9, 19.6, 21.2, 21.5, 20.8, 22], low=[18.8, 20.2, 17.2, 19, 18.4, 18.7, 20.2], close=[19.5, 22, 18, 20.5, 20.8, 19.7, 21.2])])\nfig.update_layout(title_text='Financial Trend of Arts and Culture Industry - Weekly Overview', width=800, height=800, yaxis_range=[17,23], font=dict(family=\"Courier New, monospace\", size=18, color=\"black\"))\nfig.write_image('./candlestick_plotly/png/22_202312270043.png')"
        },
        "QA": {
            "input": "On which date was the highest closing price recorded?",
            "output": "2019-06-26"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_41",
        "img": "./candlestick/png/candlestick_41.png",
        "topic": "Government and Public Policy",
        "title": " The Financial Trend in Government and Public Policy Over One Month",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2020-11-16 \\t 30.2 \\t 29.7 \\t 31.2 \\t 28.4 \\n 2020-11-23 \\t 30.5 \\t 32 \\t 33 \\t 29 \\n 2020-11-30 \\t 30.2 \\t 33 \\t 35.5 \\t 29.2 \\n 2020-12-07 \\t 32.1 \\t 34 \\t 36 \\t 30.5 \\n 2020-12-14 \\t 35 \\t 33.7 \\t 36.2 \\t 31.3 \\n 2020-12-21 \\t 34.5 \\t 37.2 \\t 38.2 \\t 33.2 \\n 2020-12-28 \\t 36 \\t 37.2 \\t 39.3 \\t 35.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart presents the financial trend over a month for an unspecified entity, showcasing weekly data on opening, closing, high, and low prices in dollars. Starting on November 16, 2020, the opening price was $30.2 with a closing price of $29.7. The high reached $31.2 while the low was $28.4. On December 28, 2020, the opening price increased to $36 with a closing price of $37.2, a high of $39.3, and a low of $35.5, indicating a general upward trend in this period. Each week's data point includes these four price metrics."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport pandas as pd\n\ndata = {'Date':['2020-11-16','2020-11-23','2020-11-30','2020-12-07','2020-12-14','2020-12-21','2020-12-28'],\n        'Opening Price (USD)':[30.2,30.5,30.2,32.1,35.0,34.5,36.0],\n        'Closing Price (USD)':[29.7,32.0,33.0,34.0,33.7,37.2,37.2],\n        'High Price (USD)':[31.2,33.0,35.5,36.0,36.2,38.2,39.3],\n        'Low Price (USD)':[28.4,29.0,29.2,30.5,31.3,33.2,35.5]}\ndf = pd.DataFrame(data)\n\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                open=df['Opening Price (USD)'],\n                high=df['High Price (USD)'],\n                low=df['Low Price (USD)'],\n                close=df['Closing Price (USD)'])])\n\nfig.update_layout(title='The Financial Trend in Government and Public Policy Over One Month',\n            yaxis_range=[min(df['Low Price (USD)']),max(df['High Price (USD)'])],\n            width=800,\n            height=600)\n\nfig.write_image(\"./candlestick_plotly/png/10_202312252244.png\")"
        },
        "QA": {
            "input": "What was the Low Price on the date when the High Price was the highest?",
            "output": "35.5"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_16",
        "img": "./candlestick/png/candlestick_16.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing and Production Company Stock Performance - Week Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-04-01 \\t 50.2 \\t 51.5 \\t 53.2 \\t 48.2 \\n 2019-04-08 \\t 51.3 \\t 54.2 \\t 56 \\t 50.5 \\n 2019-04-15 \\t 54.9 \\t 55.4 \\t 56.8 \\t 53.7 \\n 2019-04-22 \\t 55 \\t 56.5 \\t 57.2 \\t 53.8 \\n 2019-04-29 \\t 56.2 \\t 54.9 \\t 58.1 \\t 52.9 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart illustrates the weekly stock performance of a manufacturing and production company during April 2019. For each week, the chart shows the opening and closing prices, as well as the highest and lowest prices the stock reached. On April 1st, the opening price was $50.2, with a closing price of $51.5, a high of $53.2, and a low of $48.2. The following weeks display fluctuations in these values, with the closing week starting at an opening price of $56.2, and closing lower at $54.9, despite reaching a high of $58.1 during the week."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport mplfinance as mpf\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndata = [['2019-04-01',50.2,51.5,53.2,48.2],\n['2019-04-08',51.3,54.2,56.0,50.5],\n['2019-04-15',54.9,55.4,56.8,53.7],\n['2019-04-22',55.0,56.5,57.2,53.8],\n['2019-04-29',56.2,54.9,58.1,52.9]]\n\ndf = pd.DataFrame(data, columns=['Date','Open','Close','High','Low'])\ndf['Date'] = pd.to_datetime(df['Date'])\ndf = df.set_index('Date')\n\nmpf.plot(df, figratio=(12,6), title='Manufacturing and Production Company Stock Performance - Week Overview',savefig=dict(fname='./candlestick/png_val/candlestick_16.png'))"
        },
        "QA": {
            "input": "What was the closing price of the stock on 2019-04-15?",
            "output": "55.4"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_34",
        "img": "./candlestick/png/candlestick_34.png",
        "topic": "Business and Finance",
        "title": " Business and Finance Trend - Weekly Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-04-26 \\t 350.2 \\t 368.4 \\t 379 \\t 340.8 \\n 2019-04-27 \\t 372 \\t 368.9 \\t 384.5 \\t 350.3 \\n 2019-04-28 \\t 360 \\t 369 \\t 376.3 \\t 353.4 \\n 2019-04-29 \\t 375 \\t 385.2 \\t 390.9 \\t 364.1 \\n 2019-04-30 \\t 380 \\t 391 \\t 396.2 \\t 374.8 \\n 2019-05-01 \\t 383.6 \\t 388.4 \\t 392.7 \\t 378.9 \\n 2019-05-02 \\t 387.3 \\t 381.2 \\t 393.4 \\t 372.7 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This candlestick chart presents a weekly overview of a business's financial trend by displaying daily opening and closing prices, along with the daily high and low prices. Data points start from April 26, 2019, with an opening price of $350.2, closing at $368.4, a high of $379, and a low of $340.8. The chart includes similar data for each day up to May 02, 2019, with respective opening, closing, high, and low prices. It showcases the volatility and price movement within the week in question."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport pandas as pd\nfig = go.Figure(data=[go.Candlestick(x=pd.date_range('2019-04-26', periods=7),\nopen=[350.2,372,360,375,380,383.6,387.3],\nhigh=[379,384.5,376.3,390.9,396.2,392.7,393.4],\nlow=[340.8,350.3,353.4,364.1,374.8,378.9,372.7],\nclose=[368.4,368.9,369,385.2,391,388.4,381.2])])\n\nfig.update_layout(title='Business and Finance Trend - Weekly Overview',\nyaxis_range=[340,400],\nwidth=1400,\nheight=700,\ntemplate=\"plotly_white\")\nfig.write_image('./candlestick_plotly/png/15_202312270043.png')"
        },
        "QA": {
            "input": "What was the closing price on 2019-04-29?",
            "output": "385.2"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_5",
        "img": "./candlestick/png/candlestick_5.png",
        "topic": "Real Estate and Housing Market",
        "title": " Real Estate and Housing Market Trend Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-06-03 \\t 161.2 \\t 169.6 \\t 171.3 \\t 158.9 \\n 2019-06-10 \\t 167.4 \\t 171.2 \\t 173.2 \\t 164.1 \\n 2019-06-17 \\t 173.4 \\t 174.2 \\t 176.2 \\t 170.6 \\n 2019-06-24 \\t 171.2 \\t 175.6 \\t 178.2 \\t 168.7 \\n 2019-07-01 \\t 174.6 \\t 172.3 \\t 176.9 \\t 168.5 \\n 2019-07-08 \\t 171.2 \\t 174.2 \\t 176.8 \\t 168.5 \\n 2019-07-15 \\t 175.3 \\t 177.2 \\t 179.1 \\t 171.2 \\n 2019-07-22 \\t 173.2 \\t 174.6 \\t 177.2 \\t 170.6 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart illustrates weekly real estate market trends, focusing on the opening, closing, high, and low prices of properties. It covers the period from 2019-06-03 to 2019-07-22. Each candlestick represents a week's price movements: starting with the week of 2019-06-03, which opened at $161.2 and closed at $169.6, hitting a high of $171.3 and a low of $158.9. The subsequent weeks show fluctuating prices with opening and closing values ranging between $167.4 to $175.3 and $169.6 to $177.2, respectively, and with high and low prices varying within $171.3 to $179.1 and $158.9 to $171.2."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport mplfinance as mpf\n\ndata = [['2019-06-03',161.2,169.6,171.3,158.9], \n        ['2019-06-10',167.4,171.2,173.2,164.1], \n        ['2019-06-17',173.4,174.2,176.2,170.6], \n        ['2019-06-24',171.2,175.6,178.2,168.7], \n        ['2019-07-01',174.6,172.3,176.9,168.5], \n        ['2019-07-08',171.2,174.2,176.8,168.5], \n        ['2019-07-15',175.3,177.2,179.1,171.2], \n        ['2019-07-22',173.2,174.6,177.2,170.6]]\n\ndf = pd.DataFrame(data, columns = ['Date','Open','Close','High','Low'])\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)\n\nfig = plt.figure(figsize=(10,5))\nmpf.plot(df, type='candle', title='Real Estate and Housing Market Trend Overview', savefig=dict(fname='./candlestick_mplfinance/png/20_202312270050.png'))"
        },
        "QA": {
            "input": "What was the difference between the highest closing price and the lowest opening price during the given dates?",
            "output": "$5.9"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_35",
        "img": "./candlestick/png/candlestick_35.png",
        "topic": "Technology and the Internet",
        "title": " Technology and the Internet Stock Market Trend Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-04-26 \\t 20.5 \\t 21.3 \\t 23.1 \\t 19.1 \\n 2019-04-27 \\t 22.1 \\t 20.7 \\t 23.2 \\t 19.9 \\n 2019-04-28 \\t 21.9 \\t 22.4 \\t 25.6 \\t 20.3 \\n 2019-04-29 \\t 23.2 \\t 22.8 \\t 25.7 \\t 21.5 \\n 2019-04-30 \\t 22.9 \\t 24.5 \\t 26.0 \\t 22.1 \\n 2019-05-01 \\t 25.0 \\t 24.2 \\t 26.2 \\t 21.9 \\n 2019-05-02 \\t 23.5 \\t 24.8 \\t 25.6 \\t 22.1 \\n 2019-05-03 \\t 25.2 \\t 25.4 \\t 27.1 \\t 23.4 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart provides a detailed overview of a technology and internet stock's price movements over a series of dates. Each entry shows the opening, closing, high, and low prices. On 2019-04-26, the stock opened at $20.5 and closed at $21.3, with a high of $23.1 and a low of $19.1. The data includes similar figures for subsequent dates, ending with 2019-05-03, where the stock opened at $25.2, closed at $25.4, hit a high of $27.1, and dipped to a low of $23.4."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndata = [['2019-04-26', 20.5, 21.3, 23.1, 19.1], \n        ['2019-04-27', 22.1, 20.7, 23.2, 19.9], \n        ['2019-04-28', 21.9, 22.4, 25.6, 20.3], \n        ['2019-04-29', 23.2, 22.8, 25.7, 21.5], \n        ['2019-04-30', 22.9, 24.5, 26.0, 22.1], \n        ['2019-05-01', 25.0, 24.2, 26.2, 21.9], \n        ['2019-05-02', 23.5, 24.8, 25.6, 22.1], \n        ['2019-05-03', 25.2, 25.4, 27.1, 23.4]]\n\ndf = pd.DataFrame(data, columns=['Date', 'Open', 'Close', 'High', 'Low'])\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                       open=df['Open'], \n                       high=df['High'], \n                       low=df['Low'], \n                       close=df['Close'])])\n\nfig.update_layout(title='Technology and the Internet Stock Market Trend Overview',\n                  xaxis_title='Date',\n                  yaxis_title='Price ($)',\n                  yaxis_range=[19, 27.5],\n                  width=800,\n                  height=400,\n                  font={'family': 'Helvetica', 'size': 16})\n\nfig.write_image('./candlestick_plotly/png/20_202312252244.png')"
        },
        "QA": {
            "input": "What was the highest High Price ($) recorded in the given data?",
            "output": "27.1"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_20",
        "img": "./candlestick/png/candlestick_20.png",
        "topic": "Science and Engineering",
        "title": " Science and Engineering Investment Trend - Monthly Overview",
        "csv": "Month \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2020-07-01 \\t 125 \\t 127.2 \\t 134.5 \\t 119 \\n 2020-07-08 \\t 129 \\t 127.6 \\t 133.2 \\t 118.2 \\n 2020-07-15 \\t 134 \\t 137.5 \\t 140 \\t 125.3 \\n 2020-07-22 \\t 139 \\t 138.2 \\t 142.1 \\t 132.3 \\n 2020-07-29 \\t 131 \\t 130.7 \\t 138.9 \\t 125.6 \\n 2020-08-05 \\t 127 \\t 125.5 \\t 134.2 \\t 121.5 \\n 2020-08-12 \\t 135 \\t 134.2 \\t 139.3 \\t 128.3 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart titled \"Science and Engineering Investment Trend - Monthly Overview\" presents the opening, closing, high, and low prices ($) of an investment for each week starting from July 1st to August 12th, 2020. Weekly data points include 2020-07-01 with an opening price of $125 and a closing price of $127.2, and 2020-08-12 with an opening of $135 and a close of $134.2. High and low prices for these dates range from $134.5 to $119, and from $139.3 to $128.3, respectively, with other weeks displaying similar fluctuations in prices."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport mplfinance\n\ndata = [['2020-07-01', 125, 127.2, 134.5, 119], \n        ['2020-07-08', 129, 127.6, 133.2, 118.2], \n        ['2020-07-15', 134, 137.5, 140, 125.3], \n        ['2020-08-05', 127, 125.5, 134.2, 121.5],\n        ['2020-08-12', 135, 134.2, 139.3, 128.3]]\ndf = pd.DataFrame(data, columns=['Month', 'Open Price (USD)', 'Close Price (USD)', 'High Price (USD)', 'Low Price (USD)'])\n\ndf['Month'] = pd.to_datetime(df['Month'])\ndf.set_index('Month', inplace=True)\ndf.rename(columns = {'Open Price (USD)': 'Open', 'Close Price (USD)': 'Close', 'High Price (USD)': 'High', 'Low Price (USD)': 'Low'}, inplace=True)\n\nmplfinance.plot(df, type='candle', figratio=(12,6), title='Science and Engineering Investment Trend - Monthly Overview', savefig=dict(fname='./candlestick_mplfinance/png/10_202312270050.png'))"
        },
        "QA": {
            "input": "What was the High Price ($) on 2020-08-05?",
            "output": "134.2"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_11",
        "img": "./candlestick/png/candlestick_11.png",
        "topic": "Social Media and the Web",
        "title": " Social Media and Web Stock Performance Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-04-26 \\t 50.5 \\t 52 \\t 54.2 \\t 49.8 \\n 2019-04-27 \\t 53 \\t 52.1 \\t 55.2 \\t 51.9 \\n 2019-04-28 \\t 53 \\t 52 \\t 53 \\t 50.7 \\n 2019-04-29 \\t 54 \\t 55.7 \\t 56.6 \\t 53.4 \\n 2019-04-30 \\t 55 \\t 56.9 \\t 57.2 \\t 54 \\n 2019-05-01 \\t 58.3 \\t 60.3 \\t 60.6 \\t 56.2 \\n 2019-05-02 \\t 60 \\t 62.3 \\t 63.2 \\t 59.4 \\n 2019-05-03 \\t 61.2 \\t 64.2 \\t 64.5 \\t 60.8 \\n 2019-05-04 \\t 63.5 \\t 63.7 \\t 66.3 \\t 62.3 \\n 2019-05-05 \\t 62 \\t 63.4 \\t 64.2 \\t 61 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart presents the daily stock performance of a social media and web company over a ten-day period. For each day, the chart shows the opening and closing prices in dollars, along with the high and low prices of the day. The data range from April 26, 2019, with an opening price of $50.5 and a closing price of $52, to May 5, 2019, with an opening price of $62 and a closing price of $63.4. Highs and lows for the period stretch from $49.8 to $66.3, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport mplfinance\n\ndata = [['2019-04-26',50.5,52,54.2,49.8],\n        ['2019-04-27',53,52.1,55.2,51.9],\n        ['2019-04-28',53,52,53,50.7],\n        ['2019-04-29',54,55.7,56.6,53.4],\n        ['2019-04-30',55,56.9,57.2,54],\n        ['2019-05-01',58.3,60.3,60.6,56.2],\n        ['2019-05-02',60,62.3,63.2,59.4],\n        ['2019-05-03',61.2,64.2,64.5,60.8],\n        ['2019-05-04',63.5,63.7,66.3,62.3],\n        ['2019-05-05',62,63.4,64.2,61]]\n\ndf = pd.DataFrame(data, columns = ['Date', 'Opening Price ($)', 'Closing Price ($)', 'High Price ($)', 'Low Price ($)'])\ndf['Date'] = pd.to_datetime(df['Date'])\ndf = df.set_index('Date')\ndf.rename(columns = {'Opening Price ($)':'Open', \n                     'Closing Price ($)':'Close', \n                     'High Price ($)':'High', \n                     'Low Price ($)':'Low'}, inplace = True)\n\nplt.figure(figsize=(14, 10))\nmplfinance.plot(df, type='candle', title = 'Social Media and Web Stock Performance Overview', savefig=dict(fname='./candlestick_mplfinance/png/9_202312252310.png'))"
        },
        "QA": {
            "input": "What was the high price on 2019-04-29?",
            "output": "$56.6"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_7",
        "img": "./candlestick/png/candlestick_7.png",
        "topic": "Government and Public Policy",
        "title": " Government and Public Policy Financial Trend Analysis",
        "csv": "Month \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-01 \\t 50 \\t 52 \\t 54 \\t 48 \\n 2019-02 \\t 54 \\t 56 \\t 59 \\t 51 \\n 2019-03 \\t 58 \\t 56 \\t 60 \\t 53 \\n 2019-04 \\t 62 \\t 59 \\t 65 \\t 56 \\n 2019-05 \\t 50 \\t 52 \\t 54 \\t 48 \\n 2019-06 \\t 54 \\t 56 \\t 58 \\t 52 \\n 2019-07 \\t 58 \\t 56 \\t 59 \\t 54 \\n 2019-08 \\t 62 \\t 59 \\t 65 \\t 56 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart represents financial trend analysis based on the monthly opening, closing, high, and low prices over a period from January 2019 to August 2019. Each candlestick summarizes the data for one month. For instance, in January 2019, the opening price was $50, the closing price was $52, the highest price reached was $54, and the lowest was $48. The data set continues similarly across the following months, highlighting the fluctuations in the financial metrics of opening, closing, high, and low prices."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport mplfinance as mpf\nimport matplotlib.pyplot as plt\n\n# Load data\ndata = [['2019-01',50,52,54,48],\n        ['2019-02',54,56,59,51],\n        ['2019-03',58,56,60,53],\n        ['2019-04',62,59,65,56],\n        ['2019-05',50,52,54,48],\n        ['2019-06',54,56,58,52],\n        ['2019-07',58,56,59,54],\n        ['2019-08',62,59,65,56]]\n\n# Create a DataFrame\ndf = pd.DataFrame(data, columns=['Month','Open','Close','High','Low'])\ndf['Month'] = pd.to_datetime(df['Month'])\n\n# Set 'Month' as index\ndf.set_index('Month', inplace=True)\n\n# Create candlestick chart\nfig = plt.figure(figsize=(10,7))\nmpf.plot(df,\n         type='candle',\n         title='Government and Public Policy Financial Trend Analysis',\n         savefig=dict(fname='./candlestick_mplfinance/png/17_202312252310.png'))"
        },
        "QA": {
            "input": "What was the Low Price ($) in 2019-05?",
            "output": "48"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_29",
        "img": "./candlestick/png/candlestick_29.png",
        "topic": "Healthcare and Health",
        "title": " Weekly Performance of Healthcare and Health Industry Stock Prices",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-11-01 \\t 215.2 \\t 214.4 \\t 219.6 \\t 208.1 \\n 2019-11-08 \\t 212.7 \\t 213.2 \\t 216.9 \\t 210.4 \\n 2019-11-15 \\t 211 \\t 216.1 \\t 219.6 \\t 208.2 \\n 2019-11-22 \\t 215.5 \\t 214.9 \\t 219.2 \\t 211.7 \\n 2019-11-29 \\t 215.2 \\t 217.9 \\t 220.3 \\t 213.4 \\n 2019-12-06 \\t 219 \\t 219.2 \\t 224.2 \\t 214.2 \\n 2019-12-13 \\t 220.3 \\t 223.2 \\t 224.8 \\t 218.2 \\n 2019-12-20 \\t 221.9 \\t 221.5 \\t 226.3 \\t 217.1 \\n 2019-12-27 \\t 221.2 \\t 223.2 \\t 226 \\t 218.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart represents weekly stock price performance for the Healthcare and Health Industry over a two-month period in 2019. Dates range from November 1 to December 27, with the opening, closing, high, and low prices for each week. For example, on November 1, the opening price was $215.2, closing at $214.4, with a high of $219.6 and a low of $208.1. Each week is similarly detailed, with the final week showing an opening price of $221.2, a closing of $223.2, a high of $226, and a low of $218.5."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndata = [['2019-11-01',215.2,214.4,219.6,208.1],\n        ['2019-11-08',212.7,213.2,216.9,210.4],\n        ['2019-11-15',211,216.1,219.6,208.2],\n        ['2019-11-22',215.5,214.9,219.2,211.7],\n        ['2019-11-29',215.2,217.9,220.3,213.4],\n        ['2019-12-06',219,219.2,224.2,214.2],\n        ['2019-12-13',220.3,223.2,224.8,218.2],\n        ['2019-12-20',221.9,221.5,226.3,217.1],\n        ['2019-12-27',221.2,223.2,226,218.5]]\n\ndf = pd.DataFrame(data, columns = ['Date','Open','Close','High','Low'])\n\n# Create figure\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                open=df['Open'],\n                high=df['High'],\n                low=df['Low'],\n                close=df['Close'])])\n\n# Set title\nfig.update_layout(title_text=\"Weekly Performance of Healthcare and Health Industry Stock Prices\",\n                  font_size=8,\n                  width=800,\n                  height=600,\n                  yaxis_range=[200,230])\n\n# Write image\nfig.write_image(\"./candlestick_plotly/png/9_202312251608.png\")"
        },
        "QA": {
            "input": "What was the highest High Price reached during the month of December 2019?",
            "output": "226.3"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_31",
        "img": "./candlestick/png/candlestick_31.png",
        "topic": "Real Estate and Housing Market",
        "title": " Real Estate and Housing Market Prices - Weekly Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-05-01 \\t 350 \\t 370 \\t 395 \\t 325 \\n 2019-05-08 \\t 375 \\t 400 \\t 410 \\t 360 \\n 2019-05-15 \\t 410 \\t 405 \\t 420 \\t 380 \\n 2019-05-22 \\t 390 \\t 420 \\t 440 \\t 375 \\n 2019-05-29 \\t 420 \\t 430 \\t 455 \\t 400 \\n 2019-06-05 \\t 415 \\t 400 \\t 430 \\t 385 \\n 2019-06-12 \\t 385 \\t 405 \\t 420 \\t 370 \\n 2019-06-19 \\t 405 \\t 410 \\t 420 \\t 395 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart presents a weekly overview of real estate and housing market prices, with data points for the opening, closing, high, and low prices in dollars. On 2019-05-01, the prices were $350 (opening), $370 (closing), $395 (high), and $325 (low). Subsequent weeks show fluctuations, with the highest closing price of $430 on 2019-05-29 and the lowest opening price of $350 on 2019-05-01. The chart continues through 2019-06-19, indicating trends in the housing market for the given period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndata = {'Date': ['2019-05-01','2019-05-08','2019-05-15','2019-05-22','2019-05-29','2019-06-05','2019-06-12','2019-06-19'],\n       'Opening Price ($)' : [350,375,410,390,420,415,385,405],\n       'Closing Price ($)' : [370,400,405,420,430,400,405,410],\n       'High Price ($)' : [395,410,420,440,455,430,420,420],\n       'Low Price ($)' : [325,360,380,375,400,385,370,395]\n      }\n\ndf = pd.DataFrame.from_dict(data)\n\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                open=df['Opening Price ($)'],\n                high=df['High Price ($)'],\n                low=df['Low Price ($)'],\n                close=df['Closing Price ($)'])])\n\nfig.update_layout(title_text=\"Real Estate and Housing Market Prices - Weekly Overview\",\n                  yaxis_range=[df['Low Price ($)'].min(), df['High Price ($)'].max()],\n                  width=800,\n                  height=800,\n                  font=dict(family=\"sans serif\"))\n\nfig.write_image(\"./candlestick_plotly/png/17_202312270043.png\")"
        },
        "QA": {
            "input": "On which date was the highest closing price recorded?",
            "output": "2019-05-29"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_37",
        "img": "./candlestick/png/candlestick_37.png",
        "topic": "Environment and Sustainability",
        "title": " Financial Trends in Environment and Sustainability Sector",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-05-02 \\t 50 \\t 60 \\t 70 \\t 40 \\n 2019-05-09 \\t 70 \\t 60 \\t 80 \\t 50 \\n 2019-05-16 \\t 60 \\t 70 \\t 80 \\t 50 \\n 2019-05-23 \\t 70 \\t 60 \\t 80 \\t 50 \\n 2019-05-30 \\t 60 \\t 70 \\t 80 \\t 50 \\n 2019-06-06 \\t 70 \\t 60 \\t 80 \\t 50 \\n 2019-06-13 \\t 60 \\t 70 \\t 80 \\t 50 \\n 2019-06-20 \\t 70 \\t 60 \\t 80 \\t 50 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart represents weekly financial trends in the Environment and Sustainability sector over a period in 2019. Data points for this period demonstrate opening and closing prices, along with weekly high and low prices, for each respective date. Opening prices fluctuate between $50 and $70, while closing prices alternate between $60 and $70. High prices are consistently at $80, and lows range from $40 to $50 across the dates listed: May 2, May 9, May 16, May 23, May 30, June 6, June 13, and June 20."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\nimport pandas as pd\n\n#set up data\ndata = [['2019-05-02',50,60,70,40],['2019-05-09',70,60,80,50],['2019-05-16',60,70,80,50],['2019-05-23',70,60,80,50],['2019-05-30',60,70,80,50],['2019-06-06',70,60,80,50],['2019-06-13',60,70,80,50],['2019-06-20',70,60,80,50]]\ndf = pd.DataFrame(data, columns=['Date','Open','Close','High','Low'])\n\n#create figure\nfig = go.Figure(data=[go.Candlestick(x=df['Date'], open=df['Open'], high=df['High'], low=df['Low'], close=df['Close'])])\n\n#update figure layout\nfig.update_layout(title_text='Financial Trends in Environment and Sustainability Sector', width=800, height=500, yaxis_range=[35,85])\n\n#save figure\nfig.write_image('./candlestick_plotly/png/6_202312252244.png')"
        },
        "QA": {
            "input": "What was the high price on 2019-06-06?",
            "output": "80"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_42",
        "img": "./candlestick/png/candlestick_42.png",
        "topic": "Science and Engineering",
        "title": " Science and Engineering Stock Price Change Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2020-06-01 \\t 20.6 \\t 22.3 \\t 23.4 \\t 19 \\n 2020-06-08 \\t 22.7 \\t 22.2 \\t 24.5 \\t 19.9 \\n 2020-06-15 \\t 22 \\t 24 \\t 25.3 \\t 20.8 \\n 2020-06-22 \\t 24.5 \\t 23.7 \\t 25.8 \\t 21.2 \\n 2020-06-29 \\t 23.4 \\t 26.3 \\t 26.7 \\t 22.4 \\n 2020-07-06 \\t 25.6 \\t 27.9 \\t 28 \\t 24.7 \\n 2020-07-13 \\t 27.5 \\t 26.2 \\t 28.1 \\t 24.3 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This candlestick chart illustrates the weekly stock price changes within the science and engineering sector, including opening and closing prices, as well as weekly high and low prices, over a period from June 1, 2020, to July 13, 2020. Opening prices ranged from $20.6 to $27.5, while closing prices varied from $22.2 to $27.9. High prices peaked at $28.1, with low prices dipping to $19. Each candlestick represents a week of trading activity, with the body showing the opening and closing prices and the wicks indicating the high and low prices for that week."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.DataFrame({'Date': ['2020-06-01', '2020-06-08', '2020-06-15', '2020-06-22', '2020-06-29', '2020-07-06', '2020-07-13'],\n                   'Opening Price ($)': [20.6, 22.7, 22, 24.5, 23.4, 25.6, 27.5],\n                   'Closing Price ($)': [22.3, 22.2, 24, 23.7, 26.3, 27.9, 26.2],\n                   'High Price ($)': [23.4, 24.5, 25.3, 25.8, 26.7, 28, 28.1],\n                   'Low Price ($)': [19, 19.9, 20.8, 21.2, 22.4, 24.7, 24.3]})\n\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                       open=df['Opening Price ($)'],\n                       high=df['High Price ($)'],\n                       low=df['Low Price ($)'],\n                       close=df['Closing Price ($)'])])\nfig.update_layout(title_text='Science and Engineering Stock Price Change Overview',\n                  yaxis_range=[18, 29],\n                  width=800,\n                  height=400,\n                  font=dict(size=12))\nfig.write_image('./candlestick_plotly/png/9_202312270043.png')"
        },
        "QA": {
            "input": "On what date was the lowest opening price recorded?",
            "output": "2020-06-01"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_15",
        "img": "./candlestick/png/candlestick_15.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Financial Trend of Charity and Nonprofit Organizations",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-05-14 \\t 11.5 \\t 11.2 \\t 12 \\t 10.8 \\n 2019-05-21 \\t 11.3 \\t 11.6 \\t 12.5 \\t 10.9 \\n 2019-05-28 \\t 12.2 \\t 11.8 \\t 12.7 \\t 11 \\n 2019-06-04 \\t 11.9 \\t 12.1 \\t 12.3 \\t 11.5 \\n 2019-06-11 \\t 12.4 \\t 12.7 \\t 13 \\t 11.7 \\n 2019-06-18 \\t 12.3 \\t 12 \\t 12.5 \\t 11.6 \\n 2019-06-25 \\t 11.5 \\t 12.2 \\t 12.7 \\t 11.2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart presents the financial trend of Charity and Nonprofit Organizations, detailing weekly data points for opening and closing prices, as well as the high and low prices of each week within the specified period in 2019. The dataset covers seven weeks, starting from May 14, 2019, with an opening price of $11.5 and a closing price of $11.2, to June 25, 2019, where the opening price is noted as $11.5 and the closing price as $12.2. Highs and lows for this period range from $10.8 to $13."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport mplfinance as mpf\n\ndf = pd.DataFrame({\n    'Date': ['2019-05-14', '2019-05-21', '2019-05-28', '2019-06-04', '2019-06-11', '2019-06-18', '2019-06-25'],\n    'Opening Price ($)': [11.5, 11.3, 12.2, 11.9, 12.4, 12.3, 11.5],\n    'Closing Price ($)': [11.2, 11.6, 11.8, 12.1, 12.7, 12, 12.2],\n    'High Price ($)': [12, 12.5, 12.7, 12.3, 13, 12.5, 12.7],\n    'Low Price ($)': [10.8, 10.9, 11, 11.5, 11.7, 11.6, 11.2]\n})\n\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)\ndf.rename(columns={\n    'Opening Price ($)': 'Open', \n    'Closing Price ($)': 'Close',\n    'High Price ($)': 'High',\n    'Low Price ($)': 'Low'\n}, inplace=True)\n\nmpf.plot(df, type='candle', figratio=(12, 6), title='Financial Trend of Charity and Nonprofit Organizations', figscale=2, savefig=dict(fname='./candlestick_mplfinance/png/3_202312270050.png'))"
        },
        "QA": {
            "input": "What was the high price on the date when the closing price was the highest among the given dates?",
            "output": "$13.00"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_9",
        "img": "./candlestick/png/candlestick_9.png",
        "topic": "Food and Beverage Industry",
        "title": " Financial Trends of Food and Beverage Industry Over One Month",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-10-14 \\t 45.2 \\t 47.1 \\t 48.2 \\t 44 \\n 2019-10-21 \\t 45.5 \\t 46.3 \\t 49.1 \\t 43.2 \\n 2019-10-28 \\t 47.4 \\t 43.6 \\t 48.2 \\t 42.8 \\n 2019-11-04 \\t 45.7 \\t 48.2 \\t 50.1 \\t 43 \\n 2019-11-11 \\t 47.1 \\t 46.7 \\t 48.5 \\t 45.2 \\n 2019-11-18 \\t 48.3 \\t 47.4 \\t 49.5 \\t 45.5 \\n 2019-11-25 \\t 48.5 \\t 46.2 \\t 49.4 \\t 44.9 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart represents financial trends in the food and beverage industry over several weeks in late 2019. It includes data points for the opening price, closing price, high price, and low price of each week. On 2019-10-14, the opening price was $45.2 and closing price was $47.1, with the week\u2019s prices peaking at $48.2 and bottoming at $44. The following weeks show similar fluctuations, with peaks reaching as high as $50.1 on 2019-11-04 and troughs going as low as $42.8 on 2019-10-28. Each week\u2019s prices vary, showing distinct opening, closing, high, and low figures."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport mplfinance as mpf\nimport matplotlib.pyplot as plt\n\ndata = [['2019-10-14', 45.2, 47.1, 48.2, 44],\n        ['2019-10-21', 45.5, 46.3, 49.1, 43.2],\n        ['2019-10-28', 47.4, 43.6, 48.2, 42.8],\n        ['2019-11-04', 45.7, 48.2, 50.1, 43],\n        ['2019-11-11', 47.1, 46.7, 48.5, 45.2],\n        ['2019-11-18', 48.3, 47.4, 49.5, 45.5],\n        ['2019-11-25', 48.5, 46.2, 49.4, 44.9]]\n\ndf = pd.DataFrame(data, columns=['Date', 'Open', 'Close', 'High', 'Low'])\ndf['Date'] = pd.to_datetime(df['Date'])\ndf = df.set_index('Date')\n\nmpf.plot(df, type='candle', figratio=(12, 6), title='Financial Trends of Food and Beverage Industry Over One Month', savefig=dict(fname='./candlestick_mplfinance/png/1_202312270050.png'))"
        },
        "QA": {
            "input": "On what date did the High Price reach $50.1?",
            "output": "2019-11-04"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_3",
        "img": "./candlestick/png/candlestick_3.png",
        "topic": "Education and Academics",
        "title": " Financial Trend of Education and Academics Industry - Weekly Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-08-26 \\t 56.2 \\t 58.3 \\t 59.4 \\t 53.2 \\n 2019-08-27 \\t 58.5 \\t 59.9 \\t 61.1 \\t 56.3 \\n 2019-08-28 \\t 60.3 \\t 62.1 \\t 64.2 \\t 59.1 \\n 2019-08-29 \\t 61.5 \\t 58.4 \\t 63.2 \\t 57.2 \\n 2019-08-30 \\t 58 \\t 60.9 \\t 64.2 \\t 56.4 \\n 2019-09-01 \\t 59.4 \\t 61.1 \\t 62.6 \\t 54.3 \\n 2019-09-02 \\t 58.2 \\t 62.3 \\t 63.2 \\t 56.1 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This candlestick chart illustrates the financial trend of the Education and Academics Industry over a week. The chart captures each day's opening, closing, high, and low prices in dollars. For instance, on 2019-08-26, the opening price was $56.2, the closing price was $58.3, with the high at $59.4 and the low at $53.2. The vertical lines and thicker blocks depict the range of trading prices and the opening/closing prices for each day, indicating the volatility and trends in the market during this period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport mplfinance as mpf\n\ndata = {'Date':['2019-08-26','2019-08-27','2019-08-28','2019-08-29','2019-08-30','2019-09-01','2019-09-02'],\n        'Opening Price ($)':[56.2,58.5,60.3,61.5,58,59.4,58.2], \n        'Closing Price ($)':[58.3,59.9,62.1,58.4,60.9,61.1,62.3], \n        'High Price ($)':[59.4,61.1,64.2,63.2,64.2,62.6,63.2], \n        'Low Price ($)':[53.2,56.3,59.1,57.2,56.4,54.3,56.1]}\n\ndf = pd.DataFrame(data)\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)\ndf.rename(columns={'Opening Price ($)':'Open', 'Closing Price ($)':'Close', 'High Price ($)':'High', 'Low Price ($)':'Low'}, inplace=True)\n\nmpf.plot(df,\n        type='candle', figratio=(12,6), \n        title='Financial Trend of Education and Academics Industry - Weekly Overview',\n        savefig=dict(fname='./candlestick_mplfinance/png/10_202312252310.png'))"
        },
        "QA": {
            "input": "What was the high price on 2019-08-30?",
            "output": "64.2"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_18",
        "img": "./candlestick/png/candlestick_18.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare and Health Stock Price Performance Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2020-10-15 \\t 98.4 \\t 95.7 \\t 99.8 \\t 94.3 \\n 2020-10-16 \\t 94.8 \\t 93.3 \\t 96.6 \\t 91.7 \\n 2020-10-17 \\t 95.5 \\t 96.6 \\t 98.2 \\t 93.1 \\n 2020-10-18 \\t 97.7 \\t 95.2 \\t 98.5 \\t 93.9 \\n 2020-10-19 \\t 95.8 \\t 96.4 \\t 97.9 \\t 94.6 \\n 2020-10-20 \\t 96.7 \\t 95.7 \\t 97.9 \\t 94.4 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart provided would visualize the stock price performance over six days for an entity related to healthcare and health. It outlines the opening and closing prices, along with the daily highs and lows for a specific stock from October 15 to October 20, 2020. For instance, on October 15, the stock opened at $98.4, closed at $95.7, reached a high of $99.8, and had a low of $94.3. The rest of the data follows a similar format, showing the fluctuations in the stock's performance over the given period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport mplfinance as mpf\n\ndata  = [['2020-10-15', 98.4, 95.7, 99.8, 94.3],\n         ['2020-10-16', 94.8, 93.3, 96.6, 91.7],\n         ['2020-10-17', 95.5, 96.6, 98.2, 93.1],\n         ['2020-10-18', 97.7, 95.2, 98.5, 93.9],\n         ['2020-10-19', 95.8, 96.4, 97.9, 94.6],\n         ['2020-10-20', 96.7, 95.7, 97.9, 94.4]]\n\ndf = pd.DataFrame(data, columns=['Date', 'Open', 'Close', 'High', 'Low'])\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)\ndf.rename(columns={'Open': 'Open', 'Close': 'Close', 'High': 'High', 'Low': 'Low'}, inplace=True)\n\nfig = plt.figure(figsize=(18, 10))\nmpf.plot(df, type='candle', title='Healthcare and Health Stock Price Performance Overview', savefig=dict(fname='./candlestick_mplfinance/png/18_202312252310.png'))"
        },
        "QA": {
            "input": "What was the highest low price recorded between 2020-10-15 and 2020-10-20?",
            "output": "94.6"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_44",
        "img": "./candlestick/png/candlestick_44.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Financial Trend of Charity and Nonprofit Organizations - Weekly Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-07-01 \\t 18.4 \\t 17.9 \\t 20.3 \\t 15.7 \\n 2019-07-08 \\t 19.2 \\t 17.5 \\t 20.4 \\t 16.1 \\n 2019-07-15 \\t 20.2 \\t 21.3 \\t 22.9 \\t 19.3 \\n 2019-07-22 \\t 22.4 \\t 25.2 \\t 26.4 \\t 21.2 \\n 2019-07-29 \\t 25.1 \\t 27.3 \\t 28.6 \\t 24.5 \\n 2019-08-05 \\t 25.7 \\t 28.9 \\t 30.5 \\t 25.2 \\n 2019-08-12 \\t 30.1 \\t 28.4 \\t 31.5 \\t 27.2 \\n 2019-08-19 \\t 25.4 \\t 27.2 \\t 29.6 \\t 22.3 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart provides a weekly overview of the financial trend of charity and nonprofit organizations. The data spans from July 1, 2019, to August 19, 2019, including opening, closing, high, and low prices in US dollars. On July 1, the opening price was $18.4 with the closing at $17.9, the high at $20.3, and the low at $15.7. The week of August 19 shows an opening price of $25.4, a close at $27.2, a high of $29.6, and a low of $22.3. Each week's data point outlines the fluctuation and range of prices during that period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport datetime\n\n#data\ndates = ['2019-07-01', '2019-07-08', '2019-07-15', '2019-07-22', '2019-07-29', '2019-08-05', '2019-08-12', '2019-08-19']\nopens = [18.4, 19.2, 20.2, 22.4, 25.1, 25.7, 30.1, 25.4]\ncloses = [17.9, 17.5, 21.3, 25.2, 27.3, 28.9, 28.4, 27.2]\nhighs = [20.3, 20.4, 22.9, 26.4, 28.6, 30.5, 31.5, 29.6]\nlows = [15.7, 16.1, 19.3, 21.2, 24.5, 25.2, 27.2, 22.3]\n\n#init figure\nfig = go.Figure(data=[go.Candlestick(x=dates,\n                open=opens,\n                high=highs,\n                low=lows,\n                close=closes)])\n\n#update layout\nfig.update_layout(title_text='Financial Trend of Charity and Nonprofit Organizations - Weekly Overview',\n                  xaxis_rangeslider_visible=False,\n                  width=800,\n                  height=500,\n                  yaxis_range=[min(lows)-1,max(highs)+1])\n\n#write image\nfig.write_image('./candlestick_plotly/png/17_202312252244.png')"
        },
        "QA": {
            "input": "What was the highest closing price in the given dataset and on which date was it recorded?",
            "output": "The highest closing price was $28.9 on 2019-08-05"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_4",
        "img": "./candlestick/png/candlestick_4.png",
        "topic": "Social Media and the Web",
        "title": " Financial Trend of Social Media and the Web - Weekly Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-04-26 \\t 2.1 \\t 2.2 \\t 2.5 \\t 1.8 \\n 2019-04-27 \\t 2.3 \\t 2.2 \\t 2.6 \\t 2.1 \\n 2019-04-28 \\t 2.3 \\t 2.3 \\t 2.5 \\t 2.0 \\n 2019-04-29 \\t 2.4 \\t 2.5 \\t 2.7 \\t 2.2 \\n 2019-04-30 \\t 2.5 \\t 2.7 \\t 2.8 \\t 2.4 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This candlestick chart illustrates the financial trend of a social media company over a five-day period. On 2019-04-26, the stock opened at $2.1 and closed at $2.2, with a high of $2.5 and a low of $1.8. On subsequent days, the stock showed fluctuations, with the opening and closing prices hovering between $2.3 to $2.5, although the final day saw an increase, closing at $2.7. Highs peaked at $2.8 on the last day, while lows remained above $2.0 after the initial day."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport mplfinance as mpf\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame(data=[['2019-04-26',2.1,2.2,2.5,1.8],\n                        ['2019-04-27',2.3,2.2,2.6,2.1],\n                        ['2019-04-28',2.3,2.3,2.5,2.0],\n                        ['2019-04-29',2.4,2.5,2.7,2.2],\n                        ['2019-04-30',2.5,2.7,2.8,2.4]],\n                   columns=['Date','Open Price ($)','Close Price ($)','High Price ($)','Low Price ($)']\n                  )\n\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)\ndf.rename(columns={'Open Price ($)': 'Open', \n                   'Close Price ($)': 'Close',\n                   'High Price ($)': 'High',\n                   'Low Price ($)': 'Low'}, inplace=True)\n\nmpf.plot(df, type='candle', figratio=(12,6), title='Financial Trend of Social Media and the Web - Weekly Overview', savefig=dict(fname='./candlestick_mplfinance/png/15_202312252310.png'))"
        },
        "QA": {
            "input": "On which date did the closing price first exceed the opening price?",
            "output": "2019-04-26"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_6",
        "img": "./candlestick/png/candlestick_6.png",
        "topic": "Human Resources and Employee Management",
        "title": " Human Resources and Employee Management Trends in Average Pay and Benefits",
        "csv": "Month \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-03 \\t 20 \\t 40 \\t 250 \\t 4 \\n 2019-04 \\t 22 \\t 38 \\t 300 \\t 6 \\n 2019-05 \\t 21 \\t 40 \\t 320 \\t 5 \\n 2019-06 \\t 23 \\t 36 \\t 350 \\t 7 \\n 2019-07 \\t 22 \\t 40 \\t 310 \\t 4 \\n 2019-08 \\t 20 \\t 38 \\t 290 \\t 6 \\n 2019-09 \\t 21 \\t 36 \\t 340 \\t 7 \\n 2019-10 \\t 23 \\t 40 \\t 320 \\t 4 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The provided candlestick chart is intended to represent trends in average pay and benefits according to the title, but the CSV data actually contains stock market information for various months in 2019. Monthly data includes Opening Price, Closing Price, High Price, and Low Price of a stock. For instance, in March 2019, the Opening Price was $20, Closing Price was $40, with the High reaching up to $250 and the Low dropping down to $4. This pattern continues with marginal fluctuations through to October 2019. The chart visualizes this financial data, which may have been incorrectly labeled according to the title."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport mplfinance as mpf\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame(data=[['2019-03',20,40,250,4], \n                        ['2019-04',22,38,300,6], \n                        ['2019-05',21,40,320,5], \n                        ['2019-06',23,36,350,7], \n                        ['2019-07',22,40,310,4], \n                        ['2019-08',20,38,290,6], \n                        ['2019-09',21,36,340,7], \n                        ['2019-10',23,40,320,4]], \n                   columns=['Month','Average Pay Rate ($/Hour)','Average Working Hours (Hours/Week)','Average Overtime Hours (Hours/Week)','Average Benefits ($/Month)'])\ndf['Month'] = pd.to_datetime(df['Month'])\ndf.set_index('Month',inplace=True)\ndf.rename(columns={'Average Pay Rate ($/Hour)':'Open', \n                    'Average Working Hours (Hours/Week)':'Close',\n                    'Average Overtime Hours (Hours/Week)':'High',\n                    'Average Benefits ($/Month)':'Low'}, \n           inplace=True)\n\nmpf.plot(df, figratio=(12, 6), title='Human Resources and Employee Management Trends in Average Pay and Benefits', savefig=dict(fname='./candlestick/png_val/candlestick_6.png'))"
        },
        "QA": {
            "input": "In which month was the difference between the high price and low price the greatest?",
            "output": "2019-06"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_46",
        "img": "./candlestick/png/candlestick_46.png",
        "topic": "Education and Academics",
        "title": " Education and Academics Stock Performance - 8 Weeks Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2020-11-12 \\t 80 \\t 80.9 \\t 81.5 \\t 79.5 \\n 2020-11-19 \\t 81 \\t 81.7 \\t 82.3 \\t 79.5 \\n 2020-11-26 \\t 80.5 \\t 81.2 \\t 82.2 \\t 79.8 \\n 2020-12-03 \\t 82 \\t 83.2 \\t 83.7 \\t 81.3 \\n 2020-12-10 \\t 82.5 \\t 83.8 \\t 84.8 \\t 81.8 \\n 2020-12-17 \\t 83 \\t 83.5 \\t 84.8 \\t 81.9 \\n 2020-12-24 \\t 83.2 \\t 83.5 \\t 84.7 \\t 81.5 \\n 2020-12-31 \\t 84.3 \\t 85.2 \\t 86.1 \\t 83.6 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart illustrates the weekly stock performance over an 8-week period for a company in the Education and Academics sector. Data points include opening, closing, high, and low prices for each week. On 2020-11-12, the stock opened at $80 and closed at $80.9, reaching a high of $81.5 and a low of $79.5. The closing week of 2020-12-31 saw the stock open at $84.3 and close higher at $85.2, with a peak at $86.1 and a low of $83.6. Prices generally trended upwards over the observed period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport datetime\n\ndata = [(\"2020-11-12\",80,80.9,81.5,79.5),\n        (\"2020-11-19\",81,81.7,82.3,79.5),\n        (\"2020-11-26\",80.5,81.2,82.2,79.8),\n        (\"2020-12-03\",82,83.2,83.7,81.3),\n        (\"2020-12-10\",82.5,83.8,84.8,81.8),\n        (\"2020-12-17\",83,83.5,84.8,81.9),\n        (\"2020-12-24\",83.2,83.5,84.7,81.5),\n        (\"2020-12-31\",84.3,85.2,86.1,83.6)]\n\nx = [datetime.datetime.strptime(date, \"%Y-%m-%d\").date() for (date,open_p,close_p,high_p,low_p) in data]\nopen_p = [open_p for (date,open_p,close_p,high_p,low_p) in data]\nclose_p = [close_p for (date,open_p,close_p,high_p,low_p) in data]\nhigh_p = [high_p for (date,open_p,close_p,high_p,low_p) in data]\nlow_p = [low_p for (date,open_p,close_p,high_p,low_p) in data]\n\nfig = go.Figure(data=[go.Candlestick(x=x,\n                open=open_p,\n                high=high_p,\n                low=low_p,\n                close=close_p)])\n\nfig.update_layout(\n    title=\"Education and Academics Stock Performance - 8 Weeks Overview\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Price ($)\",\n    width=1800,\n    height=1000,\n    yaxis_range=[79,87],\n    font=dict(family=\"Courier New\", size=16, color=\"#7f7f7f\")\n)\n\nfig.write_image(\"./candlestick_plotly/png/11_202312252244.png\")"
        },
        "QA": {
            "input": "What was the Low Price on 2020-12-03?",
            "output": "$81.3"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_47",
        "img": "./candlestick/png/candlestick_47.png",
        "topic": "Tourism and Hospitality",
        "title": " Financial Trends in Tourism and Hospitality - Weekly Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-11-01 \\t 45 \\t 50 \\t 53 \\t 41 \\n 2019-11-08 \\t 51 \\t 52 \\t 54 \\t 49 \\n 2019-11-15 \\t 50 \\t 51.5 \\t 54 \\t 47 \\n 2019-11-22 \\t 51 \\t 48 \\t 52 \\t 45 \\n 2019-11-29 \\t 49 \\t 50.5 \\t 52 \\t 47 \\n 2019-12-06 \\t 51 \\t 50 \\t 53 \\t 48 \\n 2019-12-13 \\t 50 \\t 47 \\t 50 \\t 44 \\n 2019-12-20 \\t 48 \\t 50 \\t 53 \\t 45 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart represents weekly financial trends in tourism and hospitality over eight selected dates in November and December 2019. For each date, it shows the opening and closing prices in dollars, as well as the weekly high and low prices. On November 1st, the opening price was $45 and the closing price was $50, with a high of $53 and a low of $41. The prices fluctuate across the weeks, with opening prices ranging from $45 to $51, closing prices from $47 to $52, highs between $50 and $54, and lows from $41 to $49."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndata = [['2019-11-01',45,50,53,41], ['2019-11-08',51,52,54,49], ['2019-11-15',50,51.5,54,47], ['2019-11-22',51,48,52,45], ['2019-11-29',49,50.5,52,47], ['2019-12-06',51,50,53,48], ['2019-12-13',50,47,50,44], ['2019-12-20',48,50,53,45]]\n\ndf = pd.DataFrame(data, columns = ['date', 'open', 'close', 'high', 'low'])\nfig = go.Figure(data=[go.Candlestick(x=df['date'],\n                open=df['open'],\n                high=df['high'],\n                low=df['low'],\n                close=df['close'])])\nfig.update_layout(title='Financial Trends in Tourism and Hospitality - Weekly Overview',\n                  yaxis_range=[df['low'].min(), df['high'].max()],\n                  width=800,\n                  height=600,\n                  font=dict(\n                      size=12,\n                      color=\"black\"\n                  ))\nfig.write_image('./candlestick/png_val/candlestick_47.png')"
        },
        "QA": {
            "input": "What was the High Price on 2019-12-13?",
            "output": "50"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_36",
        "img": "./candlestick/png/candlestick_36.png",
        "topic": "Education and Academics",
        "title": " Trends of Academic Financing Over Time",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2020-08-05 \\t 25.7 \\t 24.3 \\t 26.4 \\t 23.1 \\n 2020-08-12 \\t 27 \\t 24.2 \\t 27.2 \\t 23.6 \\n 2020-08-19 \\t 24.1 \\t 25.5 \\t 26.3 \\t 23.2 \\n 2020-08-26 \\t 24.4 \\t 26.8 \\t 27.9 \\t 23.5 \\n 2020-09-02 \\t 26.6 \\t 26.4 \\t 27.2 \\t 25.3 \\n 2020-09-09 \\t 25.3 \\t 24.9 \\t 26.2 \\t 23.8 \\n 2020-09-16 \\t 24.1 \\t 27.4 \\t 27.8 \\t 23.6 \\n 2020-09-23 \\t 26.6 \\t 26.1 \\t 27.7 \\t 24.9 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart illustrates trends of academic financing over eight different dates in August and September 2020. Each candlestick captures four price points: the opening price at the beginning of the period, the closing price at the end, and the high and low prices reached within the same timeframe. For instance, on 2020-08-05, the opening price was $25.7, the closing price was $24.3, the high for the day was $26.4, and the low was $23.1. The chart provides similar data for the following weeks, showing fluctuations in financing over the time period indicated."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\ncandlestick = go.Candlestick(\n    x=['2020-08-05', '2020-08-12', '2020-08-19', '2020-08-26', '2020-09-02', '2020-09-09', '2020-09-16', '2020-09-23'],\n    open=[25.7, 27, 24.1, 24.4, 26.6, 25.3, 24.1, 26.6],\n    high=[26.4, 27.2, 26.3, 27.9, 27.2, 26.2, 27.8, 27.7],\n    low=[23.1, 23.6, 23.2, 23.5, 25.3, 23.8, 23.6, 24.9],\n    close=[24.3, 24.2, 25.5, 26.8, 26.4, 24.9, 27.4, 26.1]\n)\n\nfig = go.Figure(data=[candlestick])\n\nfig.update_layout(\n    title=\"Trends of Academic Financing Over Time\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Price ($)\",\n    yaxis_range=[23.1, 27.9],\n    width=940,\n    height=500,\n    font_size=10,\n    template='plotly_white'\n)\n\nfig.write_image(\"./candlestick_plotly/png/19_202312252244.png\")"
        },
        "QA": {
            "input": "On which date was the closing price the highest?",
            "output": "2020-09-16"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_21",
        "img": "./candlestick/png/candlestick_21.png",
        "topic": "Retail and E-commerce",
        "title": " Financial Performance of Retail and E-commerce Companies - Weekly Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-05-01 \\t 50 \\t 56 \\t 57.2 \\t 48.2 \\n 2019-05-02 \\t 55 \\t 56.8 \\t 58.3 \\t 53.5 \\n 2019-05-03 \\t 52 \\t 54.2 \\t 55.6 \\t 51.4 \\n 2019-05-04 \\t 53 \\t 54.6 \\t 56.7 \\t 50.5 \\n 2019-05-05 \\t 51 \\t 55.4 \\t 56.9 \\t 49.8 \\n 2019-05-06 \\t 54 \\t 55 \\t 57 \\t 51.2 \\n 2019-05-07 \\t 51 \\t 53.2 \\t 55.4 \\t 49.7 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart illustrates the financial performance of retail and e-commerce companies over a week, showcasing daily opening and closing prices, alongside the highest and lowest values. On 2019-05-01, the opening price was $50, closing at $56, with a high of $57.2 and a low of $48.2. This pattern continues across the week with slight fluctuations, as the closing prices remain above $53 on all days, indicating a relatively stable performance with respect to closing values within the given timeframe."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport mplfinance as mpf\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame({\"Date\": [\"2019-05-01\", \"2019-05-02\", \"2019-05-03\", \"2019-05-04\", \"2019-05-05\", \"2019-05-06\", \"2019-05-07\"],\n                   \"Opening Price ($)\": [50, 55, 52, 53, 51, 54, 51],\n                   \"Closing Price ($)\": [56, 56.8, 54.2, 54.6, 55.4, 55, 53.2],\n                   \"High Price ($)\": [57.2, 58.3, 55.6, 56.7, 56.9, 57, 55.4],\n                   \"Low Price ($)\": [48.2, 53.5, 51.4, 50.5, 49.8, 51.2, 49.7]})\n\ndf['Date'] = pd.to_datetime(df['Date'])\ndf = df.set_index('Date')\ndf = df.rename(columns={\"Opening Price ($)\": \"Open\",\n                        \"Closing Price ($)\": \"Close\",\n                        \"High Price ($)\": \"High\",\n                        \"Low Price ($)\": \"Low\"})\n\nfig = plt.figure(figsize=(20, 10))\nmpf.plot(df, type='candle', title='Financial Performance of Retail and E-commerce Companies - Weekly Overview',\n         savefig=dict(fname='./candlestick_mplfinance/png/3_202312252258.png'), figratio=(12, 6))"
        },
        "QA": {
            "input": "On which date did the stock reach the highest High Price during the given period?",
            "output": "2019-05-05"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_45",
        "img": "./candlestick/png/candlestick_45.png",
        "topic": "Government and Public Policy",
        "title": " Government and Public Policy Financial Trend Analysis",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-06-09 \\t 80.1 \\t 81.3 \\t 81.8 \\t 79.7 \\n 2019-06-10 \\t 81.4 \\t 81.5 \\t 83.1 \\t 80.3 \\n 2019-06-11 \\t 81.6 \\t 83.5 \\t 83.6 \\t 80.9 \\n 2019-06-12 \\t 84.5 \\t 84.2 \\t 85.4 \\t 83.2 \\n 2019-06-13 \\t 84.3 \\t 85.4 \\t 85.7 \\t 83.9 \\n 2019-06-14 \\t 85.7 \\t 86.3 \\t 87.4 \\t 85.2 \\n 2019-06-15 \\t 86.3 \\t 86.7 \\t 87.6 \\t 84.9 \\n 2019-06-16 \\t 86.5 \\t 88.2 \\t 88.6 \\t 85.9 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart titled \"Government and Public Policy Financial Trend Analysis\" illustrates the stock's financial performance over eight days. Each candlestick represents one day, detailing the opening, closing, high, and low prices in dollars. For example, on 2019-06-09, the opening price was $80.1, the closing price was $81.3, the high of the day was $81.8, and the low was $79.7. The final day shown, 2019-06-16, opened at $86.5, closed at $88.2, reached a high of $88.6, and a low of $85.9."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\nimport pandas as pd\n\n#data\ndata = {'Date':['2019-06-09','2019-06-10','2019-06-11','2019-06-12','2019-06-13','2019-06-14','2019-06-15','2019-06-16'],\n'Opening Price ($)':[80.1,81.4,81.6,84.5,84.3,85.7,86.3,86.5],\n'Closing Price ($)':[81.3,81.5,83.5,84.2,85.4,86.3,86.7,88.2],\n'High Price ($)':[81.8,83.1,83.6,85.4,85.7,87.4,87.6,88.6],\n'Low Price ($)':[79.7,80.3,80.9,83.2,83.9,85.2,84.9,85.9]}\n\ndf = pd.DataFrame(data)\n\n#plot\nfig = go.Figure(data = [go.Candlestick(x=df['Date'], open=df['Opening Price ($)'], high=df['High Price ($)'],\nlow=df['Low Price ($)'], close=df['Closing Price ($)'])])\n\n#update layout\nfig.update_layout(width=1000, height=500, title_text=\"Government and Public Policy Financial Trend Analysis\", yaxis_range=[79,89])\n\n#save\npio.write_image(fig, './candlestick_plotly/png/16_202312252244.png')"
        },
        "QA": {
            "input": "How much did the Opening Price increase from 2019-06-09 to 2019-06-16?",
            "output": "$6.4"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_33",
        "img": "./candlestick/png/candlestick_33.png",
        "topic": "Technology and the Internet",
        "title": " Technology and Internet Companies Stock Prices Over a Week",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2020-10-01 \\t 50.2 \\t 54 \\t 56.8 \\t 48.7 \\n 2020-10-02 \\t 56 \\t 58.2 \\t 59.3 \\t 52.1 \\n 2020-10-03 \\t 57.2 \\t 58 \\t 59.5 \\t 54.3 \\n 2020-10-04 \\t 54.5 \\t 56.5 \\t 59.1 \\t 51.3 \\n 2020-10-05 \\t 57.6 \\t 60 \\t 62.5 \\t 55.3 \\n 2020-10-06 \\t 59.4 \\t 62.7 \\t 64.3 \\t 58.2 \\n 2020-10-07 \\t 62.9 \\t 63.2 \\t 65.2 \\t 61.3 \\n 2020-10-08 \\t 60.4 \\t 62.5 \\t 63.8 \\t 58.7 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This candlestick chart illustrates the stock price movements of technology and internet companies over a week, outlined by their opening and closing prices, and daily highs and lows. Starting on October 1st, 2020, with an opening price of $50.2 and a closing price of $54, the stock reached a high of $56.8 and a low of $48.7. The chart plots similar data for the subsequent days until October 8th, where the stock opened at $60.4, closed at $62.5, reached a high of $63.8, and dropped to a low of $58.7 within the day."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndata = [['2020-10-01', 50.2, 54, 56.8, 48.7],\n        ['2020-10-02', 56, 58.2, 59.3, 52.1],\n        ['2020-10-03', 57.2, 58, 59.5, 54.3],\n        ['2020-10-04', 54.5, 56.5, 59.1, 51.3],\n        ['2020-10-05', 57.6, 60, 62.5, 55.3],\n        ['2020-10-06', 59.4, 62.7, 64.3, 58.2],\n        ['2020-10-07', 62.9, 63.2, 65.2, 61.3],\n        ['2020-10-08', 60.4, 62.5, 63.8, 58.7]]\n\ndf = pd.DataFrame(data, columns=['Date', 'Opening Price ($)', 'Closing Price ($)','High Price ($)','Low Price ($)'])\n\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],\n            open=df['Opening Price ($)'],\n            high=df['High Price ($)'],\n            low=df['Low Price ($)'],\n            close=df['Closing Price ($)'])\n])\n\nfig.update_layout(title_text='Technology and Internet Companies Stock Prices Over a Week',\n                  yaxis_range=[48.7, 65.2],\n                  width=800,\n                  height=400,\n                  font=dict(family=\"Courier New, monospace\",\n                  size=12,\n                  color=\"#7f7f7f\"))\nfig.write_image('./candlestick_plotly/png/2_202312252244.png')"
        },
        "QA": {
            "input": "What was the High Price of the stock on 2020-10-07?",
            "output": "$65.2"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_38",
        "img": "./candlestick/png/candlestick_38.png",
        "topic": "Education and Academics",
        "title": " Financial Trend of Education and Academics Sector",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-04-26 \\t 1000 \\t 1050 \\t 1090 \\t 950 \\n 2019-04-27 \\t 1020 \\t 1030 \\t 1060 \\t 990 \\n 2019-04-28 \\t 1100 \\t 1050 \\t 1150 \\t 1020 \\n 2019-04-29 \\t 1020 \\t 1050 \\t 1060 \\t 980 \\n 2019-04-30 \\t 1150 \\t 1160 \\t 1180 \\t 1100 \\n 2019-05-01 \\t 1050 \\t 1090 \\t 1110 \\t 1020 \\n 2019-05-02 \\t 1020 \\t 1050 \\t 1080 \\t 990 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart illustrates the financial trend of the Education and Academics Sector over a period of seven days. It plots the opening, closing, high, and low prices of each day. On 2019-04-26, the opening price was $1000 with a closing price of $1050, and the prices fluctuated between $1090 and $950. The pattern continues with daily opening and closing prices showing variations, with the highest closing price on 2019-04-30 at $1160 and the lowest opening price on 2019-05-02 at $1020. Highs peaked at $1180 on 2019-04-30 and lows dipped to $950 on 2019-04-26."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport pandas as pd \n\ndata = [['2019-04-26',1000,1050,1090,950],\n        ['2019-04-27',1020,1030,1060,990],\n        ['2019-04-28',1100,1050,1150,1020],\n        ['2019-04-29',1020,1050,1060,980],\n        ['2019-04-30',1150,1160,1180,1100],\n        ['2019-05-01',1050,1090,1110,1020],\n        ['2019-05-02',1020,1050,1080,990]]\ndf = pd.DataFrame(data, columns = ['Date','Open','Close','High','Low'])\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                       open=df['Open'],\n                       high=df['High'],\n                       low=df['Low'],\n                       close=df['Close'])])\n\nfig.update_layout(title='Financial Trend of Education and Academics Sector',\n                  xaxis_range=['2019-04-26','2019-05-02'],\n                  yaxis_range=[950,1180],\n                  width=850,\n                  height=850)\n\nfig.write_image(\"./candlestick_plotly/png/4_202312252244.png\")"
        },
        "QA": {
            "input": "What was the High Price on 2019-04-29?",
            "output": "1060"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_17",
        "img": "./candlestick/png/candlestick_17.png",
        "topic": "Social Media and the Web",
        "title": " Stock Performance of Social Media and the Web Companies - Weekly Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2020-05-10 \\t 80.5 \\t 82.3 \\t 84.2 \\t 78.8 \\n 2020-05-17 \\t 83.1 \\t 82.2 \\t 85.2 \\t 80.9 \\n 2020-05-24 \\t 83.4 \\t 82.7 \\t 84.2 \\t 81.5 \\n 2020-05-31 \\t 84.2 \\t 85.7 \\t 86.6 \\t 83.4 \\n 2020-06-07 \\t 85.6 \\t 86.9 \\t 87.2 \\t 84.9 \\n 2020-06-14 \\t 86.3 \\t 87.3 \\t 87.9 \\t 85.2 \\n 2020-06-21 \\t 87.5 \\t 86.9 \\t 88.2 \\t 86.2 \\n 2020-06-28 \\t 87.7 \\t 88.4 \\t 89.1 \\t 87.2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart presents weekly stock performance of unspecified social media and web companies. It illustrates Opening, Closing, High, and Low Prices ($) for dates ranging from 2020-05-10 to 2020-06-28. On 2020-05-10, the stock opened at $80.5 and closed at $82.3, with a high of $84.2 and a low of $78.8. The following weeks show a general upward trend in Closing Prices, reaching the highest closing at $88.4 on 2020-06-28, with that week's High at $89.1. The dataset demonstrates fluctuations within each week but indicates overall positive momentum towards the end of June."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport mplfinance as mpf\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = [['2020-05-10', 80.5, 82.3, 84.2, 78.8], \n        ['2020-05-17', 83.1, 82.2, 85.2, 80.9],\n        ['2020-05-24', 83.4, 82.7, 84.2, 81.5],\n        ['2020-05-31', 84.2, 85.7, 86.6, 83.4],\n        ['2020-06-07', 85.6, 86.9, 87.2, 84.9],\n        ['2020-06-14', 86.3, 87.3, 87.9, 85.2],\n        ['2020-06-21', 87.5, 86.9, 88.2, 86.2],\n        ['2020-06-28', 87.7, 88.4, 89.1, 87.2]]\n\ndf = pd.DataFrame(data, columns=['Date', 'Opening Price ($)', 'Closing Price ($)', 'High Price ($)', 'Low Price ($)'])\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)\ndf.rename(columns={'Opening Price ($)':'Open', 'Closing Price ($)':'Close', 'High Price ($)':'High', 'Low Price ($)':'Low'}, inplace=True)\n\nmpf.plot(df, figratio=(12,6), title='Stock Performance of Social Media and the Web Companies - Weekly Overview', \n         savefig=dict(fname='./candlestick_mplfinance/png/11_202312252310.png'))"
        },
        "QA": {
            "input": "What was the closing price ($) of the stock on 2020-06-28?",
            "output": "88.4"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_27",
        "img": "./candlestick/png/candlestick_27.png",
        "topic": "Law and Legal Affairs",
        "title": " Law and Legal Affairs Stock Performance - Weekly Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-04-26 \\t 750 \\t 780 \\t 800 \\t 720 \\n 2019-04-27 \\t 770 \\t 800 \\t 830 \\t 750 \\n 2019-04-28 \\t 740 \\t 780 \\t 810 \\t 700 \\n 2019-04-29 \\t 780 \\t 820 \\t 840 \\t 760 \\n 2019-04-30 \\t 800 \\t 850 \\t 870 \\t 780 \\n 2019-05-01 \\t 820 \\t 870 \\t 900 \\t 780 \\n 2019-05-02 \\t 840 \\t 880 \\t 910 \\t 800 \\n 2019-05-03 \\t 860 \\t 900 \\t 930 \\t 820 \\n 2019-05-04 \\t 880 \\t 920 \\t 950 \\t 840 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart titled \"Law and Legal Affairs Stock Performance - Weekly Overview\" represents the stock price movements over a period from April 26, 2019, to May 4, 2019. For each day, four prices are given: the opening price, closing price, the highest price, and the lowest price of the stock. For example, on April 26, the opening price was $750, the closing price was $780, the high was $800, and the low was $720. Each day follows a similar structure, with closing prices generally higher than opening prices, indicating an upward trend for the week."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndata = [['2019-04-26',750,780,800,720],\n        ['2019-04-27',770,800,830,750],\n        ['2019-04-28',740,780,810,700],\n        ['2019-04-29',780,820,840,760],\n        ['2019-04-30',800,850,870,780],\n        ['2019-05-01',820,870,900,780],\n        ['2019-05-02',840,880,910,800],\n        ['2019-05-03',860,900,930,820],\n        ['2019-05-04',880,920,950,840]]\n\ndf = pd.DataFrame(data, columns = ['Date','Open Price ($)','Closing Price ($)','High Price ($)','Low Price ($)']) \n\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                open=df['Open Price ($)'],\n                high=df['High Price ($)'],\n                low=df['Low Price ($)'],\n                close=df['Closing Price ($)'])])\nfig.update_layout(title_text='Law and Legal Affairs Stock Performance - Weekly Overview',\n                  xaxis_rangeslider_visible=False,\n                  xaxis_title=\"Date\",\n                  yaxis_title=\"Price ($)\",\n                  width=650,\n                  height=400)\nfig.write_image(\"./candlestick_plotly/png/12_202312251608.png\")"
        },
        "QA": {
            "input": "What was the low price of the stock on 2019-05-01?",
            "output": "$780"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_10",
        "img": "./candlestick/png/candlestick_10.png",
        "topic": "Arts and Culture",
        "title": " Arts and Culture Industry Stock Performance - Week Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-05-17 \\t 30 \\t 32 \\t 34 \\t 28 \\n 2019-05-24 \\t 31 \\t 34 \\t 35 \\t 29 \\n 2019-05-31 \\t 33 \\t 35 \\t 37 \\t 31 \\n 2019-06-07 \\t 34 \\t 36 \\t 38 \\t 32 \\n 2019-06-14 \\t 30 \\t 32 \\t 34 \\t 28 \\n 2019-06-21 \\t 31 \\t 34 \\t 36 \\t 29 \\n 2019-06-28 \\t 33 \\t 35 \\t 37 \\t 31 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This candlestick chart illustrates the weekly stock performance of a company within the Arts and Culture Industry over a series of dates in 2019. It shows opening and closing prices, as well as weekly high and low prices. The data begins on May 17th, with an opening price of $30 and a closing price of $32, and ends on June 28th, with an opening price of $33 and a closing price of $35. Highs and lows range from $28 to $38 throughout the observed period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport mplfinance as mpf\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame({'Date': ['2019-05-17', '2019-05-24', '2019-05-31', '2019-06-07', '2019-06-14', '2019-06-21', '2019-06-28'], \n                   'Opening Price ($)' : [30, 31, 33, 34, 30, 31, 33],\n                   'Closing Price ($)' : [32, 34, 35, 36, 32, 34, 35],\n                   'High Price ($)' : [34, 35, 37, 38, 34, 36, 37],\n                   'Low Price ($)' : [28, 29, 31, 32, 28, 29, 31]})\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)\ndf.rename({'Opening Price ($)': 'Open',\n           'Closing Price ($)': 'Close',\n           'High Price ($)': 'High',\n           'Low Price ($)': 'Low'}, axis=1, inplace=True)\n\nmpf.plot(df, type='candle', figratio=(12,6), title='Arts and Culture Industry Stock Performance - Week Overview', \n          savefig=dict(fname='./candlestick_mplfinance/png/8_202312252310.png'))"
        },
        "QA": {
            "input": "What was the closing price of the stock on the last available date in the dataset?",
            "output": "$35"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_12",
        "img": "./candlestick/png/candlestick_12.png",
        "topic": "Social Sciences and Humanities",
        "title": " Social Sciences and Humanities Market Index Performance Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-05-01 \\t 179 \\t 183 \\t 190 \\t 172 \\n 2019-05-08 \\t 182 \\t 179 \\t 192 \\t 177 \\n 2019-05-15 \\t 184 \\t 178 \\t 189 \\t 173 \\n 2019-05-22 \\t 181 \\t 185 \\t 196 \\t 175 \\n 2019-05-29 \\t 186 \\t 184 \\t 195 \\t 177 \\n 2019-06-05 \\t 184 \\t 187 \\t 197 \\t 180 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart represents the Social Sciences and Humanities Market Index performance over six dates. It displays the Opening Price, Closing Price, High Price, and Low Price for each date. On 2019-05-01, the Opening Price was $179, with the market closing at $183. The High and Low Prices were $190 and $172, respectively. On each subsequent date\u201405-08, 05-15, 05-22, 05-29, and 06-05\u2014the chart shows fluctuations in these price points, with Highs ranging from $189 to $197 and Lows from $172 to $180. Closing Prices fluctuated between $178 and $187 throughout the observed period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport mplfinance as mpf\n\ndata = [['2019-05-01', 179, 183, 190, 172], \n        ['2019-05-08', 182, 179, 192, 177],\n        ['2019-05-15', 184, 178, 189, 173],\n        ['2019-05-22', 181, 185, 196, 175],\n        ['2019-05-29', 186, 184, 195, 177],\n        ['2019-06-05', 184, 187, 197, 180]]\n\ndf = pd.DataFrame(data, columns=['Date', 'Open Price (US$)', 'Close Price (US$)', 'High Price (US$)', 'Low Price (US$)'])\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)\ndf.rename(columns={'Open Price (US$)': 'Open', \n                    'Close Price (US$)': 'Close', \n                    'High Price (US$)': 'High', \n                    'Low Price (US$)': 'Low'}, inplace=True)\n\nmpf.plot(df, type='candle', style=\"brasil\", update_width_config=dict(candle_linewidth=1.75), title='Social Sciences and Humanities Market Index Performance Overview', savefig=dict(fname='./candlestick_mplfinance/png/1_202312252258.png'), figratio=(12, 6))"
        },
        "QA": {
            "input": "What was the high price on 2019-05-29?",
            "output": "195"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_13",
        "img": "./candlestick/png/candlestick_13.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Financial Performance of Charity and Nonprofit Organizations - Weekly Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2020-08-01 \\t 43 \\t 44.2 \\t 45.9 \\t 41.5 \\n 2020-08-08 \\t 45.3 \\t 43.2 \\t 46.6 \\t 42.1 \\n 2020-08-15 \\t 40.9 \\t 41.9 \\t 44.2 \\t 38.7 \\n 2020-08-22 \\t 43.2 \\t 43.6 \\t 44.7 \\t 40.4 \\n 2020-08-29 \\t 41.3 \\t 42.8 \\t 45.1 \\t 40.5 \\n 2020-09-05 \\t 44 \\t 45.8 \\t 47.1 \\t 41.9 \\n 2020-09-12 \\t 44.5 \\t 45 \\t 46.3 \\t 43.1 \\n 2020-09-19 \\t 43.2 \\t 45.9 \\t 47.5 \\t 41.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart illustrates the weekly financial performance of charity and nonprofit organizations over the course of several weeks in 2020. Each entry contains a date with corresponding opening, closing, high, and low prices in dollars. On 2020-08-01, the opening price was $43, closing at $44.2, with a high of $45.9 and a low of $41.5. The data sequence continues weekly, showing fluctuations where, for example, on 2020-09-19, the opening price was $43.2, the closing price was $45.9, the high reached $47.5, and the low was at $41.5."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport mplfinance as mpf\nimport matplotlib.pyplot as plt\n\ndata = [['2020-08-01', 43, 44.2, 45.9, 41.5],\n        ['2020-08-08', 45.3, 43.2, 46.6, 42.1],\n        ['2020-08-15', 40.9, 41.9, 44.2, 38.7],\n        ['2020-08-22', 43.2, 43.6, 44.7, 40.4],\n        ['2020-09-05', 44, 45.8, 47.1, 41.9],\n        ['2020-09-12', 44.5, 45, 46.3, 43.1],\n        ['2020-09-19', 43.2, 45.9, 47.5, 41.5]]\n\ndf = pd.DataFrame(data, columns=['Date', 'Open', 'Close', 'High', 'Low'])\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)\n\nmpf.plot(df, type='candle', figratio=(12, 6), title='Financial Performance of Charity and Nonprofit Organizations - Weekly Overview', savefig=dict(fname='./candlestick_mplfinance/png/3_202312252310.png'))"
        },
        "QA": {
            "input": "On which date was the Low Price ($) the lowest?",
            "output": "2020-08-15"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_26",
        "img": "./candlestick/png/candlestick_26.png",
        "topic": "Government and Public Policy",
        "title": " Financial Trend of Government and Public Policy Sector",
        "csv": "Period \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2020-05-11 \\t 25.7 \\t 29.3 \\t 30.2 \\t 24.3 \\n 2020-05-18 \\t 26.2 \\t 30.7 \\t 31.5 \\t 25.4 \\n 2020-05-25 \\t 27 \\t 31.1 \\t 32.1 \\t 26.3 \\n 2020-06-01 \\t 27.5 \\t 32.7 \\t 33.6 \\t 27.1 \\n 2020-06-08 \\t 28.5 \\t 33.6 \\t 34.7 \\t 27.4 \\n 2020-06-15 \\t 29.2 \\t 34.2 \\t 35.1 \\t 28.1 \\n 2020-06-22 \\t 30 \\t 35.3 \\t 36.2 \\t 29.1 \\n 2020-06-29 \\t 30.5 \\t 36.1 \\t 37.2 \\t 29.8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart represents the financial trend of the government and public policy sector over a series of weeks in 2020. It shows data points including opening, closing, high, and low prices for each week. Starting with the week of 2020-05-11, the opening price was $25.7, closing at $29.3, with a high of $30.2 and a low of $24.3. The chart would depict incremental increases over time, with the final week listed, 2020-06-29, opening at $30.5, closing at $36.1, peaking at $37.2, and dipping to a low of $29.8."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndata = [['2020-05-11', 25.7, 29.3, 30.2, 24.3],\n        ['2020-05-18', 26.2, 30.7, 31.5, 25.4],\n        ['2020-05-25', 27, 31.1, 32.1, 26.3,],\n        ['2020-06-01', 27.5, 32.7, 33.6, 27.1],\n        ['2020-06-08', 28.5, 33.6, 34.7, 27.4],\n        ['2020-06-15', 29.2, 34.2, 35.1, 28.1],\n        ['2020-06-22', 30.0, 35.3, 36.2, 29.1],\n        ['2020-06-29', 30.5, 36.1, 37.2, 29.8]] \ndf = pd.DataFrame(data, columns = ['Period','Opening Price ($)','Closing Price ($)','High Price ($)','Low Price ($)'])\n\nfig = go.Figure(data=[go.Candlestick(x=df['Period'], open=df['Opening Price ($)'], high=df['High Price ($)'],\n                     low=df['Low Price ($)'], close=df['Closing Price ($)'])])\n\nfig.update_layout(title_text='Financial Trend of Government and Public Policy Sector', \n                  font_size=10,\n                  width=800,\n                  height=600,\n                  yaxis_title='Price ($)')\n\nfig.write_image('./candlestick_plotly/png/16_202312251608.png')"
        },
        "QA": {
            "input": "What was the high price of stock on 2020-06-15?",
            "output": "35.1"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_8",
        "img": "./candlestick/png/candlestick_8.png",
        "topic": "Social Sciences and Humanities",
        "title": " Financial Trends in Social Sciences and Humanities Over the Years",
        "csv": "Year \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2010-12-31 \\t 14.6 \\t 27.6 \\t 3.5 \\t 24 \\n 2011-12-31 \\t 15.2 \\t 27.9 \\t 2.4 \\t 22 \\n 2012-12-31 \\t 15.8 \\t 27.4 \\t 1.7 \\t 20 \\n 2013-12-31 \\t 16.6 \\t 27.1 \\t 2.7 \\t 19 \\n 2014-12-31 \\t 17.2 \\t 26.2 \\t 3.6 \\t 20 \\n 2015-12-31 \\t 17.5 \\t 26.2 \\t 2.3 \\t 19 \\n 2016-12-31 \\t 18.1 \\t 25.7 \\t 2.5 \\t 19 \\n 2017-12-31 \\t 18.6 \\t 24.7 \\t 2.3 \\t 17 \\n 2018-12-31 \\t 19.2 \\t 24.1 \\t 2.2 \\t 16 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart illustrates financial trends in social sciences and humanities over the years, detailing opening, closing, high, and low prices in dollars. For each year from 2010 to 2018, data points are presented. The year 2010 had an opening price of $14.6 and a closing price of $27.6, with high and low extremes at $3.5 and $24, respectively. In 2018, the opening price rose to $19.2, and the closing price dropped to $24.1, while the high and low were reported at $2.2 and $16. Each subsequent year in the dataset shows similar information through these four financial metrics."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport mplfinance as mpf\nimport matplotlib.pyplot as plt\n\ndata = {'Year':[2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018],\n        'Gross Domestic Product ($Billion)':[14.6, 15.2, 15.8, 16.6, 17.2, 17.5, 18.1, 18.6, 19.2],\n        'Unemployment Rate (% of Labour Force)':[27.6, 27.9, 27.4, 27.1, 26.2, 26.2, 25.7, 24.7, 24.1],\n        'Inflation Rate (%)':[3.5, 2.4, 1.7, 2.7, 3.6, 2.3, 2.5, 2.3, 2.2],\n        'Debt (% of GDP)':[24, 22, 20, 19, 20, 19, 19, 17, 16]}\n\ndf = pd.DataFrame(data)\ndf['Date'] = df['Year'].apply(lambda x: str(x)+ '-12-31')\ndf['Date'] = pd.to_datetime(df['Date'])\ndf = df.set_index('Date')\ndf = df.rename(columns={'Gross Domestic Product ($Billion)':'Open', 'Unemployment Rate (% of Labour Force)':'High', \n                        'Inflation Rate (%)':'Low', 'Debt (% of GDP)':'Close'})\n\nmpf.plot(df, type='candle', style='charles', figratio=(12, 6), title='Financial Trends in Social Sciences and Humanities Over the Years',\n          ylabel='Price ($)', ylabel_lower='', figscale=1.5, savefig=dict(fname='./candlestick_mplfinance/png/4_202312252310.png'))"
        },
        "QA": {
            "input": "What was the high price of the stock at the end of the year 2014?",
            "output": "$3.6"
        }
    },
    {
        "chart_type": "candlestick",
        "imgname": "candlestick_19",
        "img": "./candlestick/png/candlestick_19.png",
        "topic": "Tourism and Hospitality",
        "title": " Financial Trend in Tourism and Hospitality Sector Overview",
        "csv": "Date \\t Opening Price ($) \\t Closing Price ($) \\t High Price ($) \\t Low Price ($) \\n 2019-04-20 \\t 49.9 \\t 51.3 \\t 53.2 \\t 48.2 \\n 2019-04-21 \\t 52 \\t 51.2 \\t 53.4 \\t 50.1 \\n 2019-04-22 \\t 52.8 \\t 51.2 \\t 54.3 \\t 50.7 \\n 2019-04-23 \\t 50.7 \\t 51.8 \\t 53.1 \\t 49.2 \\n 2019-04-24 \\t 52.4 \\t 53.7 \\t 54.6 \\t 50.2 \\n 2019-04-25 \\t 53.3 \\t 54.9 \\t 56.3 \\t 51.2 \\n 2019-04-26 \\t 54.1 \\t 55.9 \\t 57.8 \\t 52.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The candlestick chart illustrates the financial trend in the tourism and hospitality sector over a week in April 2019. Daily data points include opening, closing, high, and low prices in US dollars. On April 20th, the opening price was $49.9, closing at $51.3, with a peak at $53.2 and a nadir at $48.2. The sequence follows similarly for the rest of the dates, ending on April 26th with an opening price of $54.1, a closing price of $55.9, a high of $57.8, and a low of $52.5. The chart tracks the sector's price volatility within this period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport mplfinance as mpf\n\ndata = [['2019-04-20',49.9,51.3,53.2,48.2],\n        ['2019-04-21',52,51.2,53.4,50.1],\n        ['2019-04-22',52.8,51.2,54.3,50.7],\n        ['2019-04-23',50.7,51.8,53.1,49.2],\n        ['2019-04-24',52.4,53.7,54.6,50.2],\n        ['2019-04-25',53.3,54.9,56.3,51.2],\n        ['2019-04-26',54.1,55.9,57.8,52.5]]\n\ndf = pd.DataFrame(data, columns = ['Date', 'Opening Price ($)', 'Closing Price ($)', 'High Price ($)', 'Low Price ($)'])\ndf['Date'] = pd.to_datetime(df['Date'])\ndf = df.set_index(df['Date'])\ndf = df.rename(columns = {'Opening Price ($)':'Open', 'Closing Price ($)':'Close', 'High Price ($)':'High', 'Low Price ($)':'Low'})\n\nplt.figure(figsize=(14,10))\nmpf.plot(df, type='candle', title='Financial Trend in Tourism and Hospitality Sector Overview', savefig=dict(fname='./candlestick_mplfinance/png/23_202312252310.png'))"
        },
        "QA": {
            "input": "What was the low price on 2019-04-23?",
            "output": "49.2"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "27",
        "img": "./funnel/png/27.png",
        "topic": "Social Sciences and Humanities",
        "title": " Academic Progress in Social Sciences and Humanities in 2021",
        "csv": "Stage \\t Value \\n Research Interests \\t 1000 \\n Literature Review \\t 800 \\n Data Collection \\t 600 \\n Analysis and Interpretation \\t 400 \\n Conclusion \\t 200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the academic progress stages in the Social Sciences and Humanities during 2021. It starts at the top with 'Research Interests' at 1000, narrows down to 'Literature Review' at 800, followed by 'Data Collection' at 600, then 'Analysis and Interpretation' at 400, and finally culminates at the 'Conclusion' stage with a value of 200."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Funnel(\n    y = [\"Research Interests\", \"Literature Review\", \"Data Collection\", \"Analysis and Interpretation\", \"Conclusion\"],\n    x = [1000, 800, 600, 400, 200],\n    textinfo = \"value+percent initial\",\n    textposition = \"inside\",\n    orientation = \"h\"\n)\n])\n\nfig.update_layout(\n    title = \"Academic Progress in Social Sciences and Humanities in 2021\",\n    font = dict(\n        family = \"Times New Roman\"\n    ),\n    width = 800,\n    height = 600,\n    showlegend = False\n)\n\nfig.write_image(\"../png/27.png\")"
        },
        "QA": {
            "input": "How many points is the \"Literature Review\" stage valued at?",
            "output": "800"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "222",
        "img": "./funnel/png/222.png",
        "topic": "Tourism and Hospitality",
        "title": " Exploring Tourism and Hospitality in 2021",
        "csv": "Stage \\t Value \\n Awareness \\t 5000 \\n Interest \\t 4500 \\n Consideration \\t 4000 \\n Intent \\t 3500 \\n Conversion \\t 3000 \\n Others \\t 2500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart titled \"Exploring Tourism and Hospitality in 2021\" illustrates the descending values at different stages. The chart starts with the 'Awareness' stage having a value of 5000, followed by 'Interest' with 4500, 'Consideration' with 4000, 'Intent' with 3500, 'Conversion' with 3000, and finally 'Others' with 2500."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\ndata = {'Stage':['Awareness','Interest','Consideration','Intent','Conversion','Others'],\n        'Number of Visitors':[5000,4500,4000,3500,3000,2500]}\n\nfig = go.Figure(go.Funnel(\n    y = data['Stage'],\n    x = data['Number of Visitors'],\n    textinfo = \"value+percent initial\",\n    textposition = \"inside\",\n    textfont_size = 12,\n    opacity = 0.8,\n    marker = {\"color\": [\"#00A6A6\", \"#00A680\", \"#60A0A6\",\"#F07878\", \"#F07844\", \"#F0A044\"]},\n))\nfig.update_layout(\n    title = {\"text\":\"Exploring Tourism and Hospitality in 2021\"},\n    font = {\"size\": 12},\n    legend_orientation=\"h\",\n    legend=dict(x=-.1, y=1.2),\n    autosize=False,\n    width=500,\n    height=500,\n    margin=go.layout.Margin(\n        l=50,\n        r=50,\n        b=100,\n        t=100,\n        pad=5\n    ),\n    paper_bgcolor='LightSteelBlue'\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_19-18-21_simulation_num200/png/88.png\")"
        },
        "QA": {
            "input": "What is the difference in value between the Interest and Conversion stages?",
            "output": "1500"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "217",
        "img": "./funnel/png/217.png",
        "topic": "Social Media and the Web",
        "title": " Online Engagement - Social Media and the Web in 2021",
        "csv": "Stage \\t Value \\n Visiting Website \\t 3000 \\n Signing Up \\t 2000 \\n Downloading App \\t 1500 \\n Subscribing \\t 1000 \\n Making Purchases \\t 500 \\n Others \\t 250 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This funnel chart represents various stages of online engagement through social media and the web in 2021. It starts with 3000 users visiting the website, followed by 2000 signing up. The next stage shows 1500 users downloading the app and then 1000 subscribing. Finally, 500 users are making purchases, with an additional 250 users engaging in other activities."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Funnel(\n    y = [\"Visiting Website\",\"Signing Up\",\"Downloading App\",\"Subscribing\",\"Making Purchases\",\"Others\"],\n    x = [3000,2000,1500,1000,500,250],\n    textinfo = \"value+percent initial\",\n    textposition = \"outside\",\n    marker = dict(\n        color = [\"#7FCE55\",\"#6D8CC7\",\"#FFCA2F\",\"#F18D9E\",\"#D6C3E6\",\"#9E9E9E\"],\n        line = dict(\n            color = \"white\",\n            width = 1.5\n        ),\n    ),\n    opacity = 0.8,\n    connector = dict(\n        line = dict(\n            color = \"white\",\n            width = 1.5\n        ),\n    )\n))\n\nfig.update_layout(\n    title = {\"text\":\"Online Engagement - Social Media and the Web in 2021\",\n             \"y\":0.95,\n             \"x\":0.5,\n             \"xanchor\":\"center\",\n             \"yanchor\":\"top\"},\n    paper_bgcolor = \"white\",\n    plot_bgcolor = \"white\",\n    font = dict(\n        family = \"Noto Sans\",\n        size = 12,\n        color = \"#212121\"\n    ),\n    autosize = False,\n    width = 800,\n    height = 600,\n    margin = dict(\n        l = 0,\n        r = 0,\n        b = 0,\n        t = 50,\n        pad = 4\n    ),\n    legend = dict(\n        x = 0.8,\n        y = 1\n    ),\n    showlegend = True\n)\n\nfig.write_image(\"../png/217.png\")"
        },
        "QA": {
            "input": "How many have signed up according to the data?",
            "output": "2000"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "214",
        "img": "./funnel/png/214.png",
        "topic": "Science and Engineering",
        "title": " Student Engagement in Science and Engineering in 2021",
        "csv": "Stage \\t Value \\n Exploration \\t 200 \\n Research \\t 170 \\n Experimentation \\t 140 \\n Development \\t 105 \\n Innovation \\t 80 \\n Production \\t 60 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart represents levels of student engagement in various stages of science and engineering in 2021. It starts with 'Exploration' at the widest part of the funnel with a value of 200. It then narrows through 'Research' with 170, 'Experimentation' at 140, 'Development' with 105, further constricting to 'Innovation' at 80, and ends with 'Production' being the narrowest segment at 60."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(go.Funnel(\n    y = [\"Exploration\", \"Research\", \"Experimentation\", \"Development\", \"Innovation\", \"Production\"],\n    x = [200,170,140,105,80,60],\n    textinfo = \"value+percent initial\",\n    textposition = \"inside\",\n    marker_color = '#59a2d8',\n    opacity = 0.9,\n    textfont_size = 12\n))\n\nfig.update_layout(\n    title = \"Student Engagement in Science and Engineering in 2021\",\n    font = dict(\n        size = 12\n    ),\n    legend=dict(\n        x=0.9,\n        y=1\n    ),\n    paper_bgcolor = '#f3f3f3',\n    width = 550,\n    height = 400,\n    plot_bgcolor = '#f3f3f3',\n    margin=dict(\n        l=25,\n        r=25,\n        b=50,\n        t=50\n    )\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_19-18-21_simulation_num200/png/64.png\")"
        },
        "QA": {
            "input": "How much higher is the Student Engagement value in the Research stage than in the Innovation stage?",
            "output": "90"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "156",
        "img": "./funnel/png/156.png",
        "topic": "Business and Finance",
        "title": " Business and Finance Growth in 2020",
        "csv": "Stage \\t Value \\n Initial Inquiry \\t 1000 \\n Feasibility Study \\t 888 \\n Project Planning \\t 666 \\n Implementation \\t 462 \\n Operation \\t 228 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart represents the shipments in the Transportation and Logistics Sector during various stages in 2021. At the Initial Inquiry stage, there are 1000 shipments. This number decreases to 888 shipments during the Feasibility Study stage. Further along, the Project Planning stage observes 666 shipments. When it comes to Implementation, the number declines to 462 shipments. Finally, at the Operation stage, there are 228 shipments."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nvalues = [1000, 888, 666, 462, 228]\nphases = ['Initial Inquiry', 'Feasibility Study', 'Project Planning', 'Implementation', 'Operation']\n\nfig = go.Figure(go.Funnel(\n    y = phases, \n    x = values,\n    textinfo = \"value+percent initial\",\n    marker = {\"color\": [\"#00BFFF\", \"#FFD700\", \"#FF8C00\", \"#FF4500\", \"#CD5C5C\"]},\n    opacity = 0.8\n))\n\nfig.update_layout(title_text=\"Business and Finance Growth in 2020\",\n                  font=dict(family=\"sans serif\"),\n                  width=1000,\n                  height=600,\n                  showlegend=True,\n                  margin=dict(l=20, r=20, t=40, b=20)\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_19-18-21_simulation_num200/png/151.png\")"
        },
        "QA": {
            "input": "What is the value of Shipments during the Project Planning stage?",
            "output": "666"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "148",
        "img": "./funnel/png/148.png",
        "topic": "Agriculture and Food Production",
        "title": " Food Production in Agriculture Sector in 2020",
        "csv": "Stage \\t Value \\n Seeding \\t 1000 \\n Planting \\t 800 \\n Fertilizing \\t 600 \\n Harvesting \\t 400 \\n Processing \\t 200 \\n Packaging \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the various stages of food production in the agriculture sector for the year 2020. The sequence starts with 'Seeding' at 1000 units, followed by 'Planting' with 800 units, and 'Fertilizing' at 600 units. The subsequent stage 'Harvesting' shows a decrease to 400 units, then 'Processing' further reduces to 200 units, and finally, 'Packaging' represents the smallest value with 100 units."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(data=[go.Funnel(\n    y = [\"Seeding\",\"Planting\",\"Fertilizing\",\"Harvesting\",\"Processing\",\"Packaging\"],\n    x = [1000,800,600,400,200,100],\n    textinfo = \"value+percent initial\",\n    textposition = \"inside\",\n    marker = dict(\n        color = [\"#0092FF\", \"#FF9200\",\"#1FDD1F\",\"#FF6D6D\",\"#006CFF\",\"#B45F04\"],\n        line = dict(width = 0.5, color = \"#000000\")\n    ),\n    opacity = 0.8,\n    connector = {\"line\":{\"color\":\"#000000\",\"dash\":\"dot\",\"width\":1.2}}\n)])\n\nfig.update_layout(\n    title = \"Food Production in Agriculture Sector in 2020\",\n    font = dict(family=\"sans-serif\", size=12),\n    xaxis = dict(showgrid=True, gridwidth=2, gridcolor=\"#F2F2F2\"),\n    yaxis = dict(showgrid=True, gridwidth=2, gridcolor=\"#F2F2F2\"),\n    width = 900,\n    height = 600\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_19-18-21_simulation_num200/png/136.png\")"
        },
        "QA": {
            "input": "What is the value at the Processing stage in the food production process?",
            "output": "200"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "251",
        "img": "./funnel/png/251.png",
        "topic": "Food and Beverage Industry",
        "title": " Customer Journey in the Food and Beverage Industry in 2021",
        "csv": "Stage \\t Value \\n Awareness \\t 100000 \\n Interest \\t 90000 \\n Consideration \\t 80000 \\n Intent \\t 60000 \\n Conversion \\t 40000 \\n Retention \\t 20000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the customer journey stages in the food and beverage industry for the year 2021. It starts with the widest segment, Awareness, at 100,000, followed by Interest at 90,000. Consideration comes next at 80,000, with Intent narrowing further to 60,000. The funnel then shows Conversion at 40,000 and ends with the narrowest segment, Retention, at 20,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport pandas as pd\n\ndata_dict = {'Stage':['Awareness','Interest','Consideration','Intent','Conversion','Retention'],\n             'Number of Customers':[100000,90000,80000,60000,40000,20000]}\n\ndf = pd.DataFrame(data_dict)\nfig = go.Figure()\nfig.add_trace(go.Funnel(\n    y = df['Stage'],\n    x = df['Number of Customers'],\n    textinfo = \"value+percent initial\",\n    textposition = \"inside\",\n    opacity=0.6,\n    marker = dict(\n        color='royalblue',\n    )\n))\n\nfig.update_layout(\n    title_text = \"Customer Journey in the Food and Beverage Industry in 2021\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=14,\n        color=\"#7f7f7f\"\n    ),\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    width=800,\n    height=600,\n    showlegend=True,\n    legend=dict(x=-.1, y=1.2),\n    margin=dict(l=20, r=20, t=40, b=20),\n    hovermode = 'x'\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_19-49-51_simulation_num200/png/47.png\")"
        },
        "QA": {
            "input": "How many more people are at the Interest stage compared to the Retention stage?",
            "output": "70000"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "301",
        "img": "./funnel/png/301.png",
        "topic": "Transportation and Logistics",
        "title": " Transportation and Logistics Services in 2021",
        "csv": "Stage \\t Value \\n Inquiry \\t 100.0 \\n Feasibility Study \\t 80.0 \\n Project Planning \\t 60.0 \\n Implementation \\t 40.0 \\n Operation \\t 20.0 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the stages of transportation and logistics services in 2021. It begins with the 'Inquiry' stage at a value of 100.0, then narrows down to 'Feasibility Study' at 80.0, 'Project Planning' at 60.0, 'Implementation' at 40.0, and reaches the 'Operation' stage at the narrowest point with a value of 20.0."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\n# set figure size\nfig = go.Figure(\n    layout=go.Layout(\n        title=\"Transportation and Logistics Services in 2021\",\n        font=dict(family=\"Poppins\"),\n        autosize=False,\n        width=900,\n        height=700,\n    )\n)\n\n# add funnel chart\nfig.add_trace(\n    go.Funnel(\n        y=[\"Inquiry\", \"Feasibility Study\", \"Project Planning\", \"Implementation\", \"Operation\"],\n        x=[100.0, 80.0, 60.0, 40.0, 20.0],\n        textinfo=\"value+percent initial\",\n        textposition=\"inside\",\n        opacity=0.7,\n        orientation=\"h\",\n        marker=dict(\n            color='rgb(55, 83, 109)'\n        )\n    )\n)\n\n# set background grid\nfig.update_layout(\n    paper_bgcolor='rgba(0, 0, 0, 0)',\n    plot_bgcolor='rgba(0, 0, 0, 0)',\n    yaxis=dict(\n        gridcolor='rgba(0, 0, 0, 0.2)',\n        zerolinecolor='rgba(0, 0, 0, 0)',\n        showgrid=True,\n        showline=False,\n    )\n)\n\n# set legend\nfig.update_layout(\n    legend=dict(\n        yanchor=\"top\",\n        y=1,\n        xanchor=\"left\",\n        x=1.02\n    )\n)\n\n# save figure\nfig.write_image(\"./simchart/datasets/funnel_2023-12-29_14-14-53_simulation_num50/png/2.png\")"
        },
        "QA": {
            "input": "What is the value at the Operation stage?",
            "output": "20.0"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "25",
        "img": "./funnel/png/25.png",
        "topic": "Technology and the Internet",
        "title": " Growth of User Subscribers in Technology and Internet Industry in 2020",
        "csv": "Stage \\t Value \\n Awareness \\t 20000 \\n Interest \\t 15000 \\n Consideration \\t 10000 \\n Intent \\t 5000 \\n Conversion \\t 1000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart represents the growth of user subscribers in the technology and internet industry through different stages in 2020. It begins with the 'Awareness' stage at the top, having 20,000 subscribers, followed by 'Interest' with 15,000, 'Consideration' with 10,000, 'Intent' with 5,000, and 'Conversion' at the narrow end with 1,000 subscribers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nfig = go.Figure(go.Funnel(\n    y = [\"Awareness\", \"Interest\", \"Consideration\", \"Intent\", \"Conversion\"],\n    x = [20000, 15000, 10000, 5000, 1000],\n    textinfo=\"value\",\n    orientation=\"h\",\n    marker_color='royalblue',\n    textposition=\"inside\"\n))\nfig.update_layout(\n    title = {\n        'text':\"Growth of User Subscribers in Technology and Internet Industry in 2020\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    font=dict(\n        family=\"Arial\",\n        color=\"#000000\"\n    ),\n    legend_orientation=\"h\",\n    legend=dict(x=0.5, y=1.1),\n    width=800,\n    height=600,\n    margin=dict(l=50, r=50, t=50, b=50),\n    showlegend=True\n)\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_17-38-49_simulation_num50/png/18.png\")"
        },
        "QA": {
            "input": "How many more subscribers are there at the Interest stage than at the Conversion stage?",
            "output": "14000 subscribers"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "8",
        "img": "./funnel/png/8.png",
        "topic": "Science and Engineering",
        "title": " Admissions in Science and Engineering in 2021",
        "csv": "Stage \\t Value \\n Enrollment \\t 1000 \\n Applicants \\t 800 \\n Application review \\t 400 \\n Interview \\t 200 \\n Admission \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart for Admissions in Science and Engineering in 2021 visualizes a multi-stage process with decreasing quantities. The stages begin with 1000 enrollments, lead to 800 applicants, narrow down to 400 for application review, reduce further to 200 for the interview phase, and culminate in 100 admissions."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\n\ndata = [\n    go.Funnel(\n        y=['Enrollment','Applicants','Application review','Interview','Admission'],\n        x=[1000,800,400,200,100],\n        textinfo='value',\n        orientation='h',\n        marker_color='royalblue'\n    )\n]\n\nfig = go.Figure(data)\n\nfig.update_layout(\n    title = 'Admissions in Science and Engineering in 2021',\n    font = dict(size=14),\n    legend_orientation=\"h\",\n    width=800,\n    height=600\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_17-38-49_simulation_num50/png/25.png\")"
        },
        "QA": {
            "input": "How many fewer applicants were there than enrollments?",
            "output": "200"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "238",
        "img": "./funnel/png/238.png",
        "topic": "Transportation and Logistics",
        "title": " Shipments in Transportation and Logistics Sector in 2021",
        "csv": "Stage \\t Value \\n Initial Inquiry \\t 1000 \\n Feasibility Study \\t 888 \\n Project Planning \\t 666 \\n Implementation \\t 462 \\n Operation \\t 228 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart represents the shipments in the Transportation and Logistics Sector during various stages in 2021. At the Initial Inquiry stage, there are 1000 shipments. This number decreases to 888 shipments during the Feasibility Study stage. Further along, the Project Planning stage observes 666 shipments. When it comes to Implementation, the number declines to 462 shipments. Finally, at the Operation stage, there are 228 shipments."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(go.Funnel(\n    y = [\"Initial Inquiry\", \"Feasibility Study\", \"Project Planning\", \"Implementation\", \"Operation\"],\n    x = [1000, 888, 666, 462, 228],\n    textinfo=\"value+percent initial\",\n    marker_color=\"darkblue\",\n    opacity=0.8,\n    connector = {\"line\":{\"color\":\"royalblue\",\"dash\":\"solid\",\"width\":1.5}},\n    textposition=\"inside\"\n))\n\nfig.update_layout(\n    template=\"plotly_white\",\n    title = {\n        'text': 'Shipments in Transportation and Logistics Sector in 2021',\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    legend={\"x\":0.8,\"y\":1,\"xanchor\":\"right\",\"yanchor\":\"top\"},\n    font={\"size\":14},\n    autosize=True\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_19-49-51_simulation_num200/png/2.png\", width=600, height=800, scale=2)\npio.write_image(fig, \"./simchart/datasets/funnel_2023-12-28_19-49-51_simulation_num200/png/2.png\", width=600, height=800, scale=2)"
        },
        "QA": {
            "input": "What is the value of Shipments during the Project Planning stage?",
            "output": "666"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "91",
        "img": "./funnel/png/91.png",
        "topic": "Manufacturing and Production",
        "title": " Process Optimization in Manufacturing and Production in 2021",
        "csv": "Stage \\t Value \\n Research and Development \\t 1000 \\n Design and Engineering \\t 800 \\n Production \\t 600 \\n Quality Assurance \\t 400 \\n Shipping \\t 200 \\n Others \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the values associated with different stages in the process optimization of manufacturing and production in 2021. It begins with Research and Development at the top with a value of 1000, followed by Design and Engineering at 800, Production at 600, Quality Assurance at 400, and Shipping at 200. The smallest value is attributed to Others at 100, representing the narrowest part of the funnel."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nfrom plotly.offline import plot\n\nlabels = ['Research and Development','Design and Engineering','Production','Quality Assurance','Shipping','Others']\nvalues = [1000,800,600,400,200,100]\n\nfig = go.Figure(go.Funnel(\n    name = \"Process Optimization in Manufacturing and Production in 2021\",\n    y = labels, \n    x = values,\n    textinfo = \"value+percent initial\",\n    textposition = \"inside\",\n    marker_color = '#1f77b4',\n))\n\nfig.update_layout(\n    title = {\"text\":\"Process Optimization in Manufacturing and Production in 2021\"}, \n    width = 1300,\n    height = 800,\n    plot_bgcolor = \"white\",\n    paper_bgcolor = \"white\",\n    font = dict(\n        family = \"Times New Roman\",\n        color = '#000000'\n    ),\n    margin = {'t':30},\n    showlegend = True\n)\n\nfig.write_image('./simchart/datasets/funnel_2023-12-28_18-05-01_simulation_num100/png/6.png')"
        },
        "QA": {
            "input": "What is the value associated with the Design and Engineering stage?",
            "output": "800"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "182",
        "img": "./funnel/png/182.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing and Production Performance in 2021",
        "csv": "Stage \\t Value \\n Research \\t 50 \\n Design \\t 40 \\n Production \\t 30 \\n Quality Control \\t 20 \\n Shipping \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart represents the Manufacturing and Production Performance in 2021 at different stages. The Research stage shows a value of 50, followed by Design with 40. Production has a value of 30, and Quality Control is at 20. The final stage, Shipping, has the lowest value with 10."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\n\ndata = [\n    {'stage': 'Research', 'num_workers': 50},\n    {'stage': 'Design', 'num_workers': 40},\n    {'stage': 'Production', 'num_workers': 30},\n    {'stage': 'Quality Control', 'num_workers': 20},\n    {'stage': 'Shipping', 'num_workers': 10}\n]\n\nfig = go.Figure(data=[go.Funnel(\n    y=list(map(lambda x:x['stage'], data)),\n    x=list(map(lambda x:x['num_workers'], data)),\n    textposition=\"inside\",\n    textinfo=\"value+percent initial\",\n    opacity=0.9,\n    marker_color='green')])\n\nfig.update_layout(title_text='Manufacturing and Production Performance in 2021',\n                  font={'family':'Times New Roman'},\n                  legend_orientation=\"h\",\n                  width=800,\n                  height=1000,\n                  margin=dict(l=0, r=0, t=50, b=50),\n                  paper_bgcolor=\"LightSteelBlue\")\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_19-18-21_simulation_num200/png/196.png\")"
        },
        "QA": {
            "input": "What is the total value for Research and Quality Control stages combined?",
            "output": "70"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "330",
        "img": "./funnel/png/330.png",
        "topic": "Agriculture and Food Production",
        "title": " Agri-Food Chain in 2021",
        "csv": "Stage \\t Value \\n Cultivation \\t 100 \\n Harvesting \\t 88.8 \\n Processing \\t 66.6 \\n Packaging \\t 46.2 \\n Distribution \\t 22.8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the declining value at each stage of the Agri-Food Chain in 2021, starting with Cultivation at 100, followed by Harvesting at 88.8, Processing at 66.6, Packaging at 46.2, and ending with Distribution at 22.8."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Funnel(\n    y = [\"Cultivation\", \"Harvesting\", \"Processing\", \"Packaging\", \"Distribution\"],\n    x = [100, 88.8, 66.6, 46.2, 22.8],\n    textinfo = \"value+percent initial\",\n    textposition = \"inside\",\n    opacity = 0.75,\n    marker = {\"color\": [\"#fac1b7\", \"#a9bb95\", \"#92d8d8\", \"#e2a3c8\", \"#8cd3c5\"]},\n))\n\nfig.update_layout(\n    title = {\"text\": \"Agri-Food Chain in 2021\", \"font\": {\"size\": 20}},\n    font = {\"family\": \"Courier New, monospace\", \"size\": 16},\n    paper_bgcolor = \"#f2f2f2\",\n    plot_bgcolor = \"#f2f2f2\",\n    height = 600,\n    width = 800,\n    showlegend = False,\n    margin={\"l\": 0, \"r\": 0, \"b\": 0, \"t\": 100},\n)\n\nfig.write_image(\"../png/15.png\")"
        },
        "QA": {
            "input": "What is the value at the Processing stage of the Agri-Food Chain?",
            "output": "66.6"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "36",
        "img": "./funnel/png/36.png",
        "topic": "Social Sciences and Humanities",
        "title": " Education Level in Social Sciences and Humanities in 2020",
        "csv": "Stage \\t Value \\n High School Diploma \\t 100 \\n Associate Degree \\t 80 \\n Bachelor's Degree \\t 60 \\n Master's Degree \\t 40 \\n Doctorate Degree \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the decreasing number of individuals with higher education levels in the field of Social Sciences and Humanities in 2020. Starting with 100 individuals holding a High School Diploma, the count narrows down to 80 with Associate Degrees, followed by 60 with Bachelor's Degrees. There are 40 individuals with Master's Degrees and the funnel ends with 20 holding Doctorate Degrees."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nfig = go.Figure(go.Funnel(\n    y = [\"High School Diploma\", \"Associate Degree\", \"Bachelor's Degree\", \"Master's Degree\", \"Doctorate Degree\"],\n    x = [100, 80, 60, 40, 20],\n    textinfo = \"value+percent initial\",\n    orientation = \"h\",\n    marker_color = 'darkblue'\n))\nfig.update_layout(\n    title_text = 'Education Level in Social Sciences and Humanities in 2020',\n    font = dict(\n        size = 12\n    )\n)\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_17-45-10_simulation_num50/png/20.png\")"
        },
        "QA": {
            "input": "What is the value difference between a Master's degree and a Doctorate degree?",
            "output": "20"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "163",
        "img": "./funnel/png/163.png",
        "topic": "Healthcare and Health",
        "title": " Health Care Progress for Patients in 2020",
        "csv": "Stage \\t Value \\n Initial Consultation \\t 1000 \\n Diagnosis \\t 900 \\n Treatment \\t 700 \\n Follow-up \\t 400 \\n Recovery \\t 200 \\n Others \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart represents different stages of healthcare progress for patients in 2020. It starts with the Initial Consultation stage at the top with a value of 1000, followed by Diagnosis with a value of 900. Treatment comes next with 700, followed by Follow-up with 400, and Recovery with 200. The funnel concludes with the Others category at the narrow end, having the smallest value of 100."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nfig = go.Figure(data=[go.Funnel(\n    y = [\"Initial Consultation\", \"Diagnosis\", \"Treatment\", \"Follow-up\", \"Recovery\", \"Others\"],\n    x = [1000, 900, 700, 400, 200, 100],\n    textinfo=\"value+percent initial\",\n    textposition=\"inside\",\n    opacity=0.65,\n    marker_color='#2A75BC',\n    marker_line_width=3,\n    marker_line_color='#2A75BC'\n)])\n\nfig.update_layout(\n    title=\"Health Care Progress for Patients in 2020\",\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    font=dict(\n        color=\"rgba(255,255,255,1)\"\n    ),\n    legend=dict(\n        orientation=\"h\",\n        xanchor=\"center\",\n        yanchor=\"top\",\n        x=.5,\n        y=-0.2\n    )\n)\nfig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')\nfig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_19-18-21_simulation_num200/png/162.png\", width=1300, height=800, scale=2)"
        },
        "QA": {
            "input": "What is the value for the \"Initial Consultation\" stage?",
            "output": "1000"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "49",
        "img": "./funnel/png/49.png",
        "topic": "Government and Public Policy",
        "title": " Policy Development in Government and Public Policy in 2021",
        "csv": "Stage \\t Value \\n Research \\t 100 \\n Drafting \\t 80 \\n Approval \\t 60 \\n Implementation \\t 40 \\n Evaluation \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the stages of policy development in government and public policy in 2021. The chart starts with 'Research' at the top, holding the highest value of 100. It is followed by 'Drafting' with a value of 80, 'Approval' with a value of 60, 'Implementation' with a value of 40, and finally 'Evaluation' at the narrowest part of the funnel with a value of 20."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(go.Funnel(\n    y = [\"Research\", \"Drafting\", \"Approval\", \"Implementation\", \"Evaluation\"],\n    x=[100, 80, 60, 40, 20],\n    textinfo = \"value+percent initial\",\n    orientation = \"h\",\n))\nfig.update_layout(\n    title = \"Policy Development in Government and Public Policy in 2021\"\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_17-45-10_simulation_num50/png/16.png\")\npio.write_image(fig, \"./simchart/datasets/funnel_2023-12-28_17-45-10_simulation_num50/png/16.png\")"
        },
        "QA": {
            "input": "How much greater is the value for Research compared to Implementation?",
            "output": "60"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "160",
        "img": "./funnel/png/160.png",
        "topic": "Energy and Utilities",
        "title": " Energy Project Development in 2021",
        "csv": "Stage \\t Value \\n Initial Inquiry \\t 100 \\n Exploration \\t 80 \\n Feasibility Study \\t 60 \\n Project Planning \\t 40 \\n Implementation \\t 20 \\n Operation \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the sequential stages of energy project development in 2021, with the count of projects decreasing at each phase. Initially, 100 projects started with an initial inquiry, followed by 80 in the exploration stage. The feasibility study stage saw 60 projects, and during project planning, the number reduced to 40. Implementation had 20 projects, and finally, the operation stage had the fewest with 10 projects."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\n\nvalues = [100, 80, 60, 40, 20, 10]\nlabels = ['Initial Inquiry', 'Exploration', 'Feasibility Study', 'Project Planning', 'Implementation', 'Operation']\n\nfig = go.Figure(go.Funnel(\n    y = labels,\n    x = values,\n    textinfo = \"value+percent initial\",\n    textfont_size = 14,\n    opacity = 0.7,\n    marker_color = 'royalblue',\n    marker_line_color = 'black',\n    marker_line_width = 0.5,\n    connector = dict(line_color=\"darkslategray\", line_width=1.5)\n))\n\nfig.update_layout(\n    title = 'Energy Project Development in 2021',\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    font_family = 'Roboto',\n    font_size = 16,\n    width = 500,\n    height = 500,\n    legend = dict(orientation=\"h\")\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_19-18-21_simulation_num200/png/158.png\")"
        },
        "QA": {
            "input": "What is the value for the 'Feasibility Study' stage?",
            "output": "60"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "198",
        "img": "./funnel/png/198.png",
        "topic": "Sports and Entertainment",
        "title": " Customer Engagement in Sports and Entertainment in 2021",
        "csv": "Stage \\t Value \\n Initial Interest \\t 1000 \\n Research \\t 800 \\n Consideration \\t 600 \\n Intent \\t 400 \\n Purchase \\t 200 \\n Follow-up \\t 150 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the stages of customer engagement in sports and entertainment in 2021. It starts with 'Initial Interest' at the top with 1000 participants and narrows down through 'Research' (800), 'Consideration' (600), 'Intent' (400), leading to the 'Purchase' stage (200), and eventually 'Follow-up' at the bottom with 150 participants."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Funnel(\n    y = [\"Initial Interest\", \"Research\", \"Consideration\", \"Intent\", \"Purchase\", \"Follow-up\"],\n    x = [1000, 800, 600, 400, 200, 150],\n    textinfo = \"value+percent initial\",\n    textposition = \"outside\",\n    marker = dict(\n        color = \"royalblue\",\n        line = dict(\n            color = \"royalblue\",\n            width = 2\n        )\n    ),\n    opacity = 0.75,\n    connector = {\"line\":{\"color\":\"royalblue\",\"dash\":\"solid\",\"width\":2}}\n))\n\nfig.update_layout(\n    title = {\"text\": \"Customer Engagement in Sports and Entertainment in 2021\",\n             \"x\": 0.5,\n             \"y\": 0.95,\n             \"xanchor\": \"center\",\n             \"yanchor\": \"top\"},\n    font = dict(family=\"monospace\"),\n    paper_bgcolor = \"white\",\n    plot_bgcolor = \"white\",\n    margin = dict(t=50, b=50, l=50, r=50),\n    width = 800,\n    height = 800,\n    hovermode = \"closest\",\n    showlegend = True,\n    legend_orientation = \"h\",\n    legend_x = -0.05,\n    legend_y = 1.1\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_19-18-21_simulation_num200/png/109.png\")"
        },
        "QA": {
            "input": "What is the difference in value between the Research and Purchase stages?",
            "output": "600"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "192",
        "img": "./funnel/png/192.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Management - HR Strategies in 2021",
        "csv": "Stage \\t Value \\n Recruitment \\t 1000 \\n Selection \\t 800 \\n Training \\t 650 \\n Retention \\t 400 \\n Rewards \\t 200 \\n Others \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart outlines various stages of the HR strategies in employee management, with different quantitative values for 2021. Starting with 'Recruitment', which has the highest value at 1000, it narrows down through 'Selection' at 800, 'Training' at 650, 'Retention' at 400, and 'Rewards' at 200, finally reaching 'Others' at 100, indicating a decreasing quantity at each subsequent stage."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Funnel(\n    y = [\"Recruitment\", \"Selection\", \"Training\", \"Retention\", \"Rewards\", \"Others\"],\n    x = [1000, 800, 650, 400, 200, 100],\n    textinfo = \"value+percent initial\",\n    marker_color = 'dodgerblue',\n    textposition = \"inside\",\n    textfont_size = 15,\n    opacity = 0.8,\n))\n\nfig.update_layout(\n    title = {\n        'text': \"Employee Management - HR Strategies in 2021\",\n        'x': 0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    font = dict(\n        size = 18,\n        color = \"black\"\n    ),\n    legend_orientation=\"h\",\n    plot_bgcolor=\"white\",\n    paper_bgcolor=\"white\",\n    width=1200,\n    height=800,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    )\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_19-18-21_simulation_num200/png/33.png\")"
        },
        "QA": {
            "input": "What is the value for Selection in the HR Strategies chart?",
            "output": "800"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "34",
        "img": "./funnel/png/34.png",
        "topic": "Retail and E-commerce",
        "title": " Customer Funnel in Retail and E-commerce in 2020",
        "csv": "Stage \\t Value \\n Awareness \\t 1000 \\n Interest \\t 800 \\n Consideration \\t 600 \\n Intent \\t 400 \\n Purchase \\t 200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart represents the different stages of the customer funnel in retail and e-commerce for the year 2020. It starts with the highest section, 'Awareness', showing a value of 1000. It then narrows down to 'Interest' with a value of 800, 'Consideration' at 600, 'Intent' at 400, and reaches the smallest section, 'Purchase', with a value of 200, indicating a decrease in volume as potential customers move through the sales process."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(go.Funnel(\n    y = [\"Awareness\", \"Interest\", \"Consideration\", \"Intent\", \"Purchase\"],\n    x = [1000, 800, 600, 400, 200],\n    textinfo=\"value+percent initial\",\n    marker = {\"color\": [\"#FFDB58\", \"#FFB300\", \"#FF8F00\", \"#FF6F00\", \"#FF3D00\"]},\n    opacity = 0.75,\n    textposition = \"inside\"\n))\n\nfig.update_layout(\n    title_text = \"Customer Funnel in Retail and E-commerce in 2020\",\n    font = dict(\n        family = \"Times New Roman\",\n        size = 18,\n        color = \"#7f7f7f\"\n    ),\n    width = 800,\n    height = 500,\n    showlegend = True,\n    legend_orientation=\"h\",\n    margin = {\"t\":50},\n    paper_bgcolor = \"#f2f5fa\"\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_17-45-10_simulation_num50/png/19.png\")"
        },
        "QA": {
            "input": "How many customers are in the Awareness stage of the Customer Funnel?",
            "output": "1000"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "96",
        "img": "./funnel/png/96.png",
        "topic": "Social Media and the Web",
        "title": " Online Engagement - Social Media and the Web in 2020",
        "csv": "Stage \\t Value \\n Awareness \\t 1000 \\n Interest \\t 800 \\n Consideration \\t 600 \\n Intent \\t 400 \\n Conversion \\t 200 \\n Others \\t 160 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart titled \"User Engagement - Social Media and the Web in 2020\" represents various stages of user engagement with decreasing values from the top to the bottom of the funnel. It starts with the 'Awareness' stage at the top, having a value of 1000, followed by 'Interest' with 800, 'Consideration' at 600, 'Intent' with 400, and 'Conversion' at 200. The lowest section is labeled 'Others', with a value of 160, indicating the smallest segment of user engagement in the funnel."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(data=[go.Funnel(\n    y = [\"Awareness\",\"Interest\",\"Consideration\",\"Intent\",\"Conversion\",\"Others\"],\n    x = [1000,800,600,400,200,160],\n    textinfo=\"value+percent initial\",\n    textposition=\"inside\",\n    opacity=0.65,\n    marker = {\"color\": [\"#1f77b4\", \"#ff7f0e\",\"#2ca02c\",\"#d62728\",\"#9467bd\",\"#8c564b\"]}\n)])\n\nfig.update_layout(title_text=\"Online Engagement - Social Media and the Web in 2020\", font=dict(family=\"Courier New, monospace\", size=14))\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\n\nfig.write_image(\"../png/68.png\", width=800, height=600, scale=2)"
        },
        "QA": {
            "input": "What is the value difference between the 'Interest' and 'Consideration' stages?",
            "output": "200"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "274",
        "img": "./funnel/png/274.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing Output in the Production Industry in 2021",
        "csv": "Stage \\t Value \\n Research and Development \\t 1000 \\n Production Planning \\t 800 \\n Manufacturing \\t 600 \\n Quality Control \\t 400 \\n Packaging \\t 200 \\n Shipping \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the manufacturing output at different stages in the production industry for the year 2021. Starting with Research and Development at the top with a value of 1000, the output decreases through each subsequent stage: Production Planning at 800, Manufacturing at 600, Quality Control at 400, Packaging at 200, and finally Shipping at the lowest point with a value of 100."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure()\nfig.add_trace(go.Funnel(\n    y = [\"Research and Development\", \"Production Planning\", \"Manufacturing\", \"Quality Control\", \"Packaging\", \"Shipping\"],\n    x = [1000, 800, 600, 400, 200, 100],\n    textinfo = 'value+percent initial',\n    textposition = 'inside',\n    marker_color = 'mediumturquoise'))\n\nfig.update_layout(title_text='Manufacturing Output in the Production Industry in 2021',\n                  xaxis_title_text='Number of Products',\n                  yaxis_title_text='Stage',\n                  font=dict(\n                      family=\"sans-serif\",\n                      size=12,\n                      color=\"Black\"\n                      ),\n                  width=800,\n                  height=600,\n                  paper_bgcolor='rgb(255, 255, 255)',\n                  margin=dict(l=50, r=50, t=50, b=50),\n                  legend_orientation=\"h\",\n                  legend=dict(x=0.5, y=-0.2))\n\nfig.write_image(file='../png/96.png')"
        },
        "QA": {
            "input": "What stage has a value of 800?",
            "output": "Production Planning"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "209",
        "img": "./funnel/png/209.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing and Production in 2021",
        "csv": "Stage \\t Value \\n Design \\t 100 \\n Research & Development \\t 80 \\n Production \\t 60 \\n Quality Control \\t 40 \\n Delivery \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart represents the different stages of manufacturing and production in 2021, with each stage having an associated value. The 'Design' stage is at the top with a value of 100, followed by 'Research & Development' with 80, 'Production' with 60, 'Quality Control' with 40, and 'Delivery' at the bottom with a value of 20."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(data=[go.Funnel(\n    y=[\"Design\", \"Research & Development\", \"Production\", \"Quality Control\", \"Delivery\"],\n    x=[100, 80, 60, 40, 20],\n    textinfo=\"value+percent initial\",\n    textposition=\"inside\",\n    marker_color='deeppink',\n    opacity=0.7\n)])\n\nfig.update_layout(\n    title_text=\"Manufacturing and Production in 2021\",\n    showlegend=False,\n    width=600,\n    height=700,\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)'\n)\n\nfig.write_image('./simchart/datasets/funnel_2023-12-28_19-18-21_simulation_num200/png/118.png')"
        },
        "QA": {
            "input": "What is the value associated with the Quality Control stage?",
            "output": "40"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "137",
        "img": "./funnel/png/137.png",
        "topic": "Food and Beverage Industry",
        "title": " Growth of Food and Beverage Industry in 2021",
        "csv": "Stage \\t Value \\n Introduction \\t 100000 \\n Consideration \\t 88800 \\n Intent \\t 73280 \\n Evaluation \\t 61184 \\n Purchase \\t 49347 \\n Retention \\t 40078 \\n Advocacy \\t 32262 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the growth stages of the Food and Beverage Industry in 2021, depicted by a descending series of values. It starts with the 'Introduction' stage at 100,000, followed by 'Consideration' at 88,800, and 'Intent' at 73,280. The 'Evaluation' stage shows a value of 61,184, leading to 'Purchase' at 49,347. The penultimate 'Retention' stage is at 40,078, and the final 'Advocacy' stage has a value of 32,262."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\nimport random\n\nstage_list = [\"Introduction\", \"Consideration\", \"Intent\", \"Evaluation\", \"Purchase\", \"Retention\", \"Advocacy\"]\nnumber_of_customers_list = [100000, 88800, 73280, 61184, 49347, 40078, 32262]\n\nfig = go.Figure(data=[go.Funnel(\n    y=stage_list, x=number_of_customers_list, textinfo=\"value+percent initial\",\n    marker_color='#7EC0EE',\n    opacity=0.7,\n    textposition=\"inside\",\n    textfont_size=20\n)])\n\nfig.update_layout(\n    title={\n        'text': \"Growth of Food and Beverage Industry in 2021\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    font=dict(\n        family=\"Calibri\",\n        size=18,\n    ),\n    width=1000,\n    height=700,\n    legend_orientation=\"h\",\n    legend=dict(x=-.1, y=1.2),\n    shapes=[dict(\n        type=\"rect\",\n        xref=\"paper\",\n        yref=\"paper\",\n        x0=0,\n        y0=0,\n        x1=1,\n        y1=1,\n        line=dict(\n            width=2,\n        ),\n    )],\n\n)\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_18-40-26_simulation_num100/png/99.png\")\npio.write_image(fig, \"./simchart/datasets/funnel_2023-12-28_18-40-26_simulation_num100/png/99.png\")"
        },
        "QA": {
            "input": "How many people are at the Evaluation stage according to the data?",
            "output": "61184"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "194",
        "img": "./funnel/png/194.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Donor Acquisition for Charity and Nonprofit Organizations in 2020",
        "csv": "Stage \\t Value \\n Initial Contact \\t 10000 \\n Awareness \\t 8000 \\n Interest \\t 6000 \\n Consideration \\t 4000 \\n Intent \\t 2000 \\n Conversion \\t 1000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This funnel chart illustrates the donor acquisition stages for charity and nonprofit organizations in 2020. Starting with the widest segment at the top, Initial Contact had 10,000 individuals. Awareness follows with 8,000, then Interest with 6,000, Consideration with 4,000, Intent with 2,000, and finally, the narrowest segment at the bottom, Conversion, with 1,000 individuals."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nfig = go.Figure(data=[go.Funnel(\n    y = [\"Initial Contact\",\"Awareness\",\"Interest\",\"Consideration\",\"Intent\",\"Conversion\"],\n    x = [10000,8000,6000,4000,2000,1000],\n    textinfo = \"value+percent initial\",\n    marker_color='#67a9cf',\n    textposition=\"inside\",\n    opacity=0.7,\n    textfont_size=20\n)])\n\nfig.update_layout(\n    title= {\"text\":\"Donor Acquisition for Charity and Nonprofit Organizations in 2020\",\n            'y':0.95,\n            'x':0.5,\n            'xanchor': 'center',\n            'yanchor': 'top'},\n    legend = {'x':0.8,'y':0.1},\n    margin=dict(l=20, r=20, t=40, b=20),\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    width=800,\n    height=600\n)\n\nfig.write_image(\"../png/35.png\")"
        },
        "QA": {
            "input": "How many individuals reached the Consideration stage?",
            "output": "4000"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "129",
        "img": "./funnel/png/129.png",
        "topic": "Law and Legal Affairs",
        "title": " Legal Cases Resolved in Law and Legal Affairs in 2020",
        "csv": "Stage \\t Value \\n Intake \\t 1000 \\n Review \\t 800 \\n Investigation \\t 500 \\n Negotiation \\t 300 \\n Resolution \\t 200 \\n Dismissal \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart outlines the stages of legal cases resolved in Law and Legal Affairs in 2020. Starting with the 'Intake' stage at 1000 cases, it narrows down to 'Review' with 800 cases, 'Investigation' with 500 cases, 'Negotiation' with 300 cases, 'Resolution' with 200 cases, and finally 'Dismissal' with 100 cases. Each stage represents a reduction in the number of cases progressing to the next phase."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nvalues = [1000, 800, 500, 300, 200, 100]\nstages = ['Intake', 'Review', 'Investigation', 'Negotiation', 'Resolution', 'Dismissal']\n\nfig = go.Figure()\nfig.add_trace(go.Funnel(\n    y = stages,\n    x = values,\n    textinfo = \"value+percent initial\",\n    marker_color='royalblue',\n    opacity=0.8,\n))\n\nfig.update_layout(\n    title={\n        'text': \"Legal Cases Resolved in Law and Legal Affairs in 2020\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'\n    },\n    font=dict(family='Courier New, monospace',\n              size=14,\n              color='#7f7f7f'),\n    width=800,\n    height=600,\n    showlegend=True,\n    legend=dict(x=0.8, y=1),\n    margin=go.layout.Margin(\n        l=50,\n        r=50,\n        b=100,\n        t=100,\n        pad=4\n    ),\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    hovermode='x',\n)\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_18-40-26_simulation_num100/png/86.png\")"
        },
        "QA": {
            "input": "What is the value of the Review stage in the Legal Cases Resolved in 2020?",
            "output": "800"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "292",
        "img": "./funnel/png/292.png",
        "topic": "Retail and E-commerce",
        "title": "Customer Journey in Retail and E-commerce in 2021",
        "csv": "Stage \\t Value \\n Discovery \\t 1000 \\n Research \\t 800 \\n Comparison \\t 600 \\n Purchase \\t 400 \\n Follow Up \\t 200 \\n Loyalty \\t 150 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart represents the stages of the customer journey in retail and e-commerce for the year 2021. At the widest part, \"Discovery\" involves 1000 instances, followed by \"Research\" with 800. The funnel narrows down to \"Comparison\" with 600, \"Purchase\" with 400, and \"Follow Up\" with 200. The narrowest part, \"Loyalty,\" has the lowest number at 150."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(go.Funnel(\n    y = [\"Discovery\",\"Research\",\"Comparison\",\"Purchase\",\"Follow Up\",\"Loyalty\"],\n    x = [1000,800,600,400,200,150],\n    textinfo = \"value+percent initial\",\n    textposition = \"inside\",\n    opacity = 0.65,\n    marker = {\"color\": [\"#30A66B\",\"#14BBF9\",\"#F2BD30\",\"#F1C43F\",\"#D36FF3\",\"#A926F5\"]},\n    connector = {\"line\":{\"color\":\"rgba(255,255,255,0.5)\"},\n                 \"visible\":True}\n))\n\nfig.update_layout(\n    title = {\"text\":\"Customer Journey in Retail and E-commerce in 2021\"},\n    legend=dict(\n        x=0.5,\n        y=0.95,\n    ),\n    font = {\"family\":\"Calibri\", \"size\":8},\n    plot_bgcolor = 'rgba(245, 246, 249, 1)',\n    paper_bgcolor = 'rgba(245, 246, 249, 1)',\n    height = 500,\n    width = 800,\n    margin = {\"b\":40, \"l\":60, \"r\":60, \"t\":50},\n    # showlegend = False,\n    # xaxis = {\"showgrid\":False},\n    # yaxis = {\"showgrid\":False}\n)\n\nfig.write_image(\"../png/41.png\")"
        },
        "QA": {
            "input": "What is the value for the Research stage in the customer journey?",
            "output": "800"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "186",
        "img": "./funnel/png/186.png",
        "topic": "Science and Engineering",
        "title": " Science and Engineering Projects Development in 2021",
        "csv": "Stage \\t Value \\n Research \\t 100 \\n Design \\t 85 \\n Development \\t 60 \\n Testing \\t 40 \\n Production \\t 20 \\n Distribution \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart portrays stages of science and engineering projects development in 2021. It highlights that the 'Research' stage had a value of 100, which tapers down through subsequent stages: 'Design' at 85, 'Development' at 60, 'Testing' at 40, 'Production' at 20, and finally 'Distribution' at 10, reflecting the quantity or efforts at each phase."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\ndata = [go.Funnel(\n    name = \"Science and Engineering Projects Development in 2021\",\n    textinfo = \"value+percent initial\",\n    opacity = 0.9,\n    x = [100, 85, 60, 40, 20, 10],\n    y = [\"Research\", \"Design\", \"Development\", \"Testing\", \"Production\", \"Distribution\"],\n    marker_color = '#d35400'\n)]\n\nlayout = go.Layout(title = \"Science and Engineering Projects Development in 2021\",\n                   font = dict(family = 'Arial'),\n                   showlegend=True,\n                   legend=dict(x=0, y=1, orientation=\"h\"),\n                   grid = dict(rows=1, columns=1),\n                   height = 700,\n                   width = 700,\n                   margin = dict(l=50, r=50, b=50, t=50, pad=4)\n)\n\nfig = go.Figure(data=data, layout=layout)\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.write_image(\"../png/25.png\")"
        },
        "QA": {
            "input": "What is the value difference between the 'Development' and 'Distribution' stages?",
            "output": "50"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "227",
        "img": "./funnel/png/227.png",
        "topic": "Science and Engineering",
        "title": " Science and Engineering Process in 2020",
        "csv": "Stage \\t Value \\n Research \\t 1000 \\n Design \\t 800 \\n Development \\t 600 \\n Testing \\t 400 \\n Production \\t 200 \\n Maintenance \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart represents the distribution of values across different stages of the Science and Engineering Process in 2020. The highest value is in the Research stage with 1000, followed by Design at 800, then Development with 600. Testing has a value of 400, Production drops down to 200, and Maintenance has the lowest value at 100. The chart visually depicts the descending order of values from the beginning of the process to the end."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nvalues = [1000, 800, 600, 400, 200, 100]\nphases = ['Research', 'Design', 'Development', 'Testing', 'Production', 'Maintenance']\n\nfig = go.Figure(go.Funnel(\n    y = phases,\n    x = values,\n    textinfo = \"value+percent initial\",\n    opacity = 0.7,\n    marker = dict(\n        color = ['#636EFA', '#EF553B', '#00CC96', '#AB63FA', '#FFA15A', '#19D3F3'],\n    ),\n    connector = {\"line\":{\"color\":\"royalblue\",\"dash\":\"solid\",\"width\":3}},\n))\n\nfig.update_layout(\n    title =  \"Science and Engineering Process in 2020\",\n    font = dict(size=11),\n    legend = dict(x = 0.1, y = -0.2),\n    margin=dict(l=20, r=20, t=45, b=15),\n    # annotations = [{\"text\":\"Source: Data.gov.uk\",\"x\": 0.1,\"y\": -0.2,\"showarrow\": False}],\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)'\n)\n\nfig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightPink')\nfig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightPink')\n\nfig.update_layout(width=800, height=600)\nfig.write_image(\"../png/227.png\")"
        },
        "QA": {
            "input": "What is the value at the Development stage of the Science and Engineering Process in 2020?",
            "output": "600"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "224",
        "img": "./funnel/png/224.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare Journey - Healthcare and Health in 2021",
        "csv": "Stage \\t Value \\n First Contact \\t 100000 \\n Diagnosis \\t 88800 \\n Treatment Plan \\t 73280 \\n Follow-up \\t 55400 \\n Recovery \\t 27700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart titled \"Healthcare Journey - Healthcare and Health in 2021\" represents the number of individuals at successive stages of a healthcare process. Initially, 100,000 individuals are at the 'First Contact' stage. The number decreases as the process advances, with 88,800 at 'Diagnosis', 73,280 proceeding to 'Treatment Plan', 55,400 moving to 'Follow-up', and 27,700 reaching the 'Recovery' stage."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(go.Funnel(\n    y = [\"First Contact\", \"Diagnosis\", \"Treatment Plan\", \"Follow-up\", \"Recovery\"],\n    x = [100000, 88800, 73280, 55400, 27700],\n    textinfo = \"value+percent initial\",\n    textfont = dict(\n        size = 18,\n        color = \"black\"\n    ),\n    hoverlabel = dict(\n        bgcolor = \"white\", \n        font = dict(\n            color = \"black\"\n        )\n    ),\n    marker = dict(\n        color = [\"#008080\",\"#3CB371\",\"#FFD700\",\"#FF8C00\",\"#CD5C5C\"],\n        line = dict(\n            color = \"black\",\n            width = 0.5\n        )\n    ),\n    connector = dict(\n        line = dict(\n            color = \"black\",\n            width = 0.5\n        )\n    )\n))\n\nfig.update_layout(\n    title = {\n        'text': \"Healthcare Journey - Healthcare and Health in 2021\",\n        'y': 0.95,\n        'x': 0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    font = dict(\n        color = \"black\",\n        size = 18\n    ),\n    paper_bgcolor = \"#FFFFFF\",\n    plot_bgcolor = \"#FFFFFF\",\n    yaxis = dict(\n        showgrid = True,\n        gridcolor = \"lightgrey\"\n    ),\n    legend = dict(\n        x = 0.87,\n        y = 0.95,\n        font = dict(\n            size = 18\n        )\n    ),\n    margin = dict(\n        l = 200,\n        r = 20,\n        b = 100,\n        t = 100,\n        pad = 4\n    ),\n    height = 500,\n    width = 950\n)\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_19-18-21_simulation_num200/png/92.png\")\npio.write_image(fig, \"./simchart/datasets/funnel_2023-12-28_19-18-21_simulation_num200/png/92.png\")"
        },
        "QA": {
            "input": "How many fewer individuals are at the Treatment Plan stage compared to the Diagnosis stage?",
            "output": "15520"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "115",
        "img": "./funnel/png/115.png",
        "topic": "Arts and Culture",
        "title": " Arts & Culture Engagement - A Funnel Analysis in 2020",
        "csv": "Stage \\t Value \\n Interest \\t 10000 \\n Engagement \\t 8000 \\n Participation \\t 6000 \\n Interaction \\t 4000 \\n Imitation \\t 2000 \\n Innovation \\t 1600 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the levels of engagement in the arts and culture sector during 2020. It begins with 'Interest' at the top with a value of 10,000, narrowing down to 'Engagement' with 8,000, then 'Participation' with 6,000, 'Interaction' with 4,000, 'Imitation' with 2,000, and finally, 'Innovation' at the narrowest point with a value of 1,600."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nstage = ['Interest', 'Engagement', 'Participation','Interaction', 'Imitation', 'Innovation']\nnumber_of_people = [10000, 8000, 6000, 4000, 2000, 1600]\n\nfig = go.Figure(go.Funnel(\n    y = stage,\n    x = number_of_people,\n    textinfo = \"value+percent initial\",\n    marker_color = \"royalblue\",\n    opacity = 0.8,\n    orientation='h'\n))\n\nfig.update_traces(textposition='inside')\nfig.update_layout(\n    title = {\n        'text': \"Arts & Culture Engagement - A Funnel Analysis in 2020\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    template=\"plotly_dark\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"#7f7f7f\"\n    ),\n    xaxis=dict(\n        title=\"Number of People\",\n        gridcolor='#222222'\n    ),\n    margin=dict(\n        l=200,\n        r=50,\n        b=100,\n        t=100,\n        pad=4\n    ),\n    width=800,\n    height=800,\n    showlegend=False\n)\n\nfig.write_image(r\"./simchart/datasets/funnel_2023-12-28_18-40-26_simulation_num100/png/59.png\")"
        },
        "QA": {
            "input": "What is the value for Participation in the Arts & Culture Engagement Funnel?",
            "output": "6000"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "112",
        "img": "./funnel/png/112.png",
        "topic": "Technology and the Internet",
        "title": " Technology and the Internet Usage in 2020",
        "csv": "Stage \\t Value \\n Initial Inquiry \\t 5000000 \\n Feasibility Study \\t 4000000 \\n Project Planning \\t 3000000 \\n Implementation \\t 2000000 \\n Operation \\t 1000000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the stages of technology and Internet usage in 2020, with values represented in a descending order. The stage of Initial Inquiry shows a value of 5,000,000. This is followed by the Feasibility Study stage at 4,000,000, then Project Planning with a value of 3,000,000. The Implementation stage has a value of 2,000,000, and the Operation stage maintains a value of 1,000,000."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(go.Funnel(\n    y = [\"Initial Inquiry\", \"Feasibility Study\", \"Project Planning\", \"Implementation\", \"Operation\"],\n    x = [5000000, 4000000, 3000000, 2000000, 1000000],\n    textinfo = \"value+percent initial\",\n    marker_color = \"blue\",\n    opacity = 0.7\n))\n\nfig.update_layout(\n    title = \"Technology and the Internet Usage in 2020\",\n    font = dict(\n        size = 10\n    ),\n    width = 500,\n    height = 600,\n    margin = dict(\n        l = 0,\n        r = 0,\n        t = 30,\n        b = 0\n    ),\n    legend = dict(\n        orientation = \"h\",\n        yanchor = \"top\",\n        y = 1.02,\n        xanchor = \"right\",\n        x = 1\n    ),\n    xaxis = dict(\n        showgrid = True,\n        showline = False,\n        showticklabels = False\n    ),\n    yaxis = dict(\n        showgrid = True,\n        showline = False,\n        showticklabels = True\n    )\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_18-40-26_simulation_num100/png/50.png\")"
        },
        "QA": {
            "input": "Which stage has a value of 4000000?",
            "output": "Feasibility Study"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "213",
        "img": "./funnel/png/213.png",
        "topic": "Real Estate and Housing Market",
        "title": " Real Estate and Housing Market Expansion in 2020",
        "csv": "Stage \\t Value \\n Initial Inquiry \\t 150 \\n Feasibility Study \\t 125 \\n Project Planning \\t 100 \\n Implementation \\t 80 \\n Operation \\t 50 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart provides a visual representation of the stages of real estate and housing market expansion in 2020. At the initial inquiry stage, the value stands at 150. The following stage, feasibility study, decreases to 125. The project planning phase drops further to a value of 100. Implementation stage shows a decrease to 80, and the operation stage has the lowest value at 50."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Funnel(\n        name = 'Real Estate and Housing Market Expansion in 2020',\n        y = [\"Initial Inquiry\",\"Feasibility Study\",\"Project Planning\",\"Implementation\",\"Operation\"],\n        x = [150,125,100,80,50],\n        textinfo = \"value+percent initial\",\n        textposition = \"inside\",\n        opacity = 0.7,\n        marker = dict(\n            color = 'royalblue',\n            line = dict(\n                color = '#ffffff',\n                width = 2\n            )\n        )\n    ))\n\nfig.update_layout(\n    title={\n        'text': \"Real Estate and Housing Market Expansion in 2020\",\n        'y':0.98,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    font=dict(\n        family=\"Calibri, monospace\",\n        size=18,\n        color=\"#000000\"\n    ))\n\nfig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='#eeeeee')\nfig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='#eeeeee')\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_19-18-21_simulation_num200/png/62.png\",width=800, height=600, scale=2)"
        },
        "QA": {
            "input": "What is the value difference between the Feasibility Study and the Implementation stages?",
            "output": "45"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "107",
        "img": "./funnel/png/107.png",
        "topic": "Energy and Utilities",
        "title": " Project Development in Energy Sector in 2021",
        "csv": "Stage \\t Value \\n Initial Inquiry \\t 100 \\n Feasibility Study \\t 80 \\n Project Planning \\t 60 \\n Implementation \\t 40 \\n Operation \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the different stages of project development within the energy sector in 2021, starting with the Initial Inquiry stage at the top, with a value of 100. The sequence continues downward with the Feasibility Study stage at a value of 80, followed by Project Planning at 60, then Implementation at 40, and finally, the Operation stage at the narrow end with a value of 20.\n"
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(go.Funnel(\n    name = \"Project Development in Energy Sector in 2021\",\n    y = [\"Initial Inquiry\",\"Feasibility Study\",\"Project Planning\",\"Implementation\",\"Operation\"],\n    x = [100,80,60,40,20],\n    textinfo = \"value+percent initial\",\n    textposition = \"inside\",\n    marker_color = 'royalblue',\n    opacity = 0.8))\n\nfig.update_layout(\n    title = {\n        'text': \"Project Development in Energy Sector in 2021\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    font=dict(family=\"Times New Roman\", size=18, color=\"Black\"),\n    showlegend=True,\n    width=800,\n    height=600,\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    xaxis_showgrid=False,\n    yaxis_showgrid=False)\nfig.write_image(\"../png/46.png\")"
        },
        "QA": {
            "input": "How much is the value at the Operation stage of the project development?",
            "output": "20"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "210",
        "img": "./funnel/png/210.png",
        "topic": "Law and Legal Affairs",
        "title": " Legal Processes - Law and Legal Affairs in 2021",
        "csv": "Stage \\t Value \\n Initial Consultation \\t 100.0 \\n Investigation \\t 80.0 \\n Research \\t 60.0 \\n Action Plan \\t 45.0 \\n Filing \\t 30.0 \\n Disposition \\t 15.0 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the different stages of legal processes in law and legal affairs in 2021, with values representing the number of cases or intensity at each stage. The stages start with 'Initial Consultation' having the highest value of 100.0, followed by 'Investigation' at 80.0, 'Research' at 60.0, 'Action Plan' with 45.0, 'Filing' at 30.0, and finally 'Disposition' showing the smallest value of 15.0. This sequence depicts a descending order of volume or activity as the legal process progresses from start to finish."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Funnel(\n    y = [\"Initial Consultation\", \"Investigation\", \"Research\", \"Action Plan\", \"Filing\", \"Disposition\"],\n    x = [100.0, 80.0, 60.0, 45.0, 30.0, 15.0],\n    textinfo = \"value+percent initial\",\n    textposition = \"inside\",\n    opacity = 0.9,\n    marker = {\"color\": [\"#003366\", \"#0099cc\", \"#66ccff\", \"#b3e6ff\", \"#ccffff\", \"#ffffff\"]},\n    connector = {\"line\": {\"color\": \"rgb(63, 63, 63)\", \"dash\": \"solid\", \"width\": 2}}\n))\n\nfig.update_layout(\n    title = {\"text\": \"Legal Processes - Law and Legal Affairs in 2021\",\n             \"x\": 0.5,\n             \"y\": 0.9,\n             \"xanchor\": \"center\",\n             \"yanchor\": \"top\"},\n    font = {\"size\": 15},\n    autosize = True,\n    width = 900,\n    height = 800,\n    showlegend = False,\n    xaxis = {\"title\": {\"text\": \"Number of Cases\"},\n             \"showgrid\": True,\n             \"ticksuffix\": \"%\",\n             \"showticklabels\": True\n            },\n    yaxis = {\"title\": {\"text\": \"Stage\"},\n             \"showgrid\": False,\n            }\n)\n\nfig.write_image(\"../png/210.png\")"
        },
        "QA": {
            "input": "What is the value at the Research stage in the Legal Processes chart?",
            "output": "60.0"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "306",
        "img": "./funnel/png/306.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare Journey - Healthcare and Health in 2021",
        "csv": "Stage \\t Value \\n Symptoms Observation \\t 20000 \\n Diagnostic Tests \\t 18000 \\n Diagnosis \\t 15000 \\n Treatment \\t 10000 \\n Follow-up \\t 5000 \\n Recovery \\t 2500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart outlines stages of the healthcare journey, quantifying each stage in the year 2021. The initial stage, Symptoms Observation, has the highest count at 20,000. This is followed by Diagnostic Tests with 18,000. Diagnosis is represented with 15,000, with Treatment at 10,000. The Follow-up stage shows 5,000, and the final Recovery stage has the lowest figure at 2,500."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nlabels = ['Symptoms Observation','Diagnostic Tests','Diagnosis','Treatment','Follow-up','Recovery']\nvalues = [20000, 18000, 15000, 10000, 5000, 2500]\n\nfig = go.Figure(data=[go.Funnel(\n    y=labels, \n    x=values,\n    textinfo=\"value+percent initial\",\n    marker_color='royalblue',\n    opacity=0.8\n)])\n\nfig.update_layout(\n    title_text=\"Healthcare Journey - Healthcare and Health in 2021\",\n    font=dict(\n        size=14,\n        family='Courier New, monospace'\n    ),\n    width=800,\n    height=600,\n    xaxis_title=\"Number of Patients\",\n    yaxis_title=\"Stage\",\n    showlegend=False,\n    margin=dict(l=200, r=50, t=80, b=100)\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-29_14-14-53_simulation_num50/png/3.png\")"
        },
        "QA": {
            "input": "How many people are estimated in the Recovery stage?",
            "output": "2500"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "303",
        "img": "./funnel/png/303.png",
        "topic": "Technology and the Internet",
        "title": " Customer Engagement in Technology and Internet in 2021",
        "csv": "Stage \\t Value \\n Awareness \\t 1000 \\n Interest \\t 800 \\n Consideration \\t 600 \\n Intent \\t 400 \\n Conversion \\t 200 \\n Others \\t 160 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart titled \"User Engagement - Social Media and the Web in 2020\" represents various stages of user engagement with decreasing values from the top to the bottom of the funnel. It starts with the 'Awareness' stage at the top, having a value of 1000, followed by 'Interest' with 800, 'Consideration' at 600, 'Intent' with 400, and 'Conversion' at 200. The lowest section is labeled 'Others', with a value of 160, indicating the smallest segment of user engagement in the funnel."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Funnel(\n    y = [\"Awareness\", \"Interest\", \"Consideration\", \"Intent\", \"Conversion\", \"Others\"],\n    x = [1000, 800, 600, 400, 200, 160],\n    textinfo = \"value+percent initial\",\n    textposition = \"outside\",\n    marker = dict(\n        line = dict(\n            width = 3,\n            color = \"black\"\n        )\n    )\n))\n\nfig.update_layout(\n    title = \"Customer Engagement in Technology and Internet in 2021\",\n    paper_bgcolor = \"white\",\n    plot_bgcolor = \"white\",\n    font = dict(\n        color = \"black\",\n        family = \"Courier New, monospace\"\n    ),\n    width = 800,\n    height = 500,\n    showlegend = True,\n    legend_orientation = \"h\",\n    legend = dict(\n        x = 0.2,\n        y = 1.1\n    ),\n    margin = dict(\n        l = 10,\n        r = 10,\n        b = 10,\n        t = 60\n    )\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-29_14-14-53_simulation_num50/png/21.png\")"
        },
        "QA": {
            "input": "What is the value difference between the 'Interest' and 'Consideration' stages?",
            "output": "200"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "70",
        "img": "./funnel/png/70.png",
        "topic": "Environment and Sustainability",
        "title": " Environmental Sustainability Engagement in 2021",
        "csv": "Stage \\t Value \\n Awareness \\t 1000 \\n Interest \\t 900 \\n Consideration \\t 750 \\n Intent \\t 600 \\n Conversion \\t 500 \\n Others \\t 400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart represents the Environmental Sustainability Engagement stages for the year 2021. It shows the narrowing values as the stages progress from Awareness with 1000 participants to Others at 400. Interest follows Awareness with 900 participants, Consideration decreases to 750, Intent further down to 600, and Conversion records 500. The chart illustrates a typical funnel progression with the number of participants reducing at each subsequent stage."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(go.Funnel(\n    y = [\"Awareness\",\"Interest\",\"Consideration\",\"Intent\",\"Conversion\",\"Others\"],\n    x = [1000,900,750,600,500,400],\n    textinfo=\"value+percent initial\",\n    textposition=\"inside\",\n    opacity = 0.65,\n    connector = {\"line\":{\"color\":\"rgba(63, 63, 63, 0.7)\"}},\n))\n\nfig.update_layout(\n    title = {\"text\":\"Environmental Sustainability Engagement in 2021\", \"yanchor\":\"top\",\"xanchor\":\"center\",\"x\":0.5},\n    legend_orientation=\"h\",\n    font=dict(family=\"Courier New, monospace\", size=12, color=\"#7f7f7f\"),\n    width = 800,\n    height = 800,\n    autosize = False\n)\n\npio.write_image(fig, \"./simchart/datasets/funnel_2023-12-28_18-05-01_simulation_num100/png/90.png\")"
        },
        "QA": {
            "input": "What is the difference in value between the Awareness and Others stages?",
            "output": "600"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "199",
        "img": "./funnel/png/199.png",
        "topic": "Sports and Entertainment",
        "title": " Audience Engagement in Sports and Entertainment in 2020",
        "csv": "Stage \\t Value \\n Awareness \\t 20000 \\n Interest \\t 15000 \\n Consideration \\t 10000 \\n Intent \\t 5000 \\n Conversion \\t 3000 \\n Others \\t 1500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart visualizes the audience engagement in different stages for the sports and entertainment sector in 2020. It demonstrates a descending order of engagement, beginning with 'Awareness' at 20,000, followed by 'Interest' at 15,000, 'Consideration' at 10,000, 'Intent' at 5,000, and 'Conversion' at 3,000, ending with 'Others' at 1,500."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nfig = go.Figure(go.Funnel(\n    y = ['Awareness','Interest','Consideration','Intent','Conversion','Others'],\n    x = [20000,15000,10000,5000,3000,1500],\n    textinfo = \"value+percent initial\",\n    marker_color = 'royalblue',\n    opacity = 0.7))\nfig.update_layout(title_text = 'Audience Engagement in Sports and Entertainment in 2020',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 12,\n                              color = \"#7f7f7f\"),\n                  width = 800, \n                  height = 600, \n                  legend_orientation=\"h\",\n                  legend=dict(x=0.5, y=-.1),\n                  paper_bgcolor='rgb(255,255,255)',\n                  plot_bgcolor='rgb(255,255,255)',\n                  xaxis_title=\"Number of Audience\",\n                  yaxis_title=\"Stage\",\n                  showlegend=True,\n                  margin=dict(l=50, r=50, t=50, b=50)\n                 )\nfig.write_image(\"../png/40.png\")"
        },
        "QA": {
            "input": "How many people are at the Consideration stage?",
            "output": "10000"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "196",
        "img": "./funnel/png/196.png",
        "topic": "Real Estate and Housing Market",
        "title": " Real Estate Market Performance in 2020",
        "csv": "Stage \\t Value \\n Inquiries \\t 1000 \\n Research \\t 900 \\n Offers \\t 800 \\n Negotiation \\t 700 \\n Closing \\t 500 \\n Follow-up \\t 400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the real estate market performance in 2020 through different stages from inquiries to follow-up. It begins with 1000 inquiries, followed by 900 in research, 800 offers presented, 700 in negotiation, 500 closings, and ends with 400 in the follow-up stage."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(go.Funnel(\n    y = [\"Inquiries\",\"Research\",\"Offers\",\"Negotiation\",\"Closing\",\"Follow-up\"],\n    x = [1000,900,800,700,500,400],\n    textinfo = \"value+percent initial\",\n    textposition = \"inside\",\n    textfont_size = 14,\n    opacity = 0.8,\n    marker = {\"color\": [\"#ba68c8\",\"#f06292\",\"#4fc3f7\",\"#ff8a65\",\"#90a4ae\",\"#ffd54f\"]},\n    connector = {\"line\":{\"color\":\"#999\",\"dash\":\"solid\"}}\n))\n\nfig.update_layout(\n    title = \"Real Estate Market Performance in 2020\",\n    font = {\"family\":\"sans-serif\"},\n    plot_bgcolor = \"white\",\n    paper_bgcolor = \"white\",\n    margin = {\"t\":50,\"b\":50,\"l\":50,\"r\":50},\n    width = 800,\n    height = 650,\n    showlegend = True,\n    legend_orientation = \"h\"\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_19-18-21_simulation_num200/png/39.png\")"
        },
        "QA": {
            "input": "What is the value at the Inquiries stage?",
            "output": "1000"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "193",
        "img": "./funnel/png/193.png",
        "topic": "Technology and the Internet",
        "title": " Consumer Journey for Technology and the Internet in 2021",
        "csv": "Stage \\t Value \\n Awareness \\t 3000 \\n Interest \\t 2500 \\n Consideration \\t 2000 \\n Intent \\t 1500 \\n Conversion \\t 1000 \\n Others \\t 800 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the stages of the consumer journey for technology and the internet in 2021. At the awareness stage, the value is 3000, which tapers down to interest at 2500, consideration at 2000, and intent at 1500. The conversion stage reflects a value of 1000, and the others category has the smallest value at 800."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(go.Funnel(\n    y = [\"Awareness\",\"Interest\",\"Consideration\",\"Intent\",\"Conversion\",\"Others\"],\n    x = [3000,2500,2000,1500,1000,800],\n    textinfo = \"value+percent initial\",\n    marker = {\"color\": [\"#E84A5F\", \"#F1F2F6\", \"#ECECEC\", \"#FF5A5F\", \"#FFC857\", \"#A4C2F4\"]},\n    textposition = \"inside\",\n    opacity = 0.8\n    ))\n\nfig.update_layout(\n    title = {\n        'text': \"Consumer Journey for Technology and the Internet in 2021\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'\n    },\n    font = {\"family\": \"Courier New, monospace\"},\n    showlegend = True,\n    legend_orientation=\"h\",\n    legend=dict(x=0, y=1.1),\n    paper_bgcolor=\"LightSteelBlue\",\n    plot_bgcolor='rgba(0,0,0,0)',\n    autosize=False,\n    width=700,\n    height=1000,\n    margin=dict(\n        l=10,\n        r=10,\n        b=100,\n        t=100,\n        pad=4\n    ),\n    annotations=[\n    dict(\n        x=0.5,\n        y=1,\n        xref='paper',\n        yref='paper',\n        text='Source: <a href=\"https://www.example.com\">example.com</a>',\n        showarrow=False\n    )\n    ]\n)\n\nfig.write_image(\"../png/34.png\")"
        },
        "QA": {
            "input": "What is the value for the Conversion stage in the Consumer Journey for Technology and the Internet in 2021?",
            "output": "1000"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "122",
        "img": "./funnel/png/122.png",
        "topic": "Social Sciences and Humanities",
        "title": " Academic Performance in Social Sciences and Humanities in 2020",
        "csv": "Stage \\t Value \\n Introduction \\t 200 \\n Research \\t 160 \\n Analysis \\t 128 \\n Application \\t 96 \\n Conclusion \\t 64 \\n Review \\t 32 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the academic performance stages in social sciences and humanities in 2020. It starts at the 'Introduction' stage with a value of 200, then narrows down to 'Research' with a value of 160, followed by 'Analysis' at 128. The 'Application' stage shows a value of 96, and it further constricts to 'Conclusion' with a value of 64, ending with the 'Review' stage at 32."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go \nimport plotly.io as pio\n\nfig = go.Figure(data=[go.Funnel(\n    y=['Introduction', 'Research', 'Analysis', 'Application', 'Conclusion', 'Review'],\n    x=[200, 160, 128, 96, 64, 32],\n    textinfo=\"value+percent initial\",\n    textposition=\"inside\",\n    opacity=0.8,\n    marker = dict(\n        color = ['#56C2FF', '#2D9AFF', '#0B72E1', '#064DAA', '#062F7B', '#021648'],\n        line = dict(width = 2)\n    )\n)])\n\nfig.update_layout(\n    title = {\n        'text': 'Academic Performance in Social Sciences and Humanities in 2020',\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'\n    },\n    xaxis_title=\"Number of Students\",\n    font=dict(\n        family=\"sans-serif\",\n        size=12,\n        color=\"black\"\n    ),\n    showlegend = False,\n    grid=dict(\n        rows=1,\n        columns=1,\n        pattern='independent'\n    ),\n    margin=dict(\n        l=50,\n        r=50,\n        t=50,\n        b=50\n    ),\n    width=600,\n    height=400,\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    hovermode='x',\n    legend_orientation=\"h\"\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_18-40-26_simulation_num100/png/70.png\")"
        },
        "QA": {
            "input": "How much greater is the value for the Introduction stage compared to the Review stage?",
            "output": "168"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "35",
        "img": "./funnel/png/35.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Acquisition in Human Resources and Employee Management in 2021",
        "csv": "Stage \\t Value \\n Recruiting \\t 1000 \\n Screening \\t 800 \\n Interview \\t 600 \\n Selection \\t 400 \\n Hiring \\t 200 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the employee acquisition process in human resources and employee management for the year 2021. It represents the number of individuals at each stage of the process: Recruiting (1000), Screening (800), Interview (600), Selection (400), and Hiring (200). The chart visually narrows down much like an actual funnel, reflecting the decreasing number of candidates as they progress through each successive stage."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nlabels = ['Recruiting', 'Screening', 'Interview', 'Selection', 'Hiring']\nvalues = [1000, 800, 600, 400, 200]\nfig = go.Figure(go.Funnel(\n    y = labels,\n    x = values,\n    textinfo = \"value+percent initial\",\n    orientation = \"h\",\n))\nfig.update_layout(title={'text':'Employee Acquisition in Human Resources and Employee Management in 2021',\n                         'y':0.90,'x':0.5,\n                         'xanchor': 'center', 'yanchor': 'top'},\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=10,\n        color=\"#7f7f7f\"\n    ),\n                  legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.02,\n    xanchor=\"right\",\n    x=1\n))\nfig.write_image('../png/35.png', width=800, height=400, scale=2)"
        },
        "QA": {
            "input": "What is the value difference between the Screening and Selection stages?",
            "output": "400"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "283",
        "img": "./funnel/png/283.png",
        "topic": "Government and Public Policy",
        "title": " Government and Public Policy - Progress Analysis in 2021",
        "csv": "Stage \\t Value \\n Development \\t 100 \\n Approval \\t 90 \\n Implementation \\t 80 \\n Review \\t 70 \\n Finalizing \\t 60 \\n Archive \\t 50 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart represents the progression through various stages in government and public policy analysis for the year 2021. It illustrates that the 'Development' stage has a value of 100, followed by 'Approval' with 90, 'Implementation' with 80, 'Review' with 70, 'Finalizing' with 60, and 'Archive' with the lowest value of 50.\n"
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(go.Funnel(\n    y = [\"Development\", \"Approval\", \"Implementation\", \"Review\", \"Finalizing\", \"Archive\"],\n    x = [100, 90, 80, 70, 60, 50],\n    textinfo = \"value+percent initial\",\n    textposition = \"inside\",\n    opacity = 0.7,\n    marker = {'color': ['#f963e7', '#f9e3e7', '#f9cce7', '#f9b3e7', '#f99ce7', '#f986e7']},\n    connector = {\"line\":{\"color\":\"#f7c2d0\", \n                    \"dash\":\"dashdot\",\n                    \"width\":3}},\n))\n\nfig.update_layout(\n    title =  \"Government and Public Policy - Progress Analysis in 2021\",\n    font = dict(family=\"Calibri,monospace\", size=14),\n)\n\nfig.update_layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    autosize=True,\n    width=1000,\n    height=600,\n    margin=dict(l=50, r=50, b=50, t=50, pad=4),\n    legend_orientation=\"h\",\n    legend=dict(x=0.2, y=-0.2)\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_19-49-51_simulation_num200/png/14.png\")"
        },
        "QA": {
            "input": "What is the value at the Implementation stage?",
            "output": "80"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "65",
        "img": "./funnel/png/65.png",
        "topic": "Tourism and Hospitality",
        "title": " Tourism Growth in Hospitality in 2023",
        "csv": "Stage \\t Value \\n Researching \\t 20000 \\n Booking \\t 15000 \\n Preparing \\t 10000 \\n Traveling \\t 7500 \\n Returning \\t 4000 \\n Others \\t 2500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates the different stages of tourism growth in hospitality in 2023. It starts with 'Researching' at 20,000, funneling down to 'Booking' with 15,000. The next stage, 'Preparing', decreases to 10,000, while 'Traveling' further reduces to 7,500. The 'Returning' stage shows a value of 4,000, and the 'Others' category has the smallest segment at 2,500."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nfig = go.Figure(go.Funnel(\n    y = [\"Researching\",\"Booking\",\"Preparing\",\"Traveling\",\"Returning\",\"Others\"],\n    x = [20000,15000,10000,7500,4000,2500],\n    textinfo = \"value+percent initial\",\n    textposition=\"inside\",\n))\nfig.update_layout(\n    title_text=\"Tourism Growth in Hospitality in 2023\",\n    font=dict(\n        family=\"Courier New, monospace\"\n    ),\n    width=800,\n    height=400\n)\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_18-05-01_simulation_num100/png/15.png\")"
        },
        "QA": {
            "input": "How many people are in the 'Preparing' stage according to the given data?",
            "output": "10000"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "78",
        "img": "./funnel/png/78.png",
        "topic": "Social Media and the Web",
        "title": " User Engagement - Social Media and the Web in 2020",
        "csv": "Stage \\t Value \\n Awareness \\t 1000 \\n Interest \\t 800 \\n Consideration \\t 600 \\n Intent \\t 400 \\n Conversion \\t 200 \\n Others \\t 160 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart titled \"User Engagement - Social Media and the Web in 2020\" represents various stages of user engagement with decreasing values from the top to the bottom of the funnel. It starts with the 'Awareness' stage at the top, having a value of 1000, followed by 'Interest' with 800, 'Consideration' at 600, 'Intent' with 400, and 'Conversion' at 200. The lowest section is labeled 'Others', with a value of 160, indicating the smallest segment of user engagement in the funnel."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(data=[go.Funnel(\n    y=[\"Awareness\", \"Interest\", \"Consideration\", \"Intent\", \"Conversion\", \"Others\"],\n    x=[1000, 800, 600, 400, 200, 160],\n    textinfo=\"value+percent initial\",\n    textposition=\"inside\",\n    opacity=0.65,\n    marker=dict(\n    color=\"royalblue\",\n    line=dict(\n        color=\"royalblue\",\n        width=2\n    )\n))])\n\nfig.update_layout(\n    title=\"User Engagement - Social Media and the Web in 2020\",\n    showlegend=False,\n    autosize=False,\n    width=1000,\n    height=600,\n    margin=dict(l=20, r=20, t=50, b=20),\n    paper_bgcolor=\"LightSteelBlue\",\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_18-05-01_simulation_num100/png/24.png\")"
        },
        "QA": {
            "input": "What is the value difference between the 'Interest' and 'Consideration' stages?",
            "output": "200"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "308",
        "img": "./funnel/png/308.png",
        "topic": "Education and Academics",
        "title": " Academic Progression in Education Sector in 2021",
        "csv": "Stage \\t Value \\n Awareness \\t 2000 \\n Inquiry \\t 1800 \\n Application \\t 1400 \\n Admission \\t 1000 \\n Enrollment \\t 800 \\n Graduation \\t 400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart visualizes the stages of academic progression within the education sector for the year 2021. It depicts a descending order of student numbers, beginning with 2000 at the 'Awareness' stage. The numbers decrease through the 'Inquiry' stage with 1800 students, 'Application' at 1400, 'Admission' with 1000 students, 'Enrollment' seeing a further drop to 800 students, and finally 'Graduation' with the lowest number at 400 students."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nfig = go.Figure(go.Funnel(\n    y = [\"Awareness\", \"Inquiry\", \"Application\", \"Admission\", \"Enrollment\", \"Graduation\"],\n    x = [2000, 1800, 1400, 1000, 800, 400],\n    textinfo = \"value+percent initial\",\n    marker = {\"color\": [\"#f8d5cc\", \"#f5bcb5\", \"#f2a59e\", \"#ef8d88\", \"#ec7571\", \"#e95e5a\"]},\n    textposition = \"inside\",\n    textfont_size = 15,\n))\n\nfig.update_layout(\n    title = {\n        'text': \"Academic Progression in Education Sector in 2021\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    font = {\"size\": 16},\n    width = 1000,\n    height = 800,\n    showlegend = True,\n    legend = {\"x\":0.85, \"y\":0.95},\n    margin = {\"l\": 0, \"r\": 0, \"b\": 0, \"t\": 50},\n    paper_bgcolor=\"LightSteelBlue\",\n    plot_bgcolor=\"LightSteelBlue\",\n)\n\nfig.write_image(\"../png/23.png\")"
        },
        "QA": {
            "input": "What is the value for the Application stage?",
            "output": "1400"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "143",
        "img": "./funnel/png/143.png",
        "topic": "Social Media and the Web",
        "title": " User Engagement in Social Media in 2020",
        "csv": "Stage \\t Value \\n Initial Inquiry \\t 1000 \\n Feasibility Study \\t 900 \\n Project Planning \\t 800 \\n Implementation \\t 700 \\n Operation \\t 600 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The funnel chart illustrates user engagement in social media during various stages in 2020. It begins with the Initial Inquiry stage, showing 1000 users, followed by the Feasibility Study with 900 users. The Project Planning stage drops slightly to 800 users. Implementation sees a further decrease to 700 users, and finally, the Operation stage concludes with 600 users engaged."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Funnel(\n    y = [\"Initial Inquiry\", \"Feasibility Study\", \"Project Planning\", \"Implementation\", \"Operation\"],\n    x = [1000, 900, 800, 700, 600],\n    textinfo = \"value+percent initial\",\n    opacity = 0.7,\n    marker = {\"color\": [\"red\", \"green\", \"blue\", \"yellow\", \"orange\"]},\n    text = [\"1000\", \"900\", \"800\", \"700\", \"600\"],\n    textposition = \"inside\",\n    hoverinfo = \"text\"\n))\nfig.update_layout(\n    title = \"User Engagement in Social Media in 2020\",\n    font = {\"family\": \"Courier New, monospace\", \"size\": 20},\n    shapes = [\n        {\"type\": \"line\", \"x0\": -0.5, \"y0\": -0.5, \"x1\": 1.5, \"y1\": -0.5, \"line\": {\"width\": 1, \"color\":\"LightGrey\"}},\n    ],\n    showlegend = False,\n    legend_orientation=\"h\",\n    legend_xanchor = \"center\",\n    legend_yanchor = \"top\",\n    legend_x = 0.5,\n    legend_y = 1.1,\n    autosize = True,\n    width = 800,\n    height = 600,\n    margin = {\"l\": 10, \"r\": 10, \"t\": 40, \"b\": 10},\n    paper_bgcolor = \"rgba(0,0,0,0)\",\n    plot_bgcolor = \"rgba(0,0,0,0)\",\n    xaxis = {\"showgrid\": False, \"zeroline\": False},\n    yaxis = {\"showgrid\": False, \"zeroline\": False},\n)\nfig.write_image(\"./simchart/datasets/funnel_2023-12-28_18-40-26_simulation_num100/png/30.png\")"
        },
        "QA": {
            "input": "What is the value of the Feasibility Study stage?",
            "output": "900"
        }
    },
    {
        "chart_type": "funnel",
        "imgname": "296",
        "img": "./funnel/png/296.png",
        "topic": "Environment and Sustainability",
        "title": " Green Initiative - Environment and Sustainability in 2021",
        "csv": "Stage \\t Value \\n Awareness \\t 20000 \\n Interest \\t 15000 \\n Consideration \\t 10000 \\n Intent \\t 7500 \\n Conversion \\t 5000 \\n Others \\t 3000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This funnel chart illustrates the different stages of engagement in the Green Initiative for Environment and Sustainability in 2021. The 'Awareness' stage has the highest engagement with 20,000 entities, followed by 'Interest' with 15,000. 'Consideration' comes next at 10,000, 'Intent' drops to 7,500, and 'Conversion' sees 5,000. The final stage labeled 'Others' has the lowest engagement, with 3,000 entities."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(go.Funnel(\n    y = [\"Awareness\", \"Interest\", \"Consideration\", \"Intent\", \"Conversion\", \"Others\"],\n    x = [20000, 15000, 10000, 7500, 5000, 3000],\n    textinfo = \"value+percent initial\",\n    textposition = \"inside\",\n    marker = {\"color\": [\"#FF7F0E\", \"#D62728\", \"#2CA02C\", \"#1F77B4\", \"#8C564B\", \"#9467BD\"]}\n))\n\nfig.update_layout(\n    title = {\"text\": \"Green Initiative - Environment and Sustainability in 2021\", \"x\": 0.5},\n    font = {\"family\": \"sans-serif\"},\n    legend = {\"x\": 0.1, \"y\": 0.7},\n    width = 800,\n    height = 900,\n    xaxis = {\"showgrid\": True},\n    yaxis = {\"showgrid\": True}\n)\n\nfig.write_image(\"./simchart/datasets/funnel_2023-12-29_14-14-53_simulation_num50/png/12.png\")\npio.write_image(fig, \"./simchart/datasets/funnel_2023-12-29_14-14-53_simulation_num50/png/12.png\")"
        },
        "QA": {
            "input": "What is the value of the Awareness stage?",
            "output": "20000"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "214",
        "img": "./histogram/png/214.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Job Satisfaction Levels in the Workplace",
        "csv": "Job Satisfaction Level \\t Number of Employees \\n Very Dissatisfied \\t 30 \\n Dissatisfied \\t 50 \\n Neutral \\t 120 \\n Satisfied \\t 200 \\n Very Satisfied \\t 150 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram represents the job satisfaction levels among employees in the workplace. It categorizes employees into five satisfaction levels: 'Very Dissatisfied' with 30 employees, 'Dissatisfied' with 50 employees, 'Neutral' with 120 employees, 'Satisfied' with 200 employees, and 'Very Satisfied' with 150 employees. The distribution of employees across these satisfaction levels provides insight into the overall job contentment within the workforce."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndata_labels = ['Very Dissatisfied', 'Dissatisfied', 'Neutral', 'Satisfied', 'Very Satisfied']\ndata = np.array([30, 50, 120, 200, 150])\nline_labels = ['Number of Employees']\n\n# Create a figure\nfig = plt.figure(figsize=(10, 7))\nax = fig.add_subplot(111)\n\n# Plotting the histogram\nbar_colors = plt.cm.tab10(np.linspace(0, 1, len(data_labels)))\nbars = ax.bar(data_labels, data, color=bar_colors, alpha=0.7)\n\n# Adding grid, labels, and title\nax.set_title('Employee Job Satisfaction Levels in the Workplace')\nax.set_xlabel('Job Satisfaction Level')\nax.set_ylabel('Number of Employees')\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Handling long text labels\nplt.xticks(rotation=45, ha='right', wrap=True)\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# Annotate each bar with the value\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, int(yval), ha='center', va='bottom')\n\n# Save the image\nplt.savefig('./plotchart/data-300/histogram/png/214.png', format='png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "How many employees have a 'Neutral' job satisfaction level?",
            "output": "120"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "60",
        "img": "./histogram/png/60.png",
        "topic": "Energy and Utilities",
        "title": " Annual Electricity Production by Energy Source",
        "csv": "Energy Source \\t Electricity Production (TWh) \\n Coal \\t 2400 \\n Natural Gas \\t 1800 \\n Nuclear \\t 800 \\n Hydro \\t 600 \\n Solar \\t 500 \\n Wind \\t 700 \\n Biomass \\t 400 \\n Geothermal \\t 300 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram presents annual electricity production in terawatt-hours (TWh) by different energy sources. Coal leads with 2400 TWh, followed by natural gas at 1800 TWh. Nuclear energy contributes 800 TWh, while hydro, wind, solar, biomass, and geothermal follow with 600, 700, 500, 400, and 300 TWh respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Given data\ndata_values = [\n    [2400],\n    [1800],\n    [800],\n    [600],\n    [500],\n    [700],\n    [400],\n    [300]\n]\ndata_labels = [\"Electricity Production (TWh)\"]\nline_labels = [\n    \"Coal\",\n    \"Natural Gas\",\n    \"Nuclear\",\n    \"Hydro\",\n    \"Solar\",\n    \"Wind\",\n    \"Biomass\",\n    \"Geothermal\"\n]\n\n# Transforming data into DataFrame\ndata_dict = {data_labels[0]: [row[0] for row in data_values]}\ndf = pd.DataFrame(data_dict, index=line_labels)\n\n# Plotting\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\n\ndf.plot(kind='bar', ax=ax, color='skyblue', grid=True)\n\n# Setting title, labels, and rotating x-tick labels\nax.set_title('Annual Electricity Production by Energy Source')\nax.set_xlabel('Energy Source')\nax.set_ylabel('Electricity Production (TWh)')\nplt.xticks(rotation=45, ha='right', wrap=True)\n\n# Adjusting layout\nplt.tight_layout()\n\n# Save figure\nplt.savefig('./plotchart/data-300/histogram/png/60.png')\n\n# Clear the current figure's state\nplt.clf()\n"
        },
        "QA": {
            "input": "How much electricity does wind energy contribute to the total production?",
            "output": "700 TWh"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "0",
        "img": "./histogram/png/0.png",
        "topic": "Agriculture and Food Production",
        "title": " Annual Crop Yields in Global Agriculture Production",
        "csv": "Crop Type \\t Yield (metric tons) \\n Wheat \\t 850 \\n Corn \\t 1230 \\n Rice \\t 960 \\n Soybeans \\t 730 \\n Vegetables \\t 1180 \\n Fruits \\t 540 \\n Cotton \\t 590 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram presents annual global agricultural production yields, measured in metric tons, for various crop types. Wheat shows a yield of 850 metric tons, followed by corn with 1230 metric tons. Rice yield stands at 960 metric tons, while soybeans are at 730 metric tons. Vegetables have a significant yield of 1180 metric tons. Fruits and cotton have lower yields, with fruits at 540 metric tons and cotton at 590 metric tons."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Data\ndata_labels = ['Yield (metric tons)']\nline_labels = ['Wheat', 'Corn', 'Rice', 'Soybeans', 'Vegetables', 'Fruits', 'Cotton']\ndata = [850, 1230, 960, 730, 1180, 540, 590]\ndf = pd.DataFrame(data, index=line_labels, columns=data_labels)\n\n# Create a figure with a single subplot\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(1, 1, 1)\n\n# Plotting the histogram\ndf.plot(kind='bar', ax=ax, color='skyblue', grid=True)\n\n# Set the title\nax.set_title('Annual Crop Yields in Global Agriculture Production')\n\n# Set rotation for x-axis labels if they're too long\nfor tick in ax.get_xticklabels():\n    tick.set_rotation(45)\n    tick.set_ha('right')\n    tick.set_wrap(True)\n\n# Automatically adjust subplot params so the subplot(s) fits into the figure area\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/data-300/histogram/png/0.png'\nplt.savefig(save_path)\n\n# Clear the current figure\nplt.clf()\n"
        },
        "QA": {
            "input": "How much is the yield for rice?",
            "output": "960 metric tons"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "41",
        "img": "./histogram/png/41.png",
        "topic": "Social Sciences and Humanities",
        "title": " Education Attainment Levels in the Adult Population",
        "csv": "Education Level \\t Percentage of Population \\n Less than High School \\t 12.5 \\n High School Graduate \\t 25.8 \\n Some College \\t 20.3 \\n Bachelor's Degree \\t 18.4 \\n Postgraduate Degree \\t 15.6 \\n Doctorate \\t 7.4 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram represents the education attainment levels within the adult population, segmented into six categories. It shows that 12.5% have less than a high school education, 25.8% are high school graduates, 20.3% have completed some college, 18.4% have obtained a bachelor's degree, 15.6% hold a postgraduate degree, and 7.4% have earned a doctorate."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\n\n# Data preparation\ndata_labels = ['Percentage of Population']\nline_labels = ['Less than High School', 'High School Graduate', 'Some College', \n               \"Bachelor's Degree\", 'Postgraduate Degree', 'Doctorate']\ndata = [12.5, 25.8, 20.3, 18.4, 15.6, 7.4]\n\n# Create a new figure with given figsize\nplt.figure(figsize=(10, 8))\n\n# Add subplot\nax = plt.subplot()\n\n# Create a horizontal bar chart\nax.barh(line_labels, data, color=plt.cm.tab10(range(len(data))), edgecolor='black')\n\n# Add grid with zorder to put the grid below the bars\nax.grid(which='major', linestyle='--', linewidth='0.5', color='grey', zorder=0)\n\n# Set title of the chart\nax.set_title('Education Attainment Levels in the Adult Population')\n\n# Handle long text of the labels with rotation or wrap\nax.xaxis.set_tick_params(rotation=45)\nax.set_xticklabels(ax.get_xticklabels(), wrap=True)\nax.set_xlabel('Percentage of Population')\n\n# Handle long text labels to avoid stacking or overwriting\nax.tick_params(axis='y', labelsize=10)\n\n# Automatically adjust subplot params for a nice fit\nplt.tight_layout()\n\n# Save the figure to the specified path with a high dpi for clarity\nsave_path = './histogram/png_val/41.png'\nplt.savefig(save_path, dpi=300)\n\n# Clear the current figure's state\nplt.clf()\n"
        },
        "QA": {
            "input": "What percentage of the population has at least a Bachelor's degree?",
            "output": "41.4%"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "243",
        "img": "./histogram/png/243.png",
        "topic": "Social Media and the Web",
        "title": " Monthly Active User Comparison Among Major Social Media Platforms",
        "csv": "Monthly Active Users (Millions) \\t Social Media Platform \\n Facebook \\t 2600 \\n YouTube \\t 2291 \\n WhatsApp \\t 2000 \\n Instagram \\t 1500 \\n WeChat \\t 1258 \\n TikTok \\t 1000 \\n Reddit \\t 430 \\n Twitter \\t 396 \\n LinkedIn \\t 310 \\n Snapchat \\t 306 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This histogram illustrates the monthly active users in millions for various social media platforms. Facebook leads with 2600 million active users. YouTube follows with 2291 million, WhatsApp with 2000 million, and Instagram with 1500 million. WeChat has 1258 million active users, with TikTok at 1000 million. The platforms with fewer active users include Reddit with 430 million, Twitter with 396 million, LinkedIn with 310 million, and Snapchat closely trailing at 306 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport os\n\n# Given data formatted for clarity and proper variable assignment\ndata_labels = ['Facebook', 'YouTube', 'WhatsApp', 'Instagram', 'WeChat', 'TikTok', 'Reddit', 'Twitter', 'LinkedIn', 'Snapchat']\ndata = [2600, 2291, 2000, 1500, 1258, 1000, 430, 396, 310, 306]\nline_labels = 'Monthly Active Users (Millions)'\n\n# Create a figure and a histogram\nfig = plt.figure(figsize=(14, 8))\nax = fig.add_subplot(111)\n\n# Plotting the histogram\nax.bar(data_labels, data, color='skyblue')\n\n# Adding grid, title, and labels\nplt.title('Monthly Active User Comparison Among Major Social Media Platforms')\nplt.xlabel('Social Media Platform')\nplt.ylabel(line_labels)\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Setting the rotation of the x-tick labels\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\n\n# Check directory and save the image to the specified path\nsave_path = './plotchart/data-300/histogram/png/243.png'\nos.makedirs(os.path.dirname(save_path), exist_ok=True)\nplt.savefig(save_path)\n\n# Clear the current figure state to avoid memory issues\nplt.clf()\n"
        },
        "QA": {
            "input": "Which social media platform has just over 300 million monthly active users?",
            "output": "Snapchat"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "240",
        "img": "./histogram/png/240.png",
        "topic": "Environment and Sustainability",
        "title": " CO2 Emissions by Energy Source",
        "csv": "Energy Source \\t CO2 Emissions (million tons) \\n Coal \\t 1570 \\n Oil \\t 1380 \\n Natural Gas \\t 820 \\n Biomass \\t 120 \\n Nuclear \\t 60 \\n Hydro \\t 30 \\n Wind \\t 20 \\n Solar \\t 10 \\n Geothermal \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram represents CO2 emissions by different energy sources. Coal leads with 1570 million tons of CO2 emissions. Following coal, oil emits 1380 million tons, and natural gas contributes 820 million tons. Biomass accounts for 120 million tons, while nuclear is responsible for 60 million tons. Hydroelectric power has emissions of 30 million tons, wind at 20 million tons, solar at 10 million tons, and geothermal at the lowest with 5 million tons of CO2 emissions."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\n\n# Given data\ndata = \"\"\"Energy Source, CO2 Emissions (million tons)\nCoal, 1570\nOil, 1380\nNatural Gas, 820\nBiomass, 120\nNuclear, 60\nHydro, 30\nWind, 20\nSolar, 10\nGeothermal, 5\"\"\"\n\n# Splitting the data into lines and then into labels and values\nlines = data.split('\\n')\ndata_labels = lines[0].split(', ')[1:]\nline_labels = [line.split(', ')[0] for line in lines[1:]]\nvalues = [int(line.split(', ')[1]) for line in lines[1:]]\n\n# Create a figure and a horizontal bar chart\nplt.figure(figsize=(10, 8))\nax = plt.subplot()\n\n# Horizontal bar chart\nax.barh(line_labels, values, color=plt.cm.tab20.colors)\n\n# Adding a grid\nax.grid(True, which='major', axis='x', linestyle='--', alpha=0.7)\n\n# Adding titles and labels\nplt.title('CO2 Emissions by Energy Source')\nplt.xlabel(data_labels[0])\nplt.ylabel('Energy Sources')\n\n# Rotate or wrap labels if too long\nax.tick_params(axis='y', labelrotation=45)\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\n\n# Adjust layout to prevent the content from overlapping or being too tight\nplt.autoscale(tight=True)\n\n# Saving the image\nsave_path = './plotchart/data-300/histogram/png/240.png'\nplt.savefig(save_path)\n\n# Clear the current image state to prevent reuse\nplt.clf()\n"
        },
        "QA": {
            "input": "Which energy sources are responsible for producing more than 1000 million tons of CO2 emissions?",
            "output": "Coal and Oil"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "235",
        "img": "./histogram/png/235.png",
        "topic": "Healthcare and Health",
        "title": " Average Hospital Visits Per Year by Age Group",
        "csv": "Age Group (Years) \\t Average Hospital Visits per Year \\n 0-10 \\t 2.1 \\n 11-20 \\t 1.8 \\n 21-30 \\t 2.2 \\n 31-40 \\t 2.5 \\n 41-50 \\t 3.0 \\n 51-60 \\t 3.8 \\n 61-70 \\t 4.6 \\n 71-80 \\t 5.2 \\n 81+ \\t 6.0 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram represents the average number of hospital visits per year across various age groups. Individuals aged 0-10 years average 2.1 visits, while those in the 11-20 years age group average 1.8 visits per year. The frequency increases with age; the 21-30 years group averages 2.2 visits, the 31-40 years group 2.5 visits, those aged 41-50 years average 3.0 visits, and the 51-60 years group 3.8 visits. The trend continues with 4.6 visits for 61-70 years, 5.2 for 71-80 years, and the highest average of 6.0 visits for those aged 81 and above."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\n\n# Given data\ndata_labels = ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81+']\ndata_values = [2.1, 1.8, 2.2, 2.5, 3.0, 3.8, 4.6, 5.2, 6.0]\nline_labels = ['Average Hospital Visits per Year']\n\n# Create figure\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\n\n# Plot data\nbars = plt.bar(data_labels, data_values, color=plt.cm.jet(range(len(data_values))), edgecolor='k')\n\n# Add grid\nplt.grid(axis='y', linestyle='--', linewidth=0.5)\n\n# Add title and labels\nplt.title('Average Hospital Visits Per Year by Age Group')\nplt.ylabel('Average Visits')\n\n# Customize x-axis labels\nplt.setp(ax.get_xticklabels(), rotation=30, horizontalalignment='right', wrap=True)\n\n# Automatically adjust subplot params for the figure size\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/data-300/histogram/png/235.png'\nplt.savefig(save_path)\n\n# Clear the current figure state\nplt.clf()\n"
        },
        "QA": {
            "input": "Which age group has the fewest average hospital visits per year according to the chart?",
            "output": "11-20"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "88",
        "img": "./histogram/png/88.png",
        "topic": "Business and Finance",
        "title": " Frequency of Profit Margins for Various Businesses",
        "csv": "Profit Margins (%) \\t Frequency \\n 0-5 \\t 12 \\n 5-10 \\t 20 \\n 10-15 \\t 18 \\n 15-20 \\t 22 \\n 20-25 \\t 15 \\n 25-30 \\t 10 \\n 30-35 \\t 4 \\n 35-40 \\t 2 \\n 40-45 \\t 1 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram represents the frequency of profit margins (in percentage ranges) for various businesses. Profit margins of 0-5% have a frequency of 12, the 5-10% range is more common with a frequency of 20, and the 10-15% margin has a frequency of 18. Profit margins of 15-20% show the highest frequency at 22. The occurrences decrease as the margins increase, with 15 for the 20-25% range, 10 for 25-30%, and diminishing to a frequency of 4 and 2 for the 30-35% and 35-40% ranges, respectively. Rarely, businesses show profit margins of 40-45%, marked by a frequency of 1."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Data\ndata_labels = ['Profit Margins (%)', 'Frequency']\nline_labels = ['0-5', '5-10', '10-15', '15-20', '20-25', '25-30', '30-35', '35-40', '40-45']\ndata = [12, 20, 18, 22, 15, 10, 4, 2, 1]\n\n# Construct data into DataFrame\ndf = pd.DataFrame(list(zip(line_labels, data)), columns=data_labels)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot using seaborn\nsns.barplot(x='Profit Margins (%)', y='Frequency', data=df, ax=ax, palette=\"viridis\")\n\n# Set title and labels\nax.set_title('Frequency of Profit Margins for Various Businesses')\nax.set_xlabel('Profit Margins (%)')\nax.set_ylabel('Frequency')\n\n# Rotate x labels if necessary\nplt.xticks(rotation=45)\n\n# Set the style\nsns.set_style(\"whitegrid\")\n\n# Automatically adjust subplot params to give specified padding.\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./plotchart/data-300/histogram/png/88.png')\n\n# Clear the current figure to make sure the state is clean for future plotting\nplt.clf()\n"
        },
        "QA": {
            "input": "What profit margin range has the lowest frequency of businesses?",
            "output": "40-45%"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "232",
        "img": "./histogram/png/232.png",
        "topic": "Social Sciences and Humanities",
        "title": " Educational Attainment and the Number of Individuals in a Population",
        "csv": "Years of Education \\t  Number of Individuals (in thousands) \\n 0-5 \\t  1500 \\n 6-8 \\t  2400 \\n 9-11 \\t  3500 \\n 13-15 \\t  4500 \\n 16-18 \\t  3000 \\n 19-21 \\t  1500 \\n 22-24 \\t  1000 \\n 25+ \\t  600 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram represents educational attainment in terms of years of education and the corresponding number of individuals (in thousands). Individuals with 0-5 years of education tally at 1500, those with 6-8 years at 2400, and 9-11 years at 3500. The count rises for 13-15 years of education to 4500, then drops to 3000 for 16-18 years, and further to 1500 for 19-21 years. A smaller number of individuals, 1000, have 22-24 years of education, and the least, 600, with 25+ years."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Given data\ndata_string = \"\"\"0-5,1500\n6-8,2400\n9-11,3500\n12,No data\n13-15,4500\n16-18,3000\n19-21,1500\n22-24,1000\n25+,600\"\"\"\n\n# Processing the data into the required format\ndata_lines = data_string.split('\\n')\ndata_labels = ['Years of Education', 'Number of Individuals (in thousands)']\nline_labels = []\ndata = []\nfor line in data_lines:\n    parts = line.split(',')\n    line_labels.append(parts[0])\n    # Exclude 'No data' values\n    if parts[1] != 'No data':\n        data.append(int(parts[1]))\n    else:\n        data.append(None)\n\n# Creating the DataFrame\ndf = pd.DataFrame(data={'Years of Education': line_labels, \n                        'Number of Individuals (in thousands)': data})\n\n# Drop rows with 'No data'\ndf = df.dropna()\n\n# Plotting the histogram\nplt.figure(figsize=(10, 8))\nax = plt.subplot()\ndf.plot(kind='barh', x='Years of Education', y='Number of Individuals (in thousands)', \n        ax=ax, legend=False, color='skyblue')\n\n# Setting title and labels\nplt.title('Educational Attainment and the Number of Individuals in a Population')\nplt.xlabel('Number of Individuals (in thousands)')\n\n# Adjusting the text for long labels\nax.tick_params(axis='both', which='major', labelsize=10)\nplt.xticks(rotation=45)\nplt.yticks(wrap=True)\n\n# Adding background grid\nplt.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Automatically adjust subplot params so the subplot(s) fits into the figure area\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./plotchart/data-300/histogram/png/232.png', format='png')\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "How many individuals have 9-11 years of education?",
            "output": "3500"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "53",
        "img": "./histogram/png/53.png",
        "topic": "Agriculture and Food Production",
        "title": " Average Crop Yields in Agriculture Sector",
        "csv": "Crop Type \\t Yield (tons per hectare) \\n Wheat \\t 3.2 \\n Rice \\t 4.1 \\n Maize \\t 5.8 \\n Barley \\t 2.9 \\n Soybean \\t 2.1 \\n Potato \\t 17.5 \\n Tomato \\t 25.3 \\n Lettuce \\t 3.4 \\n Carrot \\t 8.7 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram presents average crop yields measured in tons per hectare. Wheat yields average 3.2 tons, while rice stands at 4.1 tons. Maize yields are higher at 5.8 tons per hectare. Barley and soybean have lower yields of 2.9 and 2.1 tons respectively. Potato and tomato yields are significantly higher, at 17.5 and 25.3 tons per hectare. Meanwhile, lettuce and carrot yields are at 3.4 and 8.7 tons per hectare respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport os\n\n# Given data\ndata_labels = ['Yield (tons per hectare)']\nline_labels = ['Wheat', 'Rice', 'Maize', 'Barley', 'Soybean', 'Potato', 'Tomato', 'Lettuce', 'Carrot']\ndata = [3.2, 4.1, 5.8, 2.9, 2.1, 17.5, 25.3, 3.4, 8.7]\n\n# Transform data into DataFrame for Seaborn\ndf = pd.DataFrame(data, index=line_labels, columns=data_labels)\n\n# Create figure and axis\nplt.figure(figsize=(10, 8))\nax = plt.subplot()\n\n# Create horizontal histogram using seaborn\nsns.barplot(x=data_labels[0], y=df.index, data=df, orient='h', palette='viridis')\n\n# Set title and labels\nax.set_title('Average Crop Yields in Agriculture Sector', fontsize=16)\nax.set_xlabel(data_labels[0], fontsize=14)\nax.set_ylabel('Crop Type', fontsize=14)\n\n# Rotate x-axis labels if too long\nplt.xticks(rotation=45)\n\n# Adjust layout to prevent content from being cut off\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/data-300/histogram/png/53.png'\nif not os.path.exists(os.path.dirname(save_path)):\n    os.makedirs(os.path.dirname(save_path))\n\nplt.savefig(save_path, dpi=300)\n\n# Clear current figure\nplt.clf()\n"
        },
        "QA": {
            "input": "What is the difference in yield between potato and tomato crops?",
            "output": "7.8 tons per hectare"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "256",
        "img": "./histogram/png/256.png",
        "topic": "Environment and Sustainability",
        "title": " Global CO2 Emissions Range and Country Distribution",
        "csv": "Annual CO2 Emissions (Million Metric Tons) \\t  Number of Countries \\n 50-100 \\t  18 \\n 100-150 \\t  15 \\n 150-200 \\t  20 \\n 200-250 \\t  25 \\n 250-300 \\t  10 \\n 300-350 \\t  8 \\n 350-400 \\t  6 \\n 400-450 \\t  4 \\n 450-500 \\t  2 \\n 500-550 \\t  1 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the distribution of countries based on their annual CO2 emissions measured in million metric tons. There are 18 countries with emissions ranging from 50-100, 15 countries in the 100-150 range, and the number peaks at 25 countries with emissions between 200-250. The data shows a gradual decrease for higher emissions, with 10, 8, 6, 4, 2, and 1 country falling into the subsequent 50-unit intervals up to 550 million metric tons."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Given data\ndata_content = [\n    [\"50-100\", 18],\n    [\"100-150\", 15],\n    [\"150-200\", 20],\n    [\"200-250\", 25],\n    [\"250-300\", 10],\n    [\"300-350\", 8],\n    [\"350-400\", 6],\n    [\"400-450\", 4],\n    [\"450-500\", 2],\n    [\"500-550\", 1],\n]\n\n# Transforming the data into three variables.\ndata_labels = ['Annual CO2 Emissions (Million Metric Tons)', 'Number of Countries']\nline_labels = [entry[0] for entry in data_content]  # CO2 Emissions Range\ndata = [entry[1] for entry in data_content]         # Number of Countries\n\n# Create a DataFrame for plotting.\ndf = pd.DataFrame(data_content, columns=data_labels)\n\n# Create the figure and add a subplot.\nfig = plt.figure(figsize=(14, 8))  # figsize set to be larger to prevent content from being cluttered\nax = fig.add_subplot()\n\n# Plotting the data using pandas.\ndf.plot(kind='bar', x='Annual CO2 Emissions (Million Metric Tons)', y='Number of Countries', ax=ax, legend=False)\n\n# Enhance chart visualization\nax.set_title('Global CO2 Emissions Range and Country Distribution')\nax.set_ylabel('Number of Countries')\nax.set_xlabel('Annual CO2 Emissions (Million Metric Tons)')\nax.grid(axis='y', linestyle='--', alpha=0.7)\nax.tick_params(axis='x', rotation=45)  # Rotate x labels to prevent overlap\nax.set_xticklabels(line_labels, rotation=45, ha='right', fontsize=10, wrap=True)  # Adjust x-axis labels\n\n# Automatically resize the layout and save the figure\nplt.tight_layout()\nplt.savefig('./plotchart/demo/histogram/png/606.png')\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "How many countries have annual CO2 emissions greater than or equal to 350 million metric tons?",
            "output": "21"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "33",
        "img": "./histogram/png/33.png",
        "topic": "Education and Academics",
        "title": " Average Test Scores by Educational Grade Level",
        "csv": "Grade Level \\t Average Test Score \\n Kindergarten \\t 82.5 \\n Elementary \\t 88.7 \\n Middle School \\t 85.3 \\n High School \\t 79.8 \\n Undergraduate \\t 73.4 \\n Postgraduate \\t 81.2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This histogram represents the average test scores by educational grade level. Kindergarten has an average score of 82.5, with a slight increase for elementary level at 88.7. Middle school shows a slight decrease with an average of 85.3. High school average scores dip further to 79.8, and undergraduate levels drop to 73.4. Postgraduate scores rise again to an average of 81.2."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\n\n# Data preparation\ndata_labels = [\"Average Test Score\"]\nline_labels = [\"Kindergarten\", \"Elementary\", \"Middle School\", \"High School\", \"Undergraduate\", \"Postgraduate\"]\ndata = [82.5, 88.7, 85.3, 79.8, 73.4, 81.2]\n\n# Create figure and add subplot\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\n\n# Create a vertical histogram\nax.bar(line_labels, data, color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b'])\n\n# Add grid, title, and labels\nax.set_title('Average Test Scores by Educational Grade Level', fontsize=15)\nax.set_ylabel('Scores', fontsize=12)\nfor label in ax.get_xticklabels():\n    label.set_rotation(45)\n    label.set_wrap(True)\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Automatically adjust subplot params for a clear layout\nplt.tight_layout()\n\n# Save figure\nplt.savefig('./plotchart/data-300/histogram/png/33.png', format='png')\n\n# Clear the current figure state at the end of the code to avoid any overlaps\nplt.clf()\n"
        },
        "QA": {
            "input": "Which grade level has an average test score of 85.3?",
            "output": "Middle School"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "66",
        "img": "./histogram/png/66.png",
        "topic": "Social Sciences and Humanities",
        "title": " Educational Attainment of the Population",
        "csv": "Education Level \\t Percentage of Population (%) \\n Less than High School \\t 12.3 \\n High School Graduate \\t 30.5 \\n Some College \\t 21.7 \\n Bachelor's Degree \\t 18.2 \\n Postgraduate Degree \\t 9.4 \\n Doctorate \\t 3.9 \\n Professional Degree \\t 4.0 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram depicts the educational attainment of the population, showing the percentage of individuals at varying education levels. 12.3% have less than a high school education, whereas 30.5% are high school graduates. Those with some college education constitute 21.7% of the population. Additionally, 18.2% hold a bachelor's degree, followed by 9.4% with a postgraduate degree. A smaller percentage, 3.9%, have obtained a doctorate, and another 4.0% have acquired a professional degree."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Unpack the data\ndata_labels = [\"Percentage of Population (%)\"]\nline_labels = [\n    \"Less than High School\",\n    \"High School Graduate\",\n    \"Some College\",\n    \"Bachelor's Degree\",\n    \"Postgraduate Degree\",\n    \"Doctorate\",\n    \"Professional Degree\"\n]\ndata = [12.3, 30.5, 21.7, 18.2, 9.4, 3.9, 4.0]\n\n# Create a DataFrame\ndf = pd.DataFrame(data, index=line_labels, columns=data_labels)\n\n# Initialize the figure and add a subplot\nplt.figure(figsize=(10, 8))\nax = plt.subplot()\n\n# Create horizontal bar plot\nsns.barplot(x=data_labels[0], y=df.index, data=df, orient='h', palette='viridis')\n\n# Set the chart title and labels\nplt.title('Educational Attainment of the Population')\nplt.xlabel('Percentage of Population (%)')\n\n# Improve layout to fit everything and prevent overlapping text\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/data-300/histogram/png/66.png'\nplt.savefig(save_path)\n\n# Clear the current figure state to prevent reuse\nplt.clf()\n"
        },
        "QA": {
            "input": "What is the combined percentage of the population that has a postgraduate education level or higher (Postgraduate Degree, Doctorate, Professional Degree)?",
            "output": "17.3%"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "242",
        "img": "./histogram/png/242.png",
        "topic": "Energy and Utilities",
        "title": " Annual Energy Consumption by Source in the United States",
        "csv": "Energy Source \\t Annual Consumption (TWh) \\n Coal \\t 2400 \\n Natural Gas \\t 1800 \\n Nuclear \\t 800 \\n Hydroelectric \\t 900 \\n Wind \\t 300 \\n Solar \\t 250 \\n Biomass \\t 150 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram presents the annual energy consumption in the United States, divided by different energy sources as measured in terawatt-hours (TWh). Coal leads with 2400 TWh, followed by natural gas at 1800 TWh. Hydroelectric comes in at 900 TWh, while nuclear energy accounts for 800 TWh. Wind, solar, and biomass have lower consumption values at 300 TWh, 250 TWh, and 150 TWh, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\n\n# Given data transformed into three variables\ndata_labels = ['Annual Consumption (TWh)']\ndata = [\n    [2400],\n    [1800],\n    [800],\n    [900],\n    [300],\n    [250],\n    [150]\n]\nline_labels = ['Coal', 'Natural Gas', 'Nuclear', 'Hydroelectric', 'Wind', 'Solar', 'Biomass']\n\n# Create figure and subplot for the histogram\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111)\n\n# Create the horizontal bar chart\nax.barh(line_labels, [d[0] for d in data], color=plt.cm.tab20c.colors, edgecolor='black')\n\n# Add grid, labels, and title\nax.grid(axis='x', linestyle='--', alpha=0.7)\nax.set_xlabel(data_labels[0])\nax.set_title('Annual Energy Consumption by Source in the United States')\n\n# Adjust the display of labels to handle long text\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\n\n# Save the figure to the specified path and clear the plotting state\nplt.savefig('./plotchart/data-300/histogram/png/242.png')\nplt.clf()\n"
        },
        "QA": {
            "input": "What is the consumption of Hydroelectric energy?",
            "output": "900 TWh"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "50",
        "img": "./histogram/png/50.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Donation Size Distribution Among Nonprofits",
        "csv": "Donation Range ($) \\t Number of Nonprofits \\n 0-1000 \\t 15 \\n 1000-5000 \\t 25 \\n 5000-10000 \\t 20 \\n 10000-50000 \\t 30 \\n 50000-100000 \\t 18 \\n 100000-500000 \\t 12 \\n 500000-1000000 \\t 8 \\n 1000000-5000000 \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the distribution of donation sizes among nonprofits. There are 15 nonprofits in the 0-1000 dollar range, 25 in the 1000-5000 dollar range, and 20 in the 5000-10000 dollar range. Nonprofits receiving donations of 10000-50000 dollars number 30, those in the 50000-100000 dollar range are 18, and 12 in the 100000-500000 dollar range. For larger donations, 8 nonprofits fall in the 500000-1000000 dollar range, and 5 nonprofits receive between 1000000-5000000 dollars."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Data\ndata_labels = ['Donation Range ($)', 'Number of Nonprofits']\nline_labels = ['0-1000', '1000-5000', '5000-10000', '10000-50000', '50000-100000', '100000-500000', '500000-1000000', '1000000-5000000']\ndata = [15, 25, 20, 30, 18, 12, 8, 5]\n\n# Create DataFrame\ndf = pd.DataFrame(data, index=line_labels, columns=['Number of Nonprofits'])\n\n# Plot\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\n\n# Vertical Histogram\ndf.plot(kind='bar', ax=ax, color='skyblue', edgecolor='black')\n\n# Setting title, labels and configurations\nax.set_title('Donation Size Distribution Among Nonprofits')\nax.set_xlabel('Donation Range ($)')\nax.set_ylabel('Number of Nonprofits')\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')\nplt.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save figure\nsave_path = './plotchart/data-300/histogram/png/50.png'\nplt.savefig(save_path)\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "How many nonprofits received donations in the range of $50,000-$100,000?",
            "output": "18"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "96",
        "img": "./histogram/png/96.png",
        "topic": "Food and Beverage Industry",
        "title": " Financial Performance of Food and Beverage Companies",
        "csv": "Average Yearly Revenue ($Million) \\t  Number of Companies \\n Less than 1 \\t  12 \\n 1-5 \\t  25 \\n 5-10 \\t  30 \\n 10-20 \\t  22 \\n 20-50 \\t  19 \\n 50-100 \\t  10 \\n 100-200 \\t  6 \\n 200-300 \\t  4 \\n 300-500 \\t  2 \\n 500+ \\t  1 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram represents the financial performance of food and beverage companies, categorizing them by average yearly revenue. There are 12 companies earning less than $1 million, 25 earning between $1-5 million, and 30 in the $5-10 million range. Companies in the $10-20 million, $20-50 million, and $50-100 million brackets are 22, 19, and 10, respectively. Fewer companies earn higher revenues, with 6 between $100-200 million, 4 in the $200-300 million range, 2 between $300-500 million, and only 1 company earns over $500 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata_labels = ['Average Yearly Revenue ($Million)', 'Number of Companies']\nline_labels = [\n    'Less than 1', '1-5', '5-10', '10-20', \n    '20-50', '50-100', '100-200', '200-300', \n    '300-500', '500+'\n]\ndata = [12, 25, 30, 22, 19, 10, 6, 4, 2, 1]  # Number of companies\n\n\n# Create a DataFrame\ndf = pd.DataFrame(data=data, columns=[data_labels[1]], index=line_labels)\ndf.index.name = data_labels[0]\n\ndf = df.transpose()\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize=(14, 8))\n\n# Create horizontal bar plot\ndf.plot(kind='barh', ax=ax, legend=True)\n\n# Set labels and title\nax.set_xlabel('Number of Companies')\nax.set_ylabel('Average Yearly Revenue ($Million)')\nax.set_title('Financial Performance of Food and Beverage Companies')\n\n# Set grid\nax.grid(True)\n\n# # Rotate the y tick labels to show clearly if they are too long\n# for tick in ax.get_yticklabels():\n#     tick.set_rotation(45)\n#     tick.set_wrap(True)  # Wrap the label text\nax.set_yticks([])\n\n# Set layout to be tight\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./plotchart/chart_simulation_final/histogram/png/96.png')\n\n# Clear current figure state\nplt.clf()\n"
        },
        "QA": {
            "input": "How many companies have an average yearly revenue of less than 5 million dollars?",
            "output": "37"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "184",
        "img": "./histogram/png/184.png",
        "topic": "Retail and E-commerce",
        "title": " Monthly Sales Distribution Among Retailers",
        "csv": "Monthly Sales ($Million) \\t Number of Retailers \\n January \\t 50 \\n February \\t 45 \\n March \\t 60 \\n April \\t 55 \\n May \\t 65 \\n June \\t 70 \\n July \\t 75 \\n August \\t 80 \\n September \\t 85 \\n October \\t 90 \\n November \\t 95 \\n December \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the monthly sales distribution among retailers throughout a year, showing sales in million dollars. Sales start at $50 million in January and progressively increase each month, reaching $100 million in December. February reports sales of $45 million, March $60 million, April $55 million, May $65 million, June $70 million, July $75 million, August $80 million, September $85 million, October $90 million, and November $95 million. Sales appear to follow an upward trend as the year progresses."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport os\n\n# Given data\nraw_data = \"\"\"\nJanuary,50\nFebruary,45\nMarch,60\nApril,55\nMay,65\nJune,70\nJuly,75\nAugust,80\nSeptember,85\nOctober,90\nNovember,95\nDecember,100\n\"\"\"\n\n# Parsing the data\ndata_lines = raw_data.strip().split('\\n')\ndata_labels = [\"Monthly Sales ($Million)\"]\nline_labels = [line.split(',')[0] for line in data_lines]\ndata = [[int(line.split(',')[1])] for line in data_lines]\n\n# Convert data into a DataFrame for Seaborn\ndf = pd.DataFrame(data, columns=data_labels, index=line_labels)\n\n# Create a figure and a single subplot\nplt.figure(figsize=(14, 10))\nax = sns.barplot(x=line_labels, y=[d[0] for d in data], orient='v', palette='viridis')\nax.set_title(\"Monthly Sales Distribution Among Retailers\", fontsize=16)\nax.set_ylabel(data_labels[0])\nax.set_xlabel('Number of Retailers')\nplt.xticks(rotation=45, ha='right')\nplt.yticks(wrap=True)\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nsave_path = './histogram/png_val/184.png'\nos.makedirs(os.path.dirname(save_path), exist_ok=True)\nplt.savefig(save_path, format='png')\n\n# Clear the current figure's state\nplt.clf()\n"
        },
        "QA": {
            "input": "Which month has the highest sales figures as per the given data?",
            "output": "December"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "285",
        "img": "./histogram/png/285.png",
        "topic": "Agriculture and Food Production",
        "title": " Global Agricultural Yield by Crop Type",
        "csv": "Crop Type \\t Yield (million metric tons) \\n Cereals \\t 1025.3 \\n Legumes \\t 156.7 \\n Tubers \\t 785.1 \\n Fruits \\t 731.0 \\n Vegetables \\t 950.5 \\n Oilseeds \\t 540.2 \\n Sugarcane \\t 1897.3 \\n Fiber Crops \\t 123.8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the global agricultural yield by crop type, showing cereals with the highest yield at 1025.3 million metric tons. Legumes yield stands at 156.7 million metric tons, whereas tubers and fruits yield 785.1 and 731.0 million metric tons respectively. Vegetables contribute a yield of 950.5 million metric tons, oilseeds at 540.2 million metric tons, and sugarcane is the most yielding with 1897.3 million metric tons. Fiber crops have the lowest yield at 123.8 million metric tons."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport os\n\n# Data extraction\ndata_labels = ['Yield (million metric tons)']\nline_labels = ['Cereals', 'Legumes', 'Tubers', 'Fruits', 'Vegetables', 'Oilseeds', 'Sugarcane', 'Fiber Crops']\ndata = [1025.3, 156.7, 785.1, 731.0, 950.5, 540.2, 1897.3, 123.8]\n\n# Create a DataFrame\ndf = pd.DataFrame(data, index=line_labels, columns=data_labels)\n\n# Create a figure and a single subplot\nplt.figure(figsize=(12, 8))\nax = plt.subplot(111)\n\n# Plot histogram\nsns.barplot(x=df.index, y=df[data_labels[0]], palette=\"viridis\", ax=ax)\nax.set_title('Global Agricultural Yield by Crop Type', fontsize=16)\nax.set_ylabel(data_labels[0], fontsize=12)\nax.set_xlabel('Crop Type', fontsize=12)\nplt.xticks(rotation=45, ha='right', wrap=True)\n\n# Style\nsns.set_style(\"whitegrid\")\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/demo/histogram/png/635.png'\nif not os.path.exists(os.path.dirname(save_path)):\n    os.makedirs(os.path.dirname(save_path))\nplt.savefig(save_path)\n\n# Clear the current figure\nplt.clf()\n"
        },
        "QA": {
            "input": "Which crop type has the highest yield according to the given data?",
            "output": "Sugarcane"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "113",
        "img": "./histogram/png/113.png",
        "topic": "Arts and Culture",
        "title": " Sales of Artworks by Painting Genre",
        "csv": "Painting Genre \\t Artworks Sold \\n Renaissance \\t 120 \\n Impressionism \\t 95 \\n Modernism \\t 78 \\n Abstract \\t 65 \\n Surrealism \\t 58 \\n Pop Art \\t 50 \\n Cubism \\t 45 \\n Expressionism \\t 30 \\n Minimalism \\t 25 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram represents the sales of artworks categorized by painting genres. The data shows Renaissance art leading with 120 pieces sold, followed by Impressionism at 95, and Modernism at 78. Abstract art sold 65 pieces, Surrealism 58, and Pop Art 50. Fewer pieces were sold in Cubism at 45, Expressionism at 30, and Minimalism, which sold 25 pieces."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\n\n# Data processing\ndata = \"\"\"\nPainting Genre,Artworks Sold\nRenaissance,120\nImpressionism,95\nModernism,78\nAbstract,65\nSurrealism,58\nPop Art,50\nCubism,45\nExpressionism,30\nMinimalism,25\n\"\"\"\nlines = data.strip().split('\\n')\ndata_labels = lines[0].split(',')[1:]  # excluding first column\nline_labels = [line.split(',')[0] for line in lines[1:]]  # excluding first row\ndata_values = [int(line.split(',')[1]) for line in lines[1:]]\n\n# Create the figure and axis objects\nfig = plt.figure(figsize=(10, 8))  # setting a larger figsize\nax = fig.add_subplot(111)\n\n# Create horizontal bar chart\nax.barh(line_labels, data_values, color=plt.cm.Paired.colors, edgecolor='black')\n\n# Adding data labels for each bar\nfor index, value in enumerate(data_values):\n    ax.text(value, index, str(value), color='black', va='center')\n\n# Set title and labels\nax.set_title('Sales of Artworks by Painting Genre')\nax.set_xlabel('Number of Artworks Sold')\nplt.yticks(wrap=True)\n\n# Set grid\nax.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Ensure the labels on Y-axis are fully readable by rotating them or using wrap=True\nplt.xticks(rotation=45)\n\n# Automatically adjust subplot params so that the subplot(s) fits in to the figure area\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/data-300/histogram/png/1002.png'\nplt.savefig(save_path, format='png')\n\n# Clear the current figure state to avoid overlap with further plots\nplt.clf()\n"
        },
        "QA": {
            "input": "Which genre has the third highest number of artworks sold?",
            "output": "Modernism"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "282",
        "img": "./histogram/png/282.png",
        "topic": "Healthcare and Health",
        "title": " Prevalence of BMI Categories in a Health Study",
        "csv": "BMI Category \\t Number of Individuals \\n Underweight (<18.5) \\t 8 \\n Normal weight (18.5-24.9) \\t 45 \\n Overweight (25-29.9) \\t 38 \\n Obesity Class I (30-34.9) \\t 22 \\n Obesity Class II (35-39.9) \\t 15 \\n Obesity Class III (>40) \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram presents the prevalence of BMI categories among individuals in a health study. It shows 8 individuals are underweight, 45 have a normal weight, 38 are overweight, 22 fall into Obesity Class I, 15 are in Obesity Class II, and 10 are in Obesity Class III, indicating a varied distribution of BMI statuses among the surveyed population."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ndata = [\n    [8],\n    [45],\n    [38],\n    [22],\n    [15],\n    [10]\n]\n\ndata_labels = ['Number of Individuals']\nline_labels = [\n    'Underweight (<18.5)',\n    'Normal weight (18.5-24.9)',\n    'Overweight (25-29.9)',\n    'Obesity Class I (30-34.9)',\n    'Obesity Class II (35-39.9)',\n    'Obesity Class III (>40)'\n]\n\n# Create figure and axis\nplt.figure(figsize=(12, 8))\nax = plt.subplot()\n\n# Set the palette color\nsns.set_palette(\"pastel\")\n\n# Plotting data with seaborn\nsns.barplot(data, ax=ax)\n\n# Set x-axis labels\nax.set_xticks(range(len(data)))\nax.set_xticklabels(line_labels, rotation=45, ha='right', wrap=True)\n\n# Set y-axis label\nax.set_ylabel(data_labels[0])\n\n# Set the title of the figure\nplt.title('Prevalence of BMI Categories in a Health Study')\n\n# Tight layout to prevent content from being displayed improperly\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./plotchart/chart_simulation_final/histogram/png/282.png')\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "How many individuals fall under the category of \"Obesity Class II\"?",
            "output": "15"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "170",
        "img": "./histogram/png/170.png",
        "topic": "Social Media and the Web",
        "title": " Daily Internet Usage Patterns among Users",
        "csv": "Hours Spent Daily \\t Number of Users (Million) \\n <1 \\t 45.3 \\n 1-2 \\t 75.2 \\n 2-3 \\t 88.9 \\n 3-4 \\t 67.0 \\n 4-5 \\t 52.1 \\n 5-6 \\t 38.4 \\n 6-7 \\t 27.6 \\n 7-8 \\t 18.3 \\n 8+ \\t 12.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the distribution of daily internet usage among users. It categorizes the number of users (in millions) based on the range of hours spent online. The categories are less than 1 hour, with 45.3 million users, 1-2 hours with 75.2 million, 2-3 hours with 88.9 million, following with 67.0 million for 3-4 hours, 52.1 million for 4-5 hours, 38.4 million for 5-6 hours, 27.6 million for 6-7 hours, 18.3 million for 7-8 hours, and finally 12.5 million users spending more than 8 hours daily."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Transforming the raw data into variables\ndata_labels = ['Number of Users (Million)']\nline_labels = ['<1', '1-2', '2-3', '3-4', '4-5', '5-6', '6-7', '7-8', '8+']\ndata = [45.3, 75.2, 88.9, 67.0, 52.1, 38.4, 27.6, 18.3, 12.5]\n\n# Create a DataFrame for visualization with seaborn\nimport pandas as pd\ndf = pd.DataFrame(data, index=line_labels, columns=data_labels)\n\n# Setting the figsize to ensure content is clearly displayed\nplt.figure(figsize=(12, 8))\nax = plt.subplot()\n\n# Plotting the histogram using seaborn\nsns.barplot(data=df, x=df.index, y='Number of Users (Million)', palette='viridis', ax=ax)\n\n# Ensuring the x-labels are clear and not overlapping\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right', wrap=True)\n\n# Adding grid lines, setting title, and labels\nax.grid(True)\nax.set_title('Daily Internet Usage Patterns among Users')\nax.set_xlabel('Hours Spent Daily')\nax.set_ylabel('Number of Users (Million)')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./plotchart/data-300/histogram/png/170.png')\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "How many more million users spend 1-2 hours daily compared to those spending 6-7 hours?",
            "output": "47.6 million"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "31",
        "img": "./histogram/png/31.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Revenue Distribution across Charity and Nonprofit Organizations",
        "csv": "Revenue Range (Million $) \\t Number of Organizations \\n 0-10 \\t 150 \\n 10-50 \\t 80 \\n 50-100 \\t 45 \\n 100-200 \\t 30 \\n 200-300 \\t 20 \\n 300-400 \\t 10 \\n 400-500 \\t 5 \\n 500-600 \\t 2 \\n 600-700 \\t 2 \\n 700-800 \\t 1 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram presents the revenue distribution across various charity and nonprofit organizations. It categorizes the number of organizations within certain revenue ranges, measured in millions of dollars. There are 150 organizations in the 0-10 million range, 80 in the 10-50 million range, and 45 in the 50-100 million range. The 100-200, 200-300, 300-400, and 400-500 million dollar ranges have 30, 20, 10, and 5 organizations, respectively. The highest revenue ranges, 500-600, 600-700, and 700-800 million dollars, have 2, 2, and 1 organizations correspondingly."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Given data\ndata_labels = ['Revenue Range (Million $)', 'Number of Organizations']\nline_labels = [\n    '0-10', '10-50', '50-100', '100-200', '200-300',\n    '300-400', '400-500', '500-600', '600-700', '700-800'\n]\ndata = [150, 80, 45, 30, 20, 10, 5, 2, 2, 1]\n\n# Initialize the figure\nplt.figure(figsize=(10, 8))\nax = plt.subplot()\n\n# Create horizontal bar plot using Seaborn\nsns.barplot(x=data, y=line_labels, palette=\"viridis\", ax=ax)\n\n# Add gridlines and other visual enhancements\nax.set_title('Revenue Distribution across Charity and Nonprofit Organizations', fontsize=16)\nax.set_xlabel(data_labels[1], fontsize=14)\nax.set_ylabel(data_labels[0], fontsize=14)\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\nax.set_axisbelow(True)\n\n# Set labels to display on multiple lines if they are too long\nax.set_yticklabels([label if len(label) <= 10 else '\\n'.join(label.split('-')) for label in line_labels], \n                   fontsize=12, wrap=True)\n\n# Adjust layout to prevent content from overlapping\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./plotchart/data-300/histogram/png/31.png')\n\n# Clear the current figure's state to avoid interference with future plots\nplt.clf()\n"
        },
        "QA": {
            "input": "How many organizations have a revenue range greater than or equal to 300 million $?",
            "output": "20"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "58",
        "img": "./histogram/png/58.png",
        "topic": "Government and Public Policy",
        "title": " Budget Allocation Across Different Policy Areas",
        "csv": "Policy Area \\t Budget Allocation ($ Billion) \\n Education \\t 15.5 \\n Healthcare \\t 20.3 \\n Defense \\t 32.8 \\n Social Security \\t 25.4 \\n Infrastructure \\t 17.7 \\n Research and Development \\t 13.2 \\n Environmental Protection \\t 9.6 \\n Agriculture \\t 8.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the budget allocation in billions of dollars across various policy areas. Education is allocated $15.5 billion; Healthcare receives $20.3 billion. The Defense budget is the largest at $32.8 billion. Social Security has a budget of $25.4 billion, whereas Infrastructure investment stands at $17.7 billion. Research and Development have been allocated $13.2 billion. Environmental Protection and Agriculture have smaller budgets of $9.6 billion and $8.5 billion, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Given data\ndata_labels = ['Budget Allocation ($ Billion)']\nline_labels = ['Education', 'Healthcare', 'Defense', 'Social Security', 'Infrastructure', 'Research and Development', 'Environmental Protection', 'Agriculture']\ndata = [15.5, 20.3, 32.8, 25.4, 17.7, 13.2, 9.6, 8.5]\n\n# Create a DataFrame\ndf = pd.DataFrame(data=data, index=line_labels, columns=data_labels)\n\n# Create a figure\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\n\n# Plot the data\ndf.plot(kind='barh', ax=ax, color='skyblue', grid=True)\n\n# Set the title\nplt.title('Budget Allocation Across Different Policy Areas')\n\n# Set text properties\nplt.xlabel(data_labels[0])\nplt.ylabel('Policy Areas')\nplt.legend().set_visible(False)\n\n# Handle the long text in the labels\nax.tick_params(axis='y', labelrotation=45)\nax.tick_params(axis='y', labelsize=8)\n\n# Set tight layout to automatically adjust subplot params\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./histogram/png_val/58.png', format='png')\n\n# Clear the current figure state\nplt.clf()\n"
        },
        "QA": {
            "input": "Which policy area has the highest budget allocation according to the data?",
            "output": "Defense"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "42",
        "img": "./histogram/png/42.png",
        "topic": "Sports and Entertainment",
        "title": " Revenue Distribution Among Sports and Entertainment Franchises",
        "csv": "Revenue Range ($Million) \\t Number of Franchises \\n 0-50 \\t 12 \\n 50-100 \\t 18 \\n 100-150 \\t 23 \\n 150-200 \\t 17 \\n 200-250 \\t 10 \\n 250-300 \\t 8 \\n 300-350 \\t 4 \\n 350-400 \\t 2 \\n 400-450 \\t 1 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the revenue distribution among sports and entertainment franchises in various ranges. There are 12 franchises in the $0-50 million range, 18 in the $50-100 million range, and the number peaks at 23 franchises in the $100-150 million range. The count decreases as the revenue range increases, with 17 franchises in the $150-200 million range, reducing down to just 1 franchise in the $400-450 million range."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Given data\ndata = [\n    [\"0-50\", 12],\n    [\"50-100\", 18],\n    [\"100-150\", 23],\n    [\"150-200\", 17],\n    [\"200-250\", 10],\n    [\"250-300\", 8],\n    [\"300-350\", 4],\n    [\"350-400\", 2],\n    [\"400-450\", 1]\n]\n\n# Transforming data into three variables: data_labels, data, line_labels\ndata_labels = ['Revenue Range ($Million)', 'Number of Franchises']\nline_labels = [item[0] for item in data]  # Extracting the Revenue Range for line_labels\ndata = [item[1] for item in data]  # Extracting the Number of Franchises for data\n\n# Create figure and add subplot\nplt.figure(figsize=(12, 8))\nax = plt.subplot()\n\n# Visualize the data as a horizontal histogram using seaborn\nsns.barplot(x=data, y=line_labels, orient='h', ax=ax, palette='Spectral')\n\n# Enhancements for better visualization\nax.set_title('Revenue Distribution Among Sports and Entertainment Franchises', fontsize=14)\nax.set_xlabel(data_labels[1], fontsize=12)\nax.set_ylabel(data_labels[0], fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10, rotation=30, wrap=True)\n\n# Adding grid (enabling y-axis gridlines only, as it's a horizontal histogram)\nax.yaxis.grid(True)\n\n# Automatically resizing the figure\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/chart_simulation_final/histogram/png/42.png'\nplt.savefig(save_path, format='png')\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "How many franchises have a revenue range of 150-200 Million dollars?",
            "output": "17"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "126",
        "img": "./histogram/png/126.png",
        "topic": "Retail and E-commerce",
        "title": " Monthly Online Retail Sales Distribution",
        "csv": "Monthly Sales ($Millions) \\t  Number of Online Stores \\n January \\t  150 \\n February \\t  120 \\n March \\t  180 \\n April \\t  200 \\n May \\t  160 \\n June \\t  170 \\n July \\t  210 \\n August \\t  190 \\n September \\t  180 \\n October \\t  220 \\n November \\t  240 \\n December \\t  230 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram represents the distribution of monthly online retail sales in dollars (millions) and the corresponding number of online stores. The sales start at $150 million in January with a fluctuating pattern, peaking at $240 million in November, while December sales slightly decrease to $230 million. The months April, July, October, and November show a progressive increase in sales, depicting seasonal or periodic highs throughout the year. Online store numbers are not shown directly but are assumed to correlate with sales distribution across the months."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\n\n# Data\ndata_labels = ['Number of Online Stores']\nline_labels = ['January', 'February', 'March', 'April', 'May', 'June', \n               'July', 'August', 'September', 'October', 'November', 'December']\ndata = [\n    [150, 120, 180, 200, 160, 170, 210, 190, 180, 220, 240, 230]\n]\n\n# Create figure and add subplot\nfig = plt.figure(figsize=(14, 8))\nax = fig.add_subplot(111)\n\n# Plotting the histogram\nfor i in range(len(data)):\n    ax.bar(range(len(data[i])), data[i], label=data_labels[i])\n\n# Add some fancy features\nax.set_title('Monthly Online Retail Sales Distribution',  fontsize=16)\nax.set_xlabel('Monthly Sales ($Millions)', fontsize=14)\nax.set_ylabel('Number of Online Stores', fontsize=14)\nax.set_xticks(range(len(line_labels)))\nax.set_xticklabels(line_labels, rotation=45, ha='right', fontsize=12)\nax.legend()\n\n# Background grid\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Automatically adjust subplot params to give specified padding\nplt.tight_layout()\n\n# Save the figure\nsave_path = './histogram/png_val/126.png'\nplt.savefig(save_path, format='png')\n\n# Clear the current figure state\nplt.clf()\n"
        },
        "QA": {
            "input": "Which month had the highest number of online stores associated with its sales data?",
            "output": "The question is unanswerable with the provided data"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "295",
        "img": "./histogram/png/295.png",
        "topic": "Education and Academics",
        "title": " Average Grade Point Average (GPA) by Academic Level",
        "csv": "Grade Range \\t Average GPA \\n Freshman \\t 2.9 \\n Sophomore \\t 3.1 \\n Junior \\t 3.2 \\n Senior \\t 3.4 \\n Graduate Students \\t 3.7 \\n PhD Candidates \\t 3.8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram represents the Average Grade Point Average (GPA) by academic level. It shows that freshmen have an average GPA of 2.9, sophomores have a slightly higher average GPA of 3.1, juniors have an average GPA of 3.2, while seniors show a further increase with an average GPA of 3.4. Graduate students have an average GPA of 3.7, and PhD candidates have the highest average GPA depicted at 3.8."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport os\n\n# Given data parsed into required variables\ndata_labels = ['Freshman', 'Sophomore', 'Junior', 'Senior', 'Graduate Students', 'PhD Candidates']\ndata = [2.9, 3.1, 3.2, 3.4, 3.7, 3.8]\n\n# Create a figure and a subplot\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\n\n# Plotting the histogram\nax.bar(data_labels, data, color='skyblue', edgecolor='gray')\n\n# Title and labels\nax.set_title('Average Grade Point Average (GPA) by Academic Level', fontsize=15, pad=20)\nax.set_xlabel('Academic Level', fontsize=12)\nax.set_ylabel('Average GPA', fontsize=12)\n\n# Rotate the labels on the x-axis to prevent overlap\nax.set_xticklabels(data_labels, rotation=45, ha=\"right\")\n\n# Adding grid for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Ensure everything fits without overlapping\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/demo/histogram/png/645.png'\nos.makedirs(os.path.dirname(save_path), exist_ok=True)\nplt.savefig(save_path)\n\n# Clear the figure to prevent re-use\nplt.clf()\n"
        },
        "QA": {
            "input": "What is the average GPA of Graduate Students?",
            "output": "3.7"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "227",
        "img": "./histogram/png/227.png",
        "topic": "Social Media and the Web",
        "title": " Browser Usage Distribution Across the Web",
        "csv": "Usage \\t Browser Market Share (%) \\n Chrome \\t 63.2 \\n Safari \\t 19.6 \\n Edge \\t 7.5 \\n Firefox \\t 5.2 \\n Opera \\t 2.1 \\n Others \\t 2.4 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the distribution of browser usage across the web in terms of market share percentages. Chrome dominates at 63.2%, followed by Safari with a 19.6% share. Edge comes in third at 7.5%, with Firefox closely behind at 5.2%. Opera holds a smaller segment of 2.1%, while all other browsers collectively account for 2.4%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\n# Data\ndata_labels = ['Browser Market Share (%)']\nline_labels = ['Chrome', 'Safari', 'Edge', 'Firefox', 'Opera', 'Others']\ndata = [63.2, 19.6, 7.5, 5.2, 2.1, 2.4]\n\n# Create figure and axes\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\n\n# Plot histogram\nbars = ax.bar(line_labels, data, color=plt.cm.tab10(np.arange(len(data))), edgecolor='black')\n\n# Set title\nax.set_title('Browser Usage Distribution Across the Web')\n\n# Set grid\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.6)\nax.set_ylabel(data_labels[0])\n# Set rotation for long labels\nplt.xticks(rotation=45, ha='right')\n\n# Make sure all characters are shown and not overwritten\nplt.tight_layout()\n\n# Saving path\nsave_path = './histogram/png_val/227.png'\nos.makedirs(os.path.dirname(save_path), exist_ok=True)\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(save_path)\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "What is the combined market share percentage of Firefox and Opera according to the data?",
            "output": "7.3%"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "118",
        "img": "./histogram/png/118.png",
        "topic": "Agriculture and Food Production",
        "title": " Global Harvest Yields for Major Crops",
        "csv": "Crop Type \\t Harvest Yield (million metric tons) \\n Wheat \\t 780.0 \\n Corn \\t 1080.5 \\n Rice \\t 740.0 \\n Barley \\t 144.5 \\n Soybean \\t 350.2 \\n Potato \\t 380.3 \\n Cotton \\t 120.7 \\n Oats \\t 22.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the global harvest yields for major crops, reported in million metric tons. Feature crops include wheat with a yield of 780.0, corn at 1080.5, rice at 740.0, barley with 144.5, soybean at 350.2, potato tallying 380.3, cotton at 120.7, and oats recorded at 22.5 million metric tons."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Given data\ndata_labels = ['Harvest Yield (million metric tons)']\nline_labels = ['Wheat', 'Corn', 'Rice', 'Barley', 'Soybean', 'Potato', 'Cotton', 'Oats']\ndata = [780.0, 1080.5, 740.0, 144.5, 350.2, 380.3, 120.7, 22.5]\n\n# Visualize the data as a histogram using seaborn\nsns.set_theme(style=\"whitegrid\")\nplt.figure(figsize=(12, 8))\nax = plt.subplot(111)\nsns.barplot(x=line_labels, y=data, ax=ax, palette=\"viridis\")\n\n# If the text length of the label is too long:\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\", wrap=True)\nax.set_ylabel('Harvest Yield (million metric tons)')\n# Title of the figure\nplt.title('Global Harvest Yields for Major Crops')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the figure to the specified path\nsave_path = './histogram/png_val/118.png'\nplt.savefig(save_path, format='png', dpi=300)\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "Which crop has the highest harvest yield according to the data provided?",
            "output": "Corn"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "221",
        "img": "./histogram/png/221.png",
        "topic": "Transportation and Logistics",
        "title": " Freight Volume Distribution Across Transportation Modes",
        "csv": "Vehicle Type \\t Freight Volume (million tons) \\n Trucks \\t 1500.5 \\n Rail \\t 1285.2 \\n Air \\t 450.3 \\n Maritime \\t 980.7 \\n Pipelines \\t 635.1 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the freight volume measured in million tons distributed across different transportation modes. Trucks lead with a freight volume of 1500.5 million tons, followed by rail at 1285.2 million tons. Maritime transport shows a volume of 980.7 million tons, while pipelines account for 635.1 million tons. Air transport has the least freight volume, registering 450.3 million tons."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Data preparation\ndata_labels = ['Freight Volume (million tons)']\nline_labels = ['Trucks', 'Rail', 'Air', 'Maritime', 'Pipelines']\ndata = [1500.5, 1285.2, 450.3, 980.7, 635.1]\n\n# Creating a DataFrame for seaborn\ndf = pd.DataFrame(data={'Vehicle Type': line_labels, 'Freight Volume': data})\n\n# Setting the figure size to ensure content is displayed properly\nplt.figure(figsize=(10, 6))\nax = plt.subplot()\n\n# Create the histogram using seaborn\nsns.barplot(x='Vehicle Type', y='Freight Volume', data=df, ax=ax)\n\n# Set title\nax.set_title('Freight Volume Distribution Across Transportation Modes')\n\n# Improve the readability of x-axis labels\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha=\"right\", wrap=True)\n\n# Automatically adjust subplot params for a better layout\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/data-300/histogram/png/221.png'\nplt.savefig(save_path, format='png', dpi=300)\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "What is the freight volume difference between rail and pipelines?",
            "output": "650.1 million tons"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "115",
        "img": "./histogram/png/115.png",
        "topic": "Healthcare and Health",
        "title": " Hospital Visit Frequency by Age Groups",
        "csv": "Age Range \\t Number of Hospital Visits (Thousands) \\n 0-10 \\t 120 \\n 11-20 \\t 110 \\n 21-30 \\t 105 \\n 31-40 \\t 115 \\n 41-50 \\t 130 \\n 51-60 \\t 150 \\n 61-70 \\t 170 \\n 71-80 \\t 160 \\n 81-90 \\t 140 \\n 90+ \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the frequency of hospital visits across different age groups. The 0-10 age range has 120 thousand visits, which gradually decreases to 105 thousand in the 21-30 bracket. Visits then increase, reaching 130 thousand for 41-50, peaking at 170 thousand for 61-70 year olds. Subsequent age groups experience a decrease, with the 81-90 bracket at 140 thousand and the 90+ group at 100 thousand."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Provided data\ndata = {\n    \"Age Range\": [\"0-10\", \"11-20\", \"21-30\", \"31-40\", \"41-50\", \"51-60\", \"61-70\", \"71-80\", \"81-90\", \"90+\"],\n    \"Number of Hospital Visits (Thousands)\": [120, 110, 105, 115, 130, 150, 170, 160, 140, 100]\n}\n\n# Create a DataFrame from the data\ndf = pd.DataFrame(data)\n\n# Create a figure before plotting\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot a histogram using 'pandas' plot() function\ndf.plot(kind='bar', x='Age Range', y='Number of Hospital Visits (Thousands)',\n        ax=ax, color='skyblue', edgecolor='black')\n\n# Set a title\nax.set_title('Hospital Visit Frequency by Age Groups')\n\n# Adding grid lines\nax.grid(axis='y')\n\n# To prevent long label texts from overlapping, rotate the labels\nax.set_xticklabels(df['Age Range'], rotation=45)\n\n# Automatically adjust subplot params for the figure to fit into the canvas\nplt.tight_layout()\n\n# Save the figure to the specified path\nplt.savefig('./plotchart/data-300/histogram/png/115.png')\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "What is the age range with the highest number of hospital visits?",
            "output": "61-70"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "92",
        "img": "./histogram/png/92.png",
        "topic": "Environment and Sustainability",
        "title": " Global Distribution of Carbon Dioxide Emissions Per Capita",
        "csv": "CO2 Emissions (Metric Tons per Capita) \\t Country \\n 0-5 \\t 30 \\n 5-10 \\t 45 \\n 10-15 \\t 60 \\n 15-20 \\t 50 \\n 20-25 \\t 35 \\n 25-30 \\t 20 \\n 30-35 \\t 15 \\n 35-40 \\t 5 \\n 40-45 \\t 2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the global distribution of carbon dioxide emissions per capita, categorized into ranges. Thirty countries fall within the 0-5 metric tons per capita range, followed by 45 countries within the 5-10 range. The 10-15 range includes the highest number, with 60 countries. For the 15-20, 20-25, and 25-30 ranges, there are 50, 35, and 20 countries respectively. Fewer countries occupy higher emission ranges, with 15 countries in the 30-35 bracket, 5 in the 35-40 bracket, and a mere 2 countries in the 40-45 range."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\n\n# Given data\ndata_labels = ['CO2 Emissions (Metric Tons per Capita)']\nline_labels = ['0-5', '5-10', '10-15', '15-20', '20-25', '25-30', '30-35', '35-40', '40-45']\ndata = [30, 45, 60, 50, 35, 20, 15, 5, 2]\n\n# Figure setup\nplt.figure(figsize=(10, 8))\nax = plt.subplot(111)\n\n# Vertical Histogram\nax.bar(line_labels, data, color='skyblue')\n\n# Add grid, title, and adjust layout\nax.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\nplt.title('Global Distribution of Carbon Dioxide Emissions Per Capita', fontsize=14)\n\n# Handling long label texts\nax.set_xticklabels(line_labels, rotation=45, ha='right')\nax.set_ylabel('Country')\nplt.tight_layout()\n\n# Save the figure\nsave_path = './histogram/png_val/92.png'\nplt.savefig(save_path)\n\n# Clear the current figure state\nplt.clf()\n"
        },
        "QA": {
            "input": "How many countries have CO2 emissions higher than 30 metric tons per capita according to the data?",
            "output": "22"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "219",
        "img": "./histogram/png/219.png",
        "topic": "Healthcare and Health",
        "title": " Average Hospital Visits Per Person by Age Bracket",
        "csv": "Age Bracket (Years) \\t Average Hospital Visits per Person \\n 0-4 \\t 4.2 \\n 5-12 \\t 2.5 \\n 13-18 \\t 1.8 \\n 19-30 \\t 1.4 \\n 31-45 \\t 2.2 \\n 46-60 \\t 3.5 \\n 61-75 \\t 5.9 \\n 76+ \\t 7.8 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the average number of hospital visits per person across different age brackets. The youngest group, 0-4 years, has an average of 4.2 visits, which decreases during the school years, 5-12, to 2.5. Teens aged 13-18 visit hospitals on average 1.8 times, while young adults 19-30 have the least visits at 1.4. As age increases, hospital visits rise, with the 31-45 bracket at 2.2 and 46-60 at 3.5. Seniors aged 61-75 average 5.9 visits, and those 76 and older have the highest average of 7.8 visits per person."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Given data\ndata_values = \"\"\"\n0-4,4.2\n5-12,2.5\n13-18,1.8\n19-30,1.4\n31-45,2.2\n46-60,3.5\n61-75,5.9\n76+,7.8\n\"\"\"\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_lines = data_values.strip().split('\\n')\ndata_labels = ['Age Bracket (Years)', 'Average Hospital Visits per Person']\nline_labels, data = zip(*(line.split(',') for line in data_lines))\ndata = [float(d) for d in data]\n\n# Create a DataFrame\ndf = pd.DataFrame({'Age Bracket (Years)': line_labels, 'Average Hospital Visits per Person': data})\n\n# Plotting\nfig = plt.figure(figsize=(12, 6))\nax = fig.add_subplot(111)\n\n# Create histogram using 'pandas'\ndf.plot(kind='bar', x='Age Bracket (Years)', y='Average Hospital Visits per Person', ax=ax, legend=False)\n\n# Setting the title\nax.set_title('Average Hospital Visits Per Person by Age Bracket')\n\n# Enhancing visual appearance\nax.grid(True)\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\nax.set_xticklabels(df['Age Bracket (Years)'], rotation=45, ha=\"right\", wrap=True)\n\n# Automatically adjust subplot params to give specified padding\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./plotchart/data-300/histogram/png/1009.png', format='png')\n\n# Clear the current figure state\nplt.clf()\n"
        },
        "QA": {
            "input": "How many average hospital visits per person are there in the age bracket of 46-60 years?",
            "output": "3.5"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "213",
        "img": "./histogram/png/213.png",
        "topic": "Government and Public Policy",
        "title": " Federal Budget Allocation Across Policy Areas",
        "csv": "Policy Area \\t Budget Allocation ($ Billion) \\n Education \\t 550.2 \\n Healthcare \\t 980.5 \\n Defense \\t 620.3 \\n Welfare \\t 450.7 \\n Environment \\t 320.9 \\n Science and Technology \\t 200.4 \\n Transportation \\t 370.6 \\n Energy \\t 295.1 \\n Agriculture \\t 150.2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram represents the federal budget allocation across various policy areas. Education receives $550.2 billion, while healthcare is allocated the highest budget at $980.5 billion. Defense has a budget of $620.3 billion, and welfare receives $450.7 billion. The environment, science and technology, transportation, energy, and agriculture are allocated $320.9 billion, $200.4 billion, $370.6 billion, $295.1 billion, and $150.2 billion respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndata = \"\"\"\nPolicy Area,Budget Allocation ($ Billion)\nEducation,550.2\nHealthcare,980.5\nDefense,620.3\nWelfare,450.7\nEnvironment,320.9\nScience and Technology,200.4\nTransportation,370.6\nEnergy,295.1\nAgriculture,150.2\n\"\"\"\n\n# Process the data into three variables: data_labels, data, line_labels\nlines = data.strip().split('\\n')\ndata_labels = lines[0].split(',')[1:]  # Get column labels except the first one\nline_labels = [line.split(',')[0] for line in lines[1:]]  # Get row labels except the first one\ndata = [float(line.split(',')[1]) for line in lines[1:]]  # Get the numerical data\n\n# Plotting\nfig = plt.figure(figsize=(12, 8))  # Set a larger figsize to prevent content overflow\nax = fig.add_subplot(111)\nax.bar(line_labels, data, color=plt.cm.Paired(np.arange(len(data))))  # Fancy colors\n\n# Add grid, title, and improve layout\nax.grid(zorder=0)\nax.set_title('Federal Budget Allocation Across Policy Areas')\nax.set_ylabel(data_labels[0])\nax.tick_params(labelrotation=45)  # Rotate labels if they are too long\nplt.tight_layout()  # Automatically resize the image\n\n# Save the figure\nplt.savefig('./histogram/png_val/213.png', dpi=300)\n\n# Clear the current figure's state to avoid interference with other plots\nplt.clf() \n"
        },
        "QA": {
            "input": "How much more is the Healthcare budget allocation than the Welfare budget allocation?",
            "output": "$529.8 billion"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "107",
        "img": "./histogram/png/107.png",
        "topic": "Environment and Sustainability",
        "title": " Resource Consumption for Environmental and Sustainability Efforts",
        "csv": "Type of Resource \\t Consumption (million metric tons) \\n Water \\t 3200 \\n Petroleum \\t 1800 \\n Natural Gas \\t 1500 \\n Coal \\t 1200 \\n Renewables \\t 600 \\n Nuclear \\t 400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram outlines the consumption of various resources, measured in million metric tons, for environmental and sustainability efforts. Water displays the highest consumption at 3200 million metric tons, followed by petroleum at 1800 million metric tons, and natural gas at 1500 million metric tons. Coal comes next at 1200 million metric tons, with renewables and nuclear energy having considerably lower consumption figures, at 600 and 400 million metric tons, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport os\n\n# Data\ndata_labels = ['Water', 'Petroleum', 'Natural Gas', 'Coal', 'Renewables', 'Nuclear']\ndata = [3200, 1800, 1500, 1200, 600, 400]\nline_labels = ['Consumption (million metric tons)']\n\n# Plot settings\nsns.set_theme(style=\"whitegrid\")\nplt.figure(figsize=(10, 8))\nax = plt.subplot()\n\n# Create vertical histogram\nsns.barplot(x=data_labels, y=data, palette='viridis')\n\n# Set title and labels\nax.set_title('Resource Consumption for Environmental and Sustainability Efforts', fontsize=16)\nax.set_xlabel('Type of Resource', fontsize=14)\nax.set_ylabel('Consumption (million metric tons)', fontsize=14)\n\n# Rotate x-axis labels if too long\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha=\"right\", fontsize=12, wrap=True)\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save image to the specified path\nsave_path = './plotchart/data-300/histogram/png/107.png'\nos.makedirs(os.path.dirname(save_path), exist_ok=True)\nplt.savefig(save_path)\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "How much more water was consumed compared to renewables?",
            "output": "2600 million metric tons"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "37",
        "img": "./histogram/png/37.png",
        "topic": "Science and Engineering",
        "title": " Allocation of Research Funding Across Science and Engineering Projects",
        "csv": "Research Funding (Million USD) \\t  Number of Projects \\n 0-50 \\t  75 \\n 50-100 \\t  60 \\n 100-150 \\t  50 \\n 150-200 \\t  40 \\n 200-250 \\t  30 \\n 250-300 \\t  20 \\n 300-350 \\t  15 \\n 350-400 \\t  10 \\n 400-450 \\t  5 \\n 450-500 \\t  2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the distribution of research funding across various science and engineering projects. For funding ranges, projects with 0-50 million USD received the highest number at 75 projects. As the funding brackets increase by 50 million USD increments, the number of projects decreases, showing 60 projects for the 50-100 million USD range and down to 2 projects for the 450-500 million USD range. Each consecutive funding category reflects fewer projects, suggesting a possible inverse relationship between the amount of funding and the number of projects supported."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Define the data\ndata_labels = ['Research Funding (Million USD)', 'Number of Projects']\nline_labels = ['0-50', '50-100', '100-150', '150-200', '200-250', \n               '250-300', '300-350', '350-400', '400-450', '450-500']\ndata = [75, 60, 50, 40, 30, 20, 15, 10, 5, 2]\n\n# Transform the data into a DataFrame\ndf = pd.DataFrame(data, index=line_labels, columns=[data_labels[1]])\n\n# Create a figure and a subplot\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\n\n# Plot the data\ndf.plot(kind='bar', ax=ax, color='skyblue', width=0.8)\n\n# Set the title and labels\nax.set_title('Allocation of Research Funding Across Science and Engineering Projects')\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\n# Set grid, legend, and rotation for x-axis labels to avoid overlapping\nax.grid(True)\nax.legend().set_visible(False)\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')\n\n# Automatically adjust subplot params to give specified padding\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/data-300/histogram/png/37.png'\nplt.savefig(save_path, format='png')\n\n# Clear the current figure\nplt.clf()\n"
        },
        "QA": {
            "input": "How many projects are there within the funding range of 250-300 million USD?",
            "output": "20"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "90",
        "img": "./histogram/png/90.png",
        "topic": "Social Media and the Web",
        "title": " Daily Active Users Comparison Amongst Social Media Platforms",
        "csv": "Social Media Platform \\t  Daily Active Users (Million) \\n Twotter \\t 1.7999999999999998 \\n Vumblr \\t 3.1 \\n SnappyChat \\t 4.4 \\n Pictograph \\t 5.699999999999999 \\n LinkedOff \\t 7.0 \\n InstaSnap \\t 8.3 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram presents the daily active users for six different social media platforms, measured in millions. Twotter has approximately 1.8 million active daily users, Vumblr attracts about 3.1 million, and SnappyChat around 4.4 million. Pictograph shows a user count of nearly 5.7 million, LinkedOff has 7 million daily active users, and InstaSnap tops the chart with 8.3 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport os\n\n# Given data breakdown\ndata_labels = [\"Daily Active Users (Million)\"]\nline_labels = [\"Twotter\", \"Vumblr\", \"SnappyChat\", \"Pictograph\", \"LinkedOff\", \"InstaSnap\"]\ndata = [np.mean([1.2, 2.4]), np.mean([2.5, 3.7]), np.mean([3.8, 5.0]), np.mean([5.1, 6.3]), np.mean([6.4, 7.6]), np.mean([7.7, 8.9])]\n\n# Creating DataFrame from the given data\ndf = pd.DataFrame(list(zip(line_labels, data)), columns=['Platform', 'Average Daily Active Users'])\n\n# Create a figure and a grid of subplots\nplt.figure(figsize=(10, 8))\nax = plt.subplot()\n\n# Plotting data\nsns.barplot(x='Platform', y='Average Daily Active Users', data=df, ax=ax, palette=\"viridis\")\n\n# Set figure aesthetics\nplt.title('Daily Active Users Comparison Amongst Social Media Platforms', fontsize=16)\nplt.xlabel(data_labels[0], fontsize=14)\nplt.ylabel('Average Users (Million)', fontsize=14)\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right', fontsize=12)\nplt.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Automatically adjust subplot params for a nicer fit\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/data-300/histogram/png/90.png'\nif not os.path.exists(os.path.dirname(save_path)):\n    os.makedirs(os.path.dirname(save_path))\n\nplt.savefig(save_path, format='png', dpi=300)\n\n# Clear the current figure's state\nplt.clf()\n"
        },
        "QA": {
            "input": "Which social media platform has the least daily active users?",
            "output": "Twotter"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "130",
        "img": "./histogram/png/130.png",
        "topic": "Business and Finance",
        "title": " Quarterly Revenue Growth in the Financial Sector",
        "csv": "Quarter \\t Revenue Growth (%) \\n Q1 \\t 5.2 \\n Q2 \\t 4.6 \\n Q3 \\t 4.9 \\n Q4 \\t 5.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram presents the quarterly revenue growth percentages in the financial sector. In Q1, the growth is 5.2%, followed by a slight decrease to 4.6% in Q2. A minor increase to 4.9% occurs in Q3, and Q4 sees the highest growth at 5.5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Given data\ndata_str = \"Quarter,Revenue Growth (%)\\nQ1,5.2\\nQ2,4.6\\nQ3,4.9\\nQ4,5.5\"\n\n# Transform data into required variables\nrows = data_str.split('\\n')\ndata_labels = rows[0].split(',')[1:]  # Skip the first label 'Quarter'\nline_labels = [row.split(',')[0] for row in rows[1:]]\ndata = [float(row.split(',')[1]) for row in rows[1:]]\n\n# Create a figure and a horizontal bar plot\nplt.figure(figsize=(10, 8))\nax = plt.subplot()\n\n# Create horizontal bar plot using seaborn\nsns.barplot(x=data, y=line_labels, palette='viridis')\n\n# Set title and adjust layout\nax.set_title('Quarterly Revenue Growth in the Financial Sector')\nplt.xlabel('Revenue Growth (%)')\nplt.ylabel('Quarter')\nplt.xticks(rotation=45, ha='right')\n\n# Ensure grid is displayed\nax.yaxis.grid(True)\n\n# Make sure all labels are displayed clearly\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/data-300/histogram/png/130.png'\nplt.savefig(save_path)\n\n# Clear the current figure state to prevent interference with any subsequent plots\nplt.clf()\n"
        },
        "QA": {
            "input": "What was the revenue growth in Q3?",
            "output": "4.9%"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "231",
        "img": "./histogram/png/231.png",
        "topic": "Environment and Sustainability",
        "title": " Global CO2 Emissions Distribution by Top Emitting Countries",
        "csv": "CO2 Emissions (Million Metric Tons) \\t Country \\n USA \\t 5000 \\n China \\t 10000 \\n India \\t 2400 \\n Russia \\t 1700 \\n Japan \\t 1200 \\n Germany \\t 800 \\n Canada \\t 700 \\n South Korea \\t 600 \\n UK \\t 500 \\n France \\t 400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the distribution of CO2 emissions, measured in million metric tons, by top emitting countries. The data shows the USA emitting 5000 million metric tons, China at 10000, India with 2400, Russia at 1700, Japan emitting 1200, Germany at 800, Canada with 700, South Korea at 600, the UK at 500, and France emitting the least among them with 400 million metric tons."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\n\n# Data preparation\ndata = np.array([5000, 10000, 2400, 1700, 1200, 800, 700, 600, 500, 400])\ndata_labels = ['USA', 'China', 'India', 'Russia', 'Japan', 'Germany', 'Canada', 'South Korea', 'UK', 'France']\nline_labels = 'CO2 Emissions (Million Metric Tons)'\n\n# Create a DataFrame for the dataset\ndf = pd.DataFrame({\n    'Country': data_labels,\n    'CO2 Emissions (Million Metric Tons)': data\n})\n\n# Plotting\nplt.figure(figsize=(10, 8))\nax = plt.subplot()\n\n# Plot the histogram using Seaborn\nsns.barplot(x='Country', y='CO2 Emissions (Million Metric Tons)', data=df, ax=ax, palette=\"viridis\")\n\n# Set title, label rotation and adjustment for long labels.\nax.set_title('Global CO2 Emissions Distribution by Top Emitting Countries')\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha=\"right\")\nplt.tight_layout()\n\n# Saving the figure to the specific path\nsave_path = './plotchart/data-300/histogram/png/231.png'\nplt.savefig(save_path, format='png', dpi=300)\n\n# Clear the current figure's state\nplt.clf()\n"
        },
        "QA": {
            "input": "Which country has the highest CO2 emissions according to the data?",
            "output": "China"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "223",
        "img": "./histogram/png/223.png",
        "topic": "Retail and E-commerce",
        "title": " Monthly Retail E-commerce Sales Distribution",
        "csv": "Monthly Sales (Billion $) \\t Number of Retailers \\n January \\t 1.5 \\n February \\t 1.2 \\n March \\t 1.7 \\n April \\t 2.0 \\n May \\t 2.4 \\n June \\t 2.3 \\n July \\t 2.5 \\n August \\t 2.2 \\n September \\t 1.9 \\n October \\t 2.6 \\n November \\t 2.8 \\n December \\t 3.0 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the monthly retail e-commerce sales distribution in billion dollars alongside the number of retailers. It begins in January with sales at $1.5 billion, then drops slightly in February to $1.2 billion. Sales increase in March to $1.7 billion, climbing consistently through April with $2.0 billion, May with $2.4 billion, and June with $2.3 billion. July hits a peak of $2.5 billion before a dip in August to $2.2 billion. Sales rise again in September to $1.9 billion, peaking in the last quarter with October at $2.6 billion, November at $2.8 billion, and December at $3.0 billion."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Given data\ndata_labels = ['Monthly Sales (Billion $)', 'Number of Retailers']\nline_labels = ['January', 'February', 'March', 'April', 'May', 'June', \n               'July', 'August', 'September', 'October', 'November', 'December']\ndata = [1.5, 1.2, 1.7, 2.0, 2.4, 2.3, 2.5, 2.2, 1.9, 2.6, 2.8, 3.0]\n\n# Setting up the figure and axis\nplt.figure(figsize=(10, 8))\nax = plt.subplot()\n\n# Plotting the data\nsns.barplot(x=line_labels, y=data, ax=ax, palette='viridis')\n\n# Set title\nplt.title('Monthly Retail E-commerce Sales Distribution', fontsize=16)\n\n# Enhance x-label appearance\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right', fontsize=10, wrap=True)\nax.set_ylabel('Number of Retailers')\n# Add grid\nax.grid(axis='y')\n\n# Automatically adjust layout to prevent clipping labels and title\nplt.tight_layout()\n\n# Save the figure\nsave_path = './histogram/png_val/223.png'\nplt.savefig(save_path, format='png', dpi=300)\n\n# Clear the current figure\nplt.clf()\n"
        },
        "QA": {
            "input": "In which month did the number of retailers hit the lowest figure according to the data provided?",
            "output": "The dataset does not provide information regarding the number of retailers for each month, only the sales figures"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "220",
        "img": "./histogram/png/220.png",
        "topic": "Real Estate and Housing Market",
        "title": " Housing Sales Distribution by Price Range",
        "csv": "Housing Price Range (Thousands) \\t Number of Houses Sold \\n 100-200 \\t 55 \\n 200-300 \\t 75 \\n 300-400 \\t 90 \\n 400-500 \\t 60 \\n 500-600 \\t 40 \\n 600-700 \\t 30 \\n 700-800 \\t 20 \\n 800-900 \\t 15 \\n 900-1000 \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the distribution of housing sales across different price ranges. In total, eight price categories are highlighted, ranging from $100,000 to $1,000,000. The data shows that 55 houses were sold in the $100-200K range, with sales peaking at 90 houses in the $300-400K range. Fewer houses were sold as the price increased: 60 houses in the $400-500K range, decreasing to 10 houses in the $900-1000K range."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Given data\ndata_str = \"\"\"Housing Price Range (Thousands),Number of Houses Sold\n100-200,55\n200-300,75\n300-400,90\n400-500,60\n500-600,40\n600-700,30\n700-800,20\n800-900,15\n900-1000,10\"\"\"\n\n# Transforming the data into three variables: data_labels, data, and line_labels\ndata_lines = data_str.strip().split('\\n')\ndata_labels = [data_lines[0].split(',')[1]]  # Only one data_label\nline_labels = [line.split(',')[0] for line in data_lines[1:]]  # Price ranges\ndata = [int(line.split(',')[1]) for line in data_lines[1:]]  # Number of houses sold\n\n# Create a DataFrame for easy plotting with pandas\ndf = pd.DataFrame(data={'Number of Houses Sold': data}, index=line_labels)\n\n# Set up the matplotlib figure and axes\nplt.figure(figsize=(12, 8))\nax = plt.subplot()\n\n# Plot the data as a vertical histogram\ndf.plot(kind='bar', ax=ax, color='skyblue', legend=False)\n\n# Adding grid, titles and labels\nax.set_title(\"Housing Sales Distribution by Price Range\")\nax.set_xlabel(\"Housing Price Range (Thousands)\")\nax.set_ylabel(\"Number of Houses Sold\")\n\n# Handle long text labels\nplt.xticks(rotation=45, wrap=True)\n\n# Resize the image to fit content\nplt.tight_layout()\n\n# Save the figure to the specified path\nsave_path = \"./plotchart/data-300/histogram/png/220.png\"\nplt.savefig(save_path)\n\n# Clear the current image state at the end of the code\nplt.clf()\n"
        },
        "QA": {
            "input": "How many houses were sold in the price range of 500-600 thousands?",
            "output": "40"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "280",
        "img": "./histogram/png/280.png",
        "topic": "Law and Legal Affairs",
        "title": " Annual Number of Legal Cases by Crime Category",
        "csv": "Crime Category \\t  Number of Cases \\n Assault \\t  3500 \\n Burglary \\t  1500 \\n Cybercrime \\t  1200 \\n Drug Offenses \\t  2700 \\n Fraud \\t  2100 \\n Human Trafficking \\t  700 \\n Robbery \\t  900 \\n White Collar Crimes \\t  1100 \\n Environmental Crimes \\t  400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram represents the annual number of cases across various crime categories. Assault leads with 3500 cases, followed by drug offenses at 2700 and fraud at 2100 cases. Burglary and cybercrime account for 1500 and 1200 cases, respectively. Lesser numbers are seen in robbery with 900 cases, white-collar crimes at 1100 cases, and human trafficking with 700 cases. Environmental crimes have the fewest reported cases at 400."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Given data\ndata_labels = ['Crime Category', 'Number of Cases']\nline_labels = ['Assault', 'Burglary', 'Cybercrime', 'Drug Offenses', 'Fraud', \n               'Human Trafficking', 'Robbery', 'White Collar Crimes', 'Environmental Crimes']\ndata = [3500, 1500, 1200, 2700, 2100, 700, 900, 1100, 400]\n\n# Transforming the data\ndf = pd.DataFrame(data, index=line_labels, columns=[data_labels[1]])\n\n# Create the figure and the axes\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111)\n\n# Plotting the data\ndf.plot(kind='bar', ax=ax, color='skyblue')\n\n# Set the title\nax.set_title('Annual Number of Legal Cases by Crime Category')\n\n# Set x-axis label\nax.set_xlabel(data_labels[0])\n\n# Set y-axis label\nax.set_ylabel(data_labels[1])\n\n# Enable grid\nax.grid(True)\n\n# Rotate x-axis labels if they are too long\nax.set_xticklabels(line_labels, rotation=45, ha=\"right\")\n\n# Automatically resize the image and layout\nplt.tight_layout()\n\n# Save the image to the absolute path\nsave_path = './plotchart/demo/histogram/png/630.png'\nplt.savefig(save_path, format='png', dpi=300)\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "Which crime category has the highest number of cases?",
            "output": "Assault"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "32",
        "img": "./histogram/png/32.png",
        "topic": "Business and Finance",
        "title": " Corporate Revenue Distribution Across Various Sectors",
        "csv": "Revenue Range (Billion USD) \\t  Number of Corporations \\n 1-10 \\t  50 \\n 10-20 \\t  35 \\n 20-30 \\t  20 \\n 30-40 \\t  15 \\n 40-50 \\t  10 \\n 50-60 \\t  7 \\n 60-70 \\t  3 \\n 70-80 \\t  2 \\n 80-90 \\t  1 \\n 90-100 \\t  1 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the distribution of corporations across various revenue ranges in billion USD. Fifty corporations have revenues between 1-10 billion, thirty-five between 10-20 billion, twenty between 20-30 billion, fifteen between 30-40 billion, ten between 40-50 billion, seven between 50-60 billion, three between 60-70 billion, two between 70-80 billion, and one corporation each in the 80-90 billion and 90-100 billion revenue ranges."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Given data\ndata_info = \"\"\"\n1-10,50\n10-20,35\n20-30,20\n30-40,15\n40-50,10\n50-60,7\n60-70,3\n70-80,2\n80-90,1\n90-100,1\n\"\"\"\n\n# Process data\ndata_lines = data_info.strip().split(\"\\n\")\ndata_labels = [\"Revenue Range (Billion USD)\", \"Number of Corporations\"]\nline_labels = [line.split(',')[0] for line in data_lines]\ndata = [int(line.split(',')[1]) for line in data_lines]\n\n# Create DataFrame\ndf = pd.DataFrame(data, index=line_labels, columns=[data_labels[1]])\n\n# Plotting setup\nplt.figure(figsize=(12, 8))\nax = plt.subplot()\n\n# Create seaborn histogram\nsns.barplot(x=df.index, y=data_labels[1], data=df, ax=ax, palette=\"viridis\")\n\n# Set title\nax.set_title('Corporate Revenue Distribution Across Various Sectors')\n\n# Set axis labels\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\n# Rotate x-axis labels if too long\nax.set_xticklabels(ax.get_xticklabels(), rotation=45)\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the image\nsave_path = './plotchart/data-300/histogram/png/32.png'\nplt.savefig(save_path)\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "How many corporations have a revenue range between 30-40 billion USD?",
            "output": "15"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "16",
        "img": "./histogram/png/16.png",
        "topic": "Technology and the Internet",
        "title": " Global Distribution of Internet Connection Speeds",
        "csv": "Global Internet Speed (Mbps) \\t  Number of Countries \\n 1-5 \\t  4 \\n 6-10 \\t  8 \\n 11-15 \\t  14 \\n 16-20 \\t  17 \\n 21-25 \\t  21 \\n 26-30 \\t  25 \\n 31-35 \\t  19 \\n 36-40 \\t  15 \\n 41-45 \\t  10 \\n 46-50 \\t  6 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the global distribution of internet connection speeds in Mbps, categorized into ranges, with the corresponding number of countries falling within each range. The speeds range from 1-5 Mbps in 4 countries to 46-50 Mbps in 6 countries. The number of countries increases from the lowest speed category to a peak of 25 countries within the 26-30 Mbps range, before tapering off in higher speed categories up to 50 Mbps."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# The given data\ndata_labels = ['Global Internet Speed (Mbps)', 'Number of Countries']\nline_labels = ['1-5', '6-10', '11-15', '16-20', '21-25', '26-30', '31-35', '36-40', '41-45', '46-50']\ndata = [\n    [4],\n    [8],\n    [14],\n    [17],\n    [21],\n    [25],\n    [19],\n    [15],\n    [10],\n    [6]\n]\n\n# Create a DataFrame using the data and labels\ndf = pd.DataFrame(data, index=line_labels, columns=data_labels[1:])\n\n# Create a figure with a larger size\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111)\n\n# Plotting the data\ndf.plot(kind='barh', ax=ax, legend=False)\n\n# Adding grid, labels, and title\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\nax.set_xlabel(data_labels[1])\nax.set_title('Global Distribution of Internet Connection Speeds')\n\n# Set rotation or wrap if necessary for long text\nax.set_yticklabels(line_labels, rotation=0, wrap=True)\n\n# Resize the image before saving using tight_layout\nplt.tight_layout()\n\n# Save the image\nsave_path = './plotchart/data-300/histogram/png/16.png'\nplt.savefig(save_path, dpi=300)\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "How many countries have internet speeds in the range 26-30 Mbps?",
            "output": "25"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "151",
        "img": "./histogram/png/151.png",
        "topic": "Science and Engineering",
        "title": " Research Funding Allocation Across Science and Engineering Projects",
        "csv": "Research Funding ($Million) \\t  Number of Projects \\n 100-200 \\t  8 \\n 200-300 \\t  10 \\n 300-400 \\t  12 \\n 400-500 \\t  14 \\n 500-600 \\t  9 \\n 600-700 \\t  7 \\n 700-800 \\t  5 \\n 800-900 \\t  4 \\n 900-1000 \\t  3 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the allocation of research funding across science and engineering projects in various funding ranges, measured in millions of dollars. Each range of funding, starting from $100-200 million up to $900-1000 million, corresponds to a certain number of projects. There are 8 projects in the $100-200 million range, 10 projects for $200-300 million range, and the number of projects increases up to the $400-500 million range with 14 projects. Beyond this peak, there is a gradual decrease, with 9 projects in the $500-600 million range and finally down to 3 projects in the $900-1000 million range."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\n\n# Given data\ndata_labels = ['Research Funding ($Million)', 'Number of Projects']\nline_labels = [\n    '100-200', '200-300', '300-400', '400-500', \n    '500-600', '600-700', '700-800', '800-900', '900-1000'\n]\ndata = [\n    8, 10, 12, 14, \n    9, 7, 5, 4, 3\n]\n\n# Create figure and add a subplot\nfig = plt.figure(figsize=(12, 8))  # specify the larger figure size\nax = fig.add_subplot(111)\n\n# Plot data\nax.bar(line_labels, data, color=plt.cm.Paired.colors)  # Use the paired colormap for fancy colors\n\n# Set the grid\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Set title and labels\nax.set_title('Research Funding Allocation Across Science and Engineering Projects')\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1])\n\n# Set x-axis labels on separate lines if too long or rotate if necessary\nax.set_xticklabels(line_labels, rotation=45, ha=\"right\")\n\n# Automatically tighten the layout\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/data-300/histogram/png/151.png'\nplt.savefig(save_path, format='png')\n\n# Clear figure\nplt.clf()\n"
        },
        "QA": {
            "input": "How many projects received funding in the range of $400-500 million?",
            "output": "14"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "146",
        "img": "./histogram/png/146.png",
        "topic": "Healthcare and Health",
        "title": " Global Life Expectancy Distribution",
        "csv": "Life Expectancy (Years) \\t  Number of Countries \\n 50-60 \\t  4 \\n 60-70 \\t  10 \\n 70-80 \\t  35 \\n 80-90 \\t  45 \\n 90-100 \\t  6 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the distribution of global life expectancy across different ranges for a number of countries. The range of 50-60 years has 4 countries, 60-70 years is represented by 10 countries, a significant increase is seen in the 70-80 years category with 35 countries. The highest number of countries, 45, falls within the 80-90 years life expectancy range. Finally, there are 6 countries with a life expectancy between 90-100 years."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\n\n# Variables from the data\ndata_labels = ['50-60', '60-70', '70-80', '80-90', '90-100']\ndata = [4, 10, 35, 45, 6]\nline_labels = ['Life Expectancy (Years)', 'Number of Countries']\n\n# Creating a figure with larger figsize to prevent content from being squeezed\nplt.figure(figsize=(12, 7))\n\n# Create an axis instance\nax = plt.subplot()\n\n# Plotting the data using a horizontal bar chart\nax.barh(data_labels, data, align='center', color='skyblue', edgecolor='black')\n\n# Adding the grid, title, and labels\nplt.grid(linestyle='--', linewidth=0.5)\nplt.title('Global Life Expectancy Distribution')\n\n# Set the label rotation or wrapping if too long\nax.set_yticklabels(data_labels, wrap=True)\nax.set_xlabel('Number of Countries')\n\n# Automatically adjust subplot params so the subplot(s) fits into the figure area\nplt.tight_layout()\n\n# Save the figure\nsave_path = './histogram/png_val/146.png'\nplt.savefig(save_path, format='png')\n\n# Clear the current figure state to ensure no overlap on future plots\nplt.clf()\n"
        },
        "QA": {
            "input": "How many countries have a life expectancy between 70-80 years?",
            "output": "35"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "143",
        "img": "./histogram/png/143.png",
        "topic": "Healthcare and Health",
        "title": " Patient Distribution by BMI Classification in Healthcare Data",
        "csv": "BMI Classification \\t Number of Patients (Thousands) \\n Underweight (<18.5) \\t 25 \\n Normal weight (18.5-24.9) \\t 200 \\n Overweight (25-29.9) \\t 150 \\n Obesity I (30-34.9) \\t 120 \\n Obesity II (35-39.9) \\t 90 \\n Extreme Obesity III (\u226540) \\t 60 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the distribution of patients categorized by their Body Mass Index (BMI) classification based on healthcare data. There are 25 thousand patients underweight, 200 thousand with normal weight, 150 thousand overweight, 120 thousand with Obesity I, 90 thousand with Obesity II, and 60 thousand with Extreme Obesity III."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Data parsing and transformation\nraw_data = \"BMI Classification,Number of Patients (Thousands)/n \" \\\n           \"Underweight (<18.5),25/n Normal weight (18.5-24.9),200/n \" \\\n           \"Overweight (25-29.9),150/n Obesity I (30-34.9),120/n \" \\\n           \"Obesity II (35-39.9),90/n Extreme Obesity III (\u226540),60\"\n\n# Split the string into lines\nlines = raw_data.split('/n ')\n\n# Extract labels for data\ndata_labels = lines[0].split(',')\n\n# Extract labels for lines and the data itself\nline_labels = []\ndata = []\nfor line in lines[1:]:\n    label, value = line.rsplit(',', 1)\n    line_labels.append(label)\n    data.append(int(value))\n\n# Convert to DataFrame for plotting\ndf = pd.DataFrame(data, index=line_labels, columns=[data_labels[1]])\n\n# Create figure and plot horizontal bar chart (histogram)\nplt.figure(figsize=(10, 6))\nax = plt.subplot()\ndf.plot(kind='barh', legend=False, ax=ax, color='#1f77b4')\n\n# Customizing the plot to make it intuitive\nplt.title('Patient Distribution by BMI Classification in Healthcare Data')\nplt.xlabel(data_labels[1])\nplt.ylabel(data_labels[0])\nplt.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\nplt.tight_layout()\n\n# Ensure the y-axis labels' full text is shown\nax.yaxis.get_label().set_wrap(True)\nax.set_yticklabels(line_labels, rotation=0)\n\n# Save the figure\nplt.savefig('./plotchart/data-300/histogram/png/143.png', format='png')\n\n# Clear the current image state at the end of the code\nplt.clf()\n"
        },
        "QA": {
            "input": "How many more patients fall under the \"Normal weight\" category compared to the \"Extreme Obesity III\" category?",
            "output": "140,000 patients"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "244",
        "img": "./histogram/png/244.png",
        "topic": "Agriculture and Food Production",
        "title": " Global Annual Yield of Key Agricultural Products",
        "csv": "Crop Type \\t Annual Yield (million metric tons) \\n Cereals \\t 218.5 \\n Vegetables \\t 411.2 \\n Fruits \\t 370.3 \\n Oilseeds \\t 125.4 \\n Pulses \\t 81.9 \\n Nuts \\t 46.8 \\n Spices \\t 17.5 \\n Coffee \\t 8.9 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the global annual yield of various agricultural products measured in million metric tons. Cereals yielded 218.5, vegetables at 411.2, and fruits at 370.3 million metric tons. Oilseeds had a yield of 125.4, pulses at 81.9, and nuts at 46.8 million metric tons. Finally, spices yielded 17.5 million metric tons, and coffee production was at 8.9 million metric tons."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Create the data\ndata_labels = ['Annual Yield (million metric tons)']\nline_labels = ['Cereals', 'Vegetables', 'Fruits', 'Oilseeds', 'Pulses', 'Nuts', 'Spices', 'Coffee']\ndata = [218.5, 411.2, 370.3, 125.4, 81.9, 46.8, 17.5, 8.9]\n\n# Transform data into a DataFrame\ndf = pd.DataFrame(data, index=line_labels, columns=data_labels)\n\n# Create a figure object and add a subplot\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111)\n\n# Plot the data\ndf.plot(kind='bar', ax=ax, color='skyblue', grid=True)\n\n# Set title and labels\nax.set_title('Global Annual Yield of Key Agricultural Products', fontsize=16)\nax.set_xlabel('Crop Type', fontsize=12)\nax.set_ylabel('Annual Yield (million metric tons)', fontsize=12)\n\n# Manage the labels to prevent overlapping\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right', wrap=True)\n\n# Tight layout to adjust spacing\nplt.tight_layout()\n\n# Save figure\nsave_path = './plotchart/data-300/histogram/png/244.png'\nplt.savefig(save_path, dpi=300)\n\n# Clear the current figure state\nplt.clf()\n"
        },
        "QA": {
            "input": "Which crop type has the lowest annual yield according to the data?",
            "output": "Coffee"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "241",
        "img": "./histogram/png/241.png",
        "topic": "Education and Academics",
        "title": " Average GPA by Academic Level in US Colleges",
        "csv": "Grade Level \\t Average GPA \\n Freshman \\t 2.9 \\n Sophomore \\t 3.0 \\n Junior \\t 3.1 \\n Senior \\t 3.2 \\n Graduate \\t 3.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the average GPA by academic level in US colleges. Freshmen have an average GPA of 2.9, which is the lowest among the levels. This increases slightly for Sophomores to an average GPA of 3.0. Juniors see a further increment to 3.1, and Seniors record an average GPA of 3.2. Graduate students have the highest average GPA at 3.5."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\n\n# Define data and labels\ndata_labels = ['Freshman', 'Sophomore', 'Junior', 'Senior', 'Graduate']\nline_labels = ['Average GPA']\ndata = [2.9, 3.0, 3.1, 3.2, 3.5]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\nax.set_title('Average GPA by Academic Level in US Colleges')\n\n# Plot a horizontal bar chart\nbars = ax.barh(data_labels, data, color=plt.cm.tab20.colors)\n\n# Add data labels with a different style, by iterating over the bars\nfor bar in bars:\n    ax.text(\n        bar.get_width(),\n        bar.get_y() + bar.get_height() / 2,\n        f\"{bar.get_width():.1f}\",\n        va='center',\n        ha='left'\n    )\n\n# Add grid lines behind bars\nax.set_axisbelow(True)\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\nax.set_xlabel('Average GPA')\n# Rotate labels if necessary - in this case, not required since the labels are short\n# plt.xticks(rotation=45, ha='right')\n# plt.yticks(wrap=True)  # Wraps the y labels if the text is too long\n\n# Check the representation to make sure everything fits well\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./histogram/png_val/241.png')\n\n# Clear the current figure to prevent re-plotting the same data\nplt.clf()\n"
        },
        "QA": {
            "input": "What is the average GPA for Juniors?",
            "output": "3.1"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "236",
        "img": "./histogram/png/236.png",
        "topic": "Real Estate and Housing Market",
        "title": " Trends in Housing Sales Across Price Ranges",
        "csv": "Housing Price Range (Thousands) \\t  Number of Houses Sold \\n 100-200 \\t  30 \\n 200-300 \\t  45 \\n 300-400 \\t  60 \\n 400-500 \\t  50 \\n 500-600 \\t  40 \\n 600-700 \\t  20 \\n 700-800 \\t  10 \\n 800-900 \\t  5 \\n 900-1000 \\t  2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram illustrates the trends in housing sales across various price ranges. It shows that 30 houses were sold in the 100-200 thousand price range, whereas the 200-300 thousand range saw 45 houses sold. Sales peaked at 60 houses in the 300-400 thousand range, then decreased as the price range increased: 50 houses in the 400-500 thousand range, down to just 2 houses in the 900-1000 thousand range."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\n\n# Given data\ndata_labels = [\"Housing Price Range (Thousands)\", \"Number of Houses Sold\"]\nline_labels = [\"100-200\", \"200-300\", \"300-400\", \"400-500\", \"500-600\", \"600-700\", \"700-800\", \"800-900\", \"900-1000\"]\ndata = [30, 45, 60, 50, 40, 20, 10, 5, 2]\n\n# Setting up the figure and axis\nplt.figure(figsize=(12, 8))\nax = plt.subplot()\n\n# Creating the horizontal bar chart\nax.barh(line_labels, data, color='#1f77b4', edgecolor='black')\n\n# Adding grid, title and labels\nplt.title('Trends in Housing Sales Across Price Ranges')\nax.set_xlabel(data_labels[1])\nax.set_ylabel(data_labels[0])\n\n# Rotate x-ticks labels if necessary\nplt.xticks(rotation=45, ha='right')\nplt.yticks(wrap=True)\n\n# Adjust layout to fit everything and prevent content from being displayed too densely\nplt.tight_layout()\n\n# Saving the figure to the specified path\nsave_path = './plotchart/data-300/histogram/png/236.png'\nplt.savefig(save_path)\n\n# Clear the current figure after saving to prevent replotting on the same figure\nplt.clf()\n"
        },
        "QA": {
            "input": "How many houses were sold in the price range of 400-500 thousands?",
            "output": "50"
        }
    },
    {
        "chart_type": "histogram",
        "imgname": "30",
        "img": "./histogram/png/30.png",
        "topic": "Social Media and the Web",
        "title": " Global Social Media Usage by Average Daily Time Spent",
        "csv": "Average Daily Use (Hours) \\t Number of Users (Million) \\n 0-1 \\t 35 \\n 1-2 \\t 50 \\n 2-3 \\t 70 \\n 3-4 \\t 65 \\n 4-5 \\t 40 \\n 5-6 \\t 20 \\n 6-7 \\t 10 \\n 7-8 \\t 5 \\n 8-9 \\t 2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The histogram represents global social media usage by categorizing the average daily time spent by users into hourly segments, with the number of users measured in millions. The 0-1 hour category has 35 million users, while the 1-2 hour group sees an increase to 50 million users. Usage peaks within the 2-3 hour segment, at 70 million users. The number of users then decreases as the hours increase, showing 65 million at 3-4 hours, and tapering down to 5 million for those utilizing social media for 7-8 hours daily."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport os\n\n# Define the data\ndata_labels = ['Number of Users (Million)']\nline_labels = ['0-1', '1-2', '2-3', '3-4', '4-5', '5-6', '6-7', '7-8', '8-9']\ndata = [\n    35,\n    50,\n    70,\n    65,\n    40,\n    20,\n    10,\n    5,\n    2\n]\n\n# Create a DataFrame\ndf = pd.DataFrame(data, columns=data_labels, index=line_labels)\ndf.index.name = 'Average Daily Use (Hours)'\n\n# Create a Figure and a subplot\nplt.figure(figsize=(10, 8))\nax = plt.subplot()\n\n# Seaborn histogram\nsns.barplot(data=df.reset_index(), x='Average Daily Use (Hours)', y='Number of Users (Million)', ax=ax)\n\n# Rotate the labels if necessary\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha=\"right\", wrap=True)\n\n# Enhancing the design with grids\nplt.grid(True)\n\n# Set the title of the figure\nplt.title('Global Social Media Usage by Average Daily Time Spent')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Define the save path\nsave_path = './plotchart/chart_simulation_final/histogram/png/30.png'\n\n# Create directories if not exist\nos.makedirs(os.path.dirname(save_path), exist_ok=True)\n\n# Save the figure\nplt.savefig(save_path)\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "What is the total number of users who spend between 3 and 6 hours daily on social media?",
            "output": "125 million"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_5",
        "img": "./multi-axes/png/multi-axes_5.png",
        "topic": "Transportation and Logistics",
        "title": " Transportation and Logistics Performance Analysis: Volume, Revenue, and Delivery Time ",
        "csv": "Category \\t Volume Handled (Millions of Tonnes) \\t Revenue (Billions of Dollars) \\t Average Delivery Time (Minutes) \\n Freight \\t 7.2 \\t 79.9 \\t 330 \\n Passenger Transport \\t 10.9 \\t 31.1 \\t 234 \\n Warehousing \\t 5 \\t 65.9 \\t 300 \\n Shipping \\t 6.5 \\t 30.4 \\t 198 \\n Courier Services \\t 14.9 \\t 27 \\t 396 \\n Air Transport \\t 7.1 \\t 72.5 \\t 186 \\n Rail Transport \\t 11.3 \\t 81.8 \\t 204 \\n Trucking \\t 12.2 \\t 30 \\t 330 \\n Pipeline Transport \\t 6 \\t 72.5 \\t 420 \\n Logistics Services \\t 6 \\t 76.3 \\t 300 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This multi-axes chart examines several aspects of the transportation and logistics industry, comparing volume handled in millions of tonnes, revenue in billions of dollars, and average delivery time in minutes across different categories for a given period. Categories include Freight, Passenger Transport, Warehousing, Shipping, Courier Services, Air Transport, Rail Transport, Trucking, Pipeline Transport, and Logistics Services. Volume handled ranges from 5 to 14.9 million tonnes, revenue spans from $27 billion to $81.8 billion, and delivery times vary from 186 to 420 minutes across the sectors. Each category is distinctly analyzed across the three dimensions to provide a comprehensive overview."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform data into three variables\ndata_labels = [\"Volume Handled (Millions of Tonnes)\", \"Revenue (Billions of Dollars)\", \"Average Delivery Time (Minutes)\"]\nline_labels = [\"Freight\", \"Passenger Transport\", \"Warehousing\", \"Shipping\", \"Courier Services\", \"Air Transport\", \"Rail Transport\", \"Trucking\", \"Pipeline Transport\", \"Logistics Services\"]\ndata = np.array([[7.2, 79.9, 330],\n                 [10.9, 31.1, 234],\n                 [5.0, 65.9, 300],\n                 [6.5, 30.4, 198],\n                 [14.9, 27.0, 396],\n                 [7.1, 72.5, 186],\n                 [11.3, 81.8, 204],\n                 [12.2, 30.0, 330],\n                 [6.0, 72.5, 420],\n                 [6.0, 76.3, 300]])\n\n# Create figure\nplt.figure(figsize = (15,10))\n\n# Plot data\nax1 = plt.subplot(111)\nax1.bar(line_labels, data[:,0], width = 0.2, color = 'blue', alpha = 0.7)\nax1.set_ylabel(data_labels[0], color = 'blue')\nax1.set_xlabel(\"Category\")\nax1.set_title(\"Transportation and Logistics Performance Analysis: Volume, Revenue, and Delivery Time\")\nax1.grid()\nax1.tick_params(axis = 'y', colors = 'blue')\n\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:,1], linestyle = '-', marker = 'o', color = 'red')\nax2.set_ylabel(data_labels[1], color = 'red')\nax2.tick_params(axis = 'y', colors = 'red')\n\nax3 = ax1.twinx()\nax3.plot(line_labels, data[:,2], linestyle = '-', marker = 'o', color = 'green')\nax3.spines['right'].set_position(('axes', 1.1))\nax3.set_ylabel(data_labels[2], color = 'green')\nax3.tick_params(axis = 'y', colors = 'green')\n\n# Adjust the range of all axes\nfor ax in [ax1, ax2, ax3]:\n    ax.locator_params(axis = 'y', nbins = 5)\n\n# Show the legends\nax1.legend(labels = [data_labels[0]], loc = 'upper left')\nax2.legend(labels = [data_labels[1]], loc = 'upper right')\nax3.legend(labels = [data_labels[2]], loc = 'upper right')\n\n# Automatically resize image\nplt.tight_layout()\n\n# Save figure\nplt.savefig(\"./multi-axes/png/12_202312251608.png\", dpi = 300)\n\n# Clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the revenue of rail transport?",
            "output": "81.8 billion dollars"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_42",
        "img": "./multi-axes/png/multi-axes_42.png",
        "topic": "Technology and the Internet",
        "title": "Tech and Internet Usage Analysis: User Base, Revenues, and Time Spent ",
        "csv": "Category \\t Number of Users (Millions) \\t Revenue (Billions of Dollars) \\t Average Session Length (Minutes) \\n Social Media \\t 2.9 \\t 7.5 \\t 41 \\n Video Streaming \\t 1.3 \\t 17.3 \\t 20 \\n Online Shopping \\t 2.3 \\t 5.7 \\t 28 \\n Cloud Computing \\t 1.1 \\t 3.2 \\t 14 \\n Digital Advertising \\t 1.8 \\t 80.2 \\t 14 \\n Mobile Apps \\t 1.5 \\t 4.2 \\t 10 \\n Online Gaming \\t 1.2 \\t 4.7 \\t 30 \\n E-learning \\t 0.8 \\t 2.1 \\t 35 \\n Cybersecurity \\t 0.4 \\t 1.2 \\t 20 \\n Artificial Intelligence \\t 0.2 \\t 1.7 \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart represents tech and internet usage across several categories in terms of user base (in millions), revenue (in billions of dollars), and average session length (in minutes). Categories include Social Media with 2.9 million users, $7.5 billion revenue, and 41 minutes average session length. Video Streaming has 1.3 million users, $17.3 billion revenue, and 20 minutes per session. Online Shopping shows 2.3 million users, $5.7 billion revenue, and 28 minutes average session time. The chart also includes data for Cloud Computing, Digital Advertising, Mobile Apps, Online Gaming, E-learning, Cybersecurity, and Artificial Intelligence."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels.\ndata_labels= np.array(['Category', 'Number of Users (Millions)', 'Revenue (Billions of Dollars)', 'Average Session Length (Minutes)'])\nline_labels= np.array(['Social Media', 'Video Streaming', 'Online Shopping', 'Cloud Computing', 'Digital Advertising', 'Mobile Apps', 'Online Gaming', 'E-learning', 'Cybersecurity', 'Artificial Intelligence'])\ndata= np.array([[2.9,7.5,41], [1.3,17.3,20], [2.3,5.7,28], [1.1,3.2,14], [1.8,80.2,14], [1.5,4.2,10], [1.2,4.7,30], [0.8,2.1,35], [0.4,1.2,20], [0.2,1.7,15]])\n\n# Split the data array from the second dimension to get the data correpsonding to each category.\ndata_1, data_2, data_3= data[:,0], data[:,1], data[:,2]\n\n# Plot the data with the type of multi-axes chart.\nfig= plt.figure(figsize=(10,7))\nax = fig.add_subplot(111)\n\n# The plot type of each category is sequentially decided by the following plot types, i.e., [ bar chart,line chart,area chart,scatter chart].\nax.bar(line_labels, data_1, label=data_labels[1], color='b')\nax.plot(line_labels, data_2, label=data_labels[2], color='r')\nax.fill_between(line_labels, data_3, color='g', alpha=0.5)\nax.scatter(line_labels, data_3, label=data_labels[3], color='g', marker='*')\n\n# For the plot of different bar charts, set different bar positions to avoid overlapping.\nax.set_xticks(np.arange(len(line_labels))+0.2)\nax.set_xticklabels(line_labels, rotation=45, wrap=True)\n\n# Label each axis with the name of the category it represents, matching the color of the data plotted against it.\nax.set_xlabel(data_labels[0])\nax.set_ylabel(data_labels[1], color='b')\nax.tick_params('y', colors='b')\nax2=ax.twinx()\nax2.set_ylabel(data_labels[2], color='r')\nax2.tick_params('y', colors='r')\nax3=ax.twinx()\nax3.spines[\"right\"].set_position((\"axes\", 1.2))\nax3.set_ylabel(data_labels[3], color='g')\nax3.tick_params('y', colors='g')\n\n# Add a legend to the chart that clearly identifies each data category, ensuring it does not overlap with the chart itself.\nax.legend(loc=1)\n\n# Drawing techniques such as background grids can be used.\nax.grid(True)\n\n# The title of the figure should be  Chart Title,Tech and Internet Usage Analysis: User Base, Revenues, and Time Spent .\nplt.title('Tech and Internet Usage Analysis: User Base, Revenues, and Time Spent')\n\n# Use Autolocator to adjust the range of each y-axis.\nax.autoscale_view()\nplt.tight_layout()\n\n# The image must be saved as ./multi-axes/png/1.png.\nplt.savefig('./multi-axes/png/1.png')\n\n# Clear the current image state at the end of the code.\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the highest average session length?",
            "output": "Social Media"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_45",
        "img": "./multi-axes/png/multi-axes_45.png",
        "topic": "Energy and Utilities",
        "title": " Energy and Utilities Usage and Cost Analysis ",
        "csv": "Category \\t Usage (Watt-hours) \\t Cost (Dollars) \\t Average Bill (Dollars) \\t Customers \\n Electricity \\t 4500 \\t 7000 \\t 150 \\t 2000 \\n Natural Gas \\t 3500 \\t 4500 \\t 110 \\t 1500 \\n Renewable Energy \\t 2800 \\t 4000 \\t 90 \\t 1200 \\n Solar Power \\t 1700 \\t 2500 \\t 60 \\t 900 \\n Wind Power \\t 1200 \\t 3000 \\t 70 \\t 1100 \\n Hydropower \\t 900 \\t 2000 \\t 50 \\t 800 \\n Nuclear Energy \\t 2100 \\t 3500 \\t 80 \\t 1000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart illustrates an analysis of energy and utilities usage and associated costs across seven categories. Electricity shows the highest usage at 4500 Watt-hours and a cost of 7000 Dollars, serving 2000 customers at an average bill of 150 Dollars. Natural Gas usage is 3500 Watt-hours with a cost of 4500 Dollars, 1500 customers, and an average bill of 110 Dollars. Renewable Energy, Solar Power, Wind Power, Hydropower, and Nuclear Energy follow, with descending usage and costs, varying customer numbers, and average bills ranging from 90 to 50 Dollars."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Transform data\ndata_labels = ['Usage (Watt-hours)', 'Cost (Dollars)', 'Average Bill (Dollars)', 'Customers']\nline_labels = ['Electricity', 'Natural Gas', 'Renewable Energy', 'Solar Power',\n               'Wind Power', 'Hydropower', 'Nuclear Energy']\n\ndata = np.array([[4500, 7000, 150, 2000], [3500, 4500, 110, 1500],\n                 [2800, 4000, 90, 1200], [1700, 2500, 60, 900],\n                 [1200, 3000, 70, 1100], [900, 2000, 50, 800],\n                 [2100, 3500, 80, 1000]])\n\n# Create figure\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\n\n# Plot first column data\nx_range = np.arange(len(line_labels))\nbar_width = 0.8\nax1.bar(x_range, data[:, 0], bar_width, color='#0093b9', label=data_labels[0])\nax1.set_xticks(x_range)\nax1.set_xticklabels(line_labels)\nax1.set_xlabel('Category')\n\n# Plot second column data\nax2 = ax1.twinx()\nax2.plot(x_range, data[:, 1], color='#ff9c00', marker='o', label=data_labels[1])\n\n# Plot third column data\nax3 = ax1.twinx()\nax3.plot(x_range, data[:, 2], color='#fecf44', marker='o', label=data_labels[2])\n\n# Plot fourth column data\nax4 = ax1.twinx()\nax4.plot(x_range, data[:, 3], color='#6f3c00', marker='o', label=data_labels[3])\n\n# Position of ax2, ax3, ax4\nax2.spines['right'].set_position(('axes', 1.0))\nax3.spines['right'].set_position(('axes', 1.1))\nax4.spines['right'].set_position(('axes', 1.2))\n\n# Autolocator for all ax\nax1.yaxis.set_major_locator(plt.MaxNLocator(integer=True))\nax2.yaxis.set_major_locator(plt.MaxNLocator(integer=True))\nax3.yaxis.set_major_locator(plt.MaxNLocator(integer=True))\nax4.yaxis.set_major_locator(plt.MaxNLocator(integer=True))\n\n# Label all axes\nax1.set_ylabel(data_labels[0], color='#0093b9')\nax2.set_ylabel(data_labels[1], color='#ff9c00')\nax3.set_ylabel(data_labels[2], color='#fecf44')\nax4.set_ylabel(data_labels[3], color='#6f3c00')\n\n# Show legend\nax1.legend(loc='lower left')\nax2.legend(loc='upper left')\nax3.legend(loc='upper center')\nax4.legend(loc='upper right')\n\n# Set title\nplt.title('Energy and Utilities Usage and Cost Analysis')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('./multi-axes/png/6_202312251608.png')\n\n# Clear the current image state\nplt.cla()"
        },
        "QA": {
            "input": "How many more customers does electricity have compared to nuclear energy?",
            "output": "1000 customers"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_21",
        "img": "./multi-axes/png/multi-axes_21.png",
        "topic": "Agriculture and Food Production",
        "title": " Agricultural Production and Economic Impact ",
        "csv": "Category \\t Volume Produced (Metric Tons) \\t Revenue (Millions of Dollars) \\t Average Price per Ton \\t Jobs Created \\n Rice \\t 4500 \\t 290 \\t 5.4 \\t 7500 \\n Corn \\t 6600 \\t 400 \\t 6.5 \\t 9000 \\n Wheat \\t 7200 \\t 480 \\t 6.9 \\t 10000 \\n Soybean \\t 3800 \\t 250 \\t 3.5 \\t 6000 \\n Fruits \\t 5400 \\t 420 \\t 8.9 \\t 8000 \\n Vegetables \\t 7100 \\t 520 \\t 7.4 \\t 9000 \\n Dairy Products \\t 7800 \\t 600 \\t 7.7 \\t 11000 \\n Poultry \\t 5200 \\t 400 \\t 7.7 \\t 8000 \\n Beef \\t 6500 \\t 500 \\t 7.7 \\t 10000 \\n Pork \\t 3800 \\t 320 \\t 8.4 \\t 6000 \\n Fish \\t 4500 \\t 280 \\t 6.2 \\t 7500 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This multi-axes chart delineates the agricultural production and economic impact across various categories. Each category states the volume produced in metric tons, the revenue in millions of dollars, average price per ton, and jobs created. For instance, rice production is 4500 metric tons, generating $290 million in revenue, with an average price of $5.4 per ton, creating 7500 jobs. Corn follows with 6600 metric tons produced, $400 million in revenue, priced at $6.5 per ton, and responsible for 9000 jobs. Data for wheat, soybean, fruits, vegetables, dairy products, poultry, beef, pork, and fish are similarly articulated, highlighting the sector's economic significance."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n#import libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\n#Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = [\"Category\", \"Volume Produced (Metric Tons)\", \"Revenue (Millions of Dollars)\", \"Average Price per Ton\", \"Jobs Created\"]\nline_labels = [\"Rice\", \"Corn\", \"Wheat\", \"Soybean\", \"Fruits\", \"Vegetables\", \"Dairy Products\", \"Poultry\", \"Beef\", \"Pork\", \"Fish\"]\ndata = np.array([[4500, 290, 5.4, 7500], [6600, 400, 6.5, 9000], [7200, 480, 6.9, 10000], [3800, 250, 3.5, 6000], [5400, 420, 8.9, 8000], [7100, 520, 7.4, 9000], [7800, 600, 7.7, 11000], [5200, 400, 7.7, 8000], [6500, 500, 7.7, 10000], [3800, 320, 8.4, 6000], [4500, 280, 6.2, 7500]])\n\n#Split the data array from the second dimension to get the data correpsonding to each category\nvol_prod = data[:,0]\nrev = data[:,1]\navg_price = data[:,2]\njobs = data[:,3]\n\n#Plot the data with the type of multi-axes chart. Create figure before plotting, i.e., add_subplot() follows plt.figure().\nfig = plt.figure(figsize=(12, 8))\nax1 = fig.add_subplot(1,1,1, label=\"1\")\nax2 = ax1.twinx()\nax3 = ax1.twinx()\nax4 = ax1.twinx()\n\n#The plot type of each category is sequentially decided by the following plot types, i.e., [ bar chart,bar chart,scatter chart,line chart].\nax1.bar(line_labels, vol_prod, label=data_labels[1], color=\"green\", alpha=0.3, width=0.6, align=\"edge\", edgecolor=\"black\")\nax2.bar(line_labels, rev, label=data_labels[2], color=\"blue\", alpha=0.3, width=0.6, align=\"edge\", edgecolor=\"black\")\nax3.scatter(line_labels, avg_price, label=data_labels[3], color=\"red\", marker=\"^\")\nax4.plot(line_labels, jobs, label=data_labels[4], color=\"purple\", marker=\"o\", linestyle=\"--\")\n\n#For the plot of each category, overlay the plot on one chart with a shared x-axis and an individual y-axis, a distinct color and marker style, ensuring the y-axes are visually distinct from the primary y-axis. All other y-axes should be positioned opposite the primary y-axis.\nax1.set_xticks(line_labels)\nax1.set_xlabel(data_labels[0])\nax1.set_ylabel(data_labels[1], color=\"green\")\nax1.tick_params(axis=\"y\", colors=\"green\")\nax2.set_ylabel(data_labels[2], color=\"blue\")\nax2.yaxis.set_label_position(\"right\")\nax2.tick_params(axis=\"y\", colors=\"blue\")\nax3.set_ylabel(data_labels[3], color=\"red\")\nax3.spines[\"right\"].set_position((\"axes\", 1.1))\nax3.tick_params(axis=\"y\", colors=\"red\")\nax4.set_ylabel(data_labels[4], color=\"purple\")\nax4.spines[\"right\"].set_position((\"axes\", 1.15))\nax4.tick_params(axis=\"y\", colors=\"purple\")\n\n#Label each axis with the name of the category it represents, matching the color of the data plotted against it.\nax1.set_title(\"Agricultural Production and Economic Impact\", fontsize=20)\n# Show the legends of all plots at different positions\nax1.legend(data_labels[0], loc=\"upper right\", bbox_to_anchor=(1.0, 1.0))\nax2.legend(data_labels[1], loc=\"upper right\", bbox_to_anchor=(1.0, 0.9))\nax3.legend(data_labels[2], loc=\"upper right\", bbox_to_anchor=(1.0, 0.8))\nax4.legend(data_labels[3], loc=\"upper right\", bbox_to_anchor=(1.0, 0.7))\n\n# Drawing techniques such as background grids can be used\nax1.grid(linestyle=\"--\", color=\"gray\")\n\n# Use Autolocator for all ax, i.e., ax1, ax2, ax3, ...\nax1.autoscale()\nax2.autoscale()\nax3.autoscale()\nax4.autoscale()\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# Save the image\nplt.savefig(\"./multi-axes/png/3.png\")\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "How many jobs were created by the dairy products industry?",
            "output": "11000"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_35",
        "img": "./multi-axes/png/multi-axes_35.png",
        "topic": "Science and Engineering",
        "title": " Performance of Science and Engineering Graduates: Graduation, Majoring, and Salaries ",
        "csv": "Category \\t Number of Graduates (Thousands) \\t Number of Majors (Thousands) \\t Average Starting Salary (Thousands of Dollars) \\n Biomedical Engineering \\t 150 \\t 200 \\t 75 \\n Computer Science \\t 200 \\t 250 \\t 70 \\n Electrical and Computer Engineering \\t 220 \\t 300 \\t 68 \\n Chemical Engineering \\t 180 \\t 220 \\t 72 \\n Aerospace Engineering \\t 140 \\t 190 \\t 77 \\n Civil Engineering \\t 170 \\t 250 \\t 69 \\n Mechanical Engineering \\t 230 \\t 320 \\t 66 \\n Materials Science and Engineering \\t 160 \\t 210 \\t 73 \\n Environmental Engineering \\t 130 \\t 190 \\t 75 \\n Industrial Engineering \\t 190 \\t 280 \\t 68 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The chart presents data on graduates, majors, and average starting salaries across various engineering disciplines. Biomedical Engineering shows 150 thousand graduates, 200 thousand majors, and an average starting salary of $75K. Computer Science has 200 thousand graduates, 250 thousand majors, and a $70K starting salary. Electrical and Computer Engineering features 220 thousand graduates, 300 thousand majors, and a $68K salary. Chemical Engineering lists 180 thousand graduates, 220 thousand majors, and $72K salary. Aerospace Engineering, Civil Engineering, Mechanical Engineering, Materials Science and Engineering, Environmental Engineering, and Industrial Engineering are also shown with corresponding figures for graduates, majors, and starting salaries."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np \nimport matplotlib.gridspec as gridspec \n\ndata_labels = ['Number of Graduates (Thousands)', 'Number of Majors (Thousands)', 'Average Starting Salary (Thousands of Dollars)']\ndata = np.array([[150,200,75],[200,250,70],[220,300,68],[180,220,72],[140,190,77],[170,250,69],[230,320,66],[160,210,73],[130,190,75],[190,280,68]])\nline_labels = ['Biomedical Engineering','Computer Science','Electrical and Computer Engineering','Chemical Engineering','Aerospace Engineering','Civil Engineering','Mechanical Engineering','Materials Science and Engineering','Environmental Engineering','Industrial Engineering']\n\n# set the figure size\nplt.figure(figsize=(12, 8))\n\n# set the subplot and the position\nax1 = plt.subplot(111)\n\n# plot the bar chart\nax1.bar(line_labels, data[:, 0], width=0.4, color='#0096FF', alpha=0.8)\n\n# set the labels of x and y axis\nax1.set_xlabel('Category', fontsize=13)\nax1.set_ylabel('Number of Graduates (Thousands)', fontsize=13)\nax1.set_xticklabels(line_labels, fontsize=12, rotation=45, wrap=True)\n\n# set the twinx to plot the line chart\nax2 = ax1.twinx()\nax2.set_ylabel('Number of Majors (Thousands)', fontsize=13)\nax2.set_ylim(0, 330)\n\n# plot the line chart\nax2.plot(line_labels, data[:, 1], marker='o', linestyle='-', linewidth=2, markerfacecolor='#FF8C00', markersize=7)\n\n# set the twinx to plot the scatter chart\nax3 = ax1.twinx()\nax3.set_ylabel('Average Starting Salary (Thousands of Dollars)', fontsize=13)\nax3.spines['right'].set_position(('axes', 1.1))\nax3.set_ylim(60, 80)\n\n# plot the scatter chart\nax3.scatter(line_labels, data[:, 2], marker='o', color='#FF0000', alpha=0.7)\n\n# set the twinx to plot the area chart\nax4 = ax1.twinx()\nax4.set_ylabel('Area Chart', fontsize=13)\nax4.spines['right'].set_position(('axes', 1.2))\nax4.set_ylim(0, 100)\n\n# plot the area chart\nax4.fill_between(line_labels, data[:, 0], color='#00FF00', alpha=0.2)\n\n# set the title of the chart\nax1.set_title('Performance of Science and Engineering Graduates: Graduation, Majoring, and Salaries', fontsize=14)\n\n# add grid to the chart\nax1.grid(linestyle='dotted')\n\n# set the legends\nax1.legend(['Number of Graduates (Thousands)'], loc='upper left', bbox_to_anchor=(0., 1.0))\nax2.legend(['Number of Majors (Thousands)'], loc='upper left', bbox_to_anchor=(0., 0.95))\nax3.legend(['Average Starting Salary (Thousands of Dollars)'], loc='upper right', bbox_to_anchor=(1, 1))\nax4.legend(['Area Chart'], loc='upper right', bbox_to_anchor=(1, 0.95))\n\n# adjust the range of all y-axes\nax1.autoscale(enable=True, axis='y', tight=None)\nax2.autoscale(enable=True, axis='y', tight=None)\nax3.autoscale(enable=True, axis='y', tight=None)\nax4.autoscale(enable=True, axis='y', tight=None)\n\n# resize the image\nplt.tight_layout()\n\n# save the image\nplt.savefig(\"./multi-axes/png/19_2023122261325.png\")\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which field has the highest number of graduates?",
            "output": "Mechanical Engineering"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_46",
        "img": "./multi-axes/png/multi-axes_46.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing and Production Output Performance Analysis ",
        "csv": "Category \\t Production Output (Units) \\t Revenue (Dollars) \\t Cost of Goods Sold (Dollars) \\t Gross Profit (Dollars) \\n Automotive \\t 149075 \\t 542790 \\t 289000 \\t 253790 \\n Electronics \\t 20750 \\t 560090 \\t 232000 \\t 328090 \\n Pharmaceuticals \\t 80320 \\t 456320 \\t 370000 \\t 86320 \\n Aerospace \\t 70000 \\t 890000 \\t 780000 \\t 110000 \\n Machinery \\t 50000 \\t 720000 \\t 480000 \\t 240000 \\n Mining \\t 60000 \\t 720000 \\t 550000 \\t 170000 \\n Textiles \\t 40000 \\t 450000 \\t 370000 \\t 80000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart illustrates a performance analysis of various manufacturing sectors, displaying production output in units alongside revenue, cost of goods sold, and gross profit in dollars. Specifically, it shows data for Automotive, Electronics, Pharmaceuticals, Aerospace, Machinery, Mining, and Textiles. For instance, Automotive has a production output of 149,075 units, revenue of $542,790, costs amounting to $289,000, and a gross profit of $253,790. Each category is visually represented with corresponding values for revenue, costs, and profit, facilitating a side-by-side performance comparison across these different manufacturing sectors."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = ['Production Output (Units)', 'Revenue (Dollars)', 'Cost of Goods Sold (Dollars)', 'Gross Profit (Dollars)']\nline_labels = ['Automotive', 'Electronics', 'Pharmaceuticals', 'Aerospace', 'Machinery', 'Mining', 'Textiles']\ndata = np.array([[149075,542790,289000,253790], [20750,560090,232000,328090], [80320,456320,370000,86320], [70000,890000,780000,110000], [50000,720000,480000,240000], [60000,720000,550000,170000], [40000,450000,370000,80000]])\n\n# Create figure and set fig size\nfig = plt.figure(figsize=(15, 10))\n\n# Create primary axes\nax1 = fig.add_subplot(111)\nax1.set_title('Manufacturing and Production Output Performance Analysis')\n\n# Plot first column data\nax1.bar(line_labels, data[:, 0], label=data_labels[0], color='blue')\nax1.set_ylabel(data_labels[0], color='blue')\nax1.tick_params(axis='y', labelcolor='blue')\n\n# Create ax2\nax2 = ax1.twinx()\n\n# Plot second column data\nax2.plot(line_labels, data[:, 1], label=data_labels[1], color='green')\nax2.set_ylabel(data_labels[1], color='green')\nax2.tick_params(axis='y', labelcolor='green')\n\n# Create ax3\nax3 = ax1.twinx()\n\n# Plot third column data\nax3.scatter(line_labels, data[:, 2], label=data_labels[2], color='red', marker='*')\nax3.set_ylabel(data_labels[2], color='red')\nax3.tick_params(axis='y', labelcolor='red')\n\n# Create ax4\nax4 = ax1.twinx()\n\n# Plot fourth column data\nax4.fill_between(line_labels, data[:, 3], label=data_labels[3], color='orange', alpha=0.3)\nax4.set_ylabel(data_labels[3], color='orange')\nax4.tick_params(axis='y', labelcolor='orange')\n\n# Set position of ax3, ax4, ...\nax3.spines['right'].set_position(('axes', 1.1))\nax4.spines['right'].set_position(('axes', 1.2))\n\n# Show legends of all plots\nax1.legend(bbox_to_anchor=(1, 0.5))\nax2.legend(bbox_to_anchor=(1, 0.6))\nax3.legend(bbox_to_anchor=(1, 0.7))\nax4.legend(bbox_to_anchor=(1, 0.8))\n\n# Set background grid\nax1.grid(True)\n\n# Use Autolocator for all ax\nax1.autoscale_view()\nax2.autoscale_view()\nax3.autoscale_view()\nax4.autoscale_view()\n\n# Automatically resize the image by tight_layout\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./multi-axes/png/11_2023122261325.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much is the Gross Profit of the Aerospace category?",
            "output": "$110,000"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_28",
        "img": "./multi-axes/png/multi-axes_28.png",
        "topic": "Government and Public Policy",
        "title": " Government and Public Policy: Citizen Income and Poverty Analysis ",
        "csv": "Category \\t Number of Citizens \\t Income per Capita (Dollars) \\t Percentage of Population Living Below Poverty Line \\n Education \\t 7200 \\t 2800 \\t 15 \\n Healthcare \\t 7800 \\t 2550 \\t 8 \\n Taxation \\t 9400 \\t 3100 \\t 17 \\n Public Assistance \\t 8100 \\t 2300 \\t 20 \\n Infrastructure \\t 7600 \\t 2700 \\t 14 \\n Social Welfare \\t 6100 \\t 2100 \\t 25 \\n Defense \\t 8300 \\t 3000 \\t 19 \\n Employment \\t 6700 \\t 2500 \\t 16 \\n Housing \\t 9000 \\t 3200 \\t 12 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axis chart illustrates various categories related to government and public policy, showing the number of citizens, income per capita in dollars, and the percentage of the population living below the poverty line. Categories include Education, Healthcare, Taxation, Public Assistance, Infrastructure, Social Welfare, Defense, Employment, and Housing. The number of citizens involved in each category ranges from 6100 in Social Welfare to 9400 in Taxation. Income per capita shows the highest in Housing at 3200 dollars and the lowest in Social Welfare at 2100 dollars. The percentage of the population living below the poverty line varies from 8% in Healthcare to 25% in Social Welfare."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patches as mpatches\n\n# transform data\ndata_labels = ['Number of Citizens', 'Income per Capita (Dollars)', 'Percentage of Population Living Below Poverty Line']\nline_labels = ['Education', 'Healthcare', 'Taxation', 'Public Assistance', 'Infrastructure', 'Social Welfare', 'Defense', 'Employment', 'Housing']\ndata = np.array([[7200, 2800, 15], [7800, 2550, 8], [9400, 3100, 17], [8100, 2300, 20], [7600, 2700, 14], [6100, 2100, 25], [8300, 3000, 19], [6700, 2500, 16], [9000, 3200, 12]])\n\n# create figure\nfig = plt.figure(figsize=(12, 8))\nax1 = fig.add_subplot(111)\nax1.set_title('Government and Public Policy: Citizen Income and Poverty Analysis')\nax1.set_xlabel('Category')\nax1.set_ylabel('Number of Citizens')\nax1.bar(line_labels, data[:, 0], color='g', label=data_labels[0])\n\n# plot ax2\nax2 = ax1.twinx()\nax2.set_ylabel(data_labels[1], color='#00AEEF')\nax2.plot(line_labels, data[:, 1], color='#00AEEF', marker='o', linestyle='--', label=data_labels[1])\nax2.tick_params(axis='y', labelcolor='#00AEEF')\n\n# plot ax3\nax3 = ax1.twinx()\nax3.spines[\"right\"].set_position((\"axes\", 1.1))\nax3.set_ylabel(data_labels[2], color='#F46524')\nax3.plot(line_labels, data[:, 2], color='#F46524', marker='s', linestyle=':', label=data_labels[2])\nax3.fill_between(line_labels, 0, data[:, 2], color='#F46524', alpha=0.5)\nax3.tick_params(axis='y', labelcolor='#F46524')\nax3.yaxis.set_ticks_position('right')\nax3.yaxis.set_label_position('right')\n\n# set legend\nlns1 = mpatches.Patch(color='g', label=data_labels[0])\nlns2 = mpatches.Patch(color='#00AEEF', label=data_labels[1])\nlns3 = mpatches.Patch(color='#F46524', label=data_labels[2])\nax3.legend(handles=[lns1, lns2, lns3], loc='upper center', bbox_to_anchor=(0.5, -0.1), fancybox=True, shadow=True, ncol=3)\n\n# draw background grid\nax1.grid(color='gray', linestyle='--', linewidth=1)\nax2.grid(color='gray', linestyle='--', linewidth=1)\nax3.grid(color='gray', linestyle='--', linewidth=1)\n\n# autolocate y-axis\nax1.set_ylim(auto=True)\nax2.set_ylim(auto=True)\nax3.set_ylim(auto=True)\n\n# resize image\nplt.tight_layout()\n\n# save figure\nplt.savefig(\"./multi-axes/png/41_2023122270030.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the highest income per capita?",
            "output": "Housing"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_2",
        "img": "./multi-axes/png/multi-axes_2.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare and Health Analysis: Cost, Coverage, and Premiums ",
        "csv": "Category \\t Cost (Dollars) \\t Patients Covered \\t Average Premiums \\t Insurers \\n Private Health Insurance \\t 98800 \\t 9502 \\t 3760 \\t 6 \\n Outpatient Care \\t 70000 \\t 8502 \\t 4500 \\t 4 \\n Inpatient Care \\t 80000 \\t 6200 \\t 3500 \\t 5 \\n Mental Health Care \\t 60000 \\t 4200 \\t 4000 \\t 7 \\n Dental Care \\t 54000 \\t 3000 \\t 3000 \\t 9 \\n Vision Care \\t 18000 \\t 1500 \\t 2500 \\t 3 \\n Prescription Drugs \\t 20000 \\t 5000 \\t 2600 \\t 4 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart titled \"Healthcare and Health Analysis: Cost, Coverage, and Premiums\" presents data across several healthcare categories. Private Health Insurance leads in cost at $98,800 and covers 9,502 patients with an average premium of $3,760 and 6 insurers. Outpatient Care costs $70,000, covers 8,502 patients, with $4,500 average premiums and 4 insurers. Inpatient Care shows $80,000 in costs, 6,200 patients, a $3,500 average premium, and 5 insurers. Mental Health Care has a $60,000 cost, covers 4,200 patients, and has $4,000 average premiums with the highest number of insurers at 7. Dental Care has a $54,000 cost for 3,000 patients covered, a $3,000 average premium, and 9 insurers. Vision Care, at $18,000 cost, covers the fewest patients, 1,500, with a $2,500 average premium and 3 insurers. Lastly, Prescription Drugs cost $20,000, cover 5,000 patients, and have a $2,600 average premium with 4 insurers."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata_labels = [\"Cost (Dollars)\", \"Patients Covered\", \"Average Premiums\", \"Insurers\"]\nline_labels = [\"Private Health Insurance\",\"Outpatient Care\",\"Inpatient Care\",\"Mental Health Care\",\"Dental Care\",\"Vision Care\",\"Prescription Drugs\"]\ndata = np.array([[98800,9502,3760,6], [70000,8502,4500,4], [80000,6200,3500,5], [60000,4200,4000,7], [54000,3000,3000,9], [18000,1500,2500,3], [20000,5000,2600,4]])\n\nplot_types = [\"bar chart\", \"line chart\", \"scatter chart\", \"area chart\"]\n\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\n\nax1.bar(line_labels, data[:,0], color = \"#4D6AEE\", label=data_labels[0])\n\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:,1], marker='o', color = \"#A9C2F2\", label=data_labels[1])\n\n\nax3 = ax1.twinx()\nax3.spines[\"right\"].set_position((\"axes\", 1.1))\nax3.scatter(line_labels, data[:,2], marker='*', color = \"#F3C9F1\", label=data_labels[2])\n\nax4 = ax1.twinx()\nax4.spines[\"right\"].set_position((\"axes\", 1.2))\nax4.set_frame_on(True)\nax4.patch.set_visible(False)\nax4.plot(line_labels, data[:,3], color = \"#F2A7F7\", label=data_labels[3])\n\nax1.set_xlabel('Category')\nax1.set_ylabel('Cost (Dollars)')\nax2.set_ylabel('Patients Covered')\nax3.set_ylabel('Average Premiums')\nax4.set_ylabel('Insurers')\n\nax1.set_title('Healthcare and Health Analysis: Cost, Coverage, and Premiums')\nax1.grid(True)\nax1.legend(loc=1)\nax2.legend(loc=2)\nax3.legend(loc=3)\nax4.legend(loc=4)\n\nplt.tight_layout()\nfig.savefig('./multi-axes/png/40_2023122270030.png')\nplt.close('all')"
        },
        "QA": {
            "input": "How much more does private health insurance cost compared to prescription drugs?",
            "output": "78800 dollars"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_3",
        "img": "./multi-axes/png/multi-axes_3.png",
        "topic": "Environment and Sustainability",
        "title": "Environmental Sustainability Progress Overview ",
        "csv": "Category \\t Number of Trees Planted (Millions) \\t Amount of Waste Reduced (Tons) \\t CO2 Emission Reduced (Tons) \\n Renewable Energy \\t 14 \\t 760 \\t 1890 \\n Recycling \\t 21 \\t 580 \\t 1430 \\n Reforestation \\t 25 \\t 1000 \\t 2250 \\n Energy Efficiency \\t 18 \\t 700 \\t 1680 \\n Water Conservation \\t 29 \\t 1220 \\t 2820 \\n Sustainable Agriculture \\t 25 \\t 950 \\t 2300 \\n Environmental Education \\t 30 \\t 650 \\t 1550 \\n Carbon Capture \\t 20 \\t 1050 \\t 2400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart titled \"Environmental Sustainability Progress Overview\" presents data across various environmental sustainability categories. Each category lists three metrics: the number of trees planted in millions, amount of waste reduced in tons, and carbon dioxide emissions reduced in tons. \"Renewable Energy\" reports 14 million trees planted, 760 tons of waste reduced, and 1890 tons of CO2 reduction. \"Recycling\" shows 21 million trees, 580 tons of waste reduction, and 1430 tons of CO2 savings. \"Reforestation\" leads with 25 million trees planted, accompanied by 1000 tons waste and 2250 tons CO2 reduction. \"Energy Efficiency\" notes 18 million trees, 700 tons waste, and 1680 tons CO2 reduced. \"Water Conservation\" records 29 million trees, 1220 tons waste, and 2820 tons CO2 saved. \"Sustainable Agriculture\" equals \"Reforestation\" in trees planted with 25 million, reducing 950 tons of waste and 2300 tons of CO2. \"Environmental Education\" tops the chart at 30 million trees planted, 650 tons of waste reduced, and 1550 tons CO2 cutback. Finally, \"Carbon Capture\" features 20 million trees, 1050 tons waste, and the highest CO2 reduction at 2400 tons."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Number of Trees Planted (Millions)', 'Amount of Waste Reduced (Tons)', 'CO2 Emission Reduced (Tons)']\nline_labels = ['Renewable Energy', 'Recycling', 'Reforestation', 'Energy Efficiency', 'Water Conservation', 'Sustainable Agriculture', 'Environmental Education', 'Carbon Capture']\ndata = np.array([[14, 760, 1890], [21, 580, 1430], [25, 1000, 2250], [18, 700, 1680], [29, 1220, 2820], [25, 950, 2300], [30, 650, 1550], [20, 1050, 2400]])\n\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\n\nax1.bar(line_labels, data[:, 0], width=0.2, color='tab:blue', alpha=0.8)\nax1.set_ylabel(data_labels[0], color='tab:blue')\nax1.tick_params(axis='y', labelcolor='tab:blue')\n\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:, 1], '-r', label=data_labels[1])\nax2.set_ylabel(data_labels[1], color='red')\nax2.tick_params(axis='y', labelcolor='red')\n\nax3 = ax1.twinx()\nax3.plot(line_labels, data[:, 2], '-g', label=data_labels[2])\nax3.spines['right'].set_position(('axes', 1.1))\nax3.set_ylabel(data_labels[2], color='green')\nax3.tick_params(axis='y', labelcolor='green')\n\nax1.set_xlabel('Category')\nax1.set_title('Environmental Sustainability Progress Overview')\nax1.set_xticklabels(line_labels, rotation=45, ha=\"right\", wrap=True)\n\nax1.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\nax1.autoscale_view()\nax2.autoscale_view()\nax3.autoscale_view()\n\nax1.legend(data_labels[0], loc='upper left')\nax2.legend(data_labels[1], loc='upper center')\nax3.legend(data_labels[2], loc='upper right')\n\nplt.tight_layout()\nplt.savefig('./multi-axes/png/24_2023122261325.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many tons of CO2 emissions were reduced by Sustainable Agriculture?",
            "output": "2300"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_50",
        "img": "./multi-axes/png/multi-axes_50.png",
        "topic": "Law and Legal Affairs",
        "title": " Legal System Performance Analysis: Fines, Cases Filed, and Cost per Case ",
        "csv": "Category \\t Fines (Millions of Dollars) \\t Cases Filed (Thousands) \\t Average Fines per Case (Dollars) \\n Regulatory Issues \\t 3.8 \\t 1.2 \\t 3200 \\n Contract Disputes \\t 2.4 \\t 0.9 \\t 2700 \\n Property Disputes \\t 1.2 \\t 0.6 \\t 2000 \\n Labour Law \\t 1.7 \\t 0.8 \\t 2100 \\n Tax Law \\t 2.1 \\t 1.0 \\t 2100 \\n Criminal Law \\t 3.9 \\t 2.0 \\t 1850 \\n Environmental Law \\t 1.6 \\t 0.8 \\t 2000 \\n Immigration Law \\t 2.0 \\t 1.1 \\t 1800 \\n Intellectual Property \\t 2.5 \\t 1.3 \\t 1800 \\n Family Law \\t 1.3 \\t 0.7 \\t 1900 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart presents data on legal system performance for various categories including regulatory issues, contract disputes, property disputes, labor law, tax law, criminal law, environmental law, immigration law, intellectual property, and family law. It shows three key metrics: fines in millions of dollars, cases filed in thousands, and average fines per case. Fines range from 1.2 to 3.9 million dollars, while cases filed vary from 0.6 to 2.0 thousand. Average fines per case span from 1,800 to 3,200 dollars, with Regulatory Issues incurring the highest average fines per case.\n"
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Transform the given data into three variables\ndata_labels = ['Fines (Millions of Dollars)','Cases Filed (Thousands)','Average Fines per Case (Dollars)']\nline_labels = ['Regulatory Issues','Contract Disputes','Property Disputes','Labour Law','Tax Law','Criminal Law','Environmental Law','Immigration Law','Intellectual Property','Family Law']\ndata = np.array([[3.8,1.2,3200],[2.4,0.9,2700],[1.2,0.6,2000],[1.7,0.8,2100],[2.1,1.0,2100],[3.9,2.0,1850],[1.6,0.8,2000],[2.0,1.1,1800],[2.5,1.3,1800],[1.3,0.7,1900]])\n\n# Create figure\nfig = plt.figure(figsize=(15, 8))\nax1 = fig.add_subplot(111)\n\n# Plot the first column of data array\nax1.bar(line_labels,data[:,0], label=data_labels[0], color='green')\nax1.set_xlabel('Category')\nax1.set_ylabel(data_labels[0], color='green')\nax1.tick_params(axis='y', labelcolor='green')\n\n# Overlay a new ax on the first plot\nax2 = ax1.twinx()\n\n# Plot the second column of data array\nax2.plot(line_labels,data[:,1], label=data_labels[1], color='blue', marker='o')\nax2.set_ylabel(data_labels[1], color='blue')\nax2.tick_params(axis='y', labelcolor='blue')\n\n# Overlay a third ax on the first plot\nax3 = ax1.twinx()\n\n# Plot the third column of data array\nax3.plot(line_labels,data[:,2], label=data_labels[2], color='red', marker='^', linestyle='--')\nax3.set_ylabel(data_labels[2], color='red')\nax3.tick_params(axis='y', labelcolor='red')\n\n# Seperate different y-axes\nax3.spines['right'].set_position(('axes', 1.1))\n\n# Create legend\nax1.legend(loc='upper left')\nax2.legend(loc='upper center')\nax3.legend(loc='upper right')\n\n# Set title\nax1.set_title('Legal System Performance Analysis: Fines, Cases Filed, and Cost per Case')\n\n# Auto adjust the range of all y-axes\nax1.autoscale()\nax2.autoscale()\nax3.autoscale()\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save figure\nfig.savefig('./multi-axes/png/25_2023122270030.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the total amount of fines for Contract Disputes in millions of dollars?",
            "output": "2.4"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_36",
        "img": "./multi-axes/png/multi-axes_36.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare Performance: Patient Treatment and Cost Analysis ",
        "csv": "Category \\t Patients Treated (Thousands) \\t Average Treatment Cost (Dollars) \\t Average Time Spent in Treatment (Minutes) \\n Primary Care \\t 1790 \\t 220 \\t 30 \\n Emergency Care \\t 1150 \\t 400 \\t 70 \\n Physical Therapy \\t 1390 \\t 220 \\t 90 \\n Mental Health Services \\t 600 \\t 200 \\t 60 \\n Diagnostic Services \\t 1340 \\t 150 \\t 45 \\n Surgical Services \\t 1620 \\t 500 \\t 120 \\n Radiology Services \\t 990 \\t 300 \\t 90 \\n Dental Care \\t 900 \\t 100 \\t 60 \\n Psychotherapy \\t 800 \\t 150 \\t 90 \\n Rehabilitation \\t 1000 \\t 200 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart titled \"Healthcare Performance: Patient Treatment and Cost Analysis\" provides data in three categories: number of patients treated in thousands, average treatment cost in dollars, and average time spent in treatment in minutes. Categories range from Primary Care, with 1790 thousand patients treated, an average cost of $220, and 30 minutes spent, to Rehabilitation, which treated 1000 thousand patients, with costs averaging $200 and 80 minutes in treatment. Other services listed include Emergency Care, Physical Therapy, Mental Health Services, Diagnostic Services, Surgical Services, Radiology Services, Dental Care, and Psychotherapy. Each service has distinct figures for the three monitored parameters."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = [\"Patients Treated (Thousands)\", \"Average Treatment Cost (Dollars)\", \"Average Time Spent in Treatment (Minutes)\"]\nline_labels = [\"Primary Care\", \"Emergency Care\", \"Physical Therapy\", \"Mental Health Services\", \"Diagnostic Services\", \n               \"Surgical Services\", \"Radiology Services\", \"Dental Care\", \"Psychotherapy\", \"Rehabilitation\"]\ndata = np.array([[1790, 220, 30], [1150, 400, 70], [1390, 220, 90], [600, 200, 60], [1340, 150, 45], [1620, 500, 120], \n                 [990, 300, 90], [900, 100, 60], [800, 150, 90], [1000, 200, 80]])\n\n#Plot the data with the type of multi-axes chart\nfig = plt.figure(figsize=(15,10))\nax1 = fig.add_subplot(111)\nax1.bar(line_labels, data[:,0], width=0.2, color='#00A0A0', alpha=0.6)\nax1.set_ylabel(data_labels[0], color='#00A0A0')\nax1.tick_params(axis='y', labelcolor='#00A0A0')\n\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:,1], '#FA5858', marker='o', linestyle='--', label=data_labels[1])\nax2.set_ylabel(data_labels[1], color='#FA5858')\nax2.tick_params(axis='y', labelcolor='#FA5858')\n\nax3 = ax1.twinx()\nax3.plot(line_labels, data[:,2], '#F5A9BC', marker='*', label=data_labels[2], linestyle=':')\nax3.set_ylabel(data_labels[2], color='#F5A9BC')\nax3.tick_params(axis='y', labelcolor='#F5A9BC')\nax3.spines['right'].set_position(('outward', 60))\n\nplt.title('Healthcare Performance: Patient Treatment and Cost Analysis')\nax1.legend(data_labels[0], loc='upper left', bbox_to_anchor=(0.08, 1))\nax2.legend(data_labels[1], loc='upper center', bbox_to_anchor=(0.5, 1))\nax3.legend(data_labels[2], loc='upper right', bbox_to_anchor=(0.92, 1))\nax1.grid(True)\nax1.autoscale(tight=True)\nax2.autoscale(tight=True)\nax3.autoscale(tight=True)\n\nplt.tight_layout()\nplt.savefig('./multi-axes/png/21_2023122270030.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more minutes does a patient spend on average in Surgical Services than in Emergency Care?",
            "output": "50 minutes"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_11",
        "img": "./multi-axes/png/multi-axes_11.png",
        "topic": "Science and Engineering",
        "title": "Science and Engineering Workforce and Patent Applications ",
        "csv": "Category \\t Number of Scientists \\t Number of Engineers \\t Patent Applications \\n Computer Science \\t 40000 \\t 80000 \\t 35000 \\n Civil Engineering \\t 80000 \\t 20000 \\t 10000 \\n Electrical Engineering \\t 100000 \\t 30000 \\t 15000 \\n Mechanical Engineering \\t 90000 \\t 40000 \\t 25000 \\n Aerospace Engineering \\t 15000 \\t 30000 \\t 6000 \\n Software Engineering \\t 80000 \\t 60000 \\t 40000 \\n Structural Engineering \\t 40000 \\t 10000 \\t 8000 \\n Chemical Engineering \\t 50000 \\t 20000 \\t 10000 \\n Biomedical Engineering \\t 30000 \\t 10000 \\t 5000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart illustrates the workforce distribution and corresponding patent applications across various engineering and computer science disciplines. Computer Science lists 40,000 scientists, 80,000 engineers, and 35,000 patent applications. Civil Engineering shows 80,000 scientists, 20,000 engineers, and 10,000 patents. Electrical Engineering features 100,000 scientists, 30,000 engineers, and 15,000 patents, while Mechanical Engineering has 90,000 scientists, 40,000 engineers, and 25,000 patents. Aerospace Engineering reports 15,000 scientists, 30,000 engineers, and 6,000 patents. Software Engineering accounts for 80,000 scientists, 60,000 engineers, and 40,000 patents. Structural and Chemical Engineering have equal numbers of scientists at 40,000 and 50,000, engineers at 10,000 and 20,000, and patent applications at 8,000 and 10,000 respectively. Lastly, Biomedical Engineering has 30,000 scientists, 10,000 engineers, and 5,000 patent applications."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Transform the given data into three variables\ndata_labels = ['Number of Scientists', 'Number of Engineers', 'Patent Applications']\ndata = np.array([[40000, 80000, 35000],\n                 [80000, 20000, 10000],\n                 [100000, 30000, 15000],\n                 [90000, 40000, 25000],\n                 [15000, 30000, 6000],\n                 [80000, 60000, 40000],\n                 [40000, 10000, 8000],\n                 [50000, 20000, 10000],\n                 [30000, 10000, 5000]])\nline_labels = ['Computer Science', 'Civil Engineering', 'Electrical Engineering', \n               'Mechanical Engineering', 'Aerospace Engineering', \n               'Software Engineering', 'Structural Engineering', \n               'Chemical Engineering', 'Biomedical Engineering']\n\n# Create figure\nfig = plt.figure(figsize=(20, 10))\nax1 = fig.add_subplot(111)\n\n# Primary y-axis\nax1.bar(line_labels, data[:,0], color='#1f77b4', alpha=0.8, width=0.8)\nax1.set_ylabel(data_labels[0], color='#1f77b4', fontsize=14)\nax1.tick_params(axis='y', labelcolor='#1f77b4')\n\n# Secondary y-axis\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:,1], color='#ff7f0e', marker='o', linestyle='--')\nax2.set_ylabel(data_labels[1], color='#ff7f0e', fontsize=14)\nax2.tick_params(axis='y', labelcolor='#ff7f0e')\n\n# Third y-axis\nax3 = ax1.twinx()\nax3.plot(line_labels, data[:,2], color='#2ca02c', marker='s', linestyle=':')\nax3.set_ylabel(data_labels[2], color='#2ca02c', fontsize=14)\nax3.tick_params(axis='y', labelcolor='#2ca02c')\n\n\n# Adjust the position of ax3\nax3.spines['right'].set_position(('axes', 1.1))\nax3.set_frame_on(True)\nax3.patch.set_visible(False)\n\n# Label all axes\nax1.set_xlabel('Category', fontsize=14)\nax1.set_title('Science and Engineering Workforce and Patent Applications', fontsize=16)\n\n# Set background grids\nax1.grid(True, axis='y', color='#e2e2e2')\nax2.grid(True, axis='y', color='#e2e2e2')\nax3.grid(True, axis='y', color='#e2e2e2')\n\n# Set Autolocator\nax1.yaxis.set_major_locator(plt.MaxNLocator(4))\nax2.yaxis.set_major_locator(plt.MaxNLocator(4))\nax3.yaxis.set_major_locator(plt.MaxNLocator(4))\n\n# Show legends\nax1.legend([data_labels[0]], loc='upper left', bbox_to_anchor=(0.05, 1.08))\nax2.legend([data_labels[1]], loc='upper left', bbox_to_anchor=(0.3, 1.08))\nax3.legend([data_labels[2]], loc='upper left', bbox_to_anchor=(0.56, 1.08))\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./multi-axes/png/17_2023122261325.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many patent applications are there in the field of Software Engineering?",
            "output": "40000"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_23",
        "img": "./multi-axes/png/multi-axes_23.png",
        "topic": "Arts and Culture",
        "title": " Arts and Culture Performance Analysis: Visitation, Revenue, and Pricing Trends ",
        "csv": "Category \\t Attendance (Thousands of Visitors) \\t Revenue (Millions of Dollars) \\t Average Ticket Price (Dollars) \\n Theater \\t 190 \\t 2250 \\t 20 \\n Musical Performances \\t 140 \\t 4050 \\t 34 \\n Museums \\t 590 \\t 1250 \\t 8 \\n Concerts \\t 290 \\t 3250 \\t 30 \\n Literary Readings \\t 95 \\t 1750 \\t 20 \\n Art Exhibitions \\t 490 \\t 1050 \\t 9 \\n Festivals \\t 290 \\t 2050 \\t 20 \\n Operas \\t 190 \\t 3000 \\t 24 \\n Ballet \\t 80 \\t 1900 \\t 18 \\n Movies \\t 990 \\t 2500 \\t 6 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart presents an analysis of visitation, revenue, and pricing trends across various arts and culture categories. Theater shows report attendance of 190k visitors, revenue of $2250M, and an average ticket price of $20. Musical Performances see 140k visitors, $4050M in revenue, and a $34 ticket average. Museums lead in attendance with 590k visitors, generate $1250M, and have a low ticket price of $8. Concerts draw 290k visitors, with $3250M revenue and a $30 ticket price. Literary Readings have 95k visitors, $1750M in revenue, and a $20 ticket price. Art Exhibitions attract 490k visitors, make $1050M, with $9 tickets. Festivals equal concerts in attendance at 290k, yield $2050M, and charge $20 per ticket. Operas host 190k visitors, gain $3000M, and price tickets at $24. Ballet has 80k visitors, $1900M revenue, and an $18 ticket average. Movies top the chart with 990k visitors, have a revenue of $2500M, and the lowest average ticket price of $6."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# transform data to variables\ndata_labels = ['Attendance (Thousands of Visitors)', 'Revenue (Millions of Dollars)', 'Average Ticket Price (Dollars)']\ndata = np.array([[190, 2250, 20], [140, 4050, 34], [590, 1250, 8], [290, 3250, 30], [95, 1750, 20], [490, 1050, 9], [290, 2050, 20], [190, 3000, 24], [80, 1900, 18], [990, 2500, 6]])\nline_labels = ['Theater', 'Musical Performances', 'Museums', 'Concerts', 'Literary Readings', 'Art Exhibitions', 'Festivals', 'Operas', 'Ballet', 'Movies']\n\n# create figure\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\n\n# plot data\nax1.bar(line_labels, data[:, 0], width=0.3, color='b', alpha=0.6, label=data_labels[0])\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:, 1], 'r-', linewidth=2, label=data_labels[1])\nax3 = ax1.twinx()\nax3.plot(line_labels, data[:, 2], 'g--', linewidth=2, label=data_labels[2])\n\n# adjust axes position\nax3.spines['right'].set_position(('axes', 1.1))\n\n# label axes\nax1.set_ylabel(data_labels[0], color='b')\nax2.set_ylabel(data_labels[1], color='r')\nax3.set_ylabel(data_labels[2], color='g')\n\n# set legend\nax1.legend(loc=2)\nax2.legend(loc=1)\nax3.legend(loc=4)\n\n# set title\nax1.set_title(\"Arts and Culture Performance Analysis: Visitation, Revenue, and Pricing Trends\")\n\n# draw background grids\nplt.grid(True)\n\n# autolocate axes\nax1.yaxis.set_major_locator(plt.MaxNLocator())\nax2.yaxis.set_major_locator(plt.MaxNLocator())\nax3.yaxis.set_major_locator(plt.MaxNLocator())\n\n# save image\nplt.tight_layout()\nplt.savefig('./multi-axes/png/18_2023122270030.png')\n\n# clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the revenue from musical performances compared to art exhibitions?",
            "output": "3000 million dollars"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_49",
        "img": "./multi-axes/png/multi-axes_49.png",
        "topic": "Food and Beverage Industry",
        "title": " Food and Beverage Industry Performance and Growth Overview ",
        "csv": "Category \\t Gross Revenue (Billions of Dollars) \\t Number of Employees \\t Number of Outlets \\n Fast Food \\t 456 \\t 2100 \\t 25000 \\n Cafes \\t 250 \\t 3000 \\t 3400 \\n Restaurants \\t 820 \\t 1300 \\t 10000 \\n Pizzerias \\t 320 \\t 500 \\t 5000 \\n Grocery Stores \\t 900 \\t 2300 \\t 8000 \\n Bars \\t 130 \\t 800 \\t 4500 \\n Coffee Shops \\t 90 \\t 1000 \\t 1500 \\n Convenience Stores \\t 500 \\t 1400 \\t 6000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart illustrates the Food and Beverage Industry Performance and Growth for various categories. Fast Food shows a gross revenue of 456 billion dollars, 2,100 employees, and 25,000 outlets. Cafes report 250 billion in revenue, 3,000 employees, and 3,400 outlets. Restaurants are noted for 820 billion in revenue, 1,300 employees, and 10,000 outlets. Pizzerias generate 320 billion in revenue, with 500 employees and 5,000 outlets. Grocery Stores have 900 billion in revenue, 2,300 employees, and 8,000 outlets. Bars, Coffee Shops, and Convenience Stores also contribute to the industry with varying figures for revenue, employees, and outlets."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata_labels = [\"Gross Revenue (Billions of Dollars)\", \"Number of Employees\", \"Number of Outlets\"]\nline_labels = [\"Fast Food\", \"Cafes\", \"Restaurants\", \"Pizzerias\", \"Grocery Stores\", \"Bars\", \"Coffee Shops\", \"Convenience Stores\"]\ndata = np.array([[456,2100,25000],[250,3000,3400],[820,1300,10000],[320,500,5000],[900,2300,8000],[130,800,4500],[90,1000,1500],[500,1400,6000]])\nplot_types = [\"bar chart\", \"line chart\", \"scatter chart\", \"area chart\"]\n\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\nax1.set_title(\"Food and Beverage Industry Performance and Growth Overview\")\nax1.set_xlabel(\"Category\")\nax1.set_ylabel(data_labels[0], color='b')\nax1.tick_params(axis='y', labelcolor='b')\nax1.bar(line_labels, data[:,0], color='b')\n\nax2 = ax1.twinx()\nax2.set_ylabel(data_labels[1], color='r')\nax2.tick_params(axis='y', labelcolor='r')\nax2.plot(line_labels, data[:,1], color='r', marker='o', linestyle='dashed')\n\nax3 = ax1.twinx()\nax3.spines['right'].set_position(('axes', 1.1))\nax3.set_ylabel(data_labels[2], color='g')\nax3.tick_params(axis='y', labelcolor='g')\nax3.plot(line_labels, data[:,2], color='g', linewidth=5, marker='s', linestyle='dotted')\n\nax1.legend(data_labels[0], loc='upper left')\nax2.legend(data_labels[1], loc='upper right')\nax3.legend(data_labels[2], loc='lower right')\n\nplt.xticks(rotation=-45, ha=\"left\")\n\nax1.grid()\nax1.autoscale()\nax2.autoscale()\nax3.autoscale()\n\nplt.tight_layout()\nplt.savefig('./multi-axes/png/42_2023122270030.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the gross revenue difference between grocery stores and convenience stores? ",
            "output": "400 billion dollars"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_30",
        "img": "./multi-axes/png/multi-axes_30.png",
        "topic": "Technology and the Internet",
        "title": " Technology and the Internet Industry Analysis: User Base, Connectivity, and Revenue ",
        "csv": "Category \\t Number of Users (Millions) \\t Internet Speed (Mbps) \\t Number of Devices (Millions) \\t Average Monthly Data Usage (GB) \\t Revenue (Billions of Dollars) \\n Social Media \\t 250 \\t 50 \\t 400 \\t 10 \\t 10 \\n Streaming Services \\t 150 \\t 100 \\t 300 \\t 30 \\t 20 \\n E-commerce \\t 200 \\t 40 \\t 250 \\t 20 \\t 15 \\n Telecommunications \\t 300 \\t 30 \\t 350 \\t 5 \\t 30 \\n Online Gaming \\t 100 \\t 10 \\t 200 \\t 50 \\t 5 \\n Cloud Computing \\t 50 \\t 200 \\t 150 \\t 100 \\t 25 \\n Digital Advertising \\t 350 \\t 20 \\t 500 \\t 15 \\t 40 \\n Mobile Apps \\t 400 \\t 60 \\t 600 \\t 25 \\t 50 \\n Cybersecurity \\t 50 \\t 100 \\t 100 \\t 5 \\t 20 \\n Artificial Intelligence \\t 50 \\t 150 \\t 100 \\t 10 \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart delineates various metrics across multiple categories in the technology and internet industry. It includes the number of users (in millions), average internet speed (in Mbps), the number of devices (in millions), average monthly data usage (in GB), and revenue (in billions of dollars). The categories featured are Social Media, Streaming Services, E-commerce, Telecommunications, Online Gaming, Cloud Computing, Digital Advertising, Mobile Apps, Cybersecurity, and Artificial Intelligence. Each category has different figures; for example, Social Media reports 250 million users, while Artificial Intelligence has 50 million users. The data suggests a diverse industry with a wide range of user bases, connectivity options, device usage, data consumption, and revenue generation."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import AutoLocator\n\n# Data Preparation\ndata = '''Category,Number of Users (Millions),Internet Speed (Mbps),Number of Devices (Millions),Average Monthly Data Usage (GB),Revenue (Billions of Dollars)\nSocial Media,250,50,400,10,10\nStreaming Services,150,100,300,30,20\nE-commerce,200,40,250,20,15\nTelecommunications,300,30,350,5,30\nOnline Gaming,100,10,200,50,5\nCloud Computing,50,200,150,100,25\nDigital Advertising,350,20,500,15,40\nMobile Apps,400,60,600,25,50\nCybersecurity,50,100,100,5,20\nArtificial Intelligence,50,150,100,10,15'''\nlines = data.split(\"\\n\")\ndata_labels = lines[0].split(\",\")[1:]\nplot_types = [\"bar\", \"line\", \"scatter\", \"area\", \"line\", \"bar\"]\nline_labels = [line.split(\",\")[0] for line in lines[1:]]\ndata_values = [list(map(float, line.split(\",\")[1:])) for line in lines[1:]]\ndata_array = np.array(data_values).T\ncolors = ['r', 'g', 'b', 'y', 'c', 'm', 'k', 'r', 'g', 'b']\n\n# Plotting\nfig = plt.figure(figsize=(15, 10))\nx = np.arange(len(line_labels))\nax = fig.add_subplot(111)\nax.set_xlabel('Category')\nax.set_ylabel(data_labels[0], color=colors[0])\nax.bar(x-0.3, data_array[0], color=colors[0], width=0.2, label=data_labels[0])\n\naxes = [ax]\nfor i, (type, array) in enumerate(zip(plot_types[1:], data_array[1:])):\n    ax_new = ax.twinx()\n    axes.append(ax_new)\n    if type == \"bar\":\n        ax_new.bar(x+(i+1)*0.2 - 0.3, array, color=colors[i+1], alpha=0.5, width=0.2, label=data_labels[i+1])\n    elif type == \"line\":\n        ax_new.plot(x, array, color=colors[i+1], label=data_labels[i+1])\n    elif type == \"scatter\":\n        ax_new.scatter(x, array, color=colors[i+1], label=data_labels[i+1])\n    elif type == \"area\":\n        ax_new.fill_between(x, array, color=colors[i+1], alpha=0.3, label=data_labels[i+1])\n\nfor i, ax_new in enumerate(axes[1:]):\n    ax_new.set_ylabel(data_labels[i], color=colors[i])\n    ax_new.spines['right'].set_position(('outward', i*60))\n    ax_new.yaxis.set_major_locator(AutoLocator())\n    ax_new.legend(loc=\"upper left\", bbox_to_anchor=(1, 1 - 0.1 * i))\n\nax.set_title('Technology and the Internet Industry Analysis: User Base, Connectivity, and Revenue')\nax.set_xticks(x)\nax.set_xticklabels(line_labels, rotation=45)\n\nfig.tight_layout()\nplt.grid(True)\n\nplt.savefig(\"./multi-axes/png/320_202312311430.png\")\nplt.show()\nplt.clf()\n"
        },
        "QA": {
            "input": "What is the average monthly data usage for Cloud Computing?",
            "output": "100 GB"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_19",
        "img": "./multi-axes/png/multi-axes_19.png",
        "topic": "Retail and E-commerce",
        "title": "Retail and E-commerce Sales Analysis: Store Numbers, Online Revenue, and Average Prices ",
        "csv": "Category \\t Number of Stores \\t Online Sales (Millions of Dollars) \\t Average Revenue per Store (Thousands of USD) \\t Average Selling Price \\n Clothing Stores \\t 7000 \\t 1200 \\t 5.45 \\t 60 \\n Grocery Stores \\t 12000 \\t 800 \\t 2.10 \\t 50 \\n Electronics Stores \\t 3000 \\t 900 \\t 7.90 \\t 100 \\n Home Improvement Stores \\t 4000 \\t 200 \\t 5.50 \\t 80 \\n Department Stores \\t 2000 \\t 500 \\t 14.30 \\t 70 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart provides data on retail and e-commerce sales across various store categories for a specific period. It compares the number of stores, their online sales in millions of dollars, average revenue per store in thousands of USD, and average selling prices. Clothing stores count 7000 with online sales of 1200 million and an average revenue per store of 5.45 thousand, at an average price of 60 USD. Grocery stores have 12000 stores, 800 million in online sales, average revenue of 2.10 thousand, and an average selling price of 50 USD. Electronics stores are at 3000 with 900 million in online sales, 7.90 thousand average revenue, and 100 USD average price. Home improvement stores feature 4000 stores, 200 million in online sales, 5.50 thousand average revenue, and an 80 USD average price. Department stores have 2000 stores, 500 million in online sales, 14.30 thousand average revenue, and a 70 USD average price."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.ticker as ticker\n\ndata_labels = [\"Number of Stores\", \"Online Sales (Millions of Dollars)\", \"Average Revenue per Store (Thousands of USD)\", \"Average Selling Price\"]\nline_labels = [\"Clothing Stores\", \"Grocery Stores\", \"Electronics Stores\", \"Home Improvement Stores\", \"Department Stores\"]\ndata = np.array([[7000, 1200, 5.45, 60], [12000, 800, 2.10, 50], [3000, 900, 7.90, 100], [4000, 200, 5.50, 80], [2000, 500, 14.30, 70]])\n\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\nax1.bar(line_labels, data[:, 0], width=0.2, color=\"b\", alpha=0.5)\nax1.set_ylabel(data_labels[0], color=\"b\")\n\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:, 1], marker=\"o\", linestyle=\"-\", color=\"r\")\nax2.set_ylabel(data_labels[1], color=\"r\")\n\nax3 = ax1.twinx()\nax3.spines[\"right\"].set_position((\"axes\", 1.1))\nax3.plot(line_labels, data[:, 2], marker=\"o\", linestyle=\"-\", color=\"g\")\nax3.set_ylabel(data_labels[2], color=\"g\")\n\nax4 = ax1.twinx()\nax4.spines[\"right\"].set_position((\"axes\", 1.2))\nax4.plot(line_labels, data[:, 3], marker=\"o\", linestyle=\"-\", color=\"y\")\nax4.set_ylabel(data_labels[3], color=\"y\")\n\nax1.set_xlabel(\"Category\")\nax1.set_title(\"Retail and E-commerce Sales Analysis: Store Numbers, Online Revenue, and Average Prices\")\nax1.xaxis.set_major_locator(ticker.FixedLocator(np.arange(5)))\nax1.xaxis.set_major_formatter(ticker.FixedFormatter((line_labels)))\nax1.grid(True)\nax2.grid(True)\nax3.grid(True)\nax4.grid(True)\nax1.legend(data_labels, loc=\"upper right\", bbox_to_anchor=(1., 1))\nax2.legend([data_labels[1]], loc=\"upper right\", bbox_to_anchor=(1., 0.95))\nax3.legend([data_labels[2]], loc=\"upper right\", bbox_to_anchor=(1., 0.9))\nax4.legend([data_labels[3]], loc=\"upper right\", bbox_to_anchor=(1., 0.85))\nax1.xaxis.set_tick_params(rotation=45)\nax1.yaxis.tick_left()\nax2.yaxis.tick_right()\nax3.yaxis.tick_right()\nax4.yaxis.tick_right()\nplt.tight_layout()\nplt.savefig(\"./multi-axes/png/15_2023122270030.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the average revenue per store for electronics stores?",
            "output": "7.90 thousands of USD"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_39",
        "img": "./multi-axes/png/multi-axes_39.png",
        "topic": "Arts and Culture",
        "title": " Arts and Culture Participation and Event Trends ",
        "csv": "Category \\t Number of Participants \\t Number of Events \\t Average Event Duration (Hours) \\n Music \\t 34500 \\t 1200 \\t 10 \\n Dance \\t 23000 \\t 800 \\t 8 \\n Film \\t 20000 \\t 900 \\t 9 \\n Theatre \\t 15000 \\t 600 \\t 7 \\n Visual Arts \\t 8000 \\t 400 \\t 6 \\n Literary Arts \\t 6000 \\t 400 \\t 5 \\n Street Arts \\t 12000 \\t 900 \\t 7 \\n Arts Festivals \\t 25000 \\t 1000 \\t 9 \\n Traditional Arts \\t 18000 \\t 700 \\t 8 \\n Pop Culture \\t 30000 \\t 1200 \\t 10 \\n Multimedia Arts \\t 10000 \\t 500 \\t 6 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart illustrates trends in participation and event characteristics across various arts and culture categories. Music leads with 34,500 participants, 1,200 events, and an average event duration of 10 hours. Dance follows with 23,000 participants, 800 events and lasts 8 hours on average. Film has 20,000 participants, 900 events, and a 9-hour average duration. Theatre attracts 15,000 individuals across 600 events, averaging 7 hours each. Visual Arts sees 8,000 participants and 400 events with 6-hour durations. Literary Arts engages 6,000 participants in 400 events for 5 hours each. Street Arts has 12,000 participants, 900 events, and 7-hour durations. Arts Festivals see 25,000 participants in 1,000 events, each running for 9 hours. Traditional Arts, with 18,000 participants and 700 events, have events averaging 8 hours. Pop Culture matches Music in scale with 30,000 participants and 1,200 events, lasting 10 hours on average. Lastly, Multimedia Arts has 10,000 participants, 500 events, and a duration of 6 hours."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform data into multiple variables\ndata_labels = [\"Number of Participants\", \"Number of Events\", \"Average Event Duration (Hours)\"]\nline_labels = [\"Music\",\"Dance\",\"Film\",\"Theatre\",\"Visual Arts\",\"Literary Arts\",\"Street Arts\",\"Arts Festivals\",\"Traditional Arts\",\"Pop Culture\",\"Multimedia Arts\"]\ndata = np.array([[34500,1200,10],[23000,800,8],[20000,900,9],[15000,600,7],[8000,400,6],[6000,400,5],[12000,900,7],[25000,1000,9],[18000,700,8],[30000,1200,10],[10000,500,6]])\n\n# Plot the data\nplt.figure(figsize=(15,10))\nax1 = plt.subplot(111)\nax1.bar(line_labels, data[:,0], width=0.2, color=\"orange\", alpha=0.6, label=data_labels[0])\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:,1], color=\"b\", marker=\"o\", linestyle=\"--\", label=data_labels[1])\nax3 = ax1.twinx()\nax3.spines[\"right\"].set_position((\"axes\", 1.2))\nax3.plot(line_labels, data[:,2], color=\"g\", marker=\"o\", linestyle=\"-.\", label=data_labels[2])\n\n# Set axes labels\nax1.set_xlabel(\"Category\", fontsize=14)\nax1.set_ylabel(data_labels[0], fontsize=14, color=\"orange\")\nax2.set_ylabel(data_labels[1], fontsize=14, color=\"b\")\nax3.set_ylabel(data_labels[2], fontsize=14, color=\"g\")\n\n# Set legend\nax1.legend(bbox_to_anchor=(0.1, 0.9))\nax2.legend(bbox_to_anchor=(0.5, 0.9))\nax3.legend(bbox_to_anchor=(0.8, 0.9))\n\n# Adjust Y-axes\nplt.autoscale()\n\n# Title the figure\nplt.title(\"Arts and Culture Participation and Event Trends\", fontsize=16)\n\n# Resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"./multi-axes/png/2_2023122270030.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more participants are there in Dance compared to Literary Arts?",
            "output": "17000"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_9",
        "img": "./multi-axes/png/multi-axes_9.png",
        "topic": "Human Resources and Employee Management",
        "title": " Human Resources and Employee Management: Salary, Work Hours, and Vacation Time ",
        "csv": "Category \\t Average Salary (USD) \\t Average Work Hours \\t Average Vacation Time (Days) \\n Management \\t 70000 \\t 50 \\t 20 \\n Production \\t 45000 \\t 40 \\t 15 \\n Sales \\t 60000 \\t 45 \\t 14 \\n Administration \\t 55000 \\t 35 \\t 10 \\n Research and Development \\t 75000 \\t 50 \\t 25 \\n Customer Service \\t 50000 \\t 40 \\t 12 \\n Human Resources \\t 65000 \\t 45 \\t 15 \\n Accounting \\t 55000 \\t 40 \\t 12 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart represents various employment categories alongside their average salary in USD, average work hours per week, and average vacation time in days. It shows that Management earns $70,000 with 50-hour workweeks and 20 vacation days; Production earns $45,000, works 40 hours, and gets 15 vacation days. Sales professionals have a $60,000 salary, 45 work hours, and 14 vacation days; Administration earns $55,000, works 35 hours, and gets 10 days of vacation. Research and Development commands the highest average salary at $75,000, with 50 work hours and 25 vacation days. Customer Service makes $50,000, works 40 hours, and is allotted 12 vacation days. Human Resources professionals earn $65,000, work 45 hours, and receive 15 vacation days, while Accounting has an average salary of $55,000, 40-hour work weeks, and 12 vacation days."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata_labels = ['Category', 'Average Salary (USD)', 'Average Work Hours', 'Average Vacation Time (Days)']\nline_labels = ['Management', 'Production', 'Sales', 'Administration', 'Research and Development', 'Customer Service', 'Human Resources', 'Accounting']\ndata = [['Management', 70000, 50, 20],\n        ['Production', 45000, 40, 15],\n        ['Sales', 60000, 45, 14],\n        ['Administration', 55000, 35, 10],\n        ['Research and Development', 75000, 50, 25],\n        ['Customer Service', 50000, 40, 12],\n        ['Human Resources', 65000, 45, 15],\n        ['Accounting', 55000, 40, 12]]\n\nfig, ax = plt.subplots(figsize=(10,8))\n\n# Transform data into a 2D array\ndata_array = np.array(data)\n\n# Separate data from the second dimension\ndata_category = data_array[:,0]\ndata_salary = data_array[:,1].astype(float)\ndata_hours = data_array[:,2].astype(float)\ndata_vacation = data_array[:,3].astype(float)\n\n# Specify palettes\npalette_salary = '#1f77b4'\npalette_hours = '#ff7f0e'\npalette_vacation = '#2ca02c'\n\n# Plot bar chart\nx_pos = np.arange(len(data_category))\nax.bar(x_pos, data_salary, color=palette_salary, width=0.3, label=data_labels[1], align='edge', edgecolor='black')\nax2 = ax.twinx()\nax2.bar(x_pos+0.3, data_hours, color=palette_hours, width=0.3, label=data_labels[2], align='edge', edgecolor='black')\nax3 = ax.twinx()\nax3.plot(data_category, data_vacation, color=palette_vacation, marker='o', label=data_labels[3])\nax3.spines['right'].set_position(('axes', 1.1))\n\n# Set x-axis data\nax.set_xticklabels(line_labels, rotation=45, wrap=True)\n\n# Set y-axis data\nax.set_ylim(0,80000)\nax.set_yscale('linear')\n\nax.set_ylabel(data_labels[0], color=palette_salary)\nax2.set_ylabel(data_labels[1], color=palette_hours)\nax3.set_ylabel(data_labels[2], color=palette_vacation)\n\n# Set chart title\nax.set_title('Human Resources and Employee Management: Salary, Work Hours, and Vacation Time')\n\n# Add background grids\nax.grid(linestyle='dotted', linewidth='0.5', color='black')\n\n# Resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./multi-axes/png/11.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more days of average vacation time does Research and Development have compared to Sales?",
            "output": "11 days"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_1",
        "img": "./multi-axes/png/multi-axes_1.png",
        "topic": "Law and Legal Affairs",
        "title": "Law and Legal Affairs Case Volume and Time Analysis ",
        "csv": "Category \\t Number of Cases Handled \\t Hours Spent (in Thousands) \\t Average Court Time (in Minutes) \\n Civil Law \\t 890 \\t 3450 \\t 56 \\n Criminal Law \\t 1020 \\t 5060 \\t 78 \\n Constitutional Law \\t 720 \\t 2030 \\t 35 \\n Administrative Law \\t 650 \\t 4500 \\t 60 \\n International Law \\t 990 \\t 3880 \\t 70 \\n Human Rights Law \\t 1130 \\t 2460 \\t 43 \\n Tax Law \\t 720 \\t 3300 \\t 45 \\n Business and Commercial Law \\t 890 \\t 4200 \\t 60 \\n Family Law \\t 1010 \\t 2580 \\t 50 \\n Immigration Law \\t 650 \\t 2100 \\t 35 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart illustrates the case volume and time metrics across various law categories. It shows numbers of cases handled, total hours spent (in thousands), and average court time (in minutes). Civil Law sees 890 cases, 3450 hours, and 56 average minutes in court. Criminal Law has 1020 cases, 5060 hours, and 78 minutes. Constitutional Law registers 720 cases, 2030 hours, and 35 minutes. Administrative Law has 650 cases, 4500 hours, and 60 minutes. International Law, Human Rights Law, Tax Law, Business and Commercial Law, Family Law, and Immigration Law are also represented, showing variations in caseload and time allocation."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# transform data\ndata_labels = ['Number of Cases Handled', 'Hours Spent (in Thousands)', 'Average Court Time (in Minutes)']\nline_labels = ['Civil Law', 'Criminal Law', 'Constitutional Law', 'Administrative Law', 'International Law', 'Human Rights Law', 'Tax Law', 'Business and Commercial Law', 'Family Law', 'Immigration Law']\ndata = np.array([[890, 3450, 56], [1020, 5060, 78], [720, 2030, 35], [650, 4500, 60], [990, 3880, 70], [1130, 2460, 43], [720, 3300, 45], [890, 4200, 60], [1010, 2580, 50], [650, 2100, 35]])\n\n# setup plot\nfig, ax1 = plt.subplots(figsize=(15, 10))\n\n# plot data\nax1.bar(line_labels, data[:, 0], label=data_labels[0], color='tab:blue')\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:, 1], label=data_labels[1], color='tab:green', linestyle='-')\nax3 = ax1.twinx()\nax3.spines['right'].set_position(('axes', 1.1))\nax3.plot(line_labels, data[:, 2], label=data_labels[2], color='tab:red', linestyle='--')\n\n# adjust positions of axis\nax1.set_xticks(np.arange(len(line_labels)))\nax1.set_xticklabels(line_labels, rotation=45, ha=\"right\", wrap=True)\nax1.autoscale(axis='x', tight=True)\nax2.autoscale(axis='x', tight=True)\nax3.autoscale(axis='x', tight=True)\n\n# label axes\nax1.set_ylabel(data_labels[0], color='tab:blue')\nax2.set_ylabel(data_labels[1], color='tab:green')\nax3.set_ylabel(data_labels[2], color='tab:red')\n\n# add legends\nax1.legend(loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=3)\n\n# draw grids\nax1.grid()\n\n# set title\nfig.suptitle('Law and Legal Affairs Case Volume and Time Analysis', fontsize=20)\n\n# save figure\nplt.tight_layout()\nplt.savefig('./multi-axes/png/23_2023122261325.png')\n\n# clear figure\nplt.clf()"
        },
        "QA": {
            "input": "What is the average court time for Family Law?",
            "output": "50 minutes"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_41",
        "img": "./multi-axes/png/multi-axes_41.png",
        "topic": "Real Estate and Housing Market",
        "title": " Real Estate and Housing Market: Inventory, Pricing, and Duration Overview ",
        "csv": "Category \\t Number of Available Homes \\t Average Sale Price (Dollars) \\t Average Number of Days on Market \\n Single Family Homes \\t 7800 \\t 170000 \\t 60 \\n Condos \\t 4500 \\t 140000 \\t 45 \\n Townhomes \\t 3000 \\t 90000 \\t 35 \\n Multi-Family Homes \\t 2500 \\t 120000 \\t 50 \\n Mobile Homes \\t 1500 \\t 60000 \\t 40 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart presents data on the real estate and housing market, showing inventory, pricing, and duration overview. It compares five categories: Single Family Homes, with 7800 available, an average sale price of $170,000, and 60 days on the market; Condos, with 4500 available, priced at $140,000 on average, taking 45 days to sell; Townhomes, 3000 available, $90,000 average sale price, 35 days on market; Multi-Family Homes, 2500 available, $120,000 average sale price, and 50 days on market; and Mobile Homes, with 1500 available, averaging $60,000, and selling within 40 days."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.ticker as ticker\n\ndata_labels = np.array(['Number of Available Homes', 'Average Sale Price (Dollars)', 'Average Number of Days on Market'])\nline_labels = np.array(['Single Family Homes', 'Condos', 'Townhomes', 'Multi-Family Homes', 'Mobile Homes'])\ndata = np.array([[7800, 170000, 60], [4500, 140000, 45], [3000, 90000, 35], [2500, 120000, 50], [1500, 60000, 40]])\n\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\n\nax1.bar(line_labels, data[:, 0], color='b', width=0.15, alpha=0.8, label=data_labels[0])\nax1.set_xlabel('Category', fontsize=15)\nax1.set_ylabel(data_labels[0], color='b', fontsize=15)\nax1.tick_params(axis='y', labelcolor='b')\n\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:, 1], color='g', marker='o', label=data_labels[1])\nax2.set_ylabel(data_labels[1], color='g', fontsize=15)\nax2.tick_params(axis='y', labelcolor='g')\n\nax3 = ax1.twinx()\nax3.plot(line_labels, data[:, 2], color='r', marker='^', label=data_labels[2])\nax3.set_ylabel(data_labels[2], color='r', fontsize=15)\nax3.tick_params(axis='y', labelcolor='r')\nax3.spines['right'].set_position(('axes', 1.15))\n\nax1.legend(bbox_to_anchor=(0.7, 0.75), loc='upper left', borderaxespad=0.)\nax2.legend(bbox_to_anchor=(0.7, 0.7), loc='upper left', borderaxespad=0.)\nax3.legend(bbox_to_anchor=(0.7, 0.65), loc='upper left', borderaxespad=0.)\n\nax1.xaxis.set_major_locator(ticker.MaxNLocator(6))\nax1.yaxis.set_major_locator(ticker.MaxNLocator(6))\nax2.yaxis.set_major_locator(ticker.MaxNLocator(6))\nax3.yaxis.set_major_locator(ticker.MaxNLocator(6))\n\nplt.title('Real Estate and Housing Market: Inventory, Pricing, and Duration Overview', fontsize=20)\nplt.grid(True)\nplt.tight_layout()\nplt.savefig('./multi-axes/png/4_2023122261325.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more Single Family Homes are available compared to Townhomes?",
            "output": "4800 homes"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_43",
        "img": "./multi-axes/png/multi-axes_43.png",
        "topic": "Technology and the Internet",
        "title": " Technology and Internet Usage Statistics: Subscribers, View Time, Revenues, and Services ",
        "csv": "Category \\t Subscribers (Millions) \\t Average View Time (Minutes) \\t Online Revenues (Billions of Dollars) \\t Number of Services \\n Fixed Broadband \\t 415 \\t 30 \\t 69 \\t 14 \\n Mobile Broadband \\t 582 \\t 20 \\t 54 \\t 12 \\n Video Streaming \\t 312 \\t 45 \\t 32 \\t 9 \\n Online Advertising \\t 801 \\t 15 \\t 190 \\t 6 \\n Cloud Computing \\t 579 \\t 20 \\t 90 \\t 7 \\n Social Media \\t 854 \\t 45 \\t 58 \\t 10 \\n Online Shopping \\t 936 \\t 20 \\t 110 \\t 8 \\n Voice Services \\t 708 \\t 25 \\t 55 \\t 11 \\n Enterprise Solutions \\t 741 \\t 30 \\t 71 \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart represents various technology and internet usage statistics, including subscriber counts in millions, average view times in minutes, online revenues in billions of dollars, and the number of services. Fixed Broadband shows 415 million subscribers, with an average view time of 30 minutes and online revenue of 69 billion dollars across 14 services. Mobile Broadband has a higher subscriber base with 582 million, but a lower average view time of 20 minutes. The categories range from Video Streaming, which has a longer average view time of 45 minutes, to Social Media with the highest number of subscribers at 854 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import AutoMinorLocator, MultipleLocator\n\n#transform data\ndata_labels = ['Subscribers (Millions)', 'Average View Time (Minutes)', 'Online Revenues (Billions of Dollars)', 'Number of Services']\nline_labels = ['Fixed Broadband', 'Mobile Broadband', 'Video Streaming', 'Online Advertising', 'Cloud Computing', 'Social Media', 'Online Shopping', 'Voice Services', 'Enterprise Solutions']\ndata = np.array([[415, 30, 69, 14],\n[582, 20, 54, 12],\n[312, 45, 32, 9],\n[801, 15, 190, 6],\n[579, 20, 90, 7],\n[854, 45, 58, 10],\n[936, 20, 110, 8],\n[708, 25, 55, 11],\n[741, 30, 71, 10]])\n\n#create figure\nfig = plt.figure(figsize=(15,10))\nax = fig.add_subplot(111)\n\n#plot data\nax.bar(line_labels, data[:,0], width=0.2, color='#ff9999', alpha=1, label=data_labels[0])\nax2 = ax.twinx()\nax2.plot(line_labels, data[:,1], marker='o', color='#00b3b3', linestyle='--', linewidth=2, label=data_labels[1])\nax3 = ax.twinx()\nax3.spines['right'].set_position(('axes',1.1))\nax3.plot(line_labels, data[:,2], marker='^', color='#ffcc99', linestyle=':', linewidth=3, label=data_labels[2])\nax4 = ax.twinx()\nax4.spines['right'].set_position(('axes',1.2))\nax4.plot(line_labels, data[:,3], marker='s', color='#99ccff', linestyle='-.', linewidth=4, label=data_labels[3])\n\n#label axes and show legend\nax.set_xlabel('Category', fontsize=15)\nax.set_ylabel(data_labels[0], fontsize=15, color='#ff9999')\nax2.set_ylabel(data_labels[1], fontsize=15, color='#00b3b3')\nax3.set_ylabel(data_labels[2], fontsize=15, color='#ffcc99')\nax4.set_ylabel(data_labels[3], fontsize=15, color='#99ccff')\nax.legend(loc='upper right', bbox_to_anchor=(1,1))\nax2.legend(loc='upper right', bbox_to_anchor=(1.0,0.95))\nax3.legend(loc='upper right', bbox_to_anchor=(1.0,0.9))\nax4.legend(loc='upper right', bbox_to_anchor=(1.0,0.85))\n\n#adjust the range of all y-axes\nax.yaxis.set_minor_locator(AutoMinorLocator(2))\nax.grid(which='minor', axis='y', color='gray', linestyle='dashed', linewidth=1)\nax2.yaxis.set_minor_locator(AutoMinorLocator(2))\nax2.grid(which='minor', axis='y', color='gray', linestyle='dashed', linewidth=1)\nax3.yaxis.set_minor_locator(AutoMinorLocator(2))\nax3.grid(which='minor', axis='y', color='gray', linestyle='dashed', linewidth=1)\nax4.yaxis.set_minor_locator(AutoMinorLocator(2))\nax4.grid(which='minor', axis='y', color='gray', linestyle='dashed', linewidth=1)\n\n#set title\nax.set_title('Technology and Internet Usage Statistics: Subscribers, View Time, Revenues, and Services', fontsize=20)\n\n#auto resize image\nplt.tight_layout()\n\n#save image\nplt.savefig('./multi-axes/png/11_2023122270030.png')\n\n#clear current image state\nplt.clf()"
        },
        "QA": {
            "input": "What are the online revenues generated by Cloud Computing?",
            "output": "$90 billion"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_33",
        "img": "./multi-axes/png/multi-axes_33.png",
        "topic": "Social Media and the Web",
        "title": " Social Media and the Web: User Statistics and Trends ",
        "csv": "Category \\t Users (Millions) \\t Monthly Active Users (Millions) \\t Average Daily Use (Hours) \\n YouTube \\t 2.0 \\t 1.8 \\t 3.3 \\n Twitter \\t 330 \\t 320 \\t 2.4 \\n Instagram \\t 1.6 \\t 1.4 \\t 2.2 \\n Snapchat \\t 0.8 \\t 0.7 \\t 1.9 \\n WhatsApp \\t 1.6 \\t 1.5 \\t 2.1 \\n WeChat \\t 1.2 \\t 1.1 \\t 1.8 \\n Reddit \\t 0.5 \\t 0.4 \\t 1.5 \\n LinkedIn \\t 0.6 \\t 0.5 \\t 1.1 \\n Tumblr \\t 0.3 \\t 0.2 \\t 1.0 \\n Pinterest \\t 0.4 \\t 0.3 \\t 0.9 \\n Facebook \\t 2.4 \\t 2.3 \\t 2.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This multi-axes chart shows key statistics across various social media platforms. YouTube leads with 2.0 million total users and 1.8 million monthly active users, with an average daily use of 3.3 hours. Twitter follows with 330 million users, a slightly less monthly active user base of 320 million, and 2.4 hours of daily use. Instagram, Snapchat, WhatsApp, WeChat, Reddit, LinkedIn, Tumblr, and Pinterest are also presented with their respective statistics in millions of users, monthly active users, and hours of use. Facebook shows 2.4 million users, with 2.3 million being monthly active and an average daily use of 2.5 hours."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Users (Millions)', 'Monthly Active Users (Millions)', 'Average Daily Use (Hours)']\nline_labels = ['YouTube', 'Twitter', 'Instagram', 'Snapchat', 'WhatsApp', 'WeChat', 'Reddit', 'LinkedIn', 'Tumblr', 'Pinterest', 'Facebook']\ndata = np.array([[2.0, 1.8, 3.3], [330, 320, 2.4], [1.6, 1.4, 2.2], [0.8, 0.7, 1.9], [1.6, 1.5, 2.1], [1.2, 1.1, 1.8], [0.5, 0.4, 1.5], [0.6, 0.5, 1.1], [0.3, 0.2, 1.0], [0.4, 0.3, 0.9], [2.4, 2.3, 2.5]])\n\nfig = plt.figure(figsize=(15,12))\nplot_types = [plt.bar, plt.plot, plt.scatter, plt.fill_between]\n\nax1 = fig.add_subplot(111)\nax1.bar(line_labels, data[:,0], width=0.8, alpha=0.8, color='b')\nax1.set_ylabel(data_labels[0], color='b', fontsize=14)\nax1.set_xlabel('Category', fontsize=14)\nax1.tick_params(axis='x', labelrotation=90)\nax1.set_title('Social Media and the Web: User Statistics and Trends', fontsize=20)\n\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:,1], 'rs-', linewidth=3)\nax2.set_ylabel(data_labels[1], color='r', fontsize=14)\n\nax3 = ax1.twinx()\nax3.spines[\"right\"].set_position((\"axes\", 1.1))\nax3.plot(line_labels, data[:,2], 'g^-', linewidth=3)\nax3.set_ylabel(data_labels[2], color='g', fontsize=14)\n\nax1.legend(['Users (Millions)'], loc='upper left')\nax2.legend(['Monthly Active Users (Millions)'], loc='upper center')\nax3.legend(['Average Daily Use (Hours)'], loc='upper right')\n\nplt.grid(axis='y', linestyle='--')\nax1.xaxis.set_ticks(np.arange(len(line_labels)))\nax1.xaxis.set_ticklabels(line_labels)\nax2.xaxis.set_ticks(np.arange(len(line_labels)))\nax3.xaxis.set_ticks(np.arange(len(line_labels)))\nax2.autoscale()\nax3.autoscale()\n\nplt.tight_layout()\nplt.savefig('./multi-axes/png/8_2023122270030.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which platform has the highest number of Monthly Active Users (Millions)?",
            "output": "Facebook"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_4",
        "img": "./multi-axes/png/multi-axes_4.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare and Health Performance Analysis: Number of Patients Treated, Cost, and Length of Stay ",
        "csv": "Category \\t Number of Patients Treated \\t Average Treatment Cost (Dollars) \\t Average Length of Stay (Days) \\t Patient Satisfaction Rate \\n Emergency Care \\t 45888 \\t 15000 \\t 3.2 \\t 90% \\n Outpatient Care \\t 12000 \\t 6000 \\t 1.5 \\t 87% \\n Inpatient Care \\t 35000 \\t 20000 \\t 10 \\t 80% \\n Diagnostic Services \\t 18000 \\t 1000 \\t 0.5 \\t 92% \\n Primary Care \\t 13000 \\t 3500 \\t 2.5 \\t 84% \\n Mental Health Services \\t 4500 \\t 15000 \\t 4 \\t 88% \\n Specialty Care \\t 10000 \\t 8000 \\t 5 \\t 85% \\n Rehabilitation Services \\t 6000 \\t 10000 \\t 7 \\t 81% \\n Home Health Services \\t 3000 \\t 4500 \\t 2 \\t 90% \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart presents a healthcare and health performance analysis, detailing the number of patients treated, average treatment cost in dollars, average length of stay in days, and patient satisfaction rate for various categories of care in an undisclosed year. It shows data for emergency care with 45,888 patients, a $15,000 treatment cost, 3.2 days stay, and a 90% satisfaction rate. Outpatient care served 12,000 patients with costs averaging $6,000, 1.5 days stay, and 87% satisfaction. Inpatient care, diagnostic services, primary care, mental health services, specialty care, rehabilitation services, and home health services are also analyzed with respective values for the aforementioned metrics."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = ['Average Treatment Cost (Dollars)','Average Length of Stay (Days)','Patient Satisfaction Rate']\nline_labels = ['Emergency Care', 'Outpatient Care', 'Inpatient Care', 'Diagnostic Services', 'Primary Care', 'Mental Health Services', 'Specialty Care', 'Rehabilitation Services', 'Home Health Services']\ndata = np.array([[45888, 15000, 3.2, 90], [12000, 6000, 1.5, 87], [35000, 20000, 10, 80], \n[18000, 1000, 0.5, 92], [13000, 3500, 2.5, 84], [4500, 15000, 4, 88], [10000, 8000, 5, 85], \n[6000, 10000, 7, 81], [3000, 4500, 2, 90]])\n\nfig = plt.figure(figsize=(30, 15))\nax1 = fig.add_subplot(111)\nax1.bar(line_labels, data[:,0], color='#0b2267', width=0.3, alpha=0.8)\nax1.set_xlabel('Category', fontsize=20)\nax1.set_ylabel('Number of Patients Treated', fontsize=20, color='#0b2267')\nax1.tick_params(axis='y', labelcolor='#0b2267')\n\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:,1], '-o', color='#00776b', ms=14, label='Average Treatment Cost (Dollars)')\nax2.set_ylabel('Average Treatment Cost (Dollars)', fontsize=20, color='#00776b')\nax2.tick_params(axis='y', labelcolor='#00776b')\n\nax3 = ax1.twinx()\nax3.spines['right'].set_position(('axes', 1.05))\nax3.plot(line_labels, data[:,2], '-s', color='#f34b00', ms=14, label='Average Length of Stay (Days)')\nax3.set_ylabel('Average Length of Stay (Days)', fontsize=20, color='#f34b00')\nax3.tick_params(axis='y', labelcolor='#f34b00')\n\nax4 = ax1.twinx()\nax4.spines['right'].set_position(('axes', 1.1))\nax4.plot(line_labels, data[:,3], '-^', color='#f9a826', ms=14, label='Patient Satisfaction Rate')\nax4.set_ylabel('Patient Satisfaction Rate', fontsize=20, color='#f9a826')\nax4.tick_params(axis='y', labelcolor='#f9a826')\n\nax1.set_title('Healthcare and Health Performance Analysis: Number of Patients Treated, Cost, and Length of Stay', fontsize=25)\nax1.legend(loc='upper left', fontsize=20)\nax2.legend(loc='upper right', fontsize=20)\nax3.legend(loc='lower left', fontsize=20)\nax4.legend(loc='lower right', fontsize=20)\n\nfor ax in [ax1, ax2, ax3, ax4]:\n    ax.tick_params(labelsize=18)\n    \nplt.autoscale()\nplt.tight_layout()\nplt.savefig('./multi-axes/png/28_2023122270030.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the average length of stay for patients receiving Rehabilitation Services?",
            "output": "7 days"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_22",
        "img": "./multi-axes/png/multi-axes_22.png",
        "topic": "Education and Academics",
        "title": " Educational Enrolment, Graduation, and Dropout Rates Analysis ",
        "csv": "Category \\t Enrolment Rate (%) \\t Graduation Rate (%) \\t Dropout Rate (%) \\t Average GPA \\n Primary Education \\t 90.5 \\t 72.2 \\t 5.3 \\t 3.1 \\n Secondary Education \\t 75.1 \\t 59.1 \\t 7.4 \\t 3.3 \\n College Education \\t 45.6 \\t 36.4 \\t 4.8 \\t 3.6 \\n Postgraduate Education \\t 35.2 \\t 25.7 \\t 2.5 \\t 3.9 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart presents data on educational metrics across four categories of education: Primary, Secondary, College, and Postgraduate. For each category, the enrolment rate, graduation rate, dropout rate, and average GPA are provided. Primary Education has an enrolment rate of 90.5%, a graduation rate of 72.2%, a dropout rate of 5.3%, and an average GPA of 3.1. Secondary Education shows a 75.1% enrolment, 59.1% graduation, 7.4% dropout, and a GPA of 3.3. College Education has a 45.6% enrolment, 36.4% graduation, 4.8% dropout, and a GPA of 3.6. Lastly, Postgraduate Education records a 35.2% enrolment, 25.7% graduation, a dropout rate of 2.5%, and the highest average GPA at 3.9."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np \n\n# Transform the given data\ndata_labels = ['Enrolment Rate (%)', 'Graduation Rate (%)', 'Dropout Rate (%)', 'Average GPA']     \nline_labels = ['Primary Education', 'Secondary Education', 'College Education', 'Postgraduate Education']  \ndata = np.array([[90.5, 72.2, 5.3, 3.1], \n                 [75.1, 59.1, 7.4, 3.3], \n                 [45.6, 36.4, 4.8, 3.6], \n                 [35.2, 25.7, 2.5, 3.9]])\n\n# Create figure\nplt.figure(figsize=(10, 8))\nax1 = plt.subplot(111)\n\nbar_pos = np.arange(len(data))\nbar_width = 0.2\nbar_start = bar_pos - 0.5*(bar_width*(len(data_labels) - 2)) # Adjusted for number of series\n\n# Plot the data\nax1.bar(bar_start, data[:, 0], label=data_labels[0], width=0.2, color='cornflowerblue', alpha=0.7)\nax2 = ax1.twinx()\nax2.bar(bar_start + bar_width, data[:, 1], label=data_labels[1], width=0.2, color='orchid', alpha=0.7)\nax3 = ax1.twinx()\nax3.bar(bar_start + 2 * bar_width, data[:, 2], label=data_labels[2], width=0.2, color='lightseagreen', alpha=0.7)\nax4 = ax1.twinx()\nax4.plot(bar_start + bar_width, data[:, 3], label=data_labels[3], color='palevioletred', marker='o')\nax1.set_xticks(bar_pos)\nax1.set_xticklabels(line_labels, rotation=45)\n\n# Position the y-axes\nax3.spines[\"right\"].set_position((\"axes\", 1.1))\nax4.spines[\"right\"].set_position((\"axes\", 1.2))\n\n# Label all axes\nax1.set_ylabel(data_labels[0], color=\"cornflowerblue\")\nax2.set_ylabel(data_labels[1], color=\"orchid\")\nax3.set_ylabel(data_labels[2], color=\"lightseagreen\")\nax4.set_ylabel(data_labels[3], color=\"palevioletred\")\n\n# Draw background grids\nax1.grid(linestyle='--')\nax2.grid(linestyle='--')\nax3.grid(linestyle='--')\n\n# Autolocator\nax1.yaxis.set_major_locator(plt.MaxNLocator(10))\nax2.yaxis.set_major_locator(plt.MaxNLocator(10))\nax3.yaxis.set_major_locator(plt.MaxNLocator(10))\nax4.yaxis.set_major_locator(plt.MaxNLocator(10))\n\n# Show legends\nax1.legend(bbox_to_anchor=(1.0, 0.85))\nax2.legend(bbox_to_anchor=(1.0, 0.8))\nax3.legend(bbox_to_anchor=(1.0, 0.75))\nax4.legend(bbox_to_anchor=(1.0, 0.7))\n\n# Set the title\nplt.title('Educational Enrolment, Graduation, and Dropout Rates Analysis')\n\n# Resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./multi-axes/png/5_2023122261325.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in average GPA between secondary education and postgraduate education?",
            "output": "0.6"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_44",
        "img": "./multi-axes/png/multi-axes_44.png",
        "topic": "Retail and E-commerce",
        "title": " Retail and E-commerce Sales Performance Analysis ",
        "csv": "Category \\t Number of Customers \\t Total Revenue (Millions of Dollars) \\t Average Basket Size (Dollars) \\t Average Customer Spend (Dollars) \\n Online Shopping \\t 1000 \\t 9000 \\t 25 \\t 90 \\n Grocery Shopping \\t 1500 \\t 7000 \\t 20 \\t 47 \\n Department Store \\t 2000 \\t 11000 \\t 30 \\t 55 \\n Clothing Store \\t 1700 \\t 8000 \\t 24 \\t 47 \\n Electronic Store \\t 1000 \\t 6000 \\t 40 \\t 60 \\n Home Decor Store \\t 1200 \\t 3000 \\t 20 \\t 25 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart titled \"Retail and E-commerce Sales Performance Analysis\" represents various metrics for different shopping categories. Online Shopping records 1000 customers, $9000 million in revenue, a basket size of $25, and an average spend of $90. Grocery Shopping shows 1500 customers, $7000 million in revenue, with a $20 basket size and a $47 average spend. Department Stores have 2000 customers, $11000 million revenue, a $30 basket size, and a $55 average spend. Clothing Stores present 1700 customers, $8000 million revenue, $24 basket size, and $47 average spend. Electronic Stores tally 1000 customers, $6000 million revenue, with a $40 basket size and $60 average spend. Lastly, Home Decor Stores have 1200 customers, $3000 million revenue, a $20 basket size, and a $25 average spend."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd \n\n# define labels\ndata_labels = [\"Number of Customers\", \"Total Revenue (Millions of Dollars)\", \"Average Basket Size (Dollars)\", \"Average Customer Spend (Dollars)\"]\nline_labels = [\"Online Shopping\", \"Grocery Shopping\", \"Department Store\", \"Clothing Store\", \"Electronic Store\", \"Home Decor Store\"]\n\n# define data\ndata = np.array([[1000, 9000, 25, 90],\n                 [1500, 7000, 20, 47],\n                 [2000, 11000, 30, 55],\n                 [1700, 8000, 24, 47],\n                 [1000, 6000, 40, 60],\n                 [1200, 3000, 20, 25]])\n\n# Create figure\nplt.figure(figsize=(15, 10))\n\n# Create the first plot\nax1 = plt.subplot(111)\nax1.bar(np.arange(data.shape[0]), data[:, 0], label=data_labels[0], width=0.25, color='C0')\nax1.set_xticks(np.arange(data.shape[0]))\nax1.set_xticklabels(line_labels)\nax1.set_ylabel(data_labels[0], color='C0')\nax1.tick_params(axis='y', labelcolor='C0')\nax1.set_title('Retail and E-commerce Sales Performance Analysis')\n\n# Create the second plot\nax2 = ax1.twinx()\nax2.plot(np.arange(data.shape[0]), data[:, 1], label=data_labels[1], marker='o', color='C1')\nax2.set_xlim(-0.25, data.shape[0]-0.75)\nax2.set_ylabel(data_labels[1], color='C1')\nax2.tick_params(axis='y', labelcolor='C1')\n\n# Create the third plot\nax3 = ax1.twinx()\nax3.spines['right'].set_position(('axes', 1.1))\nax3.plot(np.arange(data.shape[0]), data[:, 2], label=data_labels[2], marker='^', color='C2')\nax3.set_ylabel(data_labels[2], color='C2')\nax3.tick_params(axis='y', labelcolor='C2')\n\n# Create the fourth plot\nax4 = ax1.twinx()\nax4.spines['right'].set_position(('axes', 1.2))\nax4.plot(np.arange(data.shape[0]), data[:, 3], label=data_labels[3], marker='s', color='C3')\nax4.set_ylabel(data_labels[3], color='C3')\nax4.tick_params(axis='y', labelcolor='C3')\n\n# Set grids\nax1.grid(axis='y')\n\n# Set autolocator\nax1.autoscale_view()\nax2.autoscale_view()\nax3.autoscale_view()\nax4.autoscale_view()\n\n# Resize image\nplt.tight_layout()\n\n# Save image\nplt.savefig('./multi-axes/png/29_2023122261325.png')\n\n# Clear image\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in total revenue between the electronic store and the clothing store?",
            "output": "-$2000 million"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_25",
        "img": "./multi-axes/png/multi-axes_25.png",
        "topic": "Environment and Sustainability",
        "title": " Environmental Sustainability Efforts: An Overview ",
        "csv": "Category \\t Number of Trees Planted (Thousands) \\t CO2 Reduction (Thousands of Tonnes) \\t Number of Pollution Incidents Reported \\n Forest Conservation \\t 1250 \\t 950 \\t 20 \\n Renewable Energy \\t 1800 \\t 1600 \\t 25 \\n Water Conservation \\t 1400 \\t 1300 \\t 30 \\n Recycling \\t 700 \\t 1200 \\t 50 \\n Air Quality Monitoring \\t 200 \\t 1400 \\t 35 \\n Waste Management \\t 850 \\t 1400 \\t 40 \\n Environmental Education \\t 500 \\t 1000 \\t 25 \\n Green Building \\t 300 \\t 1300 \\t 50 \\n Chemical and Hazardous Waste Reduction \\t 200 \\t 1200 \\t 45 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart titled \"Environmental Sustainability Efforts: An Overview\" details the quantity of trees planted (in thousands), CO2 reduction (in thousands of tonnes), and the number of pollution incidents reported across various sustainability categories. Forest Conservation shows 1,250 trees planted, 950 in CO2 reduction, and 20 pollution incidents. Renewable Energy leads with 1,800 trees planted and 1,600 in CO2 reduction, alongside 25 reported incidents. Water Conservation notes 1,400 trees, 1,300 CO2 reduction, and 30 incidents. Recycling records 700 trees, 1,200 CO2 reduction, and 50 incidents. Air Quality Monitoring and Waste Management each report 1,400 in CO2 reduction, with 200 and 850 trees planted, and 35 and 40 incidents, respectively. Environmental Education documents 500 trees, 1,000 CO2 reduction, and 25 incidents, while Green Building and Chemical and Hazardous Waste Reduction both register 1,300 and 1,200 in CO2 reduction, with 300 and 200 trees planted, and 50 and 45 incidents."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport numpy as np\n\ndata_labels = ['Number of Trees Planted (Thousands)', 'CO2 Reduction (Thousands of Tonnes)', 'Number of Pollution Incidents Reported']\nline_labels = ['Forest Conservation', 'Renewable Energy', 'Water Conservation', 'Recycling', 'Air Quality Monitoring', 'Waste Management', 'Environmental Education', 'Green Building', 'Chemical and Hazardous Waste Reduction']\ndata = np.array([[1250, 950, 20], \n                 [1800, 1600, 25], \n                 [1400, 1300, 30], \n                 [700, 1200, 50], \n                 [200, 1400, 35], \n                 [850, 1400, 40], \n                 [500, 1000, 25], \n                 [300, 1300, 50], \n                 [200, 1200, 45]])\n\nfig = plt.figure(figsize=(15, 12))\nax1 = fig.add_subplot(111)\nax1.bar(line_labels, data[:,0], label=data_labels[0], color='green', alpha=0.8)\nax1.set_ylabel(data_labels[0], color='green', fontsize=15)\nax1.set_xticklabels(line_labels, rotation=30, fontsize=15)\nax1.tick_params(axis='y', colors='green')\nax1.set_title(\"Environmental Sustainability Efforts: An Overview\", fontsize=20)\n\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:,1], label=data_labels[1], marker='s', color='blue')\nax2.set_ylabel(data_labels[1], color='blue', fontsize=15)\nax2.tick_params(axis='y', colors='blue')\n\nax3 = ax1.twinx()\nax3.spines['right'].set_position(('outward',60))\nax3.plot(line_labels, data[:,2], label=data_labels[2], marker='o', color='red', linestyle='--')\nax3.set_ylabel(data_labels[2], color='red', fontsize=15)\nax3.tick_params(axis='y', colors='red')\n\nax4 = ax1.twinx()\nax4.spines['right'].set_position(('outward',120))\nax4.fill_between(line_labels, 0, data[:,2], label=data_labels[2], color='y', alpha=0.2)\nax4.set_ylabel(data_labels[2], color='y', fontsize=15)\nax4.tick_params(axis='y', colors='y')\n\nplt.tight_layout()\n\nax1.yaxis.set_major_locator(ticker.MaxNLocator(10))\nax2.yaxis.set_major_locator(ticker.MaxNLocator(10))\nax3.yaxis.set_major_locator(ticker.MaxNLocator(10))\nax4.yaxis.set_major_locator(ticker.MaxNLocator(10))\n\nplt.savefig('./multi-axes/png/31_2023122261325.png')\nplt.clf()"
        },
        "QA": {
            "input": "By how many thousands of tonnes is the CO2 reduction from Air Quality Monitoring greater than from Forest Conservation?",
            "output": "450 thousands of tonnes"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_34",
        "img": "./multi-axes/png/multi-axes_34.png",
        "topic": "Energy and Utilities",
        "title": " Energy and Utilities Consumption Trends Analysis ",
        "csv": "Category \\t Number of Consumers (Millions) \\t Consumption (TWh) \\t Average Price ($) \\n Electric Power \\t 560 \\t 3700 \\t 52 \\n Natural Gas \\t 570 \\t 1400 \\t 5.2 \\n Petroleum \\t 740 \\t 1200 \\t 2.2 \\n Renewables \\t 290 \\t 400 \\t 20 \\n Coal \\t 750 \\t 3800 \\t 45 \\n Nuclear \\t 200 \\t 1000 \\t 15 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart illustrates energy and utilities consumption trends by presenting data on the number of consumers in millions, consumption in TWh, and the average price in dollars for six categories. Electric Power has 560 million consumers, 3700 TWh consumption, and an average price of $52. Natural Gas consumption involves 570 million consumers, with 1400 TWh consumed at an average price of $5.2. Petroleum sees 740 million consumers, 1200 TWh consumption, and a $2.2 average price. Renewables, Coal, and Nuclear show consumption by 290, 750, and 200 million consumers respectively with consumption and average prices reflecting their distinct market positions."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = [\"Number of Consumers (Millions)\", \"Consumption (TWh)\", \n               \"Average Price ($)\"]\ndata = np.array([[560, 3700, 52], [570, 1400, 5.2], [740, 1200, 2.2], \n                 [290, 400, 20], [750, 3800, 45], [200, 1000, 15]])\nline_labels = [\"Electric Power\", \"Natural Gas\", \"Petroleum\", \"Renewables\", \n               \"Coal\", \"Nuclear\"]\n\nplt.figure(figsize=(15, 10))\nax1 = plt.subplot(111)\nax1.bar(line_labels, data[:, 0], color=\"r\", alpha=0.6, label=data_labels[0]) \nax2 = ax1.twinx()\nax2.plot(line_labels, data[:, 1], color=\"b\", marker=\"o\", label=data_labels[1])\nax3 = ax1.twinx()\nax3.spines[\"right\"].set_position((\"axes\", 1.2))\nax3.plot(line_labels, data[:, 2], color=\"g\", linestyle=\"--\", label=data_labels[2])\nax1.set_xlabel(\"Category\")\nax1.set_ylabel(data_labels[0], color=\"r\")\nax2.set_ylabel(data_labels[1], color=\"b\")\nax3.set_ylabel(data_labels[2], color=\"g\")\nax1.legend(loc=\"upper left\")\nax2.legend(loc=\"upper right\")\nax3.legend(loc=\"lower right\")\nax1.grid()\nax1.autoscale_view()\nax2.autoscale_view()\nax3.autoscale_view()\nplt.title(\"Energy and Utilities Consumption Trends Analysis\")\nplt.tight_layout()\nplt.savefig(\"./multi-axes/png/3_2023122261325.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the average price difference between natural gas and petroleum?",
            "output": "$3"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_32",
        "img": "./multi-axes/png/multi-axes_32.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare and Health Providers Performance Overview ",
        "csv": "Category \\t Patient Visits (Millions) \\t Patient Satisfaction Score (1-10) \\t Average Wait Time (Minutes) \\n Emergency Care \\t 12 \\t 8 \\t 45 \\n Primary Care \\t 18 \\t 7 \\t 30 \\n Specialty Care \\t 28 \\t 9 \\t 45 \\n Mental Health Services \\t 6 \\t 10 \\t 60 \\n Diagnostic Care \\t 15 \\t 6 \\t 15 \\n Women's Health Services \\t 7 \\t 7 \\t 35 \\n Pediatric Care \\t 8 \\t 9 \\t 25 \\n Urgent Care \\t 10 \\t 8 \\t 20 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart illustrates data on healthcare and health providers' performance across various services. Emergency Care reported 12 million patient visits, a satisfaction score of 8, and an average wait time of 45 minutes. Primary Care saw 18 million visits, with a score of 7 and a 30-minute wait time. Specialty Care had 28 million visits, a score of 9, and the same 45-minute wait. Mental Health Services had 6 million visits but the highest satisfaction at 10, with a 60-minute wait. Diagnostic Care offered a lower score of 6 but a short 15-minute wait, while Women's Health and Pediatric Care had mid-range scores and wait times. Urgent Care featured 10 million visits, a score of 8, and a brief 20-minute wait time."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels. \ndata_labels = ['Patient Visits (Millions)', 'Patient Satisfaction Score (1-10)', 'Average Wait Time (Minutes)']\nline_labels = ['Emergency Care', 'Primary Care', 'Specialty Care', 'Mental Health Services', 'Diagnostic Care', \n               'Women\\'s Health Services', 'Pediatric Care', 'Urgent Care']\ndata = np.array([[12, 8, 45], [18, 7, 30], [28, 9, 45], [6, 10, 60], [15, 6, 15], [7, 7, 35], [8, 9, 25], [10, 8, 20]])\n\n# Create figure before plotting\nfig = plt.figure(figsize=(15,10))\nax1 = fig.add_subplot(111)\n\n# Plot the data with the type of multi-axes chart\nax1.bar(line_labels, data[:,0], width=0.3, color='#FFC222', alpha=0.8)\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:,1], color='#00BFFF', linestyle='--', marker='o')\nax3 = ax1.twinx()\nax3.spines['right'].set_position(('axes', 1.1))\nax3.plot(line_labels, data[:,2], color='#228B22', linestyle='-', marker='s')\n\n# Label all axes\nax1.set_ylabel(data_labels[0], color='#FFC222')\nax2.set_ylabel(data_labels[1], color='#00BFFF')\nax3.set_ylabel(data_labels[2], color='#228B22')\n\n# Set the title of the figure\nplt.title('Healthcare and Health Providers Performance Overview')\n\n# Automatic resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./multi-axes/png/30_2023122261325.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "How long is the average wait time for Diagnostic Care?",
            "output": "15 minutes"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_6",
        "img": "./multi-axes/png/multi-axes_6.png",
        "topic": "Energy and Utilities",
        "title": " Energy and Utilities Consumption and Revenue Analysis ",
        "csv": "Category \\t Consumption (GWh/year) \\t Revenue (Millions of Dollars) \\t Average of Customer Bill \\t Households \\n Natural Gas \\t 6450 \\t 15590 \\t 150 \\t 890 \\n Electricity \\t 19800 \\t 76000 \\t 440 \\t 740 \\n Solar \\t 3100 \\t 7800 \\t 700 \\t 220 \\n Wind \\t 2120 \\t 7000 \\t 560 \\t 110 \\n Oil \\t 1000 \\t 8000 \\t 200 \\t 50 \\n Nuclear \\t 1220 \\t 5600 \\t 400 \\t 90 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart illustrates the data on consumption in GWh/year, revenue in millions of dollars, average customer bill, and number of households for six energy categories. Natural Gas has a consumption of 6450 GWh/year, revenue of $15590 million, an average bill of $150, and serves 890 households. Electricity leads with 19800 GWh/year consumption, $76000 million revenue, a $440 average bill, and 740 households. Solar shows 3100 GWh/year, $7800 million revenue, with the highest average bill at $700 for 220 households. Wind and Oil have lower consumption and households but contribute $7000 and $8000 million in revenue, respectively. Nuclear, finally, has 1220 GWh/year consumption, $5600 million revenue, and 90 households served."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata_labels = ['Consumption (GWh/year)', 'Revenue (Millions of Dollars)', 'Average of Customer Bill', 'Households']\nline_labels = ['Natural Gas', 'Electricity', 'Solar', 'Wind', 'Oil', 'Nuclear']\ndata = np.array([\n    [6450, 15590, 150, 890],\n    [19800, 76000, 440, 740],\n    [3100, 7800, 700, 220],\n    [2120, 7000, 560, 110],\n    [1000, 8000, 200, 50],\n    [1220, 5600, 400, 90]\n])\n\nfig = plt.figure(figsize=(15,10))\nax1 = fig.add_subplot(111)\nax1.bar(line_labels,data[:, 0], color='b', alpha=0.4, label=data_labels[0])\nax1.set_xlabel('Category')\nax1.set_ylabel(data_labels[0])\nax1.set_title('Energy and Utilities Consumption and Revenue Analysis')\nax1.legend(loc=1)\nax1.grid(linestyle='--')\n\nax2 = ax1.twinx()\nax2.set_ylabel(data_labels[1])\nax2.plot(line_labels,data[:, 1], color='g', alpha=0.8, label=data_labels[1])\nax2.legend(loc=2)\n\nax3 = ax1.twinx()\nax3.spines[\"right\"].set_position((\"axes\", 1.1))\nax3.set_ylabel(data_labels[2])\nax3.plot(line_labels,data[:, 2], color='m', alpha=0.8, label=data_labels[2])\nax3.legend(loc=3)\n\nax4 = ax1.twinx()\nax4.spines[\"right\"].set_position((\"axes\", 1.2))\nax4.set_ylabel(data_labels[3])\nax4.plot(line_labels,data[:, 3], color='y', alpha=0.8, label=data_labels[3])\nax4.legend(loc=4)\n\nax1.xaxis.set_ticks(line_labels)\nax1.autoscale_view()\nax2.autoscale_view()\nax3.autoscale_view()\nax4.autoscale_view()\n\nplt.tight_layout()\nplt.savefig('./multi-axes/png/27_2023122261325.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many households are using solar energy according to the data?",
            "output": "220"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_37",
        "img": "./multi-axes/png/multi-axes_37.png",
        "topic": "Social Sciences and Humanities",
        "title": "Social Sciences and Humanities Subscription Services Performance ",
        "csv": "Category \\t Subscribers (Thousands) \\t Revenue (Millions of Dollars) \\t Average View Count \\n Podcasts \\t 98 \\t 1750 \\t 128 \\n Social Media \\t 1230 \\t 3300 \\t 140 \\n Books \\t 290 \\t 1450 \\t 670 \\n Audio-Books \\t 400 \\t 1700 \\t 600 \\n Magazines \\t 280 \\t 1300 \\t 570 \\n Newspapers \\t 320 \\t 1020 \\t 470 \\n Video Streaming \\t 990 \\t 2050 \\t 260 \\n Music Streaming \\t 1150 \\t 3500 \\t 120 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart presents performance data for various subscription services within the social sciences and humanities. It reflects subscriber counts in thousands, revenue in millions of dollars, and average view counts. Podcasts show 98 thousand subscribers, $1750 million revenue, and an average view count of 128. Social Media has 1230 thousand subscribers, the highest revenue at $3300 million, and a view count of 140. Books have 290 thousand subscribers, $1450 million revenue, and the highest view count of 670. The chart also includes data on Audio-Books, Magazines, Newspapers, Video Streaming, and Music Streaming, providing a comparative overview of each service's performance metrics."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.ticker as ticker\n\ndata_labels = [\"Subscribers (Thousands)\", \"Revenue (Millions of Dollars)\", \"Average View Count\"]\nline_labels = [\"Podcasts\", \"Social Media\", \"Books\", \"Audio-Books\", \"Magazines\", \"Newspapers\", \"Video Streaming\", \"Music Streaming\"]\n\ndata = np.array([[98, 1750, 128], [1230, 3300, 140], [290, 1450, 670], [400, 1700, 600], [280, 1300, 570], [320, 1020, 470], [990, 2050, 260], [1150, 3500, 120]])\n\nfig = plt.figure(figsize=(15,10))\nax1 = fig.add_subplot(111)\n\nax1.bar(line_labels, data[:,0], label=data_labels[0], width=0.2, color='#ff9900', alpha=0.6)\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:,1], label=data_labels[1], marker='o', color='#0099ff')\nax3 = ax1.twinx()\nax3.spines[\"right\"].set_position((\"axes\", 1.1))\nax3.plot(line_labels, data[:,2], label=data_labels[2], marker='^', color='#33cc33')\n\nax1.set_xlabel('Category', fontsize=14)\nax1.set_ylabel(data_labels[0], fontsize=14, color='#ff9900')\nax2.set_ylabel(data_labels[1], fontsize=14, color='#0099ff')\nax3.set_ylabel(data_labels[2], fontsize=14, color='#33cc33')\n\nax1.tick_params(axis='y', labelcolor='#ff9900')\nax2.tick_params(axis='y', labelcolor='#0099ff')\nax3.tick_params(axis='y', labelcolor='#33cc33')\n\nax1.set_title(\"Social Sciences and Humanities Subscription Services Performance\", fontsize=20)\n\nax1.legend(loc='upper left')\nax2.legend(loc='upper center')\nax3.legend(loc='upper right')\n\nax1.grid()\n\nfor ax in [ax1, ax2, ax3]:\n    ax.xaxis.set_major_locator(ticker.AutoLocator())\n    ax.yaxis.set_major_locator(ticker.AutoLocator())\n\nplt.tight_layout()\nplt.savefig(\"./multi-axes/png/50_2023122270030.png\")\nplt.clf()"
        },
        "QA": {
            "input": "How many thousands of subscribers does the Social Media category have?",
            "output": "1230"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_24",
        "img": "./multi-axes/png/multi-axes_24.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing and Production Performance Overview ",
        "csv": "Category \\t Workers per Facility (Thousands) \\t Revenue (Millions of Dollars) \\t Average Cost per Unit (Dollars) \\t Units Produced \\n Automotive Parts \\t 2.5 \\t 5460 \\t 23.5 \\t 35000 \\n Aircraft Parts \\t 1.3 \\t 7200 \\t 100 \\t 3000 \\n Electronics \\t 4.1 \\t 8200 \\t 32.5 \\t 25000 \\n Appliances \\t 3.2 \\t 2400 \\t 150 \\t 800 \\n Home Supplies \\t 1.4 \\t 1700 \\t 17 \\t 9500 \\n Machinery \\t 3.8 \\t 6000 \\t 90 \\t 4500 \\n Furniture \\t 2.6 \\t 3700 \\t 60 \\t 2500 \\n Pharmaceuticals \\t 3.9 \\t 11000 \\t 20 \\t 40000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart presents data on the manufacturing and production performance of eight industries regarding workers per facility, revenue, cost per unit, and units produced. Automotive Parts have 2.5 thousand workers per facility with a revenue of $5460 million, an average cost of $23.5 per unit, and 35,000 units produced. Aircraft Parts have 1.3 thousand workers, $7200 million in revenue, $100 cost per unit, and produce 3,000 units. Electronics employ 4.1 thousand workers, generate $8200 million, with a $32.5 unit cost and 25,000 units produced. Appliances, Home Supplies, Machinery, Furniture, and Pharmaceuticals also showcase varying figures across these metrics."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndata_labels = ['Workers per Facility (Thousands)', 'Revenue (Millions of Dollars)', 'Average Cost per Unit (Dollars)', 'Units Produced']\nline_labels = ['Automotive Parts', 'Aircraft Parts', 'Electronics', 'Appliances', 'Home Supplies', 'Machinery', 'Furniture', 'Pharmaceuticals']\ndata = np.array([[2.5, 5460, 23.5, 35000], [1.3, 7200, 100, 3000], [4.1, 8200, 32.5, 25000], [3.2, 2400, 150, 800], [1.4, 1700, 17, 9500], [3.8, 6000, 90, 4500], [2.6, 3700, 60, 2500], [3.9, 11000, 20, 40000]])\n\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\nax1.set_xticks(np.arange(len(line_labels)))\nax1.set_xticklabels(line_labels)\nax1.bar(line_labels, data[:, 0], color='blue', alpha=0.8, label=data_labels[0])\n\nax1.set_xlabel('Category')\nax1.set_ylabel(data_labels[0], color='blue')\nax1.tick_params(axis='y', labelcolor='blue')\nax1.grid(color='gray', linestyle='-', linewidth=0.5)\n\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:, 1], color='red', marker='o', linestyle='--', label=data_labels[1])\nax2.set_ylabel(data_labels[1], color='red')\nax2.tick_params(axis='y', labelcolor='red')\n\nax3 = ax1.twinx()\nax3.bar(line_labels, data[:, 2], color='green', alpha=0.4, label=data_labels[2], width=0.3, bottom=data[:, 0])\nax3.set_ylabel(data_labels[2], color='green')\nax3.tick_params(axis='y', labelcolor='green')\nax3.spines['right'].set_position(('axes', 1.1))\n\nax4 = ax1.twinx()\nax4.plot(line_labels, data[:, 3], color='orange', marker='o', linestyle='--', label=data_labels[3])\nax4.set_ylabel(data_labels[3], color='orange')\nax4.tick_params(axis='y', labelcolor='orange')\nax4.spines['right'].set_position(('axes', 1.2))\n\nplt.title('Manufacturing and Production Performance Overview')\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nlines3, labels3 = ax3.get_legend_handles_labels()\nlines4, labels4 = ax4.get_legend_handles_labels()\nax1.legend(lines + lines2 + lines3 + lines4, labels + labels2 + labels3 + labels4, loc='upper left', bbox_to_anchor=(0.02, 0.9))\n\nax1.autoscale_view()\nax2.autoscale_view()\nax3.autoscale_view()\nax4.autoscale_view()\n\nplt.tight_layout()\nplt.savefig('./multi-axes/png/7_202312251608.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the average cost per unit for Pharmaceuticals?",
            "output": "$20"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_26",
        "img": "./multi-axes/png/multi-axes_26.png",
        "topic": "Retail and E-commerce",
        "title": " Retail and E-commerce Performance Analysis: Store Counts, Sales, and Customer Spend ",
        "csv": "Category \\t Number of Stores \\t Sales (Millions of Dollars) \\t Average Customer Spend \\n Grocery Stores \\t 4500 \\t 78800 \\t 400 \\n Department Stores \\t 2500 \\t 36000 \\t 450 \\n Specialty Stores \\t 650 \\t 17500 \\t 650 \\n Online Retailers \\t 3000 \\t 90000 \\t 500 \\n Discount Stores \\t 5500 \\t 70000 \\t 200 \\n Boutiques \\t 800 \\t 24000 \\t 750 \\n E-commerce Platforms \\t 4000 \\t 80000 \\t 400 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart illustrates the performance analysis of different retail and e-commerce categories based on their store count, sales in millions of dollars, and average customer spend. Grocery Stores have 4500 stores with $78,800 million in sales and an average spend of $400. Department Stores have 2500 stores, $36,000 million in sales, and an average spend of $450. Specialty Stores, with 650 stores, have sales of $17,500 million and the highest average spend of $650. Online Retailers show 3000 stores with the highest sales at $90,000 million and an average spend of $500. Discount Stores lead in store count with 5500 locations, $70,000 million in sales, and the lowest average spend of $200. Boutiques have 800 stores with $24,000 million in sales and a $750 average spend. Lastly, E-commerce Platforms feature 4000 stores, $80,000 million in sales, and an average spend of $400."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = ['Number of Stores', 'Sales (Millions of Dollars)', 'Average Customer Spend']\ndata = np.array([[4500, 78800, 400], [2500, 36000, 450], [650, 17500, 650], [3000, 90000, 500], [5500, 70000, 200], [800, 24000, 750], [4000, 80000, 400]])\nline_labels = ['Grocery Stores', 'Department Stores', 'Specialty Stores', 'Online Retailers', 'Discount Stores', 'Boutiques', 'E-commerce Platforms']\n\n# Create figure before plotting\nplt.figure(figsize=(15, 10))\nax1 = plt.subplot(111)\n\n# Plot the data with the type of multi-axes chart\n# Plot the first column of data array, i.e., data[:,0]\nax1.bar(line_labels, data[:,0], width=0.8, color='#FFC222', alpha=0.6)\nax1.set_ylabel(data_labels[0], color='#FFC222')\nax1.tick_params(axis='y', labelcolor='#FFC222')\n\n# Plot the second column of data array, i.e. data[:,1], after using twinx to overlay a new ax, named as ax2 on the first plot\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:,1], marker='o', linestyle='-', color='#4A90E2')\nax2.set_ylabel(data_labels[1], color='#4A90E2')\nax2.tick_params(axis='y', labelcolor='#4A90E2')\n\n# If possible, plot the third column of data array, i.e. data[:,2], after using another twinx, named as ax3 to overlay another new ax on the first plot\nax3 = ax1.twinx()\nax3.scatter(line_labels, data[:,2], color='#9013FE')\nax3.set_ylabel(data_labels[2], color='#9013FE')\nax3.tick_params(axis='y', labelcolor='#9013FE')\n\n# Seperate different y-axes\nax3.spines['right'].set_position(('axes', 1.1))\n\n# Show the legends of all plots at different positions\nax1.legend(['Number of Stores'], loc='upper left')\nax2.legend(['Sales (Millions of Dollars)'], loc='upper right')\nax3.legend(['Average Customer Spend'], loc='lower right')\n\n# Drawing techniques such as background grids can be used\nax1.grid(linestyle='--', alpha=0.6)\n\n# Use Autolocator for all ax, i.e., ax1, ax2, ax3, ..., to adjust the range of all y-axes\nax1.autoscale(enable=True, axis='y', tight=True)\nax2.autoscale(enable=True, axis='y', tight=True)\nax3.autoscale(enable=True, axis='y', tight=True)\n\n# Label all axes\nax1.set_xlabel('Categories')\nax1.set_title('Retail and E-commerce Performance Analysis: Store Counts, Sales, and Customer Spend')\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# The image must be saved as ./multi-axes/png/25_2023122261325.png\nplt.savefig('./multi-axes/png/25_2023122261325.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the highest number of stores?",
            "output": "Discount Stores"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_15",
        "img": "./multi-axes/png/multi-axes_15.png",
        "topic": "Government and Public Policy",
        "title": " Government and Public Policy Performance Overview: Number of Organizations, Staffs, and Budget ",
        "csv": "Category \\t Number of Organizations \\t Number of Staffs \\t Total Budget (Millions of Dollars) \\n Education \\t 50 \\t 3000 \\t 120 \\n Healthcare \\t 20 \\t 2050 \\t 110 \\n Social Security \\t 30 \\t 2500 \\t 90 \\n Public Safety \\t 40 \\t 3500 \\t 150 \\n Public Works \\t 40 \\t 3000 \\t 140 \\n Taxation \\t 20 \\t 1500 \\t 80 \\n Economy \\t 25 \\t 2750 \\t 100 \\n Energy and Environment \\t 30 \\t 2500 \\t 120 \\n Legal Services \\t 60 \\t 4000 \\t 160 \\n Transportation \\t 45 \\t 3500 \\t 140 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart provides a Government and Public Policy Performance Overview based on several categories. Education has 50 organizations, 3000 staff members, and a $120 million budget. Healthcare features 20 organizations, 2050 staff, and a $110 million budget. The Social Security sector comprises 30 organizations, 2500 staff, and a $90 million budget. Public Safety has 40 organizations, 3500 staff, and the highest budget at $150 million. Public Works equals Public Safety in the number of organizations at 40, has 3000 staff, and a slightly lower budget of $140 million. Taxation includes 20 organizations with 1500 staff and an $80 million budget. The Economy category lists 25 organizations, 2750 staff, and a $100 million budget. Energy and Environment reflects 30 organizations, 2500 staff, and a $120 million budget. Legal Services have the most organizations, with 60, the highest number of staff at 4000, and the largest budget of $160 million. Transportation has 45 organizations, 3500 staff, and a $140 million budget."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Category','Number of Organizations','Number of Staffs','Total Budget (Millions of Dollars)']\nline_labels = ['Education','Healthcare','Social Security','Public Safety','Public Works','Taxation','Economy','Energy and Environment','Legal Services','Transportation']\ndata = np.array([[50,3000,120],[20,2050,110],[30,2500,90],[40,3500,150],[40,3000,140],[20,1500,80],[25,2750,100],[30,2500,120],[60,4000,160],[45,3500,140]])\n\nfig, ax = plt.subplots(figsize=(14,7))\n\nbar_width = 0.2\nbar_position_1 = np.arange(len(data))\nbar_position_2 = [x + bar_width for x in bar_position_1] \nbar_position_3 = [x + bar_width for x in bar_position_2]\n\n# plot the bar chart\nax.bar(bar_position_1, data[:,0], width = bar_width, label = data_labels[1], color = 'tab:blue')\nax2 = ax.twinx()\nax2.bar(bar_position_2, data[:,1], width = bar_width, label = data_labels[2], color = 'tab:orange')\nax3 = ax.twinx()\nax3.bar(bar_position_3, data[:,2], width = bar_width, label = data_labels[3], color = 'tab:green')\n\nax.set_xticks(np.arange(len(data)) + bar_width)\nax.set_xticklabels(line_labels, rotation=45)\nax.set_title(\"Government and Public Policy Performance Overview: Number of Organizations, Staffs, and Budget\")\nax.set_ylabel(data_labels[1], color='#0093b9')\nax2.set_ylabel(data_labels[2], color='#ff9c00')\nax3.set_ylabel(data_labels[3], color='#fecf44')\nax.legend(loc='upper left')\nax2.legend(loc='upper center')\nax3.legend(loc='upper right')\n# set the position for the second, third, ... y-axes\nax3.spines['right'].set_position(('axes', 1.1))\n\n# label each y-axis\nax.set_ylabel(data_labels[1], color = 'tab:blue')\nax2.set_ylabel(data_labels[2], color = 'tab:orange')\nax3.set_ylabel(data_labels[3], color = 'tab:green')\n\n# add grids\nax.grid(True, which='major', axis='x', linestyle='--')\n\nfig.tight_layout()\nplt.savefig('./multi-axes/png/8.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much is the total budget allocated for both Public Safety and Public Works categories?",
            "output": "$290 million"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_13",
        "img": "./multi-axes/png/multi-axes_13.png",
        "topic": "Sports and Entertainment",
        "title": " Sports and Entertainment Viewers and Revenue Analysis ",
        "csv": "Category \\t Number of Viewers (Millions) \\t Revenue (Millions of Dollars) \\t Average Viewing Time (Minutes) \\n Movies \\t 190 \\t 2750 \\t 112 \\n Concerts \\t 54 \\t 810 \\t 76 \\n Sporting Events \\t 84 \\t 1250 \\t 102 \\n Theme Parks \\t 105 \\t 1720 \\t 90 \\n Live Shows \\t 68 \\t 910 \\t 58 \\n Music Festivals \\t 44 \\t 680 \\t 75 \\n Gaming \\t 125 \\t 2180 \\t 183 \\n Online Streaming \\t 230 \\t 3750 \\t 168 \\n Theaters \\t 65 \\t 1040 \\t 106 \\n Las Vegas Shows \\t 32 \\t 490 \\t 84 \\n Amusement Parks \\t 98 \\t 1520 \\t 86 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart represents viewers and revenue analysis across various sports and entertainment categories. Data includes viewers in millions, revenue in millions of dollars, and average viewing time in minutes. Movies lead with 190 million viewers, $2750 million revenue, and 112 minutes average viewing time. Online streaming has the highest number of viewers at 230 million and the highest revenue at $3750 million, with a substantial average viewing time of 168 minutes. Gaming also shows a significant average viewing time of 183 minutes. Other categories such as concerts, sporting events, and theme parks vary in their viewership, revenue, and engagement metrics."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Number of Viewers (Millions)','Revenue (Millions of Dollars)','Average Viewing Time (Minutes)']\nline_labels = ['Movies','Concerts','Sporting Events','Theme Parks','Live Shows','Music Festivals','Gaming','Online Streaming','Theaters','Las Vegas Shows','Amusement Parks']\ndata = np.array([[190,2750,112],\n                 [54,810,76],\n                 [84,1250,102],\n                 [105,1720,90],\n                 [68,910,58],\n                 [44,680,75],\n                 [125,2180,183],\n                 [230,3750,168],\n                 [65,1040,106],\n                 [32,490,84],\n                 [98,1520,86]])\n\nplot_types = ['bar','line','area','scatter']\n\nfig = plt.figure(figsize = (15, 10))\nax1 = fig.add_subplot(111)\n\n# plot the first column data\nax1.bar(line_labels, data[:,0], width = 0.1, alpha = 0.5, color = 'r')\nax1.set_ylabel(data_labels[0], color = 'r', fontsize = 16)\nax1.set_xlabel('Category', fontsize = 16)\nax1.tick_params(axis = 'y', colors = 'r')\n\n# plot the second column data\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:,1], '-o', color = 'b', alpha = 0.6)\nax2.set_ylabel(data_labels[1], color = 'b', fontsize = 16)\nax2.tick_params(axis = 'y', colors = 'b')\n\n# plot the third column data\nax3 = ax1.twinx()\nax3.plot(line_labels, data[:,2], '-s', color = 'g', alpha = 0.6)\nax3.set_ylabel(data_labels[2], color = 'g', fontsize = 16)\nax3.tick_params(axis = 'y', colors = 'g')\nax3.spines['right'].set_position(('axes', 1.1))\n\n# draw the background grids\nax1.grid(alpha = 0.3)\n\n# adjust the range of all y-axes\nax1.autoscale_view()\nax2.autoscale_view()\nax3.autoscale_view()\n\n# set the title of the figure\nax1.set_title('Sports and Entertainment Viewers and Revenue Analysis', fontsize = 20)\n\n# automatically resize the image\nplt.tight_layout()\n\n# save the image\nplt.savefig('./multi-axes/png/43_2023122261325.png')\n\n# clear the figure\nplt.clf()"
        },
        "QA": {
            "input": "How many more millions of dollars in revenue does online streaming generate compared to gaming?",
            "output": "$1570 million dollars"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_20",
        "img": "./multi-axes/png/multi-axes_20.png",
        "topic": "Environment and Sustainability",
        "title": "Environmental Impact of Different Sectors ",
        "csv": "Category \\t Carbon Footprint (lbs/sqft) \\t Energy Efficiency (kWh/sqft) \\t Water Usage (Gallons/sqft) \\t Recycling Rate (%) \\n Construction \\t 1300 \\t 90 \\t 11 \\t 80 \\n Transportation \\t 200 \\t 45 \\t 10 \\t 70 \\n Manufacturing \\t 1000 \\t 110 \\t 20 \\t 60 \\n Agriculture \\t 500 \\t 90 \\t 15 \\t 50 \\n Consumption \\t 900 \\t 100 \\t 25 \\t 40 \\n Waste Management \\t 800 \\t 80 \\t 30 \\t 30 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart represents the environmental impact metrics for six different sectors. It shows Carbon Footprint in lbs/sqft, Energy Efficiency in kWh/sqft, Water Usage in Gallons/sqft, and Recycling Rate as a percentage. Construction has a carbon footprint of 1300 lbs/sqft, energy efficiency of 90 kWh/sqft, water usage of 11 gallons/sqft, and an 80% recycling rate. Transportation, Manufacturing, Agriculture, Consumption, and Waste Management sectors are also evaluated, with their respective values in carbon footprint ranging from 200 to 1000 lbs/sqft, energy efficiency from 45 to 110 kWh/sqft, water usage from 10 to 30 gallons/sqft, and recycling rates descending from 70% to 30%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# transform data\ndata_labels = ['Carbon Footprint (lbs/sqft)', 'Energy Efficiency (kWh/sqft)', 'Water Usage (Gallons/sqft)', 'Recycling Rate (%)']\nline_labels = ['Construction', 'Transportation', 'Manufacturing', 'Agriculture', 'Consumption', 'Waste Management']\ndata = np.array([[1300, 200, 1000, 500, 900, 800], [90, 45, 110, 90, 100, 80], [11, 10, 20, 15, 25, 30], [80, 70, 60, 50, 40, 30]])\n\n# setup chart\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\n\n# plot data\nax1.bar(line_labels, data[0, :], color='g', alpha=0.5, label=data_labels[0])\nax2 = ax1.twinx()\nax2.plot(line_labels, data[1, :], color='b', marker='o', linestyle='dashed', label=data_labels[1])\nax3 = ax1.twinx()\nax3.plot(line_labels, data[2, :], color='r', marker='o', linestyle='dashed', label=data_labels[2])\nax4 = ax1.twinx()\nax4.plot(line_labels, data[3, :], color='y', marker='o', linestyle='dashed', label=data_labels[3])\n\n# adjust axis\nax1.set_ylim(0, 1500)\nax2.set_ylim(0, 120)\nax3.set_ylim(0, 35)\nax4.set_ylim(0, 100)\nax3.spines['right'].set_position(('axes', 1.1))\nax4.spines['right'].set_position(('axes', 1.2))\n\n# label axes\nax1.set_xlabel('Category')\nax1.set_ylabel(data_labels[0], color='g')\nax2.set_ylabel(data_labels[1], color='b')\nax3.set_ylabel(data_labels[2], color='r')\nax4.set_ylabel(data_labels[3], color='y')\n\n# add title and legend\nplt.title('Environmental Impact of Different Sectors')\nplt.legend(loc='upper left', bbox_to_anchor=(0.1, 0.95))\n\n# adjust subplot layout\nplt.tight_layout()\n\n# save figure\nplt.savefig('./multi-axes/png/5_2023122270030.png')\n\n# clear figure\nplt.clf()"
        },
        "QA": {
            "input": "What is the carbon footprint of the agriculture sector?",
            "output": "500 lbs/sqft"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_29",
        "img": "./multi-axes/png/multi-axes_29.png",
        "topic": "Law and Legal Affairs",
        "title": " Legal Affairs in the US: Court Cases Overview ",
        "csv": "Category \\t Criminal Cases \\t Civil Cases \\t Arbitration Cases \\t Administrative Cases \\n Property \\t 54351 \\t 100000 \\t 7500 \\t 3200 \\n Contracts \\t 50000 \\t 80000 \\t 5000 \\t 4000 \\n Torts \\t 40000 \\t 60000 \\t 6000 \\t 4000 \\n Employment \\t 30000 \\t 50000 \\t 3000 \\t 2000 \\n Immigration \\t 25000 \\t 40000 \\t 6000 \\t 3000 \\n Taxation \\t 20000 \\t 30000 \\t 4500 \\t 1000 \\n Environmental \\t 41000 \\t 90000 \\t 7000 \\t 5000 \\n Intellectual Property \\t 12000 \\t 40000 \\t 3000 \\t 1000 \\n Consumer Protection \\t 28000 \\t 35000 \\t 2000 \\t 2000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart illustrates various types of court cases, segmented into criminal, civil, arbitration, and administrative cases across different legal categories in the US. The categories include property, contracts, torts, employment, immigration, taxation, environmental, intellectual property, and consumer protection. Property cases lead in civil cases, with the count at 100,000. Contracts and torts also show high figures in both criminal and civil cases. The least number of cases across all categories is noted in intellectual property for criminal, and taxation for administrative cases. Environmental cases stand out with high numbers in both civil and arbitration cases."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata_labels = ['Criminal Cases', 'Civil Cases', 'Arbitration Cases', 'Administrative Cases']\nline_labels = ['Property', 'Contracts', 'Torts', 'Employment', 'Immigration', 'Taxation', 'Environmental', 'Intellectual Property', 'Consumer Protection']\ndata = np.array([[54351, 100000, 7500, 3200], [50000, 80000, 5000, 4000], [40000, 60000, 6000, 4000], [30000, 50000, 3000, 2000], [25000, 40000, 6000, 3000], [20000, 30000, 4500, 1000], [41000, 90000, 7000, 5000], [12000, 40000, 3000, 1000], [28000, 35000, 2000, 2000]])\n\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\n\nx = np.arange(len(line_labels))\nwidth = 0.2\n\nax1.bar(x-width*1.5, data[:,0], width, label=data_labels[0], color='b')\nax2 = ax1.twinx()\nax2.bar(x-width*0.5, data[:,1], width, label=data_labels[1], color='g')\nax3 = ax1.twinx()\nax3.bar(x+width*0.5, data[:,2], width, label=data_labels[2], color='r')\nax4 = ax1.twinx()\nax4.bar(x+width*1.5, data[:,3], width, label=data_labels[3], color='y')\n\nax1.set_xlabel('Categories')\nax1.set_xticks(x)\nax1.set_xticklabels(line_labels, rotation=20, wrap=True)\nax1.set_ylabel(data_labels[0], color='b')\nax2.set_ylabel(data_labels[1], color='g')\nax3.set_ylabel(data_labels[2], color='r')\nax4.set_ylabel(data_labels[3], color='y')\n\nax4.spines['right'].set_position(('outward', 120))\nax3.spines['right'].set_position(('outward', 60))\n\nax1.legend(loc='upper left')\nax2.legend(loc='upper center')\nax3.legend(loc='upper right')\nax4.legend(loc='center right')\n\nax1.grid()\nax1.autoscale(enable=True, axis='both', tight=True)\nax2.autoscale(enable=True, axis='y', tight=True)\nax3.autoscale(enable=True, axis='y', tight=True)\nax4.autoscale(enable=True, axis='y', tight=True)\n\nplt.title('Legal Affairs in the US: Court Cases Overview')\n\nplt.tight_layout()\nplt.savefig('./multi-axes/png/39_2023122261325.png')\nplt.close()"
        },
        "QA": {
            "input": "How many Criminal Cases are there in the Environmental category?",
            "output": "41000"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_17",
        "img": "./multi-axes/png/multi-axes_17.png",
        "topic": "Science and Engineering",
        "title": " Science and Engineering Performance Overview: Patents, Research Papers, and Products ",
        "csv": "Category \\t Number of Patents (Units) \\t Number of Research Papers (Units) \\t Number of Products (Units) \\n Automotive \\t 150 \\t 1050 \\t 75 \\n Aerospace \\t 210 \\t 1320 \\t 90 \\n Electronics \\t 120 \\t 620 \\t 50 \\n Manufacturing \\t 170 \\t 1550 \\t 100 \\n Robotics \\t 180 \\t 1800 \\t 120 \\n Power and Energy \\t 190 \\t 1700 \\t 95 \\n Civil Engineering \\t 160 \\t 1650 \\t 85 \\n Biomedical \\t 200 \\t 2100 \\t 125 \\n Information Technology \\t 140 \\t 1020 \\t 70 \\n Materials \\t 200 \\t 1750 \\t 110 \\n Nanotechnology \\t 130 \\t 630 \\t 50 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart presents a Science and Engineering Performance Overview, detailing patents, research papers, and products across various categories. Automotive displays 150 patents, 1050 research papers, and 75 products; Aerospace has 210 patents, 1320 research papers, and 90 products. Electronics category shows 120 patents, 620 research papers, and 50 products, while Manufacturing lists 170 patents, 1550 research papers, and 100 products. Robotics features 180 patents, 1800 research papers, and 120 products; Power and Energy has 190 patents, 1700 research papers, and 95 products. Civil Engineering reports 160 patents, 1650 research papers, and 85 products; Biomedical has 200 patents, 2100 research papers, and 125 products. Information Technology exhibits 140 patents, 1020 research papers, and 70 products; Materials has 200 patents, 1750 research papers, and 110 products, and Nanotechnology shows 130 patents, 630 research papers, and 50 products."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# transform data into variables\ndata_labels = np.array(['Number of Patents (Units)', 'Number of Research Papers (Units)', 'Number of Products (Units)'])\nline_labels = np.array(['Automotive', 'Aerospace', 'Electronics', 'Manufacturing', 'Robotics', 'Power and Energy', 'Civil Engineering', 'Biomedical', 'Information Technology',  'Materials', 'Nanotechnology'])\ndata = np.array([[150, 1050, 75], [210, 1320, 90], [120, 620, 50], [170, 1550, 100], [180, 1800, 120], [190, 1700, 95], [160, 1650, 85], [200, 2100, 125], [140, 1020, 70], [200, 1750, 110], [130, 630, 50]])\n\n# create figure with larger figsize\nplt.figure(figsize=(15,10))\n\n# plot the first column data\nax1 = plt.subplot(111)\nax1.bar(line_labels, data[:,0], width=0.2, color='b', alpha=0.8)\n\n# plot the second column data\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:,1], color='g', marker='o', linestyle='--')\n\n# plot the third column data\nax3 = ax1.twinx()\nax3.spines['right'].set_position(('axes', 1.1))\nax3.plot(line_labels, data[:,2], color='r', marker='^', linestyle='-.')\n\n# labels and title\nax1.set_xlabel('Category', fontsize=15)\nax1.set_ylabel(data_labels[0], fontsize=15, color='b')\nax2.set_ylabel(data_labels[1], fontsize=15, color='g')\nax3.set_ylabel(data_labels[2], fontsize=15, color='r')\nax1.set_title('Science and Engineering Performance Overview: Patents, Research Papers, and Products', fontsize=20)\n\n# adjust the positions of bars and area\nax1.set_xticks(np.arange(len(line_labels)))\nax1.set_xticklabels(line_labels, rotation=90)\nax1.set_yticks(np.arange(0, max(data[:,0])+50, 50))\nax2.set_yticks(np.arange(0, max(data[:,1])+250, 250))\nax3.set_yticks(np.arange(0, max(data[:,2])+25, 25))\nax3.patch.set_alpha(0.6)\n\n# add legends\n# first chart\nax1.legend(['Patents'], loc='upper left')\n# second chart\nax2.legend(['Research Papers'], loc='upper right')\n# third chart\nax3.legend(['Products'], loc='center right')\n\n# grid\nplt.grid(True, which='both')\n\n# autolocator\nax1.yaxis.set_major_locator(plt.MaxNLocator(11))\nax2.yaxis.set_major_locator(plt.MaxNLocator(11))\nax3.yaxis.set_major_locator(plt.MaxNLocator(11))\n\n# save and clear\nplt.tight_layout()\nplt.savefig('./multi-axes/png/19_2023122270030.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the highest Number of Research Papers?",
            "output": "Biomedical"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_7",
        "img": "./multi-axes/png/multi-axes_7.png",
        "topic": "Environment and Sustainability",
        "title": " Chart Title,Climate Sustainability: An Overview of Carbon Emissions and Renewable Energy Usage and Production ",
        "csv": "Category \\t CO2 Emissions (Kilo Tonnes) \\t Renewable Energy Usage(%) \\t Renewable Energy Production (Gigawatts) \\n Europe \\t 15800 \\t 16.3 \\t 245.4 \\n North America \\t 19400 \\t 19.5 \\t 370.2 \\n Asia \\t 35000 \\t 8.2 \\t 245.9 \\n South America \\t 10700 \\t 17.4 \\t 176.3 \\n Africa \\t 5500 \\t 14.3 \\t 76.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart titled \"Climate Sustainability: An Overview of Carbon Emissions and Renewable Energy Usage and Production\" illustrates data across different regions. Europe shows 15,800 kilo tonnes of CO2 emissions, 16.3% renewable energy usage, and 245.4 gigawatts of production. North America accounts for 19,400 kilo tonnes of CO2 emissions, with 19.5% renewable energy usage and 370.2 gigawatts of production. Asia emits 35,000 kilo tonnes of CO2 and has 8.2% renewable energy usage and 245.9 gigawatts of production. South America and Africa present lower figures in all categories illustrated."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables\ndata_labels = [\"CO2 Emissions (Kilo Tonnes)\", \"Renewable Energy Usage(%)\", \"Renewable Energy Production (Gigawatts)\"]\nline_labels = [\"Europe\", \"North America\", \"Asia\", \"South America\", \"Africa\"]\ndata = np.array([[15800, 16.3, 245.4],\n                [19400, 19.5, 370.2],\n                [35000, 8.2, 245.9],\n                [10700, 17.4, 176.3],\n                [5500, 14.3, 76.5]])\n\n# Create figure before plotting\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\n\n# Plot data with bar chart\nax1.bar(line_labels, data[:, 0], width=0.3, color=\"#0071C5\", alpha=0.8)\nax1.set_xlabel(\"Category\")\nax1.set_ylabel(\"CO2 Emissions (Kilo Tonnes)\", color=\"#0071C5\")\nax1.tick_params(axis=\"y\", colors=\"#0071C5\")\n\n# Plot data with line chart\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:, 1], \"-ob\", alpha=0.8, linewidth=2)\nax2.set_ylabel(\"Renewable Energy Usage (%)\", color=\"b\")\nax2.tick_params(axis=\"y\", colors=\"b\")\n\n# Plot data with area chart\nax3 = ax1.twinx()\nax3.fill_between(line_labels, 0, data[:, 2], facecolor=\"g\", alpha=0.6)\nax3.set_ylabel(\"Renewable Energy Production (Gigawatts)\", color=\"g\")\nax3.tick_params(axis=\"y\", colors=\"g\")\nax3.spines[\"right\"].set_position((\"axes\", 1.1))\n\n# Set title and legend\nplt.title(\"Climate Sustainability: An Overview of Carbon Emissions and Renewable Energy Usage and Production\")\nax1.legend([\"CO2 Emissions (Kilo Tonnes)\"], loc=\"upper left\")\nax2.legend([\"Renewable Energy Usage (%)\"], loc=\"upper right\")\nax3.legend([\"Renewable Energy Production (Gigawatts)\"], loc=\"lower right\")\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# Save the image\nplt.savefig(\"./multi-axes/png/9_202312251608.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage of renewable energy usage in South America?",
            "output": "17.4%"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_38",
        "img": "./multi-axes/png/multi-axes_38.png",
        "topic": "Social Sciences and Humanities",
        "title": " Analysis of Social Sciences and Humanities Publications: Output, Reach, and Subscriber Trends ",
        "csv": "Category \\t Number of Books Published (Thousands) \\t Number of Articles Published (Thousands) \\t Average Number of Journal Subscribers \\n English Literature \\t 950 \\t 1150 \\t 250 \\n Psychology \\t 950 \\t 1200 \\t 500 \\n Economics \\t 570 \\t 1300 \\t 400 \\n Sociology \\t 680 \\t 1050 \\t 450 \\n Political Science \\t 750 \\t 1050 \\t 350 \\n Philosophy \\t 830 \\t 990 \\t 200 \\n Anthropology \\t 620 \\t 870 \\t 300 \\n Education \\t 800 \\t 1090 \\t 380 \\n History \\t 820 \\t 1150 \\t 350 \\n Law \\t 770 \\t 1100 \\t 450 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart presents publication and subscriber data in the fields of social sciences and humanities. It illustrates the number of books and articles published in thousands, alongside the average number of journal subscribers. In English Literature, 950 books and 1150 articles were published, with an average of 250 subscribers. Psychology also saw 950 book publications, with a higher article count of 1200 and 500 subscribers. The trend continues across Economics, Sociology, Political Science, Philosophy, Anthropology, Education, History, and Law, showing a varied mix of publication outputs and journal subscription levels across each discipline."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables\ndata_labels = ['Number of Books Published (Thousands)', 'Number of Articles Published (Thousands)', 'Average Number of Journal Subscribers']\nline_labels = ['English Literature', 'Psychology', 'Economics', 'Sociology', 'Political Science', 'Philosophy', 'Anthropology', 'Education', 'History', 'Law']\ndata = np.array([[950, 1150, 250],\n                 [950, 1200, 500],\n                 [570, 1300, 400],\n                 [680, 1050, 450],\n                 [750, 1050, 350],\n                 [830, 990, 200],\n                 [620, 870, 300],\n                 [800, 1090, 380],\n                 [820, 1150, 350],\n                 [770, 1100, 450]])\n\n# Create the figure\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\n\n# Plot the first column of data array, i.e., data[:,0]\nax1.bar(np.arange(len(line_labels)), data[:,0], 0.2, color='b', label=data_labels[0])\nax1.set_xlabel('Category')\nax1.set_ylabel(data_labels[0], color='b')\nax1.tick_params('y', colors='b')\n\n# Overlay the second column of data array, i.e. data[:,1]\nax2 = ax1.twinx()\nax2.bar(np.arange(len(line_labels))+0.2, data[:,1], 0.2, color='g', label=data_labels[1])\nax2.set_ylabel(data_labels[1], color='g')\nax2.tick_params('y', colors='g')\n\n# Overlay the third column of data array, i.e. data[:,2]\nax3 = ax1.twinx()\nax3.plot(np.arange(len(line_labels)), data[:,2], color='r', label=data_labels[2])\nax3.set_ylabel(data_labels[2], color='r')\nax3.tick_params('y', colors='r')\n\n# Seperate the bars of different charts by adjusting their positions\nax1.set_xticks(np.arange(len(line_labels))+0.2)\n\n# Set the alpha parameter to avoid occlusion of other charts\nax3.set_alpha(0.6)\n\n# Label all axes\nax1.set_xticklabels(line_labels)\n\n# Seperate different y-axes\nax3.spines['right'].set_position(('axes', 1.1))\n\n# Show the legends of all plots at different positions\nax1.legend(loc='upper left')\nax2.legend(loc='upper center')\nax3.legend(loc='upper right')\n\n# Drawing techniques such as background grids can be used\nax1.grid(linestyle = ':')\n\n# Set the title of the figure\nplt.title('Analysis of Social Sciences and Humanities Publications: Output, Reach, and Subscriber Trends')\n\n# Automatically resize the image\nfig.tight_layout()\n\n# Save the image\nplt.savefig('./multi-axes/png/45_2023122270030.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the total number of journal subscribers for Political Science and Philosophy combined?",
            "output": "550 thousands"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_14",
        "img": "./multi-axes/png/multi-axes_14.png",
        "topic": "Environment and Sustainability",
        "title": "Environmental Sustainability: Current and Projected Carbon Emissions and Renewable Energy Consumption ",
        "csv": "Category \\t Current Carbon Emission (Million of Tonnes of CO2) \\t Projected Carbon Emission (Million of Tonnes of CO2) \\t Percentage Difference (%) \\t Total Renewable Energy Consumption (Trillion kWh) \\n Transportation \\t 6.90 \\t 8.24 \\t 19.5 \\t 1.22 \\n Industrial \\t 8.25 \\t 9.99 \\t 21.0 \\t 0.65 \\n Residential \\t 3.45 \\t 4.30 \\t 24.3 \\t 0.32 \\n Commercial \\t 2.41 \\t 2.97 \\t 22.9 \\t 0.22 \\n Agriculture \\t 5.13 \\t 5.90 \\t 15.1 \\t 3.90 \\n Fishing \\t 0.30 \\t 0.35 \\t 16.7 \\t 0.05 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart titled \"Environmental Sustainability: Current and Projected Carbon Emissions and Renewable Energy Consumption\" displays carbon emission data and renewable energy consumption across six categories. It compares current and projected million tonnes of CO2 emissions, showing an increase in all sectors: Transportation (6.90 to 8.24), Industrial (8.25 to 9.99), Residential (3.45 to 4.30), Commercial (2.41 to 2.97), Agriculture (5.13 to 5.90), and Fishing (0.30 to 0.35). Percent difference in emissions and total renewable energy consumption in trillion kWh are also depicted for each category."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Transform the given data into three variables: data_labels, data, line_labels \ndata_labels = [\"Current Carbon Emission (Million of Tonnes of CO2)\", \"Projected Carbon Emission (Million of Tonnes of CO2)\", \"Percentage Difference (%)\", \"Total Renewable Energy Consumption (Trillion kWh)\"]\ndata = np.array([[6.90, 8.24, 19.5, 1.22], [8.25, 9.99, 21.0, 0.65], [3.45, 4.30, 24.3, 0.32], [2.41, 2.97, 22.9, 0.22], [5.13, 5.90, 15.1, 3.90], [0.30, 0.35, 16.7, 0.05]])\nline_labels = [\"Transportation\", \"Industrial\", \"Residential\", \"Commercial\", \"Agriculture\", \"Fishing\"]\n\n# Plot the data with the type of multi-axes chart\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\n\n# Plot the first column of data array, i.e., data[:,0]\nax1.bar(line_labels, data[:, 0], width=0.2, color=\"b\", alpha=0.8)\nax1.set_ylabel(data_labels[0], color=\"b\")\nax1.tick_params(axis=\"y\", labelcolor=\"b\")\n\n# The second column of data array, i.e. data[:,1]\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:, 1], color=\"r\", marker=\"o\", linestyle=\"--\")\nax2.set_ylabel(data_labels[1], color=\"r\")\nax2.tick_params(axis=\"y\", labelcolor=\"r\")\n\n# The third column of data array (if possible), i.e. data[:,2]\nax3 = ax1.twinx()\nax3.spines[\"right\"].set_position((\"axes\", 1.1))\nax3.plot(line_labels, data[:, 2], color=\"g\", marker=\"s\", linestyle=\"-.\")\nax3.set_ylabel(data_labels[2], color=\"g\")\nax3.tick_params(axis=\"y\", labelcolor=\"g\")\n\n# The fourth column of data array (if possible), i.e. data[:,3]\nax4 = ax1.twinx()\nax4.spines[\"right\"].set_position((\"axes\", 1.2))\nax4.plot(line_labels, data[:, 3], color=\"k\", marker=\"d\", linestyle=\":\")\nax4.set_ylabel(data_labels[3], color=\"k\")\nax4.tick_params(axis=\"y\", labelcolor=\"k\")\n\n# Label all axes\nax1.set_xlabel(\"Category\")\nax1.set_title(\"Environmental Sustainability: Current and Projected Carbon Emissions and Renewable Energy Consumption\")\n\n# Show the legends of all plots at different positions\nax1.legend(data_labels[0], loc=\"upper right\", bbox_to_anchor=(1.25, 1.0))\nax2.legend(data_labels[1], loc=\"upper right\", bbox_to_anchor=(1.25, 0.9))\nax3.legend(data_labels[2], loc=\"upper right\", bbox_to_anchor=(1.25, 0.8))\nax4.legend(data_labels[3], loc=\"upper right\", bbox_to_anchor=(1.25, 0.7))\n\n# Drawing techniques such as background grids can be used\nax1.grid(linestyle=\"--\", color=\"gray\")\n\n# Use Autolocator for all ax, i.e., ax1, ax2, ax3, ...\nax1.autoscale()\nax2.autoscale()\nax3.autoscale()\nax4.autoscale()\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# Save the image\nplt.savefig(\"./multi-axes/png/3_202312251608.png\")\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the current carbon emission in the Industrial category compared to Fishing?",
            "output": "7.95 million tonnes of CO2"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_31",
        "img": "./multi-axes/png/multi-axes_31.png",
        "topic": "Real Estate and Housing Market",
        "title": " Real Estate and Housing Market: Sales Figures and Price Analysis ",
        "csv": "Category \\t Number of Homes Sold \\t Average Sale Price (Dollars) \\t Average Days on Market \\n Single Family Homes \\t 86000 \\t 347000 \\t 54 \\n Townhouses \\t 12000 \\t 202000 \\t 41 \\n Condos \\t 19000 \\t 183000 \\t 36 \\n Multi-Family Homes \\t 9000 \\t 420000 \\t 49 \\n Mobile Homes \\t 3000 \\t 150000 \\t 33 \\n Vacant Land \\t 6000 \\t 60000 \\t 60 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart illustrates sales figures and price analysis within the real estate and housing market. Data includes the number of homes sold and their average sale price, alongside the average days on the market for various categories. Single Family Homes saw 86,000 units sold at an average price of $347,000, staying on the market for an average of 54 days. Townhouses had 12,000 units sold, priced at $202,000 on average, with a shorter market duration of 41 days. Condos, Multi-Family Homes, Mobile Homes, and Vacant Land also show varied figures in their respective categories."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata_labels = np.array(['Number of Homes Sold','Average Sale Price (Dollars)','Average Days on Market'])\nline_labels = np.array(['Single Family Homes', 'Townhouses', 'Condos', 'Multi-Family Homes', 'Mobile Homes', 'Vacant Land'])\ndata = np.array([[86000, 347000, 54], [12000, 202000, 41], [19000, 183000, 36], [9000, 420000, 49], [3000, 150000, 33], [6000, 60000, 60]])\n\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\n\nax1.bar(line_labels, data[:, 0], width=0.2, color='red', alpha=0.8, label=data_labels[0])\nax1.set_ylim(0, max(data[:, 0] + 1000))\nax1.set_ylabel('Number of Homes Sold', color='red', fontsize=14)\nax1.tick_params(axis='y', labelcolor='red')\nax1.set_title('Real Estate and Housing Market: Sales Figures and Price Analysis', fontsize=20)\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:, 1], linestyle='--', marker='o', color='blue', label=data_labels[1])\nax2.set_ylabel('Average Sale Price (Dollars)', color='blue', fontsize=14)\nax2.tick_params(axis='y', labelcolor='blue')\nax3 = ax1.twinx()\nax3.spines['right'].set_position(('data', 1.5))\nax3.plot(line_labels, data[:, 2], linestyle='-', marker='s', color='green', label=data_labels[2])\nax3.set_ylabel('Average Days on Market', color='green', fontsize=14)\nax3.tick_params(axis='y', labelcolor='green')\n\nax1.legend(loc='lower left', fontsize=13)\nax2.legend(loc='upper left', fontsize=13)\nax3.legend(loc='upper right', fontsize=13)\n\nax1.grid(True, linestyle='-.')\nax1.set_xlabel('Type of Property', fontsize=14)\n\nfor ax in [ax1, ax2, ax3]:\n    ax.xaxis.set_ticks_position('bottom')\n    ax.autoscale(enable=True, axis='x', tight=True)\n\nplt.tight_layout()\nplt.savefig('./multi-axes/png/49_2023122261325.png')\nplt.cla()"
        },
        "QA": {
            "input": "How many more days on average does a Single Family Home stay on the market compared to a Mobile Home?",
            "output": "21 days"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_8",
        "img": "./multi-axes/png/multi-axes_8.png",
        "topic": "Science and Engineering",
        "title": " Innovation in Science and Engineering: Exploring Projects, Patents, Journals, and Researchers ",
        "csv": "Category \\t Number of Projects \\t Number of Patents \\t Number of Journals \\t Number of Researchers \\n Robotics \\t 87 \\t 531 \\t 20 \\t 450 \\n Biotechnology \\t 48 \\t 323 \\t 14 \\t 681 \\n Artificial Intelligence \\t 92 \\t 412 \\t 32 \\t 580 \\n Nanotechnology \\t 60 \\t 231 \\t 19 \\t 510 \\n Aerospace Engineering \\t 95 \\t 312 \\t 17 \\t 570 \\n Computer Science \\t 75 \\t 305 \\t 30 \\t 590 \\n Electrical Engineering \\t 103 \\t 521 \\t 25 \\t 620 \\n Mechanical Engineering \\t 104 \\t 412 \\t 21 \\t 550 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart illustrates innovation metrics across several science and engineering fields: Robotics, Biotechnology, Artificial Intelligence, Nanotechnology, Aerospace Engineering, Computer Science, Electrical Engineering, and Mechanical Engineering. It indicates the number of projects, patents, journal articles, and researchers in each field. Robotics shows 87 projects, 531 patents, 20 journals, and 450 researchers. Biotechnology reveals 48 projects, 323 patents, 14 journals, and 681 researchers. Artificial Intelligence has 92 projects, 412 patents, 32 journals, and 580 researchers. Nanotechnology, Aerospace Engineering, Computer Science, Electrical Engineering, and Mechanical Engineering follow suit with their respective data on innovation activities."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = np.array(['Number of Projects', 'Number of Patents', 'Number of Journals', 'Number of Researchers'])\nline_labels = np.array(['Robotics', 'Biotechnology', 'Artificial Intelligence', 'Nanotechnology', 'Aerospace Engineering', \n                        'Computer Science', 'Electrical Engineering', 'Mechanical Engineering'])\ndata = np.array([[87, 531, 20, 450], \n                 [48, 323, 14, 681], \n                 [92, 412, 32, 580], \n                 [60, 231, 19, 510], \n                 [95, 312, 17, 570], \n                 [75, 305, 30, 590], \n                 [103, 521, 25, 620], \n                 [104, 412, 21, 550]])\n\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\nax1.bar(line_labels, data[:, 0], width = 0.15, color = 'b', alpha = 0.6)\nax1.set_ylabel(data_labels[0], color = 'b')\nax1.set_title('Innovation in Science and Engineering: Exploring Projects, Patents, Journals, and Researchers')\nax1.tick_params(axis = 'y', labelcolor = 'b')\n\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:, 1], color = 'r', marker = 'o')\nax2.set_ylabel(data_labels[1], color = 'r')\nax2.tick_params(axis = 'y', labelcolor = 'r')\n\nax3 = ax1.twinx()\nax3.spines['right'].set_position(('axes', 1.1))\nax3.plot(line_labels, data[:, 2], color = 'g', linestyle = '-')\nax3.set_ylabel(data_labels[2], color = 'g')\nax3.tick_params(axis = 'y', labelcolor = 'g')\n\nax4 = ax1.twinx()\nax4.spines['right'].set_position(('axes', 1.2))\nax4.plot(line_labels, data[:, 3], color = 'y', linestyle = ':')\nax4.set_ylabel(data_labels[3], color = 'y')\nax4.tick_params(axis = 'y', labelcolor = 'y')\n\nfor ax in [ax1, ax2, ax3, ax4]:\n    ax.grid(True)\n    ax.autoscale()\n\nhandles, labels = ax1.get_legend_handles_labels()\nhandles2, labels2 = ax2.get_legend_handles_labels()\nhandles3, labels3 = ax3.get_legend_handles_labels()\nhandles4, labels4 = ax4.get_legend_handles_labels()\nhandles.extend(handles2)\nhandles.extend(handles3)\nhandles.extend(handles4)\nlabels.extend(labels2)\nlabels.extend(labels3)\nlabels.extend(labels4)\nax1.legend(handles, labels, bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0., fontsize='x-large')\n\nplt.tight_layout()\nplt.savefig('./multi-axes/png/37_2023122270030.png')\nplt.clf()"
        },
        "QA": {
            "input": "How many more patents are there in Electrical Engineering compared to Aerospace Engineering?",
            "output": "209 patents"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_48",
        "img": "./multi-axes/png/multi-axes_48.png",
        "topic": "Human Resources and Employee Management",
        "title": " Human Resources and Employee Management Overview: Insight into Staffing and Salaries ",
        "csv": "Category \\t Number of Employees \\t Average Salary (USD) \\t Average Age \\t Average Work Hours \\n HR Specialists \\t 2300 \\t 50000 \\t 35 \\t 40 \\n Senior Managers \\t 500 \\t 90000 \\t 45 \\t 50 \\n Office Administrators \\t 1000 \\t 45000 \\t 30 \\t 45 \\n Junior Managers \\t 200 \\t 60000 \\t 32 \\t 50 \\n IT Specialists \\t 700 \\t 65000 \\t 25 \\t 40 \\n Sales Representatives \\t 1000 \\t 40000 \\t 27 \\t 45 \\n Recruiters \\t 400 \\t 70000 \\t 40 \\t 45 \\n Customer Service Representatives \\t 1200 \\t 35000 \\t 24 \\t 40 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart provides an overview of various job categories concerning the number of employees, average salaries (in USD), the average age of employees, and their average work hours. HR Specialists number 2300 with an average salary of $50,000, an average age of 35, and work 40 hours per week. There are 500 Senior Managers earning $90,000 on average, aged around 45, working 50 hours. Office Administrators are 1000 in number, with a salary of $45,000, an average age of 30, and work 45 hours. Junior Managers, IT Specialists, Sales Representatives, Recruiters, and Customer Service Representatives also have corresponding figures outlined."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = np.array([['Category', 'Number of Employees', 'Average Salary (USD)', 'Average Age', 'Average Work Hours'],\n                 ['HR Specialists', 2300, 50000, 35, 40],\n                 ['Senior Managers', 500, 90000, 45, 50],\n                 ['Office Administrators', 1000, 45000, 30, 45],\n                 ['Junior Managers', 200, 60000, 32, 50],\n                 ['IT Specialists', 700, 65000, 25, 40],\n                 ['Sales Representatives', 1000, 40000, 27, 45],\n                 ['Recruiters', 400, 70000, 40, 45],\n                 ['Customer Service Representatives', 1200, 35000, 24, 40]])\n\ndata_labels = data[0, 1:]\nline_labels = data[1:, 0]\ndata = data[1:, 1:].astype(float)\n\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\nax1.bar(line_labels, data[:, 0], width=0.5, color='#00A0A0', alpha=1)\nax1.set_xlabel('Category')\nax1.set_ylabel(data_labels[0], color='#00A0A0')\nax1.tick_params(axis='y', labelcolor='#00A0A0')\n\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:, 1], '-b', label=data_labels[1])\nax2.set_ylabel(data_labels[1], color='b')\nax2.tick_params(axis='y', labelcolor='b')\n\nax3 = ax1.twinx()\nax3.plot(line_labels, data[:, 2], '-r', label=data_labels[2])\nax3.set_ylabel(data_labels[2], color='r')\nax3.tick_params(axis='y', labelcolor='r')\nax3.spines['right'].set_position(('axes', 1.1))\n\nax4 = ax1.twinx()\nax4.plot(line_labels, data[:, 3], '-g', label=data_labels[3])\nax4.set_ylabel(data_labels[3], color='g')\nax4.tick_params(axis='y', labelcolor='g')\nax4.spines['right'].set_position(('axes', 1.2))\n\nax1.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=4)\nax1.grid(False)\nax1.set_title('Human Resources and Employee Management Overview: Insight into Staffing and Salaries')\nax1.autoscale(enable=True, axis='both', tight=True)\n\nplt.tight_layout()\nplt.savefig('./multi-axes/png/39_2023122270030.png')\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the average salary of Senior Managers compared to Office Administrators?",
            "output": "$45,000"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_18",
        "img": "./multi-axes/png/multi-axes_18.png",
        "topic": "Food and Beverage Industry",
        "title": " Food and Beverage Industry Consumption Trends ",
        "csv": "Category \\t Volume Sold (Liters) \\t Sale (Dollars) \\t Average of State Bottle Retail \\t Bottles Sold \\n Beer \\t 150 \\t 3000 \\t 40 \\t 200 \\n Wine \\t 200 \\t 4000 \\t 30 \\t 400 \\n Spirits \\t 300 \\t 6000 \\t 20 \\t 600 \\n Soft Drinks \\t 200 \\t 3000 \\t 50 \\t 400 \\n Water \\t 100 \\t 2000 \\t 60 \\t 200 \\n Dairy \\t 200 \\t 3000 \\t 30 \\t 400 \\n Juices \\t 150 \\t 2500 \\t 40 \\t 300 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart titled \"Food and Beverage Industry Consumption Trends\" presents various categories alongside their corresponding volume sold in liters, sales in dollars, average state bottle retail prices, and the number of bottles sold. Beer shows a volume of 150 liters sold, sales of $3000, an average retail price of $40, and 200 bottles sold. Wine has 200 liters sold, $4000 in sales, a $30 average retail price, and 400 bottles sold. Spirits outpace others in volume at 300 liters and sales at $6000, with an average price of $20 and 600 bottles sold. Soft Drinks, Water, Dairy, and Juices follow suit with their respective figures."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# transform data into 3 variables\ndata_labels = [\"Sale (Dollars)\", \"Average of State Bottle Retail\", \"Bottles Sold\"]\nline_labels = [\"Beer\", \"Wine\", \"Spirits\", \"Soft Drinks\", \"Water\", \"Dairy\", \"Juices\"]\ndata = np.array([[150,3000,40,200], [200,4000,30,400], [300,6000,20,600], [200,3000,50,400], [100,2000,60,200], [200,3000,30,400], [150,2500,40,300]])\n\n# create figure and plot\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\nax1.bar(line_labels, data[:, 0], alpha=0.5, label=data_labels[0])\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:, 1], 'r-', label=data_labels[1])\nax3 = ax1.twinx()\nax3.spines['right'].set_position(('axes', 1.1))\nax3.plot(line_labels, data[:, 2], 'g-', label=data_labels[2])\n\n# label axes and show legend\nax1.set_xlabel(\"Category\")\nax1.set_ylabel(data_labels[0], color=\"b\")\nax2.set_ylabel(data_labels[1], color=\"r\")\nax3.set_ylabel(data_labels[2], color=\"g\")\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\nax3.legend(loc='lower right')\n\n# drawing techniques\nax1.grid(True)\n\n# adjust the range\nax1.xaxis.set_ticks(np.arange(len(line_labels)) + 0.4)\nax1.set_xticklabels(line_labels)\nax1.autoscale_view(tight=True, scalex=True, scaley=True)\n\n# save image\nplt.title(\"Food and Beverage Industry Consumption Trends\")\nplt.tight_layout()\nplt.savefig(\"./multi-axes/png/46_2023122261325.png\")\n\nplt.clf()"
        },
        "QA": {
            "input": "How many more bottles of beer were sold compared to water?",
            "output": "0 bottles"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_40",
        "img": "./multi-axes/png/multi-axes_40.png",
        "topic": "Transportation and Logistics",
        "title": " Transport and Logistics Performance: Volume, Revenue, Cost, and Delivery Trends ",
        "csv": "Category \\t Volume of Shipments (Millions of Units) \\t Revenue (Millions of Dollars) \\t Average Shipping Cost (Dollars) \\t Average Delivery Time (Hours) \\n Air Freight \\t 650 \\t 7300 \\t 10.5 \\t 32 \\n Sea Freight \\t 800 \\t 7680 \\t 8.5 \\t 61 \\n Rail Freight \\t 900 \\t 7200 \\t 6.5 \\t 36 \\n Trucking \\t 950 \\t 7890 \\t 11.5 \\t 48 \\n Logistics Services \\t 700 \\t 6190 \\t 9.5 \\t 50 \\n Courier Services \\t 1000 \\t 7950 \\t 7.5 \\t 65 \\n Warehousing \\t 850 \\t 7850 \\t 4.5 \\t 50 \\n Pipeline Transport \\t 1000 \\t 7140 \\t 7.5 \\t 70 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart illustrates the performance of various transport and logistics categories in terms of shipment volume, revenue, shipping cost, and average delivery time. Air Freight moved 650 million units and generated $7300 million with an average shipping cost of $10.5 and delivery time of 32 hours. Sea Freight had 800 million units, a revenue of $7680 million, cost of $8.5, and 61 hours of delivery time. Rail, Trucking, Logistics Services, Courier Services, Warehousing, and Pipeline Transport show varied figures for their respective metrics of volume, revenue, cost, and time."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.ticker import AutoMinorLocator\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = [\"Volume of Shipments (Millions of Units)\", \"Revenue (Millions of Dollars)\", \"Average Shipping Cost (Dollars)\", \"Average Delivery Time (Hours)\"]\ndata = np.array([[650,7300,10.5,32],[800,7680,8.5,61],[900,7200,6.5,36],[950,7890,11.5,48],[700,6190,9.5,50],[1000,7950,7.5,65],[850,7850,4.5,50],[1000,7140,7.5,70]])\nline_labels = [\"Air Freight\",\"Sea Freight\",\"Rail Freight\",\"Trucking\",\"Logistics Services\",\"Courier Services\",\"Warehousing\",\"Pipeline Transport\"]\n\n# Create figure\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\n\n# Plot the data\nax1.bar(line_labels, data[:,0], color=\"#1f77b4\", alpha=0.8, label=data_labels[0])\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:,1], color=\"#ff7f0e\", label=data_labels[1], marker=\"o\")\nax3 = ax1.twinx()\nax3.spines[\"right\"].set_position((\"axes\", 1.1))\nax3.plot(line_labels, data[:,2], color=\"#2ca02c\", label=data_labels[2], marker=\"^\")\nax4 = ax1.twinx()\nax4.spines[\"right\"].set_position((\"axes\", 1.16))\nax4.plot(line_labels, data[:,3], color=\"#d62728\", label=data_labels[3], marker=\"v\")\n\n# Labels\nax1.set_xlabel(\"Category\")\nax1.set_ylabel(data_labels[0], color=\"#1f77b4\")\nax2.set_ylabel(data_labels[1], color=\"#ff7f0e\")\nax3.set_ylabel(data_labels[2], color=\"#2ca02c\")\nax4.set_ylabel(data_labels[3], color=\"#d62728\")\n\n# Legends\nax1.legend(loc=\"upper left\")\nax2.legend(loc=\"upper center\")\nax3.legend(loc=\"upper right\")\nax4.legend(loc=\"lower right\")\n\n# Adjust the range of all y-axes\nax1.yaxis.set_minor_locator(AutoMinorLocator(4))\nax2.yaxis.set_minor_locator(AutoMinorLocator(4))\nax3.yaxis.set_minor_locator(AutoMinorLocator(4))\nax4.yaxis.set_minor_locator(AutoMinorLocator(4))\n\n# Set the title\nplt.title(\"Transport and Logistics Performance: Volume, Revenue, Cost, and Delivery Trends\")\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig(\"./multi-axes/png/29_2023122270030.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "What is the average delivery time for Courier Services?",
            "output": "65 hours"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_47",
        "img": "./multi-axes/png/multi-axes_47.png",
        "topic": "Sports and Entertainment",
        "title": "Sports and Entertainment Participation and Spectator Trends ",
        "csv": "Category \\t Number of Participants \\t Number of Spectators \\t Average Ticket Price (USD) \\n Football \\t 2500 \\t 10000 \\t 25 \\n Basketball \\t 1000 \\t 4000 \\t 40 \\n Baseball \\t 3000 \\t 9000 \\t 20 \\n Hockey \\t 2000 \\t 7000 \\t 30 \\n Golf \\t 1500 \\t 3000 \\t 50 \\n Soccer \\t 4000 \\t 9000 \\t 20 \\n Tennis \\t 800 \\t 3000 \\t 35 \\n Swimming \\t 2000 \\t 5000 \\t 30 \\n Volleyball \\t 3000 \\t 8000 \\t 25 \\n Skating \\t 1500 \\t 4000 \\t 45 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart titled \"Sports and Entertainment Participation and Spectator Trends\" contains data on various sports categories. It presents the number of participants and spectators, along with the average ticket price in USD. Football shows 2500 participants, 10,000 spectators, and an average ticket price of $25. Basketball has 1000 participants, 4000 spectators, and a ticket price of $40. Baseball includes 3000 participants, 9000 spectators, and a $20 ticket price. Hockey lists 2000 participants, 7000 spectators, and a $30 ticket. Golf has 1500 participants, 3000 spectators, with the highest ticket price of $50. Soccer, with 4000 participants and 9000 spectators, has a ticket price of $20. Tennis presents 800 participants and 3000 spectators, at $35 per ticket. Swimming shows 2000 participants, 5000 spectators, and a $30 ticket price. Volleyball includes 3000 participants, 8000 spectators, and a $25 ticket. Lastly, Skating has 1500 participants, 4000 spectators, and a $45 ticket price."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels.\ndata_labels = ['Category','Number of Participants','Number of Spectators','Average Ticket Price (USD)']\nline_labels = ['Football','Basketball','Baseball','Hockey','Golf','Soccer','Tennis','Swimming','Volleyball','Skating']\ndata = [[2500,10000,25],[1000,4000,40],[3000,9000,20],[2000,7000,30],[1500,3000,50],[4000,9000,20],[800,3000,35],[2000,5000,30],[3000,8000,25],[1500,4000,45]]\n\n# Split the data array from the second dimension to get the data correpsonding to each category.\nx_labels = np.array(data_labels[1:])\ndata_array = np.array(data)\nnum_participants = data_array[:,0]\nnum_spectators = data_array[:,1]\navg_ticket_price = data_array[:,2]\n\n# Plot the data with the type of multi-axes chart.\nfig = plt.figure(figsize=(15, 10)) # set a larger figsize\nax1 = fig.add_subplot(111)\n\n# The plot type of each category is sequentially decided by the following plot types, i.e., [ bar chart,bar chart,line chart].\n# For the plot of each category, overlay the plot on one chart with a shared x-axis and an individual y-axis, a distinct color and marker style, ensuring the y-axes are visually distinct from the primary y-axis. All other y-axes should be positioned opposite the primary y-axis.\n# For the plot of different bar charts, set different bar positions to avoid overlapping.\nwidth = 0.2\nx1 = np.arange(len(line_labels))\nx2 = [i + width for i in x1]\nx3 = [i + width for i in x2]\nax1.bar(x1, num_participants, width=width, color='#F08080', label='Number of Participants', alpha=0.6)\n\n# Label each axis with the name of the category it represents, matching the color of the data plotted against it. Using ax.spine and set_position() for the third, fourth, ... y-axes to ensure each y-axis does not overlap with each other.\nax1.set_ylabel('Number of Participants', color='#F08080')\nax1.tick_params('y', colors='#F08080')\nax2 = ax1.twinx()\nax2.bar(x2, num_spectators, width=width, color='#90EE90', label='Number of Spectators', alpha=0.6)\nax2.set_ylabel('Number of Spectators & Average Ticket Price (USD)', color='#90EE90')\nax2.tick_params('y', colors='#90EE90')\nax3 = ax1.twinx()\nax3.spines['right'].set_position(('axes', 1.1))\nax3.plot(x3, avg_ticket_price, marker='o', color='#ADD8E6', linewidth=2.5, label='Average Ticket Price (USD)', alpha=0.6)\nax3.set_ylabel('Average Ticket Price (USD)', color='#ADD8E6')\nax3.tick_params('y', colors='#ADD8E6')\n\n# Drawing techniques such as background grids can be used. Make sure the layout is clean, with no overlapping elements, and all labels and titles are easily readable.\nax1.set_xticks(x2)\nax1.set_xticklabels(line_labels, rotation=45, wrap=True)\nax1.set_title('Sports and Entertainment Participation and Spectator Trends', fontsize=20)\nax1.grid(linestyle='--')\n\n# Automatically resize the image by tight_layout() before savefig().\nfig.tight_layout()\n\n# The image must be saved as ./multi-axes/png/12.png.\nplt.savefig('./multi-axes/png/12.png')\n\n# Clear the current image state at the end of the code.\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the average ticket price for basketball compared to baseball?",
            "output": "$20"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_10",
        "img": "./multi-axes/png/multi-axes_10.png",
        "topic": "Food and Beverage Industry",
        "title": " Food and Beverage Industry: Volume, Revenue, and Pricing Trends ",
        "csv": "Category \\t Volume Sold (Liters) \\t Sale (Dollars) \\t Average of State Bottle Retail \\t Bottles Sold \\n Soft Drinks \\t 76000 \\t 94500 \\t 14453 \\t 595 \\n Fruit Juice \\t 56600 \\t 89000 \\t 16876 \\t 634 \\n Alcoholic Beverages \\t 84400 \\t 100000 \\t 25600 \\t 767 \\n Milk \\t 98000 \\t 115000 \\t 19082 \\t 742 \\n Tea and Coffee \\t 59900 \\t 110000 \\t 14834 \\t 786 \\n Dairy Products \\t 45800 \\t 98700 \\t 17660 \\t 848 \\n Water \\t 89000 \\t 98000 \\t 19000 \\t 741 \\n Energy Drinks \\t 69600 \\t 70000 \\t 9456 \\t 452 \\n Ready to Drink Beverages \\t 60000 \\t 70000 \\t 14500 \\t 750 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart presents data for the Food and Beverage Industry in various categories, including Volume Sold in Liters, Sale in Dollars, Average State Bottle Retail, and Bottles Sold. Soft Drinks show a volume of 76,000 liters, sales of $94,500, average retail of $14,453, and 595 bottles sold. Fruit Juice has 56,600 liters sold, $89,000 in sales, a $16,876 average retail price, and 634 bottles sold. Alcoholic Beverages register 84,400 liters, $100,000 sales, a retail average of $25,600, and 767 bottles sold. Milk shows the highest volume at 98,000 liters, with sales reaching $115,000, a $19,082 retail average, and 742 bottles sold. Tea and Coffee volume stands at 59,900 liters, with $110,000 in sales, a $14,834 average retail price, and 786 bottles sold. Dairy Products have 45,800 liters sold, sales of $98,700, a $17,660 average retail, and 848 bottles sold. Water's volume is 89,000 liters with $98,000 sales, $19,000 average retail, and 741 bottles sold. Energy Drinks show 69,600 liters sold, $70,000 sales, a $9,456 average retail, and 452 bottles sold. Lastly, Ready to Drink Beverages include 60,000 liters sold, $70,000 in sales, a $14,500 average retail price, and 750 bottles sold."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\ndata_labels = ['Sale (Dollars)', 'Average of State Bottle Retail', 'Bottles Sold']\nline_labels = ['Soft Drinks', 'Fruit Juice', 'Alcoholic Beverages', 'Milk', 'Tea and Coffee', 'Dairy Products', 'Water', 'Energy Drinks', 'Ready to Drink Beverages']\ndata = np.array([[76000, 94500, 14453, 595],\n                 [56600, 89000, 16876, 634],\n                 [84400, 100000, 25600, 767],\n                 [98000, 115000, 19082, 742],\n                 [59900, 110000, 14834, 786],\n                 [45800, 98700, 17660, 848],\n                 [89000, 98000, 19000, 741],\n                 [69600, 70000, 9456, 452],\n                 [60000, 70000, 14500, 750]])\n\nplot_types = ['bar', 'line', 'area', 'scatter']\n\nfig = plt.figure(figsize=(15, 12))\nax1 = fig.add_subplot(111)\n\nax1.bar(x=line_labels, height=data[:, 0], color='b', width=0.2, alpha=1.0, label=data_labels[0])\nax1.set_xlabel('Category', fontsize=14)\nax1.set_ylabel(data_labels[0], fontsize=14, color='b')\nax1.set_title('Food and Beverage Industry: Volume, Revenue, and Pricing Trends', fontsize=16)\nax1.tick_params(axis='y', labelcolor='b', labelsize=13)\nax1.grid(axis='y')\n\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:, 1], 'r-', label=data_labels[1])\nax2.set_ylabel(data_labels[1], fontsize=14, color='r')\nax2.tick_params(axis='y', labelcolor='r', labelsize=13)\n\nax3 = ax1.twinx()\nax3.plot(line_labels, data[:, 2], 'g-', label=data_labels[2])\nax3.set_ylabel(data_labels[2], fontsize=14, color='g')\nax3.tick_params(axis='y', labelcolor='g', labelsize=13)\nax3.spines['right'].set_position(('outward', 60))\n\nax1.legend(loc='upper left', bbox_to_anchor=(0.1, 1))\nax2.legend(loc='upper left', bbox_to_anchor=(0.4, 1))\nax3.legend(loc='upper left', bbox_to_anchor=(0.8, 1))\n\nax1.autoscale()\nax2.autoscale()\nax3.autoscale()\n\nplt.tight_layout()\nplt.savefig('./multi-axes/png/4_2023122270030.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in sales between fruit juice and dairy products?",
            "output": "$9700"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_27",
        "img": "./multi-axes/png/multi-axes_27.png",
        "topic": "Environment and Sustainability",
        "title": " Environment and Sustainability: Strategies for a Sustainable Future ",
        "csv": "Category \\t Number of Trees Planted (Thousands) \\t CO2 Emissions Reduction (Millions of Tons) \\t Amount of Waste Recycled (Millions of Tons) \\t Number of Solar Panels Installed (Millions) \\n Reforestation \\t 200 \\t 70 \\t 40 \\t 2 \\n Renewable Energy \\t 100 \\t 60 \\t 20 \\t 5 \\n Waste Disposal \\t 50 \\t 20 \\t 30 \\t 1 \\n Solar Power \\t 25 \\t 10 \\t 15 \\t 3 \\n Carbon Offset \\t 60 \\t 30 \\t 10 \\t 2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart illustrates the impact of various sustainability strategies across five categories: Reforestation, Renewable Energy, Waste Disposal, Solar Power, and Carbon Offset. It shows the Number of Trees Planted in thousands, CO2 Emissions Reduction in millions of tons, Amount of Waste Recycled in millions of tons, and Number of Solar Panels Installed in millions. The data points range broadly across categories, indicating diverse environmental impacts, such as Reforestation leading with 200 thousand trees planted and Renewable Energy with the highest number of solar panels installed at 5 million."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform data\ndata_labels = ['Number of Trees Planted (Thousands)', 'CO2 Emissions Reduction (Millions of Tons)', 'Amount of Waste Recycled (Millions of Tons)', \n               'Number of Solar Panels Installed (Millions)']\ndata = np.array([[200, 70, 40, 2], [100, 60, 20, 5], [50, 20, 30, 1], [25, 10, 15, 3], [60, 30, 10, 2]])\nline_labels = ['Reforestation', 'Renewable Energy', 'Waste Disposal', 'Solar Power', 'Carbon Offset']\n\n# Plot\n# create figure\nfig, ax1 = plt.subplots(figsize=(15, 10))\n\n# Plot the first column data with bar chart\nax1.bar(line_labels, data[:, 0], width=0.3, color='red', alpha=1)\nax1.set_xlabel('Category')\nax1.set_ylabel('Number of Trees Planted (Thousands)', color='red')\nax1.tick_params('y', colors='red')\n\n# Plot the second column data with line chart overlaying a new ax on ax1\nax2 = ax1.twinx()\nax2.plot(line_labels, data[:, 1], color='blue', linestyle='--', marker='o', markersize=10, linewidth=3)\nax2.set_ylabel('CO2 Emissions Reduction (Millions of Tons)', color='blue')\nax2.tick_params('y', colors='blue')\n\n# Plot the third column data with area chart overlaying a new ax on ax1\nax3 = ax1.twinx()\nax3.fill_between(line_labels, 0, data[:, 2], color='green', alpha=0.5)\nax3.set_ylabel('Amount of Waste Recycled (Millions of Tons)', color='green')\nax3.tick_params('y', colors='green')\n\n# Plot the fourth column data with scatter chart overlaying a new ax on ax1\nax4 = ax1.twinx()\nax4.scatter(line_labels, data[:, 3], color='orange', marker='D', s=50)\nax4.set_ylabel('Number of Solar Panels Installed (Millions)', color='orange')\nax4.tick_params('y', colors='orange')\n\n# Separate y-axes\nax3.spines['right'].set_position(('axes', 1.05))\nax4.spines['right'].set_position(('axes', 1.1))\n\n# Set background grids\nax1.grid(axis='y', color='black', alpha=0.3, linestyle='--')\n\n# Set autolocator\nax1.yaxis.set_major_locator(plt.AutoLocator())\nax2.yaxis.set_major_locator(plt.AutoLocator())\nax3.yaxis.set_major_locator(plt.AutoLocator())\nax4.yaxis.set_major_locator(plt.AutoLocator())\n\n# Set the title\nplt.title('Environment and Sustainability: Strategies for a Sustainable Future', fontsize=20)\n\n# Show legends\nax1.legend(data_labels, bbox_to_anchor=(0.9, 0.9))\nax2.legend(data_labels, bbox_to_anchor=(0.9, 0.85))\nax3.legend(data_labels, bbox_to_anchor=(0.9, 0.8))\nax4.legend(data_labels, bbox_to_anchor=(0.9, 0.75))\n\n# Automatically resize the image\nplt.tight_layout()\n\n# save the figure\nplt.savefig('./multi-axes/png/7_2023122270030.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How many more millions of tons of CO2 emissions does reforestation reduce compared to solar power?",
            "output": "60 millions of tons"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_12",
        "img": "./multi-axes/png/multi-axes_12.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing and Production: Volume, Revenue and Profitability Analysis ",
        "csv": "Category \\t Volume Produced (Units) \\t Revenue (Dollars) \\t Labour Cost (Dollars) \\t Profit (Dollars) \\n Automobiles \\t 890 \\t 87600 \\t 7750 \\t 19150 \\n Electronics \\t 790 \\t 56700 \\t 5900 \\t 9800 \\n Textiles \\t 640 \\t 45600 \\t 5700 \\t 11500 \\n Machinery \\t 1200 \\t 71400 \\t 8500 \\t 19500 \\n Chemicals \\t 950 \\t 72100 \\t 8700 \\t 12000 \\n Pharmaceuticals \\t 1010 \\t 79200 \\t 9000 \\t 12500 \\n Home Appliances \\t 1000 \\t 75500 \\t 8500 \\t 15400 \\n Furniture \\t 850 \\t 64000 \\t 7000 \\t 13400 \\n Plastics \\t 900 \\t 68400 \\t 7800 \\t 14000 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart presents the manufacturing and production data of various categories including volume produced, revenue, labor cost, and profit in dollars. Automobiles show a volume of 890 units, revenue of $87,600, labor cost of $7,750, and profit of $19,150. Electronics have a volume of 790 units with lesser revenue at $56,700 and a profit of $9,800. The volume for textiles is 640 units, generating $45,600 in revenue and $11,500 in profit. Machinery leads in volume at 1,200 units, $71,400 in revenue, and $19,500 in profit. Other categories including chemicals, pharmaceuticals, home appliances, furniture, and plastics are also listed with their respective figures."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels. \ndata_labels = ['Revenue (Dollars)','Labour Cost (Dollars)','Profit (Dollars)']\nline_labels = ['Automobiles','Electronics','Textiles','Machinery','Chemicals','Pharmaceuticals','Home Appliances','Furniture','Plastics']\ndata = np.array([[890,87600,7750,19150],[790,56700,5900,9800],[640,45600,5700,11500],[1200,71400,8500,19500],[950,72100,8700,12000],[1010,79200,9000,12500],[1000,75500,8500,15400],[850,64000,7000,13400],[900,68400,7800,14000]])\n\n# Create figure before plotting, i.e., add_subplot(111) follows plt.figure(). The value of figsize should be set larger than 20 to prevent content from being displayed.\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(111)\nax2 = ax1.twinx()\nax3 = ax1.twinx()\n\n# Plot the first column of data array, i.e., data[:,0] with bar chart\nax1.bar(line_labels,data[:,0],width=0.3,alpha=0.7,color='#1f77b4',label=data_labels[0])\n\n# Plot the second column of data array, i.e. data[:,1] with line chart\nax2.plot(line_labels,data[:,1],'--',marker='o',color='#ff7f0e',label=data_labels[1])\n\n# Plot the third column of data array, i.e. data[:,2] with scatter chart\nax3.scatter(line_labels,data[:,2],marker='s',color='#2ca02c',label=data_labels[2])\n\n# Label all axes, and match their colors with the data plotted against them.\nax1.set_ylabel(data_labels[0],color='#1f77b4')\nax2.set_ylabel(data_labels[1],color='#ff7f0e')\nax3.set_ylabel(data_labels[2],color='#2ca02c')\nax1.set_xlabel('Category')\n\n# Show the legends of all plots at different positions\nax1.legend(loc='upper left')\nax2.legend(loc='upper center')\nax3.legend(loc='upper right')\n\n# Adjust the positions of bars of different charts by adjusting their positions, i.e., the first parameter in bar()\nax1.set_xticks(np.arange(len(line_labels))+0.3/2)\n\n# Set the alpha parameter smaller than 0.6 for area chart\nax3.fill_between(line_labels,data[:,2],alpha=0.5,color='#2ca02c')\n\n# Using spine() and set_position() for ax3, ax4, ... to seperate different y-axes\nax3.spines['right'].set_position(('axes',1.1))\n\n# Set the title of the figure\nplt.title('Manufacturing and Production: Volume, Revenue and Profitability Analysis', fontsize=20)\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./multi-axes/png/15_2023122261325.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "How much profit did the Machinery category generate?",
            "output": "$19,500"
        }
    },
    {
        "chart_type": "multi-axes",
        "imgname": "multi-axes_16",
        "img": "./multi-axes/png/multi-axes_16.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing and Production: Production Output, Costs, and Labor Hours ",
        "csv": "Category \\t Production Output (Units) \\t Costs (Dollars) \\t Labor Hours \\n Machinery \\t 2300 \\t 164500 \\t 9050 \\n Fabrics \\t 1130 \\t 26750 \\t 3300 \\n Automotive Parts \\t 760 \\t 12050 \\t 3300 \\n Electronics \\t 450 \\t 25200 \\t 5500 \\n Appliances \\t 960 \\t 49200 \\t 6100 \\n Building Materials \\t 780 \\t 19000 \\t 4500 \\n Plastics \\t 970 \\t 16300 \\t 3600 \\n Glassware \\t 510 \\t 21000 \\t 4400 \\n Metals \\t 880 \\t 23400 \\t 5700 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The multi-axes chart illustrates data on manufacturing and production across various categories, detailing production output in units, associated costs in dollars, and labor hours required. Categories include Machinery with a production output of 2300 units, costs of $164,500, and 9050 labor hours. Fabrics show 1130 units produced, $26,750 in costs, and 3300 labor hours. Automotive Parts have a production of 760 units, costs of $12,050, and 3300 labor hours. Electronics are at 450 units, with costs of $25,200 and 5500 hours. Appliances, Building Materials, Plastics, Glassware, and Metals also feature with corresponding outputs, costs, and hours."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata_labels = ['Costs (Dollars)', 'Labor Hours', 'Production Output (Units)']\nline_labels = ['Automotive Parts', 'Appliances', 'Building Materials', 'Fabrics', 'Electronics', 'Glassware', 'Machinery', 'Metals', 'Plastics']\n\ndata = np.array([[2300,164500,9050],\n                 [1130,26750,3300],\n                 [760,12050,3300],\n                 [450,25200,5500],\n                 [960,49200,6100],\n                 [780,19000,4500],\n                 [970,16300,3600],\n                 [510,21000,4400],\n                 [880,23400,5700]])\n\n# Create figure\nfig = plt.figure(figsize=(15,10))\n\n# Plot data\nax1 = fig.add_subplot(111)\n\nax1.bar(line_labels, data[:,2], color='b', alpha=0.6, width=0.8)\n\nax2 = ax1.twinx() \nax2.plot(line_labels, data[:,1], color='r', linestyle='-', marker='o')\n\nax3 = ax1.twinx()\nax3.plot(line_labels, data[:,0], color='g', linestyle='-', marker='s')\n\n# Set label for y-axes\nax1.set_ylabel(data_labels[2], color='b')\nax2.set_ylabel(data_labels[1], color='r')\nax3.set_ylabel(data_labels[0], color='g')\n\n# Place different y-axes\nax3.spines['right'].set_position(('axes', 1.1))\n\n# Adjust y-axes range\nax1.autoscale()\nax2.autoscale()\nax3.autoscale()\n\n# Add title\nplt.title('Manufacturing and Production: Production Output, Costs, and Labor Hours')\n\n# Rotate x-axis labels\nplt.xticks(rotation=45)\n\n# Show legend\nax1.legend(data_labels[2], loc=2)\nax2.legend(data_labels[1], loc=1)\nax3.legend(data_labels[0], loc=4)\n\n# Add background grids\nax1.grid(linestyle='--', color='grey', linewidth=1)\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save figure\nplt.savefig('./multi-axes/png/26_2023122261325.png')\n\n# Clear the current image state\nplt.close()"
        },
        "QA": {
            "input": "What is the difference in labor hours between the automotive parts and electronics categories?",
            "output": "2200 hours"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_20",
        "img": "./radar/png/radar_20.png",
        "topic": "Social Media and the Web",
        "title": " Social Media and the Web - Performance Comparison",
        "csv": "Metric \\t Website A \\t Website B \\t Website C \\t Website D \\n Traffic \\t 3 \\t 5 \\t 7 \\t 9 \\n Engagement \\t 4 \\t 6 \\t 8 \\t 10 \\n Conversions \\t 2 \\t 4 \\t 6 \\t 8 \\n Brand Awareness \\t 5 \\t 7 \\t 9 \\t 11 \\n Retention \\t 7 \\t 9 \\t 11 \\t 13 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates a performance comparison across five different metrics for Websites A, B, C, and D. Metrics being compared include Traffic, Engagement, Conversions, Brand Awareness, and Retention. Website A has values at 3 for Traffic, 4 for Engagement, 2 for Conversions, 5 for Brand Awareness, and 7 for Retention. Website B's metrics show an upward trend from Website A, having scores of 5, 6, 4, 7, and 9, respectively. Website C further builds upon this progression with scores of 7, 8, 6, 9, and 11. Lastly, Website D outperforms the others with the highest scores in all categories at 9, 10, 8, 11, and 13."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#Transform the given data into three variables: data_labels, data, line_labels.\ndata_labels = ['Website A', 'Website B', 'Website C', 'Website D']\nline_labels = ['Traffic', 'Engagement', 'Conversions', 'Brand Awareness', 'Retention']\ndata = np.array([[3, 5, 7, 9], [4, 6, 8, 10], [2, 4, 6, 8], [5, 7, 9, 11], [7, 9, 11, 13]])\n\n#Plot the data with the type of radar chart, i.e., set 'polar=True'.\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, polar=True)\n\n#Create figure before plotting, i.e., add_subplot() follows plt.figure().\n#Evenly space the axes for the number of data points.\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\n#Iterate over each row in the data array, append the first numerical element of that row to its end for close-loop plotting of data lines. \n#The plottig of different data lines should use different colors.\nfor i, d in enumerate(data):\n    d = np.append(d, d[0])\n    ax.plot(angles, d, 'o-', color=plt.cm.Set1((i+1)/len(data)), label=line_labels[i])\n\n#During each iteration, besides plotting data lines, also generate a angle-like radius vector with constant values,\n#i.e. np.full_like(angles, (iteration index+1) * maximum of all data / total iteration number), and use each radius and angle vector to draw multiple straight lines as gridlines with a single color.\n    for j in range(len(data_labels)):\n        ax.plot(angles[j], d[j], '-', color='#cccccc')\n\n#Plot the axis label by using set_thetagrids(angles[:-1] * 180/np.pi, data_labels).\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14, rotation=45, wrap=True)\n\n#Adjust the radial limits to accommodate the maximum of data.\nax.set_rlim(0, np.max(data))\n\n#For the plot of legend, use get_legend_handles_labels() to plot the data lines.\n#The positioning of the legend should not interfere with the chart and title.\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc=(0.9, 0.95), fontsize=12, bbox_to_anchor=(1.1, 1.05))\n\n#Drawing techniques such as background grids can be used.\n#Remove the circular gridlines and background, i.e., ax.yaxis.grid(False), ax.spines['polar'].set_visible(False).\nax.yaxis.grid(False)\nax.spines['polar'].set_visible(False)\n\n#The title of the figure should be Social Media and the Web - Performance Compariso.\nplt.title(\"Social Media and the Web - Performance Compariso\", fontsize=16)\n\n#Clear the current image state at the end of the code.\nplt.tight_layout()\n#The image must be saved as ./radar/png/20.png.\nplt.savefig('./radar/png/20.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "Which metric is the highest for Website C?",
            "output": "Retention"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_19",
        "img": "./radar/png/radar_19.png",
        "topic": "Tourism and Hospitality",
        "title": " Tourism and Hospitality Performance Evaluation",
        "csv": "Category \\t Beach hotel \\t City hotel \\t Hotel chain \\t Luxury hotel \\t Boutique hotel \\n Room occupancy rate (%) \\t 80 \\t 85 \\t 90 \\t 95 \\t 90 \\n Customer satisfaction (Score) \\t 85 \\t 80 \\t 75 \\t 70 \\t 65 \\n Service quality (Score) \\t 90 \\t 85 \\t 80 \\t 75 \\t 70 \\n Facility quality (Score) \\t 75 \\t 80 \\t 85 \\t 90 \\t 95 \\n Pricing (Score) \\t 70 \\t 65 \\t 60 \\t 55 \\t 60 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates a performance evaluation of various hotel categories based on room occupancy rate, customer satisfaction, service quality, facility quality, and pricing. Beach hotels have an 80% occupancy rate, followed by city hotels at 85%, hotel chains at 90%, and both luxury and boutique hotels at 90%. Customer satisfaction scores highest for beach hotels at 85 and lowest for boutique hotels at 65. Service quality is ranked highest for beach hotels at 90 and lowest for boutique hotels at 70. Facility quality and pricing scores vary, with beach and boutique hotels scoring 75 and 95, and 70 and 60, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = ['Room occupancy rate (%)', 'Customer satisfaction (Score)', \n               'Service quality (Score)', 'Facility quality (Score)', 'Pricing (Score)']\nline_labels = ['Beach hotel', 'City hotel', 'Hotel chain', 'Luxury hotel', 'Boutique hotel']\ndata = np.array([[80, 85, 90, 95, 90],\n                 [85, 80, 75, 70, 65],\n                 [90, 85, 80, 75, 70],\n                 [75, 80, 85, 90, 95],\n                 [70, 65, 60, 55, 60]])\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111, polar=True)\n\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\nax.set_ylim(0, 100)\n\nfor i in range(len(line_labels)):\n    ax.plot(angles, data[i], 'o-', linewidth=2, label=line_labels[i])\n    ax.fill(angles, data[i], alpha=0.25)\n\nax.set_title('Tourism and Hospitality Performance Evaluation', fontsize=18)\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\nax.grid(linestyle='--', linewidth=2, alpha=0.5)\nplt.tight_layout()\nplt.savefig('./radar/png/42_202312262320.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which hotel category has the highest room occupancy rate?",
            "output": "Luxury hotel"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_9",
        "img": "./radar/png/radar_9.png",
        "topic": "Sports and Entertainment",
        "title": " Sports and Entertainment Industry Metrics",
        "csv": "Sport \\t Football \\t Basketball \\t Tennis \\t Hockey \\n Popularity \\t 90 \\t 85 \\t 80 \\t 75 \\n Viewership \\t 95 \\t 90 \\t 85 \\t 80 \\n Prize Money \\t 80 \\t 75 \\t 70 \\t 65 \\n Sponsorship \\t 85 \\t 80 \\t 75 \\t 70 \\n Fan Engagement \\t 95 \\t 90 \\t 85 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates various metrics for four sports: Football, Basketball, Tennis, and Hockey. Metrics include popularity, viewership, prize money, sponsorship, and fan engagement. Football scores highest in popularity (90), viewership (95), and fan engagement (95), while Tennis scores lowest in prize money (70) and sponsorship (75). The metrics show relative performance across the sports within these entertainment industry parameters for an unspecified time period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#Transform the given data into three variables: data_labels, data, line_labels. \ndata_labels = ['Popularity','Viewership','Prize Money','Sponsorship','Fan Engagement']\nline_labels = ['Football','Basketball','Tennis','Hockey']\ndata = [[90,95,80,85,95],[85,90,75,80,90],[80,85,70,75,85],[75,80,65,70,80]]\n\n# Plot the data with the type of radar chart, i.e., set 'polar=True'. \nfig = plt.figure(figsize=(9, 9))\nax = fig.add_subplot(111, polar=True)\n\n# Create figure before plotting, i.e., add_subplot() follows plt.figure(). \n# Evenly space the axes for the number of data points. \nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\n# Iterate over each row in the data array, append the first numerical element of that row to its end for close-loop plotting of data lines. \n# The plottig of different data lines should use different colors.\nfor i in range(len(line_labels)):\n    values = data[i]\n    values = np.append(values, values[0])\n    ax.plot(angles, values, linewidth=2, label=line_labels[i], color=plt.cm.Set1(i))\n\n# During each iteration, besides plotting data lines, also generate a angle-like radius vector with constant values, \n# i.e. np.full_like(angles, (iteration index+1) * maximum of all data / total iteration number), \n# and use each radius and angle vector to draw multiple straight lines as gridlines with a single color.\nax.set_rgrids([20, 40, 60, 80, 100])\n\n# Plot the axis label by using set_thetagrids(angles[:-1] * 180/np.pi, data_labels). \nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=15)\n\n# Adjust the radial limits to accommodate the maximum of data.\nax.set_ylim(0,100)\n\n# For the plot of legend, use get_legend_handles_labels() to plot the data lines. \n# The positioning of the legend should not interfere with the chart and title.\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, bbox_to_anchor=(0.1, 0.1))\n\n# Drawing techniques such as background grids can be used. \n# Remove the circular gridlines and background, i.e., ax.yaxis.grid(False), ax.spines['polar'].set_visible(False).\nax.yaxis.grid(False)\nax.spines['polar'].set_visible(False)\n\n# The title of the figure should be  Sports and Entertainment Industry Metrics.\nax.set_title('Sports and Entertainment Industry Metrics', fontsize=20)\n\n# The image must be saved as ./radar/png/9.png.\nplt.savefig('./radar/png/9.png')\n\n# Clear the current image state at the end of the code.\nplt.clf()"
        },
        "QA": {
            "input": "What is the viewership score for Football?",
            "output": "95"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_13",
        "img": "./radar/png/radar_13.png",
        "topic": "Arts and Culture",
        "title": " Arts and Culture Performance Comparison",
        "csv": "Category \\t Group A \\t Group B \\t Group C \\t Group D \\n Music \\t 90 \\t 85 \\t 80 \\t 75 \\n Visual Art \\t 80 \\t 85 \\t 90 \\t 95 \\n Dance \\t 65 \\t 70 \\t 75 \\t 80 \\n Theatre \\t 70 \\t 75 \\t 80 \\t 85 \\n Literature \\t 75 \\t 80 \\t 85 \\t 90 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart presents a performance comparison in arts and culture across four groups: A, B, C, and D. Each spoke of the radar represents a category: Music scores are 90 for Group A, 85 for B, 80 for C, and 75 for D. Visual Art scores ascend from 80 to 95 starting with Group A to D. Dance scores increase from 65 in Group A to 80 in Group D. Theatre scores are 70 for Group A, incrementally rising by 5 up to 85 for Group D. Lastly, Literature shows a progression from 75 in Group A to 90 in Group D."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Group A', 'Group B', 'Group C', 'Group D']\nline_labels = ['Music', 'Visual Art', 'Dance', 'Theatre', 'Literature']\ndata = [[90, 85, 80, 75], [80, 85, 90, 95], [65, 70, 75, 80], [70, 75, 80, 85], [75, 80, 85, 90]]\n\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\nfig = plt.figure(figsize=(12, 10))\nax = plt.subplot(111, polar=True)\n\nfor i in range(len(data)):\n    data[i].append(data[i][0])\n    ax.plot(angles, data[i], label=line_labels[i], linewidth=2)\n    ax.fill(angles, data[i], alpha=0.25)\n\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14, rotation=45, wrap=True)\nax.set_rlim(0, max(max(data)))\n\nhandles, labels = ax.get_legend_handles_labels()\nlegend = ax.legend(handles, labels, loc=(0.9, 0.95), labelspacing=0.1, fontsize=14)\n\nax.yaxis.grid(False)\nax.spines['polar'].set_visible(False)\n\nplt.title('Arts and Culture Performance Comparison', fontsize=18)\nplt.tight_layout()\nplt.savefig('./radar/png/19.png', bbox_inches='tight')\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the smallest difference in scores across groups A to D?",
            "output": "Music"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_21",
        "img": "./radar/png/radar_21.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Management Evaluation - 2023",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\t Q5 \\n Employee Engagement (Score) \\t 80 \\t 85 \\t 90 \\t 95 \\t 100 \\n Workplace Environment (Score) \\t 70 \\t 75 \\t 80 \\t 85 \\t 90 \\n Job Satisfaction (Score) \\t 75 \\t 80 \\t 85 \\t 90 \\t 95 \\n Training Efficiency (Score) \\t 60 \\t 65 \\t 70 \\t 75 \\t 80 \\n Workplace Safety (Score) \\t 85 \\t 90 \\t 95 \\t 100 \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart titled \"Employee Management Evaluation - 2023\" compares five different categories of workplace assessment across five distinct quarters. Employee Engagement scores ascend from 80 in Q1 to 100 in Q5. Workplace Environment progresses from 70 in Q1 to 90 in Q5. Job Satisfaction improves steadily from 75 in Q1 to 95 in Q5. Training Efficiency shows a gradual increase from 60 in Q1 to 80 in Q5, and Workplace Safety sees scores rise from 85 in Q1 and Q2 to a consistent 100 in Q4 and Q5."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Q1', 'Q2', 'Q3', 'Q4', 'Q5']\nline_labels = ['Employee Engagement (Score)', 'Workplace Environment (Score)', 'Job Satisfaction (Score)', 'Training Efficiency (Score)', 'Workplace Safety (Score)']\ndata = np.array([[80, 85, 90, 95, 100], [70, 75, 80, 85, 90], [75, 80, 85, 90, 95], [60, 65, 70, 75, 80], [85, 90, 95, 100, 100]])\n\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(polar=True)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\nax.set_ylim(0, 100)\n\nfor i in range(len(line_labels)):\n    ax.plot(angles, data[i], label=line_labels[i], linewidth=2)\n    ax.fill(angles, data[i], alpha=0.2)\n\nax.legend(loc='upper right')\nplt.title('Employee Management Evaluation - 2023', fontsize=20)\nax.grid(True)\n\nplt.tight_layout()\nplt.savefig('./radar/png/9_202312262320.png')\nplt.clf()"
        },
        "QA": {
            "input": "By how many points did Employee Engagement score increase from Q1 to Q5?",
            "output": "20 points"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_28",
        "img": "./radar/png/radar_28.png",
        "topic": "Tourism and Hospitality",
        "title": " Tourism and Hospitality Performance - 2021",
        "csv": "Location \\t Tokyo \\t Seoul \\t New York \\t Rome \\t Beijing \\n Tourist Traffic (%) \\t 70 \\t 75 \\t 80 \\t 85 \\t 90 \\n Sightseeing Attractions (Score) \\t 90 \\t 95 \\t 85 \\t 80 \\t 75 \\n Hospitality (Score) \\t 75 \\t 80 \\t 85 \\t 90 \\t 95 \\n Shopping and Dining (Score) \\t 80 \\t 85 \\t 90 \\t 95 \\t 95 \\n Entertainment (Score) \\t 70 \\t 65 \\t 60 \\t 55 \\t 60 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart exemplifies tourism and hospitality performance in five cities for the year 2021, covering multiple criteria. Tokyo's statistics indicate tourist traffic at 70%, a sightseeing attractions score of 90, hospitality at 75, shopping and dining at 80, and an entertainment score of 70. Seoul is reported with 75% tourist traffic, a 95 score for sightseeing attractions, 80 in hospitality, 85 in shopping and dining, and 65 in entertainment. New York shows 80% tourist traffic, scores 85 in sightseeing attractions, 85 in hospitality, 90 in shopping and dining, and 60 in entertainment. Rome presents an 85% tourist traffic, 80 in sightseeing, 90 in hospitality, the highest score of 95 in shopping and dining, and the lowest entertainment score of 55. Beijing concludes with the highest tourist traffic of 90%, the lowest sightseeing score of 75, highest hospitality score of 95, sharing the top score of 95 in shopping and dining with Rome, and an entertainment score of 60."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = ['Tourist Traffic (%)', 'Sightseeing Attractions (Score)', 'Hospitality (Score)', 'Shopping and Dining (Score)', 'Entertainment (Score)']\nline_labels = ['Tokyo', 'Seoul', 'New York', 'Rome', 'Beijing']\ndata = np.array([[70, 90, 75, 80, 70], [75, 95, 80, 85, 65], [80, 85, 85, 90, 60], [85, 80, 90, 95, 55], [90, 75, 95, 95, 60]])\n\nfig = plt.figure()\nax = fig.add_subplot(111, polar=True)\nangles=np.linspace(0, 2*np.pi, len(data_labels)+1, endpoint=True)\ndata = np.concatenate((data, data[:,0:1]), axis=1)\nfor i in range(0, len(line_labels)):\n    ax.plot(angles, data[i], 'o-', label=line_labels[i])\n    ax.fill(angles, data[i], alpha=0.1)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.0))\nax.grid(True)\n\nax.set_thetagrids(angles[:-1]*180/np.pi, data_labels)\nax.set_rlim(0, 100)\nplt.title(\"Tourism and Hospitality Performance - 2021\")\nfig.tight_layout()\nplt.savefig(\"./radar/png/44_202312262320.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which city has the highest score in Shopping and Dining?",
            "output": "Rome and Beijing"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_26",
        "img": "./radar/png/radar_26.png",
        "topic": "Food and Beverage Industry",
        "title": " Food & Beverage Industry Performance - 2021",
        "csv": "Category \\t Fast Food \\t Cafes \\t Restaurants \\t Diners \\t Catering \\n Brand Awareness (Score) \\t 90 \\t 85 \\t 80 \\t 75 \\t 70 \\n Quality of Food (Score) \\t 80 \\t 85 \\t 90 \\t 95 \\t 95 \\n Customer Service (Score) \\t 85 \\t 90 \\t 95 \\t 90 \\t 85 \\n Price Level (Score) \\t 70 \\t 75 \\t 80 \\t 85 \\t 90 \\n Variety (Score) \\t 75 \\t 80 \\t 85 \\t 90 \\t 95 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart presents performance metrics of the Food & Beverage industry in 2021 across five categories: Fast Food, Cafes, Restaurants, Diners, and Catering. The metrics include Brand Awareness, Quality of Food, Customer Service, Price Level, and Variety, with each assigned a score. Fast Food scores highest in Brand Awareness (90) but lowest in Price Level (70). Cafes excel in Customer Service (90), while Restaurants lead in Quality of Food (90). Diners score highest in Quality of Food and Variety (both 95). Catering achieves top marks in Variety (95) and holds steady with the highest Price Level score (90)."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = [\"Brand Awareness (Score)\", \"Quality of Food (Score)\", \"Customer Service (Score)\", \"Price Level (Score)\", \"Variety (Score)\"]\nline_labels = [\"Fast Food\", \"Cafes\", \"Restaurants\", \"Diners\", \"Catering\"]\ndata = np.array([[90, 85, 80, 75, 70], [80, 85, 90, 95, 95], [85, 90, 95, 90, 85], [70, 75, 80, 85, 90], [75, 80, 85, 90, 95]])\n\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111, polar=True)\n\nfor i in range(len(line_labels)):\n    ax.plot(angles, data[i], color=plt.cm.Set1(i), label=line_labels[i], linewidth=2, alpha=0.5)\n\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\nax.set_rmax(100)\n\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc=(0.94, 0.95), labelspacing=0.3, fontsize=14)\n\nax.set_title(\"Food & Beverage Industry Performance - 2021\", fontsize=20)\nplt.tight_layout()\nplt.savefig('./radar/png/50_202312262320.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the score difference between Cafes and Diners in the Brand Awareness category?",
            "output": "10"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_34",
        "img": "./radar/png/radar_34.png",
        "topic": "Education and Academics",
        "title": " Education Quality Evaluation - 2021",
        "csv": "Category \\t Elementary School \\t Middle School \\t High School \\t University \\t Vocational College \\n Students (Number) \\t 10 \\t 30 \\t 50 \\t 10 \\t 30 \\n Pass Rate (%) \\t 95 \\t 90 \\t 85 \\t 80 \\t 75 \\n Teacher-Student Ratio (1:N) \\t 10 \\t 15 \\t 20 \\t 25 \\t 20 \\n Academic Achievement (Score) \\t 90 \\t 85 \\t 80 \\t 75 \\t 70 \\n Research Output (Publications) \\t 20 \\t 40 \\t 50 \\t 60 \\t 50 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart presents an Education Quality Evaluation for various levels of education institutions in 2021. It compares students' numbers, pass rates, teacher-student ratios, academic achievements, and research output across five categories: Elementary School, Middle School, High School, University, and Vocational College. Elementary School shows 10 students with a 95% pass rate, a 1:10 teacher-student ratio, a score of 90 in academic achievement, and 20 publications. Middle School, High School, and other institutions follow with varying numbers and outcomes demonstrated through the chart's spokes."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = [\"Elementary School\",\"Middle School\",\"High School\",\"University\",\"Vocational College\"]\nline_labels = [\"Students (Number)\",\"Pass Rate (%)\",\"Teacher-Student Ratio (1:N)\",\"Academic Achievement (Score)\",\"Research Output (Publications)\"]\ndata = np.array([[10,30,50,10,30],[95,90,85,80,75],[10,15,20,25,20],[90,85,80,75,70],[20,40,50,60,50]])\n\n# Plot the data with the type of radar chart, i.e., set 'polar=True'\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111, polar=True)\n\n#Evenly space the axes for the number of data points\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\n#Iterate over each row in the data array, append the first numerical element of that row to the end of that row for close-loop plotting of data lines\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\n# The plottig of different data lines should use different colors\nax.plot(angles, data[0], 'o-', linewidth=2, label=line_labels[0], color='r')\nax.plot(angles, data[1], 'o-', linewidth=2, label=line_labels[1], color='g')\nax.plot(angles, data[2], 'o-', linewidth=2, label=line_labels[2], color='b')\nax.plot(angles, data[3], 'o-', linewidth=2, label=line_labels[3], color='y')\nax.plot(angles, data[4], 'o-', linewidth=2, label=line_labels[4], color='m')\n\n#Plot the axis label\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\n\n#Adjust the radial limits to accommodate the maximum of data\nax.set_rlim(0, np.max(data))\n\n#Plot the legend\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc=(0.9, 0.95))\n\n#Drawing techniques such as background grids can be used\nax.grid(True)\n\n#The title of the figure should be  Education Quality Evaluation - 2021\nplt.title('Education Quality Evaluation - 2021')\n\n#Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n#The image must be saved as ./radar/png/11_202312262320.png\nplt.savefig(\"./radar/png/11_202312262320.png\")\n\n#Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "What is the pass rate for middle school?",
            "output": "90%"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_4",
        "img": "./radar/png/radar_4.png",
        "topic": "Retail and E-commerce",
        "title": " Retail and E-commerce Performance Evaluation",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Customer Loyalty (Score) \\t 80 \\t 85 \\t 90 \\t 95 \\n Conversion Rate (%) \\t 70 \\t 75 \\t 80 \\t 85 \\n Shopping Experience (Score) \\t 60 \\t 65 \\t 70 \\t 75 \\n Customer Service (Score) \\t 75 \\t 80 \\t 85 \\t 90 \\n Delivery Speed (Score) \\t 85 \\t 90 \\t 95 \\t 100 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates the performance evaluation of various aspects in retail and e-commerce across four quarters. Customer Loyalty has scores ranging from 80 in Q1 to 95 in Q4. Conversion Rate percentages start at 70% in Q1 and increase to 85% by Q4. For Shopping Experience, the scores rise from 60 in Q1 to 75 in Q4. Customer Service shows an upward trend from a score of 75 in Q1 to 90 in Q4. Lastly, Delivery Speed scores grow from 85 in the first quarter to a perfect 100 by the final quarter."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['University A','University B','University C','University D']\nline_labels = ['Student Satisfaction (Score)','Quality of Teaching (Score)','Employment Rate (%)','Research Quality (Score)','Availability of Resources (Score)']\ndata = [[85,80,75,70],[90,85,80,75],[75,80,85,90],[80,85,90,95],[70,65,60,55]]\n\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(1, 1, 1, polar=True)\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\nax.set_rlim(0, np.max(data))\n\nfor i in range(len(line_labels)):\n    line_data = data[i]\n    line_data.append(line_data[0]) # close the loop\n    ax.plot(angles, line_data, linewidth=2, label=line_labels[i])\n\nax.legend(fontsize=12, bbox_to_anchor=(1.05, 0.5), loc='center left', borderaxespad=0.)\nax.set_title(\"Academic Performance Comparison\", fontsize=16)\n\n# draw background grids\nax.grid(True)\n\nplt.tight_layout()\nplt.savefig('./radar/png/3_202312262300.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the Delivery Speed score for Q4?",
            "output": "100"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_17",
        "img": "./radar/png/radar_17.png",
        "topic": "Tourism and Hospitality",
        "title": " Tourism and Hospitality - 2021",
        "csv": "Destination \\t Shanghai \\t Beijing \\t Chengdu \\t Guangzhou \\t Hangzhou \\n Tourism Expenditure (US$) \\t 10 \\t 20 \\t 30 \\t 40 \\t 50 \\n Accommodation Capacity (Rooms) \\t 50 \\t 60 \\t 70 \\t 80 \\t 90 \\n Hotels Rating (Stars) \\t 45 \\t 48 \\t 50 \\t 52 \\t 55 \\n Tourist Attractions (Number) \\t 100 \\t 125 \\t 150 \\t 175 \\t 200 \\n Quality of Service (Score) \\t 90 \\t 85 \\t 80 \\t 75 \\t 70 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates data on tourism and hospitality in five Chinese cities for 2021, including Shanghai, Beijing, Chengdu, Guangzhou, and Hangzhou. It presents information on tourism expenditure in US dollars, accommodation capacity by number of rooms, hotel ratings in stars, the number of tourist attractions, and the quality of service score.                  \nShanghai has $10 in tourism expenditure, 50 accommodation rooms, a hotel rating of 45 stars, 100 tourist attractions, and a service quality score of 90. Beijing has double the tourism expenditure of Shanghai, slightly higher in accommodation, rating, attractions, and a slightly lower service score. The trend continues with Chengdu, Guangzhou, and Hangzhou, each showing progressively higher values in the tourism-related metrics."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = ['Tourism Expenditure (US$)','Accommodation Capacity (K Rooms)','Hotels Rating (Stars)','Tourist Attractions (Number)','Quality of Service (Score)']\nline_labels = ['Shanghai','Beijing','Chengdu','Guangzhou','Hangzhou']\ndata = np.array([[10,20,30,40,50],[50,60,70,80,90],[45,48,50,52,55],[100,125,150,175,200],[90,85,80,75,70]])\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\nfig = plt.figure(figsize=(18,18))\nax = fig.add_subplot(111, polar=True)\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=12)\nax.set_rlim(-1, np.max(data)+5)\nax.set_title('Tourism and Hospitality - 2021', fontsize=14)\n\nfor i in range(len(data)):\n    ax.plot(angles, data[i], label=line_labels[i])\n    ax.fill(angles, data[i], alpha=0.1)\n\nax.grid(True)\nax.legend(line_labels, loc=\"best\")\nplt.tight_layout()\nplt.savefig('./radar/png/29_202312262320.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in the Quality of Service score between Shanghai and Guangzhou?",
            "output": "15"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_36",
        "img": "./radar/png/radar_36.png",
        "topic": "Energy and Utilities",
        "title": " Energy and Utilities - 2021 Performance Overview",
        "csv": "Source \\t Solar \\t Wind \\t Hydro \\t Natural Gas \\n Efficiency (%) \\t 90 \\t 95 \\t 85 \\t 80 \\n Reliability (Score) \\t 95 \\t 90 \\t 85 \\t 80 \\n Cost (Dollars/MWh) \\t 50 \\t 60 \\t 70 \\t 80 \\n Carbon Emission (g/MWh) \\t 200 \\t 150 \\t 100 \\t 50 \\n Availability (Hours) \\t 20 \\t 25 \\t 30 \\t 35 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart provides a performance overview of four energy sources in 2021. Solar energy displays a 90% efficiency, a reliability score of 95, $50/MWh cost, 200 g/MWh carbon emissions, and 20 hours availability. Wind energy shows 95% efficiency, 90 reliability score, $60/MWh cost, 150 g/MWh emissions, and 25 hours availability. Hydro energy has 85% efficiency, 85 reliability score, $70/MWh cost, 100 g/MWh emissions, and 30 hours availability. Lastly, natural gas features 80% efficiency, 80 reliability score, $80/MWh cost, 50 g/MWh emissions, and 35 hours availability."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = [\"Solar\",\"Wind\",\"Hydro\",\"Natural Gas\"]\nline_labels = [\"Efficiency (%)\",\"Reliability (Score)\",\"Cost (Dollars/MWh)\",\"Carbon Emission (g/MWh)\",\"Availability (Hours)\"]\ndata = np.array([[90,95,85,80],[95,90,85,80],[50,60,70,80],[200,150,100,50],[20,25,30,35]])\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, polar=True) \nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\nax.plot(angles, data[0], 'o-', label= line_labels[0], color='red')\nax.plot(angles, data[1], 'o-', label= line_labels[1], color='green')\nax.plot(angles, data[2], 'o-', label= line_labels[2], color='blue')\nax.plot(angles, data[3], 'o-', label= line_labels[3], color='orange')\nax.plot(angles, data[4], 'o-', label= line_labels[4], color='purple')\n\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=20, rotation='vertical')\nax.set_rlim([0,200])\nax.set_title(\"Energy and Utilities - 2021 Performance Overview\", fontsize=20)\n\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc=(0.9,0.95))\n\nax.grid(True)\nplt.tight_layout()\nplt.savefig('./radar/png/1_202312262300.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the cost of Solar energy per MWh?",
            "output": "50 dollars"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_14",
        "img": "./radar/png/radar_14.png",
        "topic": "Social Media and the Web",
        "title": " Social Media and the Web Performance Evaluation",
        "csv": "Category \\t Facebook \\t Twitter \\t Instagram \\t YouTube \\t LinkedIn \\n User Engagement (Score) \\t 85 \\t 80 \\t 75 \\t 70 \\t 65 \\n User Satisfaction (Score) \\t 90 \\t 85 \\t 80 \\t 75 \\t 70 \\n Advertising Effectiveness (Score) \\t 75 \\t 80 \\t 85 \\t 90 \\t 95 \\n Content Quality (Score) \\t 80 \\t 85 \\t 90 \\t 95 \\t 95 \\n Data Privacy (Score) \\t 70 \\t 65 \\t 60 \\t 55 \\t 60 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates performance evaluation scores across five categories for major social media platforms. Facebook, Twitter, Instagram, YouTube, and LinkedIn are assessed on user engagement, user satisfaction, advertising effectiveness, content quality, and data privacy, each measured by a score. Facebook tends to lead in user satisfaction; Instagram scores well in advertising effectiveness; YouTube shows strength in content quality, while LinkedIn stands out for data privacy. Scores vary, showing the platforms' diverse performance strengths and weaknesses among the evaluated criteria."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = ['Facebook', 'Twitter', 'Instagram', 'YouTube', 'LinkedIn']\nline_labels = ['User Engagement (Score)', 'User Satisfaction (Score)', 'Advertising Effectiveness (Score)', 'Content Quality (Score)', 'Data Privacy (Score)']\ndata = np.array([[85, 80, 75, 70, 65],\n                 [90, 85, 80, 75, 70],\n                 [75, 80, 85, 90, 95],\n                 [80, 85, 90, 95, 95],\n                 [70, 65, 60, 55, 60]])\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\nfig, ax = plt.subplots(figsize=(9, 9), subplot_kw=dict(polar=True))\nax.set_title('Social Media and the Web Performance Evaluation')\n\nfor i in range(len(data)):\n    ax.plot(angles, data[i], label=line_labels[i])\n    ax.fill(angles, data[i], alpha=0.25)\n\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\nax.set_ylim(0, 100)\n\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc='upper right', bbox_to_anchor=(1.2, 1))\n\nfig.tight_layout()\nfig.savefig('./radar/png/34_202312262320.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the Advertising Effectiveness score of Instagram?",
            "output": "85"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_24",
        "img": "./radar/png/radar_24.png",
        "topic": "Agriculture and Food Production",
        "title": " Global Agriculture and Food Production - 2021",
        "csv": "Category \\t Fruit Production \\t Vegetables Production \\t Animal Production \\t Grain Production \\n Canada \\t 90 \\t 95 \\t 80 \\t 85 \\n USA \\t 85 \\t 90 \\t 75 \\t 80 \\n Mexico \\t 80 \\t 85 \\t 70 \\t 75 \\n France \\t 75 \\t 80 \\t 65 \\t 70 \\n Germany \\t 70 \\t 75 \\t 60 \\t 65 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates the agricultural and food production in five countries during the year 2021 across four categories: fruit, vegetables, animal, and grain. Canada leads with fruit production at 90 and vegetable production at 95, alongside 80 in animal and 85 in grain production. The USA follows closely, with slightly lower figures across all categories. Mexico, France, and Germany exhibit progressively lesser production values in all categories, with Germany having the lowest figures, showing 70 for fruit production, 75 for vegetables, 60 for animal, and 65 for grains."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Fruit Production','Vegetables Production','Animal Production','Grain Production']\nline_labels = ['Canada', 'USA', 'Mexico', 'France', 'Germany']\ndata = np.array([[90, 95, 80, 85],\n                 [85, 90, 75, 80],\n                 [80, 85, 70, 75],\n                 [75, 80, 65, 70],\n                 [70, 75, 60, 65]])\n\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\nfig = plt.figure()\nax = fig.add_subplot(111, polar=True)\n\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\nax.set_rlim(0, np.max(data))\n\nfor i, line_label in enumerate(line_labels):\n    ax.plot(angles, data[i], 'o-', linewidth=1, label=line_label)\n    ax.fill(angles, data[i], alpha=0.25)\n\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc='upper right', bbox_to_anchor=(0.1, 0.1))\nax.set_title('Global Agriculture and Food Production - 2021', va='bottom', fontsize=12)\n\nplt.grid(True)\nplt.tight_layout()\nplt.savefig('./radar/png/26_202312262320.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "How much higher is the vegetable production in Canada compared to France?",
            "output": "15"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_10",
        "img": "./radar/png/radar_10.png",
        "topic": "Business and Finance",
        "title": " Financial Evaluation - 2023",
        "csv": "Financial Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Interest (%) \\t 50 \\t 55 \\t 60 \\t 65 \\n Equity (%) \\t 70 \\t 75 \\t 80 \\t 85 \\n Debt (%) \\t 60 \\t 65 \\t 70 \\t 75 \\n Tax (%) \\t 80 \\t 85 \\t 90 \\t 95 \\n Credit (%) \\t 65 \\t 70 \\t 75 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates the financial evaluation for various categories across four quarters in 2023. It shows percentages for Interest, Equity, Debt, Tax, and Credit. In Q1, Interest is at 50%, Equity at 70%, Debt at 60%, Tax at 80%, and Credit at 65%. Q2 shows an increase across all categories: Interest at 55%, Equity at 75%, Debt at 65%, Tax at 85%, and Credit at 70%. This upward trend continues in Q3, with Interest at 60%, Equity at 80%, Debt at 70%, Tax at 90%, and Credit at 75%. Q4 shows further gains: Interest at 65%, Equity at 85%, Debt at 75%, Tax at 95%, and Credit at 80%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = ['Q1', 'Q2', 'Q3', 'Q4']\nline_labels = ['Interest (%)', 'Equity (%)', 'Debt (%)', 'Tax (%)', 'Credit (%)']\ndata = np.array([[50, 55, 60, 65], [70, 75, 80, 85], [60, 65, 70, 75], [80, 85, 90, 95], [65, 70, 75, 80]])\n\n# Append the first numerical element of each row to the end of the row for close-loop plotting\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\n# Set the figure size\nplt.figure(figsize=(10, 8))\n\n# Plot the data\nax = plt.subplot(111, polar=True)\n\n# Set the angles\nangles = np.linspace(0, 2 * np.pi, len(data_labels)+1, endpoint=True)\n\n# Set the axes range\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\nax.set_rlim(0, 100)\n\n# Draw the lines\nfor i in range(data.shape[0]):\n    ax.plot(angles, data[i], label=line_labels[i], linewidth=2)\n\n# Add the legend\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc='upper right', bbox_to_anchor=(1.2, 1))\n\n# Set the title\nplt.title('Financial Evaluation - 2023')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./radar/png/5_202312262300.png')\n\n# Clear the current image state\nplt.cla()"
        },
        "QA": {
            "input": "How much did the tax rate (%) increase from Q1 to Q4?",
            "output": "15%"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_42",
        "img": "./radar/png/radar_42.png",
        "topic": "Agriculture and Food Production",
        "title": " Agriculture and Food Production Report - 2023",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Crop Yield (Ton) \\t 300 \\t 320 \\t 340 \\t 360 \\n Pesticide Use (kg) \\t 150 \\t 200 \\t 250 \\t 300 \\n Water Usage (KL) \\t 200 \\t 210 \\t 220 \\t 230 \\n Fertilizer Use (kg) \\t 500 \\t 600 \\t 700 \\t 800 \\n Soil Quality (Score) \\t 80 \\t 85 \\t 90 \\t 95 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart presents data from an Agriculture and Food Production Report for the year 2023, with five categories: Crop Yield (Ton), Pesticide Use (kg), Water Usage (KL), Fertilizer Use (kg), and Soil Quality (Score). Each category displays values across four quarters. Crop yields ascend from 300 tons in Q1 to 360 tons in Q4. Pesticide use increases each quarter from 150 kg to 300 kg. Water usage also rises incrementally from 200 KL in Q1 to 230 KL in Q4. Fertilizer use grows by 100 kg each quarter, starting at 500 kg in Q1 to 800 kg in Q4. Finally, soil quality improves progressively from a score of 80 in Q1 to 95 in Q4."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = ['Q1', 'Q2', 'Q3', 'Q4']\nline_labels = ['Crop Yield (Ton)', 'Pesticide Use (kg)', 'Water Usage (KL)', 'Fertilizer Use (kg)', 'Soil Quality (Score)']\ndata = np.array([[300,320,340,360], [150,200,250,300], [200,210,220,230], [500,600,700,800], [80,85,90,95]])\n\n# Add the first column to the end of the data for plotting\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\n# Set up the figure\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, polar=True)\n\n# Set angles and labels\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\n\n# Plot the data\nax.plot(angles, data.T, linewidth=2, label=line_labels)\nax.fill(angles, data.T, alpha=0.25)\n\n# Set the radial limits\nax.set_ylim(0, np.max(data))\n\n# Add a title\nax.set_title('Agriculture and Food Production Report - 2023', fontsize=18)\n\n# Get legend handles and labels\nhandles, labels = ax.get_legend_handles_labels()\n\n# Place the legend in the corner\nax.legend(handles, line_labels, loc=(0.9, 0.9), fontsize=14)\n\n# Add gridlines\nax.grid(True)\n\n# Resize the image\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./radar/png/36_202312262320.png')\n\n# Clear the current figure\nplt.clf()"
        },
        "QA": {
            "input": "Which category had the highest increase in its figures from Q1 to Q4?",
            "output": "Fertilizer Use (kg)"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_1",
        "img": "./radar/png/radar_1.png",
        "topic": "Government and Public Policy",
        "title": " Government Performance - 2023",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Taxation (%) \\t 50 \\t 55 \\t 60 \\t 65 \\n National Security (Score) \\t 80 \\t 85 \\t 90 \\t 95 \\n Education (Score) \\t 85 \\t 80 \\t 75 \\t 70 \\n Infrastructure (Score) \\t 75 \\t 80 \\t 85 \\t 90 \\n Healthcare (Score) \\t 70 \\t 65 \\t 60 \\t 55 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This radar chart illustrates the government performance in five different categories throughout four quarters of 2023. Taxation rates have escalated from 50% in Q1 to 65% in Q4. National Security and Infrastructure scores increased over the year, starting from 80 and 75 respectively in Q1, and reaching 95 and 90 in Q4, indicating improvement. Conversely, Education and Healthcare saw a decline; Education dropped from a score of 85 in Q1 to 70 in Q4, while Healthcare diminished from 70 to 55 in the same period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = ['Q1', 'Q2', 'Q3', 'Q4']\nline_labels = ['Taxation (%)', 'National Security (Score)', 'Education (Score)', 'Infrastructure (Score)', 'Healthcare (Score)']\ndata = np.array([[50, 55, 60, 65], [80, 85, 90, 95], [85, 80, 75, 70], [75, 80, 85, 90], [70, 65, 60, 55]])\n\n# Plot\nfig = plt.figure()\nax = fig.add_subplot(111, polar=True)\nangles = np.linspace(0, 2*np.pi, len(data_labels)+1, endpoint=True)\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\nax.set_ylim(0, 100)\n\nfor i, line in enumerate(data):\n    ax.plot(angles, line, linewidth=1.5, label=line_labels[i])\n    ax.fill(angles, line, alpha=0.2)\n\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc=(0.9, 0.95), fontsize=10)\nax.set_title('Government Performance - 2023', va='bottom', fontsize=15)\nplt.tight_layout()\nplt.savefig('./radar/png/7_202312262300.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the percentage change in taxation from Q1 to Q4?",
            "output": "30%"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_22",
        "img": "./radar/png/radar_22.png",
        "topic": "Human Resources and Employee Management",
        "title": " Employee Management - 2023",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Job Satisfaction (score) \\t 70 \\t 75 \\t 80 \\t 85 \\n Work-life Balance (score) \\t 50 \\t 55 \\t 60 \\t 65 \\n Training and Development (score) \\t 60 \\t 65 \\t 70 \\t 75 \\n Employee Engagement (score) \\t 80 \\t 85 \\t 90 \\t 95 \\n Retention Rate (%) \\t 65 \\t 70 \\t 75 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates the employee management metrics for 2023. Job Satisfaction scores increase from 70 in Q1 to 85 in Q4. Work-life Balance scores also show growth from 50 in Q1 to 65 in Q4. Training and Development scores start at 60 in Q1 and rise to 75 in Q4. Employee Engagement scores are the highest, starting at 80 in Q1 and reaching 95 in Q4. The Retention Rate percentage follows a positive trend from 65% in Q1 to 80% in Q4. Each category is plotted over four quarters, displaying an upward progression throughout the year."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels=[\"Q1\",\"Q2\",\"Q3\",\"Q4\"]\nline_labels=[\"Job Satisfaction (score)\",\"Work-life Balance (score)\",\"Training and Development (score)\",\"Employee Engagement (score)\",\"Retention Rate (%)\"]\ndata=[[70,75,80,85],[50,55,60,65],[60,65,70,75],[80,85,90,95],[65,70,75,80]]\n\nangles=np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True) # evenly space the axes for the number of data points\nfig=plt.figure(figsize=(10,10))\nax=fig.add_subplot(111, polar=True) # Create figure before plotting\nfor i in range(len(data)):\n    data[i].append(data[i][0])\n    ax.plot(angles, data[i], 'o-', linewidth=2, label=line_labels[i])\n    ax.fill(angles, data[i], alpha=0.25)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\nax.set_title('Employee Management - 2023', fontsize=20)\nax.set_rlim(min(min(data))-10,max(max(data))+10)\nax.xaxis.label.set_rotation(90)\nhandles, labels=ax.get_legend_handles_labels()\nax.legend(handles, labels, loc=(0.9,0.95))\nplt.tight_layout()\nplt.savefig(\"./radar/png/2_202312262150.png\")\nplt.clf()"
        },
        "QA": {
            "input": "By how many points did Job Satisfaction score increase from Q1 to Q4?",
            "output": "15 points"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_11",
        "img": "./radar/png/radar_11.png",
        "topic": "Environment and Sustainability",
        "title": " Global Sustainability Report - 2023",
        "csv": "Category \\t Region 1 \\t Region 2 \\t Region 3 \\t Region 4 \\n Air Quality (Score) \\t 90 \\t 85 \\t 80 \\t 75 \\n Water Quality (Score) \\t 95 \\t 90 \\t 85 \\t 80 \\n Waste Management (Score) \\t 80 \\t 85 \\t 90 \\t 95 \\n Use of Renewable Energy (Score) \\t 70 \\t 75 \\t 80 \\t 85 \\n Carbon Emission (Score) \\t 60 \\t 65 \\t 70 \\t 75 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates the Global Sustainability Report for 2023, scoring five different categories across four regions. It displays scores for Air Quality, Water Quality, Waste Management, Use of Renewable Energy, and Carbon Emission. Region 1 shows high scores with 90 for Air Quality and 95 for Water Quality, but lower in Carbon Emission with 60. Region 2 scores slightly less in air and water quality but higher in Waste Management and Use of Renewable Energy. Region 3 improves progressively across the categories. Meanwhile, Region 4 scores the least in air and water quality but leads in Waste Management and Use of Renewable Energy, demonstrating a balanced sustainability profile."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels=['Air Quality (Score)','Water Quality (Score)','Waste Management (Score)','Use of Renewable Energy (Score)','Carbon Emission (Score)']\nline_labels=['Region 1','Region 2','Region 3','Region 4']\ndata=np.array([[90,85,80,75],[95,90,85,80],[80,85,90,95],[70,75,80,85],[60,65,70,75]])\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, polar=True)\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\nax.set_rlim(0,100)\n\nfor i in range(len(line_labels)):\n    data_row=np.append(data[:,i],data[0,i])\n    ax.plot(angles,data_row,label=line_labels[i])\n    ax.fill(angles,data_row,alpha=0.1)\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels,loc=(0.94, 0.95))\nplt.title(\"Global Sustainability Report - 2023\")\nplt.tight_layout()\nplt.savefig(\"./radar/png/9_202312262150.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the score difference between waste management in Region 1 and Region 4?",
            "output": "15"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_38",
        "img": "./radar/png/radar_38.png",
        "topic": "Tourism and Hospitality",
        "title": " Tourism and Hospitality Trends in China",
        "csv": "Destination \\t Beijing \\t Shanghai \\t Guangzhou \\t Chengdu \\t Shenzhen \\n Tourist Arrivals (in Millions) \\t 20 \\t 25 \\t 30 \\t 35 \\t 40 \\n Hotel Room Occupancy (%) \\t 70 \\t 75 \\t 80 \\t 85 \\t 90 \\n Retail Sales (in Billions) \\t 30 \\t 40 \\t 50 \\t 60 \\t 76 \\n Cultural Attractions (Score) \\t 90 \\t 85 \\t 80 \\t 75 \\t 70 \\n Hospitality Services (Score) \\t 80 \\t 85 \\t 90 \\t 95 \\t 99 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates tourism and hospitality metrics across five Chinese cities. Beijing sees 20 million tourist arrivals, 70% hotel occupancy, 30 billion in retail sales, a cultural score of 90, and hospitality services rated at 80. Shanghai has 25 million arrivals, 75% occupancy, 40 billion in retail sales, with cultural and hospitality scores at 85 each. Guangzhou reports 30 million arrivals, 80% occupancy, 50 billion in retail sales, 80 in culture, and 90 in hospitality. Chengdu shows 35 million tourists, 85% hotel occupancy, 60 billion in retail sales, 75 cultural, and 95 hospitality score. Shenzhen leads with 40 million arrivals, 90% occupancy, the highest retail sales at 76 billion, cultural score at 70, and top hospitality services rated at 99."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = np.array(['Tourist Arrivals (in Millions)', 'Hotel Room Occupancy (%)', 'Retail Sales (in Billions)', 'Cultural Attractions (Score)', 'Hospitality Services (Score)'])\nline_labels = np.array(['Beijing', 'Shanghai', 'Guangzhou', 'Chengdu', 'Shenzhen'])\ndata = np.array([[20, 70, 30, 90, 80],\n                 [25, 75, 40, 85, 85],\n                 [30, 80, 50, 80, 90],\n                 [35, 85, 60, 75, 95],\n                 [40, 90, 76, 70, 99]])\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\nplt.figure(figsize=(8, 8))\nax = plt.subplot(111, polar=True)\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=15)\nax.set_rlim(0, np.max(data))\n\nfor i in range(len(data)):\n    ax.plot(angles, data[i], label=line_labels[i], linewidth=2, color=plt.cm.jet(i/len(data)))\n    ax.fill(angles, data[i], alpha=0.1, color=plt.cm.jet(i/len(data)))\n\nhandles, labels = ax.get_legend_handles_labels()\nlegend = plt.legend(handles[::-1], labels[::-1], loc='upper left', bbox_to_anchor=(1.1, 1))\n\nplt.title('Tourism and Hospitality Trends in China', fontsize=20)\nplt.tight_layout()\nplt.savefig('./radar/png/6_202312262320.png')\n\nplt.clf()"
        },
        "QA": {
            "input": "What is the Retail Sales figure (in Billions) for Shenzhen?",
            "output": "76"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_35",
        "img": "./radar/png/radar_35.png",
        "topic": "Energy and Utilities",
        "title": "esources Evaluation and Economic Analysis by Country - 2021",
        "csv": "Country \\t Iron Ore Quality \\t Ease of Mining \\t Mining Regulations \\t Environmental Protection \\t Economic Viability \\n South Africa \\t 9.25 \\t 6.72 \\t 4.78 \\t 7.56 \\t 8.62 \\n Canada \\t 9.45 \\t 7.98 \\t 6.17 \\t 8.42 \\t 7.50 \\n Australia \\t 9.12 \\t 8.23 \\t 5.53 \\t 9.02 \\t 6.70 \\n Peru \\t 9.01 \\t 7.35 \\t 4.98 \\t 7.78 \\t 7.60 \\n Brazil \\t 8.23 \\t 7.12 \\t 3.78 \\t 7.86 \\t 7.28 \\n India \\t 8.20 \\t 6.22 \\t 3.35 \\t 7.10 \\t 7.87 \\n Mexico \\t 8.15 \\t 5.18 \\t 2.72 \\t 6.85 \\t 8.30 \\n Austria \\t 4.32 \\t 2.29 \\t 1.75 \\t 3.26 \\t 4.95 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart provides an analysis of eight different countries against five criteria: Iron Ore Quality, Ease of Mining, Mining Regulations, Environmental Protection, and Economic Viability, for the year 2021. Each country is evaluated on a score system where South Africa scores highly with 9.25 for Iron Ore Quality and 8.62 for Economic Viability. Canada shows a high score of 9.45 for Iron Ore Quality, but lower in Economic Viability at 7.50. Australia's Environmental Protection is notable at 9.02. Countries like Brazil, India, and Mexico have varied scores, while Austria has the lowest scores across all criteria."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data to be represented\ndata_labels = ['South Africa', 'Canada', 'Australia', 'Peru', 'Brazil', 'India', 'Mexico', 'Austria']\ndata = [[9.25, 6.72, 4.78, 7.56, 8.62],\n        [9.45, 7.98, 6.17, 8.42, 7.50],\n        [9.12, 8.23, 5.53, 9.02, 6.70],\n        [9.01, 7.35, 4.98, 7.78, 7.60],\n        [8.23, 7.12, 3.78, 7.86, 7.28],\n        [8.20, 6.22, 3.35, 7.10, 7.87],\n        [8.15, 5.18, 2.72, 6.85, 8.30],\n        [4.32, 2.29, 1.75, 3.26, 4.95]]\nline_labels = ['Iron Ore Quality','Ease of Mining','Mining Regulations','Environmental Protection','Economic Viability']\n\n# Create figure before plotting\nfig = plt.figure(figsize=(10, 8))\n\n# Evenly space the axes for the number of data points\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\n# Iterate over each row in the data array and append the first element of that row to its end\ndata = np.concatenate((data, [data[0]]))\n\n# Plot the data\nax = fig.add_subplot(111, polar=True)\nax.plot(angles, data, 'o-', linewidth=2, label=line_labels)\nax.fill(angles, data, alpha=0.25, c=\"black\")\n\n# Set angles\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\n\n# Adjust the radial limits\nax.set_ylim(0, 10)\n\n# Draw background grids\nax.grid(True)\n\nax.set_title('Resources Evaluation and Economic Analysis by Country - 2021')\n# Set legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save figure\nplt.savefig('./radar/png_val/radar_35.png')\n\n# Clear the current image state\nplt.cla()"
        },
        "QA": {
            "input": "Which country has the lowest score for Environmental Protection?",
            "output": "Austria"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_48",
        "img": "./radar/png/radar_48.png",
        "topic": "Business and Finance",
        "title": " Business Performance - 2023",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Business Growth (%) \\t 60 \\t 65 \\t 70 \\t 75 \\n Profit Margin (%) \\t 70 \\t 75 \\t 80 \\t 85 \\n Investment Returns (%) \\t 60 \\t 65 \\t 70 \\t 75 \\n Cost Management (%) \\t 50 \\t 55 \\t 60 \\t 65 \\n Market Share (%) \\t 65 \\t 70 \\t 75 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates five categories of business performance metrics for each quarter of 2023. Business Growth percentage ranges from 60% to 75% across the fiscal year. Profit Margin percentage shows an increase from 70% in Q1 to 85% in Q4. Investment Returns also follow this upward trend from 60% to 75%. Cost Management percentages are depicted as improving from 50% in Q1 to 65% in Q4. Lastly, Market Share percentages show an upward trajectory from 65% in the first quarter to 80% by the end of Q4. Each metric appears to demonstrate positive progression throughout the year."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\nline_labels = [\"Business Growth (%)\",\"Profit Margin (%)\",\"Investment Returns (%)\",\"Cost Management (%)\",\"Market Share (%)\"]\ndata = np.array([[60, 65, 70, 75],\n                 [70, 75, 80, 85],\n                 [60, 65, 70, 75],\n                 [50, 55, 60, 65],\n                 [65, 70, 75, 80]])\n\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\nfig = plt.figure(figsize=(8,8))\nax = fig.add_subplot(111, polar=True)\n\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=12)\n\nax.plot(angles, data[0], linewidth=1, linestyle='solid', label=line_labels[0])\nax.fill(angles, data[0], 'b', alpha=0.1)\n\nax.plot(angles, data[1], linewidth=1, linestyle='solid', label=line_labels[1])\nax.fill(angles, data[1], 'r', alpha=0.1)\n\nax.plot(angles, data[2], linewidth=1, linestyle='solid', label=line_labels[2])\nax.fill(angles, data[2], 'g', alpha=0.1)\n\nax.plot(angles, data[3], linewidth=1, linestyle='solid', label=line_labels[3])\nax.fill(angles, data[3], 'y', alpha=0.1)\n\nax.plot(angles, data[4], linewidth=1, linestyle='solid', label=line_labels[4])\nax.fill(angles, data[4], 'm', alpha=0.1)\n\nax.set_rlim(0,100)\nhandles, labels = ax.get_legend_handles_labels()\nplt.legend(handles, labels, loc='upper right', bbox_to_anchor=(1.2, 1.0))\n\nax.grid(True)\nplt.title(\"Business Performance - 2023\")\nplt.tight_layout()\nplt.savefig('./radar/png/39_202312262320.png')\nplt.clf()"
        },
        "QA": {
            "input": "By how many percentage points did the Market Share increase from Q1 to Q4?",
            "output": "15 percentage points"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_27",
        "img": "./radar/png/radar_27.png",
        "topic": "Arts and Culture",
        "title": " Arts and Culture Platform Performance in 2021",
        "csv": "Category \\t Painting \\t Theatre \\t Musical Instruments \\t Sculpture \\t Dance \\n Popularity (%) \\t 70 \\t 65 \\t 60 \\t 55 \\t 50 \\n Variety (%) \\t 60 \\t 65 \\t 70 \\t 75 \\t 80 \\n Quality (%) \\t 80 \\t 85 \\t 90 \\t 95 \\t 100 \\n Impact (%) \\t 60 \\t 65 \\t 70 \\t 75 \\t 80 \\n Accessibility (%) \\t 75 \\t 80 \\t 85 \\t 90 \\t 95 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates the performance of different arts and culture platforms in 2021 across five categories: Painting, Theatre, Musical Instruments, Sculpture, and Dance. Each category is rated on Popularity, Variety, Quality, Impact, and Accessibility. Popularity percentages range from 50% for Dance to 70% for Painting. Variety scores show an increasing trend from Painting at 60% to Dance at 80%. Quality ratings are highest for Dance at 100% and lowest for Painting at 80%. Impact assessments also increase from Painting at 60% to Dance at 80%. Lastly, Accessibility percentages grow from 75% in Painting to 95% in Dance."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\ndata_labels=[\"Popularity (%)\", \"Variety (%)\", \"Quality (%)\", \"Impact (%)\", \"Accessibility (%)\"]\nline_labels=[\"Painting\", \"Theatre\", \"Musical Instruments\", \"Sculpture\", \"Dance\"]\ndata=np.array([[70, 65, 60, 55, 50], [60, 65, 70, 75, 80], [80, 85, 90, 95, 100], [60, 65, 70, 75, 80], [75, 80, 85, 90, 95]])\ndata=np.concatenate((data, data[:, 0:1]), axis=1)\nfig = plt.figure(figsize=(15,15))\nax = fig.add_subplot(111, polar=True)\nangles=np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\nfor i in range(len(data)):\n    ax.plot(angles,data[i], color='C'+str(i), linewidth=1.5, label=line_labels[i])\n    ax.fill(angles, data[i], color='C'+str(i), alpha=0.1)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\nax.set_ylim(0,100) \nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc=(0.9, 0.95), fontsize=10)\nax.set_title('Arts and Culture Platform Performance in 2021', fontsize=18, fontweight='bold', y=1.08)\nax.grid(True)\nplt.tight_layout()\nplt.savefig('./radar/png/8_202312262320.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the highest quality percentage?",
            "output": "Dance"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_33",
        "img": "./radar/png/radar_33.png",
        "topic": "Education and Academics",
        "title": " Academic Achievement Comparison - 2021",
        "csv": "Subject \\t Class 1 \\t Class 2 \\t Class 3 \\t Class 4 \\n Math (Score) \\t 90 \\t 95 \\t 100 \\t 105 \\n English (Score) \\t 85 \\t 90 \\t 95 \\t 100 \\n Science (Score) \\t 80 \\t 85 \\t 90 \\t 95 \\n History (Score) \\t 75 \\t 80 \\t 85 \\t 90 \\n Art (Score) \\t 70 \\t 75 \\t 80 \\t 85 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates the academic scores across five subjects for four different classes in 2021. Math scores range from 90 to 105, English from 85 to 100, Science from 80 to 95, History from 75 to 90, and Art from 70 to 85. Each class shows a progression in scores from Class 1 to Class 4 in all subjects."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Class 1','Class 2','Class 3','Class 4']\ndata = [[90,95,100,105],[85,90,95,100],[80,85,90,95],[75,80,85,90],[70,75,80,85]]\nline_labels = ['Math (Score)', 'English (Score)', 'Science (Score)', 'History (Score)', 'Art (Score)']\n\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111, polar=True)\n\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\nax.set_ylim(0,110)\n\nfor line in data:\n    line_val = np.append(line,line[0]) \n    ax.plot(angles, line_val, lw=2, label=line_labels)\n    ax.fill(angles, line_val, alpha=0.2)\n\nax.grid(True)\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, line_labels, loc=(0.9, 0.95),fontsize=15)\nplt.title('Academic Achievement Comparison - 2021')\nplt.tight_layout()\nplt.savefig('./radar/png/14_202312262150.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which subject shows a steady increase of 5 score points from Class 1 through Class 4?",
            "output": "Art"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_37",
        "img": "./radar/png/radar_37.png",
        "topic": "Retail and E-commerce",
        "title": " E-commerce Retail Performance - 2021",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Number of Customers \\t 50 \\t 60 \\t 70 \\t 80 \\n Average Order Value \\t 60 \\t 65 \\t 70 \\t 75 \\n Conversion Rate \\t 70 \\t 75 \\t 80 \\t 85 \\n Customer Retention \\t 80 \\t 85 \\t 90 \\t 95 \\n Cost per Acquisition \\t 65 \\t 70 \\t 75 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart presents e-commerce retail performance metrics across four quarters in 2021. It covers five categories: Number of Customers, Average Order Value, Conversion Rate, Customer Retention, and Cost per Acquisition. \"Number of Customers\" starts at 50 in Q1 and grows to 80 by Q4. \"Average Order Value\" shows a steady increase from $60 to $75 through the year. The \"Conversion Rate\" begins at 70% in Q1, reaching 85% in Q4. \"Customer Retention\" improves from 80 to 95 over the same period. Lastly, \"Cost per Acquisition\" escalates from $65 in the first quarter to $80 by the fourth quarter."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform data \nline_labels = [\"Number of Customers\", \"Average Order Value\", \"Conversion Rate\", \"Customer Retention\", \"Cost per Acquisition\"]\ndata_labels = [\"Q1\",\"Q2\",\"Q3\",\"Q4\"]\ndata = [[50,60,70,80], [60,65,70,75], [70,75,80,85], [80,85,90,95], [65,70,75,80]]\ndata = np.array(data)\ndata = np.concatenate((data, data[:, :1]), axis=1)\n# Plotting\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(111, polar=True)\n\nangles = np.linspace(0, 2 * np.pi, len(data_labels)+1, endpoint=True)\n\n# plot data lines\nfor i, row in enumerate(data):\n    ax.plot(angles, row, 'o-', c='C{}'.format(i), label=line_labels[i])\n\n# plot grid lines\nfor i in range(len(data)):\n    ax.plot(angles, np.full_like(angles, (i+1)*np.max(data)/len(data)), '--', c='gray', alpha=0.7)\n\n# set ax labels\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\n\n# set radial limits\nax.set_ylim(0,np.max(data)+5)\nmax_value = data.max()\nstep_size = max_value / len(data)\nax.set_rgrids([step_size * i for i in range(1, len(data) + 1)], labels=[f'{step_size * i}' for i in range(1, len(data) + 1)], angle=0)\n\n# plot legend\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc='upper right', bbox_to_anchor=(1.25, 1))\n\n# set title\nax.set_title(\"E-commerce Retail Performance - 2021\", fontsize=14)\n\nplt.tight_layout()\n\n# save the image\nplt.savefig('./radar/png_val/radar_37.png')\n\n# clear the current state\nplt.clf()"
        },
        "QA": {
            "input": "What is the average number of customers in the third quarter?",
            "output": "70"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_43",
        "img": "./radar/png/radar_43.png",
        "topic": "Energy and Utilities",
        "title": " Energy and Utilities Performance - 2023",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Electricity Consumption (kWh) \\t 10 \\t 20 \\t 30 \\t 40 \\n Gas Consumption (kWh) \\t 20 \\t 30 \\t 40 \\t 50 \\n Renewables Consumption (kWh) \\t 30 \\t 40 \\t 50 \\t 60 \\n Nuclear Generation (kWh) \\t 40 \\t 50 \\t 60 \\t 70 \\n Fuel Costs (USD) \\t 50 \\t 60 \\t 70 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates the performance of different energy sectors and fuel costs across four quarters in 2023. It tracks changes in kilowatt-hours (kWh) for electricity consumption starting at 10 kWh in Q1 and reaching 40 kWh by Q4. Gas consumption increases from 20 kWh in Q1 to 50 kWh in Q4. Renewables show a steady rise from 30 kWh to 60 kWh across the quarters, while nuclear generation starts at 40 kWh and grows to 70 kWh. The chart also includes fuel costs in USD, which escalate from 50 in Q1 to 80 in Q4."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\nline_labels = [\"Electricity Consumption (kWh)\", \"Gas Consumption (kWh)\", \"Renewables Consumption (kWh)\", \"Nuclear Generation (kWh)\", \"Fuel Costs (USD)\"]\ndata = np.array([[10,20,30,40],\n                 [20,30,40,50],\n                 [30,40,50,60],\n                 [40,50,60,70],\n                 [50,60,70,80]])\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111, polar=True)\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\nax.set_rlim(0, np.max(data))\nfor i in range(len(data)):\n    ax.plot(angles, data[i], label=line_labels[i], color=plt.cm.Set1(i))\nax.legend(loc=\"upper right\", bbox_to_anchor=(1.2, 1))\nax.grid(color=\"grey\", linestyle=\"--\", linewidth=1)\nplt.title(\"Energy and Utilities Performance - 2023\")\nplt.tight_layout()\nplt.savefig(\"./radar/png/4_202312262300.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which category had the highest consumption/generation in Q4?",
            "output": "Nuclear Generation"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_41",
        "img": "./radar/png/radar_41.png",
        "topic": "Environment and Sustainability",
        "title": " Progress of Sustainability in Next 5 Years",
        "csv": "Indicator \\t 2020 \\t 2021 \\t 2022 \\t 2023 \\t 2024 \\t 2025 \\n Carbon Emission (kg/capita) \\t 14.65 \\t 14.5 \\t 14.3 \\t 14.1 \\t 13.9 \\t 13.7 \\n Renewable Energy Sources (%) \\t 20 \\t 25 \\t 30 \\t 35 \\t 40 \\t 45 \\n Water Consumption (m3/capita) \\t 90 \\t 85 \\t 80 \\t 75 \\t 70 \\t 65 \\n Recycling Rate (%) \\t 50 \\t 55 \\t 60 \\t 65 \\t 70 \\t 75 \\n Air Quality (AQI) \\t 130 \\t 125 \\t 120 \\t 115 \\t 110 \\t 105 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart presents the progress of sustainability indicators over the next five years. It shows trends for carbon emissions, renewable energy sources, water consumption, recycling rate, and air quality. Carbon emissions are projected to decrease from 14.65 kg/capita in 2020 to 13.7 kg/capita in 2025. The share of renewable energy sources is expected to increase from 20% in 2020 to 45% in 2025. Water consumption per capita is forecasted to drop from 90 m3 in 2020 to 65 m3 in 2025. The recycling rate is set to rise from 50% in 2020 to 75% in 2025, and the air quality index (AQI) is anticipated to improve from 130 to 105 over the same period."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np \nimport matplotlib.pyplot as plt \n\ndata_labels = ['2020','2021','2022','2023','2024','2025']\nline_labels = ['Carbon Emission (kg/capita)','Renewable Energy Sources (%)','Water Consumption (m3/capita)','Recycling Rate (%)','Air Quality (AQI)']\ndata = np.array([[14.65,14.5,14.3,14.1,13.9,13.7],[20,25,30,35,40,45],[90,85,80,75,70,65],[50,55,60,65,70,75],[130,125,120,115,110,105]])\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\nfig = plt.figure(figsize=(9, 9))\nax = fig.add_subplot(111, polar=True)\nangles = np.linspace(0, 2 * np.pi, len(data_labels)+1, endpoint=True)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=12)\nax.set_rlim(0, np.max(data))\nfor i in range(data.shape[0]):\n    ax.plot(angles, data[i], 'o-', label=line_labels[i], color=plt.cm.Set1(i)) \nplt.title('Progress of Sustainability in Next 5 Years')\nplt.legend(bbox_to_anchor=(1.2,1.1))\nplt.tight_layout()\nplt.savefig(\"./radar/png/1_202312262320.png\")\nplt.clf()"
        },
        "QA": {
            "input": "By how much is the Water Consumption expected to decrease from 2020 to 2025?",
            "output": "25 m3/capita"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_16",
        "img": "./radar/png/radar_16.png",
        "topic": "Agriculture and Food Production",
        "title": " Agriculture and Food Production - 2021",
        "csv": "Item \\t Corn \\t Rice \\t Wheat \\t Vegetables \\t Fruits \\n Production (KTonnes) \\t 10 \\t 8 \\t 6 \\t 4 \\t 2.5 \\n Quality (Points) \\t 9 \\t 8.5 \\t 7.5 \\t 8 \\t 8.5 \\n Cost (KUSD) \\t 10 \\t 8 \\t 6 \\t 4 \\t 2 \\n Yield (Tonnes/Acre) \\t 5 \\t 4.5 \\t 4 \\t 3.5 \\t 3 \\n Demand (KTonnes) \\t 15 \\t 10 \\t 8 \\t 5 \\t 3.5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart presents various metrics for agricultural products in 2021. Each axis represents different categories: production in kilotonnes, quality on a points scale, cost in thousands of USD, yield in tonnes per acre, and demand also in kilotonnes. Corn shows figures with 10 kTonnes for production, 9 points for quality, 10 kUSD for cost, 5 tonnes per acre for yield, and 15 kTonnes for demand. Rice, wheat, vegetables, and fruits have varied data along these metrics, with rice having higher quality and cost than wheat, but less than corn. Vegetables and fruits show the least values in most categories, except for quality where fruits tie with rice."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt \nimport numpy as np\n\ndata_labels = [\"Production (KTonnes)\", \"Quality (Points)\", \"Cost (KUSD)\", \"Yield (KTonnes/Acre)\", \"Demand (KTonnes)\"]\nline_labels = [\"Corn\", \"Rice\", \"Wheat\", \"Vegetables\", \"Fruits\"]\ndata = np.array([[10, 9, 10, 5, 15],\n                [8, 8.5, 8, 4.5, 10],\n                [6, 7.5, 6, 4, 8],\n                [4, 8, 4, 3.5, 5],\n                [2.5, 8.5, 2.5, 3, 3.5]])\n\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, polar=True)\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\nax.set_ylim(0, np.max(data))\nax.set_title('Agriculture and Food Production - 2021', fontsize=20)\n\ncolors = ['b', 'r', 'g', 'm', 'y']\nfor i in range(len(data)):\n    ax.plot(angles, data[i], 'o-', linewidth=2, color=colors[i], label=line_labels[i])\n    ax.fill(angles, data[i], alpha=0.25, color=colors[i])\n\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc='best', fontsize=14)\n\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nplt.tight_layout()\nplt.savefig('./radar/png/40_202312262320.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which item has the highest yield per acre according to the data?",
            "output": "Corn"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_18",
        "img": "./radar/png/radar_18.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Nonprofit Performance Analysis - 2021",
        "csv": "Category \\t Educational Organization \\t Environmental Organization \\t Animal Rescue \\t Social Services \\t Religious Organization \\n Funding (%) \\t 50 \\t 60 \\t 70 \\t 80 \\t 90 \\n Volunteers (Number) \\t 100 \\t 200 \\t 300 \\t 400 \\t 500 \\n Public Image (Score) \\t 70 \\t 75 \\t 80 \\t 85 \\t 90 \\n Number of Beneficiaries (Number) \\t 50 \\t 100 \\t 150 \\t 200 \\t 250 \\n Impact (Score) \\t 60 \\t 65 \\t 70 \\t 75 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart presents a performance analysis of five types of nonprofit organizations in 2021 across five metrics: funding percentage, number of volunteers, public image score, number of beneficiaries, and impact score. Educational organizations receive 50% funding, with 100 volunteers, a 70 public image score, 50 beneficiaries, and an impact score of 60. Environmental organizations have slightly higher values in each metric. Animal Rescue, Social Services, and Religious Organizations show progressively increasing values across all metrics, with Religious Organizations receiving 90% funding, having 500 volunteers, a public image score of 90, benefiting 250 individuals, and achieving an impact score of 80."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = ['Funding (%)', 'Volunteers (Number)', 'Public Image (Score)', 'Number of Beneficiaries (Number)', 'Impact (Score)']\nline_labels = ['Educational Organization', 'Environmental Organization', 'Animal Rescue', 'Social Services', 'Religious Organization']\ndata = np.array([[50, 60, 70, 80, 90], [100, 200, 300, 400, 500], [70, 75, 80, 85, 90], [50, 100, 150, 200, 250], [60, 65, 70, 75, 80]])\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111, polar=True)\n\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=15)\nax.set_rlim([0, np.max(data) * 1.1])\nax.set_title('Nonprofit Performance Analysis - 2021',fontsize=20)\n\nfor i in range(len(line_labels)):\n    ax.plot(angles, data[i], 'o-', linewidth=2, label=line_labels[i])\n    ax.fill(angles, data[i], alpha=0.25)\n\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05), fancybox=True, shadow=True, ncol=5)\nplt.grid(color='gray', linestyle='--', linewidth=1)\nplt.tight_layout()\nplt.savefig('./radar/png/35_202312262320.png') \nplt.clf()"
        },
        "QA": {
            "input": "What is the difference in public image score between Social Services and Animal Rescue organizations?",
            "output": "5"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_3",
        "img": "./radar/png/radar_3.png",
        "topic": "Energy and Utilities",
        "title": " Energy and Utilities Performance Comparison - 2021",
        "csv": "Category \\t Solar \\t Wind \\t Hydro \\t Thermal \\n Energy Generation (KGWh) \\t 24 \\t 27 \\t 30 \\t 33 \\n Efficiency (%) \\t 90 \\t 91 \\t 92 \\t 93 \\n Capacity Factor (%) \\t 85 \\t 86 \\t 87 \\t 88 \\n Availability (%) \\t 95 \\t 96 \\t 97 \\t 98 \\n Cost per MWh (USD) \\t 50 \\t 45 \\t 40 \\t 35 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart presents a comparison of energy and utilities performance across four categories: Solar, Wind, Hydro, and Thermal for 2021. Each category shows data for energy generation in KGWh, with solar at 24, wind at 27, hydro at 30, thermal at 33. Efficiency percentages are 90, 91, 92, and 93, respectively, while capacity factors are 85%, 86%, 87%, and 88%. Availability percentages range from 95% for solar to 98% for thermal. Finally, the cost per MWh is $50 for solar, $45 for wind, $40 for hydro, and $35 for thermal."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Energy Generation (KGWh)', 'Efficiency (%)', 'Capacity Factor (%)', 'Availability (%)', 'Cost per MWh (USD)']\nline_labels = ['Solar', 'Wind', 'Hydro', 'Thermal']\ndata = np.array([[24, 90, 85, 95, 50], [27, 91, 86, 96, 45], [30, 92, 87, 97, 40], [33, 93, 88, 98, 35]])\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111, polar=True)\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\nfor i in range(len(data)):\n    ax.plot(angles, data[i], color=np.random.rand(3, ), linewidth=2, label=line_labels[i])\n\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\nax.set_ylim(0, np.max(data))\nax.legend(loc='upper right', bbox_to_anchor=(1, 1))\n\nplt.title('Energy and Utilities Performance Comparison - 2021')\nplt.tight_layout()\nplt.savefig('./radar/png/47_202312262320.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which energy source has the lowest efficiency but highest Availability (%)?",
            "output": "Thermal"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_5",
        "img": "./radar/png/radar_5.png",
        "topic": "Social Sciences and Humanities",
        "title": "Friendliness Scores for Different Regions Among Susan and Bob",
        "csv": "Name \\t Eastern Asia \\t Southeast Asia \\t Southern Asia \\t Northern America \\t South America \\t Central & Western Europe \\t Western Asia \\t Southern Europe \\t Eastern Europe \\t Northern Africa \\t Western Africa \\t Eastern Africa \\t Central America \\t Southern Africa \\t Northern Europe \\t Australia & Oceania \\t Caribbean \\t Central Asia \\t Central Africa \\n Susan \\t 5.78 \\t 4.71 \\t 6.09 \\t 2.62 \\t 3.82 \\t 7.41 \\t 10.0 \\t 4.32 \\t 5.36 \\t 9.84 \\t 6.78 \\t 4.21 \\t 2.37 \\t 2.45 \\t 3.25 \\t 2.41 \\t 2.12 \\t 4.68 \\t 2.93 \\n Bob \\t 4.51 \\t 4.14 \\t 3.76 \\t 3.97 \\t 4.61 \\t 5.34 \\t 6.89 \\t 8.36 \\t 10.0 \\t 10.0 \\t 8.02 \\t 7.46 \\t 5.89 \\t 5.56 \\t 4.83 \\t 3.48 \\t 3.76 \\t 2.69 \\t 4.12 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart visualizes friendliness scores assigned by Susan and Bob across various global regions. Susan rated Western Asia highest at 10.0, with her lowest score in the Caribbean at 2.12. Bob gave his highest scores to both Eastern Europe and Northern Africa, each with a perfect 10.0, and rated Central Asia the lowest at 2.69. Their ratings span from Northern America to Australia & Oceania, covering major world regions with distinct scores that reflect their personal experiences or perceptions."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#Prepare data\ndata_labels = [\"Eastern Asia\",\"Southeast Asia\",\"Southern Asia\",\"Northern America\",\"South America\",\"Central & Western Europe\",\"Western Asia\",\"Southern Europe\",\"Eastern Europe\",\"Northern Africa\",\"Western Africa\",\"Eastern Africa\",\"Central America\",\"Southern Africa\",\"Northern Europe\",\"Australia & Oceania\",\"Caribbean\",\"Central Asia\",\"Central Africa\"]\ndata_values_susan = [5.78,4.71,6.09,2.62,3.82,7.41,10.0,4.32,5.36,9.84,6.78,4.21,2.37,2.45,3.25,2.41,2.12,4.68,2.93]\ndata_values_bob = [4.51,4.14,3.76,3.97,4.61,5.34,6.89,8.36,10.0,10.0,8.02,7.46,5.89,5.56,4.83,3.48,3.76,2.69,4.12]\n\n#Draw Chart\n#Create figure\nfig = plt.figure(figsize=(8,8))\nax = fig.add_subplot(111, polar=True)\n\n#Set angles\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\n#Plot data\nax.plot(angles, [*data_values_susan, data_values_susan[0]], 'o-', label='Susan')\nax.fill(angles, [*data_values_susan, data_values_susan[0]], alpha=0.25)\nax.plot(angles, [*data_values_bob, data_values_bob[0]], 'o-', label='Bob')\nax.fill(angles, [*data_values_bob, data_values_bob[0]], alpha=0.25)\n\n#Set axis label\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\n\n#Set radial limits\nax.set_ylim(0, 10)\n\n#Set background grids\nax.grid(True)\n\n#Set legend\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),\n          fancybox=True, shadow=True, ncol=2)\n\nax.set_title('Friendliness Scores for Different Regions Among Susan and Bob')\n#Adjust figure size\nplt.tight_layout()\n\n#Save figure\nplt.savefig(\"./simulated_data_corner_cases/radar/png/two_col_3646.png\")\n\n#Clear figure state\nplt.clf()"
        },
        "QA": {
            "input": "Who gives a higher friendliness score for Central & Western Europe, Susan or Bob?",
            "output": "Susan"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_15",
        "img": "./radar/png/radar_15.png",
        "topic": "Environment and Sustainability",
        "title": " Environmental Sustainability Comparison",
        "csv": "Category \\t Location A \\t Location B \\t Location C \\t Location D \\n Air Quality \\t 95 \\t 90 \\t 85 \\t 80 \\n Water Quality \\t 90 \\t 85 \\t 80 \\t 75 \\n Renewable Energy \\t 75 \\t 80 \\t 85 \\t 90 \\n Waste Management \\t 85 \\t 90 \\t 95 \\t 100 \\n Biodiversity \\t 65 \\t 70 \\t 75 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart represents an environmental sustainability comparison across four locations. It illustrates the performance in five categories: air quality, water quality, renewable energy, waste management, and biodiversity. Location A shows high air and water quality scores of 95 and 90, respectively, but a lower score in biodiversity (65). Location B performs slightly less in air and water quality but better in biodiversity (70). Location C's scores increase progressively across the categories, while Location D records the highest scores in renewable energy, waste management, and biodiversity, peaking at 100 for waste management."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables\ndata_labels = [\"Location A\",\"Location B\",\"Location C\",\"Location D\"]\nline_labels = [\"Air Quality\",\"Water Quality\",\"Renewable Energy\",\"Waste Management\",\"Biodiversity\"]\ndata = [[95,90,85,80],[90,85,80,75],[75,80,85,90],[85,90,95,100],[65,70,75,80]]\n\n# Plot the data with the type of radar chart\nangles = np.linspace(0, 2 * np.pi, len(data_labels)+1, endpoint=True)\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, polar=True)\n\n# Iterate over each row in the data array \nfor i in range(len(line_labels)):\n    data_to_plot = np.append(data[i],data[i][0])\n    ax.plot(angles, data_to_plot, linewidth=1, linestyle='solid', label=line_labels[i])\n    ax.fill(angles, data_to_plot, alpha=0.1)\n\n# Generate a angle-like radius vector with constant values\n    angle_like_radius = np.full_like(angles, (i+1)*np.max(data)/len(data))\n    ax.plot(angles, angle_like_radius, linewidth=1, linestyle='solid', label=\"\", color='black', alpha=0.3)\n\n# Plot the axis label\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=12, fontweight='normal', rotation=90, wrap=True)\n\n# Adjust the radial limits to accommodate the maximum of data\nax.set_ylim(0, np.max(data))\n\n# Plot the legend\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc='upper center', bbox_to_anchor=(0.5, -0.07), ncol=5, fontsize=12, frameon=False)\n\n# Remove the circular gridlines and background\nax.yaxis.grid(False)\nax.spines['polar'].set_visible(False)\n\n# Set the title of the figure\nax.set_title(\"Environmental Sustainability Compariso\", fontsize=14, fontweight='normal')\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# Save the image\nplt.savefig('./radar/png/3.png')\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which location has the highest score in waste management?",
            "output": "Location D"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_31",
        "img": "./radar/png/radar_31.png",
        "topic": "Technology and the Internet",
        "title": " Technology and Internet Advancement in 2023",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Network Security \\t 70 \\t 75 \\t 80 \\t 85 \\n AI Development \\t 60 \\t 65 \\t 70 \\t 75 \\n Mobile Computing \\t 50 \\t 55 \\t 60 \\t 65 \\n Cloud Computing \\t 80 \\t 85 \\t 90 \\t 95 \\n Web Development \\t 65 \\t 70 \\t 75 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates the advancements in different technology and internet categories throughout 2023, separated by quarters Q1 through Q4. Network Security shows progress from 70 to 85, AI Development increases from 60 to 75, Mobile Computing rises from 50 to 65, and Cloud Computing grows from 80 to 95. Lastly, Web Development advances from 65 to 80."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Q1', 'Q2', 'Q3', 'Q4']\nline_labels = ['Network Security', 'AI Development', 'Mobile Computing', 'Cloud Computing', 'Web Development']\ndata = np.array([[70, 75, 80, 85],\n                 [60, 65, 70, 75],\n                 [50, 55, 60, 65],\n                 [80, 85, 90, 95],\n                 [65, 70, 75, 80]]).T\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111, polar=True)\n\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\ndata = np.concatenate((data, [data[0]])).T\n\nfor i in range(len(data)):\n    ax.plot(angles, data[i], linewidth=1, linestyle='solid', label=line_labels[i])\n    ax.fill(angles, data[i], alpha=0.1)\n\nax.spines['polar'].set_visible(False)\nax.yaxis.grid(False)\n\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\nax.set_rlim(0, np.max(data))\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\nax.set_title('Technology and Internet Advancement in 2023', y=1.08)\n\nfig.tight_layout()\nplt.savefig('./radar/png/1.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which category had the highest total advancement by the end of Q4 2023?",
            "output": "Cloud Computing"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_50",
        "img": "./radar/png/radar_50.png",
        "topic": "Social Sciences and Humanities",
        "title": " Social and Human Development - 2023",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Education (%) \\t 80 \\t 85 \\t 90 \\t 95 \\n Empathy (Score) \\t 80 \\t 85 \\t 90 \\t 95 \\n Creativity (Score) \\t 60 \\t 65 \\t 70 \\t 75 \\n Communication (Score) \\t 70 \\t 75 \\t 80 \\t 85 \\n Leadership (Score) \\t 75 \\t 80 \\t 85 \\t 90 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates the progression of social and human development across different categories for four quarters of 2023. Education, tracked in percentage, shows an increase from 80% in Q1 to 95% in Q4. Empathy, Creativity, Communication, and Leadership are measured in scores, all demonstrating a growth trend: Empathy from 80 to 95, Creativity from 60 to 75, Communication from 70 to 85, and Leadership from 75 to 90 through the respective quarters. Each category traces a line connecting the scores for Q1 to Q4, forming a shape that represents the overall development in these areas."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Transform the given data into three variables\ndata_labels = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\nline_labels = [\"Education (%)\", \"Empathy (Score)\", \"Creativity (Score)\", \"Communication (Score)\", \"Leadership (Score)\"]\ndata = [[80,85,90,95], [80,85,90,95], [60,65,70,75], [70,75,80,85], [75,80,85,90]]\n\n# Plot the data with the type of radar chart\nfig=plt.figure()\nax = fig.add_subplot(111, polar=True)\n\n# Evenly space the axes for the number of data points\nangles=np.linspace(0, 2*np.pi, len(data_labels)+1, endpoint=True)\n\n# Iterate over each row in the data array\nfor i, line in enumerate(data):\n    line.append(line[0])\n    ax.plot(angles, line, 'o-', linewidth=2, label=line_labels[i])\n    ax.fill(angles, line, alpha=0.25)\n\n# Plot the axis label\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\n\n# Adjust the radial limits to accommodate the maximum of data\nax.set_rlim(0, 100)\n\n# Plot the legend\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc=(0.9, .95), labelspacing=0.1, fontsize=10)\n\n# Drawing techniques such as background grids can be used\nax.grid(True)\n\n# Set the title of the figure\nplt.title(\"Social and Human Development - 2023\", fontsize=12)\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout() \n\n# The image must be saved as\nplt.savefig(\"./radar/png/15_202312262150.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Which category scored the lowest in Q3?",
            "output": "Creativity (Score)"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_8",
        "img": "./radar/png/radar_8.png",
        "topic": "Government and Public Policy",
        "title": " Government and Public Policy Performance Report",
        "csv": "Region \\t East \\t West \\t North \\t South \\n Education Quality \\t 75 \\t 80 \\t 85 \\t 90 \\n Public Safety \\t 70 \\t 75 \\t 80 \\t 85 \\n Infrastructure \\t 85 \\t 90 \\t 95 \\t 100 \\n Taxes \\t 60 \\t 65 \\t 70 \\t 75 \\n Employment \\t 80 \\t 85 \\t 90 \\t 95 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates a performance report on government and public policy across four regions: East, West, North, and South. It highlights five categories: Education Quality, Public Safety, Infrastructure, Taxes, and Employment. Education Quality scores vary from 75 in the East to 90 in the South. Public Safety ranges from 70 in the East to 85 in the South. Infrastructure ratings increase steadily from East with 85 to South with 100. Taxes are lowest in the East at 60 and highest in the South at 75. Employment figures grow from 80 in the East to 95 in the South."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = [\"East\", \"West\", \"North\", \"South\"]\nline_labels = [\"Education Quality\", \"Public Safety\", \"Infrastructure\", \"Taxes\", \"Employment\"]\ndata = [[75, 80, 85, 90],\n        [70, 75, 80, 85],\n        [85, 90, 95, 100],\n        [60, 65, 70, 75],\n        [80, 85, 90, 95]]\n\n# Plot the data with the type of radar chart, i.e., set 'polar=True'. Create figure before plotting, i.e., add_subplot() follows plt.figure().\nfig = plt.figure(figsize=(7, 7))\nax = fig.add_subplot(111, polar=True)\n\n# Evenly space the axes for the number of data points\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\nmax_value = max([max(d) for d in data])\n\n# Iterate over each row in the data array, append the first numerical element of that row to its end for close-loop plotting of data lines\n# The plottig of different data lines should use different colors\nfor i in range(len(data)):\n    data[i].append(data[i][0])\n    ax.plot(angles, data[i], color=plt.cm.Set1(i/len(data)), linewidth=2, label=line_labels[i])\n\n# Generate a angle-like radius vector with constant values\n    ax.plot(angles, np.full_like(angles, (i+1) * (max_value/len(data))), color='black', linestyle='dashed', linewidth=1)\n\n# Plot the axis label\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\n\n# Adjust the radial limits to accommodate the maximum of data\nax.set_ylim(0, max(data[i]) + 5)\nstep_size = max_value / len(data)\nax.set_rgrids([step_size * i for i in range(1, len(data) + 1)], labels=[f'{step_size * i}' for i in range(1, len(data) + 1)], angle=0)\n\n# For the plot of legend\nleg = ax.legend(loc='lower center', ncol=5)\n\n# Drawing techniques such as background grids can be used\nax.yaxis.grid(False)\nax.spines['polar'].set_visible(False)\n\n# The title of the figure\nplt.title('Government and Public Policy Performance Report', fontsize=16)\n\n# Automatically resize the image by tight_layout()\nplt.tight_layout()\n\n# The image must be saved as ./radar/png_val/radar_8.png\nplt.savefig('./radar/png_val/radar_8.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "What is the Public Safety score in the West region?",
            "output": "75"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_23",
        "img": "./radar/png/radar_23.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Nonprofit Performance Evaluation",
        "csv": "Category \\t Organization A \\t Organization B \\t Organization C \\t Organization D \\n Donor Satisfaction \\t 90 \\t 95 \\t 80 \\t 85 \\n Volunteer Engagement \\t 85 \\t 80 \\t 75 \\t 70 \\n Resource Allocation \\t 80 \\t 75 \\t 70 \\t 65 \\n Outreach Impact \\t 75 \\t 70 \\t 65 \\t 60 \\n Fundraising Performance \\t 95 \\t 90 \\t 85 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates the performance evaluation of four organizations across five different metrics. Organization A scores are 90 in Donor Satisfaction, 85 in Volunteer Engagement, 80 in Resource Allocation, 75 in Outreach Impact, and 95 in Fundraising Performance. Organization B scores are 95, 80, 75, 70, and 90 in the respective categories. Organization C has scores of 80, 75, 70, 65, and 85, and Organization D has scores of 85, 70, 65, 60, and 80 across the same metrics."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables: data_labels, data, line_labels.\ndata_labels = ['Donor Satisfaction', 'Volunteer Engagement', 'Resource Allocation', 'Outreach Impact', 'Fundraising Performance']\nline_labels = ['Organization A', 'Organization B', 'Organization C', 'Organization D']\ndata = np.array([[90, 95, 80, 85], [85, 80, 75, 70], [80, 75, 70, 65], [75, 70, 65, 60], [95, 90, 85, 80]])\n\n# Create figure before plotting.\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, polar=True)\n\n# Evenly space the axes for the number of data points.\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\n# Iterate over each row in the data array, append the first numerical element of that row to its end for close-loop plotting of data lines.\nfor i in range(len(line_labels)):\n    data_row = np.append(data[:, i], data[0, i])\n    ax.plot(angles, data_row, linewidth=2, label=line_labels[i])\n    ax.fill(angles, data_row, alpha=0.25)\n    \n    # Generate a angle-like radius vector with constant values\n    angle_r = np.full_like(angles, (i+1) * np.max(data) / len(line_labels))\n    ax.plot(angles, angle_r, '--', alpha=0.25, color='black')\n\n# Plot the axis label by using set_thetagrids(angles[:-1] * 180/np.pi, data_labels).\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\n\n# Adjust the radial limits to accommodate the maximum of data.\nax.set_ylim(0, np.max(data))\n\n# Plot the data lines legend.\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc=(0.9, 0.95), fontsize=14)\n\n# Remove the circular gridlines and background.\nax.yaxis.grid(False)\nax.spines['polar'].set_visible(False)\n\n# The title of the figure should be  Nonprofit Performance Evaluatio.\nplt.title('Nonprofit Performance Evaluatio', fontsize=18)\n\n# Automatically resize the image by tight_layout().\nplt.tight_layout()\n\n# The image must be saved as ./radar/png/17.png.\nplt.savefig('./radar/png/17.png')\n\n# Clear the current image state at the end of the code.\nplt.clf()"
        },
        "QA": {
            "input": "Which organization has the highest score in Fundraising Performance?",
            "output": "Organization A"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_12",
        "img": "./radar/png/radar_12.png",
        "topic": "Human Resources and Employee Management",
        "title": " Human Resources Performance Evaluation",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Employee Retention (%) \\t 70 \\t 75 \\t 80 \\t 85 \\n Employee Satisfaction (Score) \\t 50 \\t 55 \\t 60 \\t 65 \\n Training Effectiveness (Score) \\t 60 \\t 65 \\t 70 \\t 75 \\n Recruiting Efficiency (Score) \\t 80 \\t 85 \\t 90 \\t 95 \\n Performance Evaluation (Score) \\t 65 \\t 70 \\t 75 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates five categories of Human Resources performance evaluation, tracked quarterly. Employee Retention is represented as a percentage, increasing each quarter from 70% in Q1 to 85% in Q4. Employee Satisfaction, shown as a score, also grows progressively from 50 in Q1 to 65 in Q4. Training Effectiveness rises from a score of 60 in Q1 to 75 in Q4. Recruiting Efficiency shows consistent improvement, starting at 80 in Q1 and reaching 95 in Q4. Lastly, Performance Evaluation scores enhance from 65 in the first quarter to 80 by the year's final quarter."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Transform the given data into three variables\ndata_labels = ['Q1', 'Q2', 'Q3', 'Q4']\nline_labels = ['Employee Retention (%)', 'Employee Satisfaction (Score)',\n               'Training Effectiveness (Score)', 'Recruiting Efficiency (Score)', 'Performance Evaluation (Score)']\ndata = [[70, 75, 80, 85], [50, 55, 60, 65], [60, 65, 70, 75],\n        [80, 85, 90, 95], [65, 70, 75, 80]]\n\n# Plot the data with the type of radar chart\nplt.figure(figsize=(6, 6))\nax = plt.subplot(111, polar=True)\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\nfor i in range(len(line_labels)):\n    # Append the first numerical element of that row to its end for close-loop plotting of data lines\n    values = np.concatenate((data[i], [data[i][0]]))\n    ax.plot(angles, values, linewidth=1, label=line_labels[i])\n\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\n\n# Adjust the radial limits to accommodate the maximum of data\nax.set_rlim(0, 100)\n\n# Plot the legend of data lines\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc='upper right', bbox_to_anchor=(1.25, 1.03))\n\n# Drawing techniques such as background grids can be used\nax.grid(True)\n\n# Set the title of the figure\nplt.title('Human Resources Performance Evaluation')\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# Save the image as ./radar/png/5_202312262150.png\nplt.savefig('./radar/png/5_202312262150.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "Which category showed the least improvement from Q1 to Q4?",
            "output": "Employee Retention (%)"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_46",
        "img": "./radar/png/radar_46.png",
        "topic": "Retail and E-commerce",
        "title": " Retail and E-commerce Performance Evaluation",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Customer Satisfaction \\t 90 \\t 85 \\t 80 \\t 75 \\n Delivery Time \\t 75 \\t 80 \\t 85 \\t 90 \\n Product Quality \\t 85 \\t 90 \\t 95 \\t 100 \\n Online Experience \\t 80 \\t 85 \\t 90 \\t 95 \\n Return Rate \\t 65 \\t 70 \\t 75 \\t 80 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates the performance evaluation of retail and e-commerce across five categories over four quarters. Customer Satisfaction starts high at 90 in Q1 and drops to 75 by Q4. Delivery Time improves steadily from 75 in Q1 to 90 in Q4. Product Quality shows consistent growth, beginning at 85 in Q1 and reaching 100 in Q4. Online Experience also increases from 80 in Q1 to 95 in Q4. Lastly, the Return Rate rises over time, starting at 65 in Q1 and ending at 80 in Q4."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the radar chart\ndata_labels = ['Customer Satisfaction', 'Delivery Time', 'Product Quality', 'Online Experience', 'Return Rate']\nline_labels = ['Q1', 'Q2', 'Q3', 'Q4']\ndata = np.array([[90, 85, 80, 75], [75, 80, 85, 90], [85, 90, 95, 100], [80, 85, 90, 95], [65, 70, 75, 80]])\n# Repeat the first column to close the circle\ndata = np.concatenate((data, data[0:1, :]), axis=0).T\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\nmax_val = np.max(data)\n\n# Create a radar chart\nfig = plt.figure(figsize=(7, 7))\nax = fig.add_subplot(111, polar=True)\n\n# Plot each data series\nfor row in range(len(data)):\n    line_color = np.random.choice(range(256), size=3)/255  # Generating random colors\n    ax.plot(angles, data[row], color=line_color, linewidth=2, label=line_labels[row])\n    ax.fill(angles, data[row], color=line_color, alpha=0.25)\n\n# Set the labels for each angle\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=12)\n\n# Set the range for the radial axis\nax.set_rlim(0, max_val + 5)\n\n# Improve layout\nax.grid(False)\nax.spines['polar'].set_visible(False)\n\n# Add a legend\nlegend = ax.legend(loc='upper right', bbox_to_anchor=(1.25, 0.5))\n\n# Add a title\nplt.title('Retail and E-commerce Performance Evaluation', fontsize=18)\n\n# Adjust layout\nplt.tight_layout()\n\nplt.savefig('./radar/png/4.png', bbox_inches='tight')\nplt.clf()"
        },
        "QA": {
            "input": "Which category scored exactly 95 in Q3?",
            "output": "Product Quality"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_44",
        "img": "./radar/png/radar_44.png",
        "topic": "Sports and Entertainment",
        "title": " Sports and Entertainment Performance Evaluation",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Appeal (Score) \\t 92 \\t 95 \\t 110 \\t 105 \\n Popularity (Rating) \\t 8 \\t 9 \\t 10 \\t 11 \\n Quality (Score) \\t 85 \\t 90 \\t 95 \\t 100 \\n Engagement (Score) \\t 90 \\t 95 \\t 100 \\t 105 \\n Accessibility (Score) \\t 80 \\t 85 \\t 90 \\t 95 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This radar chart illustrates the performance evaluation of sports and entertainment across five categories: Appeal, Popularity, Quality, Engagement, and Accessibility, with each measured quarterly. In Q1, Appeal scores at 92, Popularity has a rating of 8, Quality at 85, Engagement scores 90, and Accessibility at 80. Q2 shows slight improvements in all categories. For Q3, there are notable increases, with Appeal reaching 110, Popularity at 10, Quality at 95, Engagement 100, and Accessibility 90. In Q4, Appeal slightly decreases to 105, while Popularity peaks at 11, Quality at 100, Engagement at 105, and Accessibility improves to 95."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = ['Q1', 'Q2', 'Q3', 'Q4']\nline_labels = ['Appeal (Score)', 'Popularity (Rating)', 'Quality (Score)', 'Engagement (Score)', 'Accessibility (Score)']\ndata = [[92, 95, 110, 105], [8, 9, 10, 11], [85, 90, 95, 100], [90, 95, 100, 105], [80, 85, 90, 95]]\n\nplt.figure(figsize=(8,8))\nax = plt.subplot(111, polar=True)\nangles = np.linspace(0, 2*np.pi, len(data_labels)+1, endpoint=True)\nax.set_thetagrids(angles[:-1]*180/np.pi, data_labels, fontsize=14)\nax.set_rlim(0, max(map(max, data))+10)\nax.grid(True)\n\nfor line_data, line_label in zip(data, line_labels):\n    line_data = np.append(line_data, line_data[0])\n    ax.plot(angles, line_data, label=line_label)\n\nax.legend(loc='upper right', bbox_to_anchor=(1.25, 1.05))\nplt.title('Sports and Entertainment Performance Evaluation', fontsize=14)\nplt.tight_layout()\nplt.savefig('./radar/png_val/radar_44.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the engagement score for Q2?",
            "output": "95"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_40",
        "img": "./radar/png/radar_40.png",
        "topic": "Real Estate and Housing Market",
        "title": " Real Estate and Housing Market Overview - 2023",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Price (%) \\t 65 \\t 70 \\t 75 \\t 80 \\n Supply (%) \\t 50 \\t 55 \\t 60 \\t 65 \\n Demand (%) \\t 60 \\t 65 \\t 70 \\t 75 \\n Home Sales (%) \\t 80 \\t 85 \\t 90 \\t 95 \\n Mortgage Rates (%) \\t 70 \\t 75 \\t 80 \\t 85 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart provides an overview of different real estate and housing market metrics for four quarters in 2023. The categories plotted are Price, Supply, Demand, Home Sales, and Mortgage Rates, each expressed as a percentage. Price starts at 65% in Q1 and increases to 80% by Q4. Supply also shows growth from 50% in Q1 to 65% in Q4. Demand follows a similar upward trend from 60% to 75%. Home Sales percentages rise from 80% in Q1 to 95% in Q4. Lastly, Mortgage Rates incrementally increase from 70% in Q1 to 85% by the end of Q4."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = ['Q1','Q2','Q3','Q4']\nline_labels = ['Price (%)','Supply (%)','Demand (%)','Home Sales (%)','Mortgage Rates (%)']\ndata = [[65,70,75,80],[50,55,60,65],[60,65,70,75],[80,85,90,95],[70,75,80,85]]\n\nangles = np.linspace(0, 2*np.pi, len(data_labels)+1, endpoint=True)\nfig = plt.figure(figsize=(16,8))\nax = fig.add_subplot(111, polar=True)\nax.set_title('Real Estate and Housing Market Overview - 2023', fontsize=16)\nax.tick_params(labelsize=14)\n\nfor i in range(len(data)):\n    data[i].append(data[i][0]) \n    ax.plot(angles, data[i], label=line_labels[i], linewidth=2)\n    ax.fill(angles, data[i], alpha=0.25)\n\nax.set_thetagrids(angles[:-1]*180/np.pi, data_labels, fontsize=14)\nax.set_ylim(0,100)\nax.grid(True)\n\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, fontsize=14, loc='upper right')\nfig.tight_layout()\nfig.savefig('./radar/png/13_202312262150.png')\nplt.cla()"
        },
        "QA": {
            "input": "Which category showed the highest percentage in Q4?",
            "output": "Home Sales (%)"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_25",
        "img": "./radar/png/radar_25.png",
        "topic": "Education and Academics",
        "title": " Academic Achievements - 2021",
        "csv": "Category \\t Elementary \\t Middle School \\t High School \\t University \\n Math Scores \\t 75 \\t 85 \\t 90 \\t 93 \\n Science Scores \\t 70 \\t 80 \\t 85 \\t 90 \\n English Scores \\t 85 \\t 90 \\t 95 \\t 97 \\n Arts Scores \\t 65 \\t 75 \\t 80 \\t 90 \\n Technology Scores \\t 80 \\t 85 \\t 90 \\t 95 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates academic achievements across five categories \u2013 Math, Science, English, Arts, and Technology \u2013 at four educational levels: Elementary, Middle School, High School, and University in 2021. Math scores are 75 for Elementary, 85 for Middle School, 90 for High School, and 93 for University. Science scores start at 70 and rise to 90 by University level. English scores show a steady increase from 85 in Elementary to 97 at University. Arts scores are lowest, beginning at 65 and reaching 90 at University, while Technology scores range from 80 in Elementary to 95 in University education."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = [\"Elementary\",\"Middle School\",\"High School\",\"University\"]\nline_labels = [\"Math Scores\",\"Science Scores\",\"English Scores\",\"Arts Scores\",\"Technology Scores\"]\ndata = [[75,85,90,93],\n        [70,80,85,90],\n        [85,90,95,97],\n        [65,75,80,90],\n        [80,85,90,95]]\n\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\nfig = plt.figure(figsize=(7,7))\nax = fig.add_subplot(111, projection='polar')\n\nfor i in range(len(data)):\n    data[i].append(data[i][0])\n    ax.plot(angles, data[i], 'o-', label=line_labels[i], linewidth=2)\n    ax.fill(angles, data[i], alpha=0.25)\n    ax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\n    ax.set_ylim(0, max(map(max,data))+5)\n\nfor i in range(len(data)):\n    ax.plot(angles, np.full_like(angles, (i+1) * max(map(max,data)) / len(data)), '--', color='black', linewidth=2)\n\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc='upper right', bbox_to_anchor=(0.1, 0.1))\nax.yaxis.grid(False)\nax.spines['polar'].set_visible(False)\nplt.title('Academic Achievements - 2021', fontsize=15)\nplt.tight_layout()\nplt.savefig('./radar/png/14.png')\nplt.close()"
        },
        "QA": {
            "input": "What are the High School Science Scores according to the data?",
            "output": "85"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_39",
        "img": "./radar/png/radar_39.png",
        "topic": "Retail and E-commerce",
        "title": " Retail and E-commerce Performance Evaluation - 2021",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Customer Satisfaction (%) \\t 85 \\t 90 \\t 95 \\t 100 \\n Product Quality (%) \\t 90 \\t 95 \\t 100 \\t 105 \\n Delivery Speed (%) \\t 80 \\t 85 \\t 90 \\t 95 \\n Product Availability (%) \\t 75 \\t 80 \\t 85 \\t 90 \\n Return Policy (%) \\t 70 \\t 75 \\t 80 \\t 85 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This radar chart presents a performance evaluation of retail and e-commerce across five categories for 2021, with percentages reported quarterly. Customer Satisfaction starts at 85% in Q1 and increases steadily to 100% by Q4. Product Quality begins at 90%, finishing above 100% in Q4. Delivery Speed shows an initial 80% with consistent growth to 95%. Product Availability grows from 75% in Q1 to 90% in Q4, while Return Policy rises from 70% in the initial quarter to 85% in the final one. Each category shows a pattern of improvement throughout the year."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Transform the given data into three variables: data_labels, data, line_labels \ndata_labels = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\nline_labels = [\"Customer Satisfaction (%)\", \"Product Quality (%)\", \"Delivery Speed (%)\", \"Product Availability (%)\", \"Return Policy (%)\"]\ndata = np.array([[85, 90, 95, 100], [90, 95, 100, 105], [80, 85, 90, 95], [75, 80, 85, 90], [70, 75, 80, 85]])\n\n# Plot the data with the type of radar chart, i.e., set 'polar=True' \nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, polar=True)\n\n# Iterate over each row in the data array, append the first numerical element of that row to the end of that row for close-loop plotting of data lines\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\n# The plottig of different data lines should use different colors\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\nax.plot(angles, data[0], 'o-', c='b', label=line_labels[0])\nax.plot(angles, data[1], 'o-', c='r', label=line_labels[1])\nax.plot(angles, data[2], 'o-', c='g', label=line_labels[2])\nax.plot(angles, data[3], 'o-', c='c', label=line_labels[3])\nax.plot(angles, data[4], 'o-', c='m', label=line_labels[4])\n\n# Plot the axis label by using set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=18)\n\n# Adjust the radial limits to accommodate the maximum of data\nax.set_rlim(50, 110)\n\n# For the plot of legend, use ax.get_legend_handles_labels() and legend to plot the legend of data lines. The positioning of the legend should not interfere with the chart and title.\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc='upper right', bbox_to_anchor=(1.3, 1))\n\n# Drawing techniques such as background grids can be used.\nax.grid(True)\n\n# The image must be saved as ./radar/png/20_202312262320.png\nplt.title('Retail and E-commerce Performance Evaluation - 2021', fontsize=20)\nplt.tight_layout()\nplt.savefig('./radar/png/20_202312262320.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "Which category showed a 15% increase from Q1 to Q4 in 2021?",
            "output": "Product Quality"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_6",
        "img": "./radar/png/radar_6.png",
        "topic": "Sports and Entertainment",
        "title": " Entertainment and Sports Industry Performance Review",
        "csv": "Category \\t Movie Theater \\t Sports Stadium \\t Amusement Park \\t Concert Hall \\n Crowd Size (%) \\t 80 \\t 85 \\t 90 \\t 95 \\n Ticket Revenue (%) \\t 60 \\t 65 \\t 70 \\t 75 \\n Customer Satisfaction (Score) \\t 90 \\t 85 \\t 80 \\t 75 \\n Safety & Security (Score) \\t 85 \\t 80 \\t 75 \\t 70 \\n Cost Management (Score) \\t 75 \\t 80 \\t 85 \\t 90 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This radar chart illustrates the performance review of the entertainment and sports industry across various categories. The chart includes crowd size percentage, ticket revenue percentage, customer satisfaction, safety & security, and cost management scores. Each category is represented: Movie Theater has an 80% crowd size, 60% ticket revenue, 90 customer satisfaction, 85 safety & security, and 75 cost management score; Sports Stadium shows 85% crowd size, 65% ticket revenue, 85 customer satisfaction, 80 safety & security, and 80 cost management score; Amusement Park reports 90% crowd size, 70% ticket revenue, 80 customer satisfaction, 75 safety & security, and 85 cost management score; Concert Hall indicates 95% crowd size, 75% ticket revenue, 75 customer satisfaction, 70 safety & security, and 90 cost management score."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\ndata_labels = ['Crowd Size (%)','Ticket Revenue (%)','Customer Satisfaction (Score)','Safety & Security (Score)','Cost Management (Score)']\nline_labels = ['Movie Theater', 'Sports Stadium', 'Amusement Park', 'Concert Hall']\ndata = np.array([[80,85,90,95],[60,65,70,75],[90,85,80,75],[85,80,75,70],[75,80,85,90]]).T\ndata = np.concatenate((data, data[:,0:1]),axis=1)\nangles = np.linspace(0, 2*np.pi, len(data_labels)+1, endpoint=True)\nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111, polar=True)\ncolor = ['b','r','y','g']\nfor i in range(len(data)):\n    ax.plot(angles, data[i], 'o-', linewidth=2, color=color[i], label=line_labels[i])\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\nax.set_rlim(0,100)\nlegend = ax.legend(loc='upper right', bbox_to_anchor=(1.25, 1))\nax.grid(True)\nplt.title('Entertainment and Sports Industry Performance Review', fontsize=20)\nplt.tight_layout()\nplt.savefig('./radar/png/8_202312262300.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the highest Customer Satisfaction score?",
            "output": "Movie Theater"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_45",
        "img": "./radar/png/radar_45.png",
        "topic": "Social Sciences and Humanities",
        "title": " Social Sciences and Humanities Performance - 2023",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Education (%) \\t 80 \\t 85 \\t 90 \\t 95 \\n Art (%) \\t 70 \\t 75 \\t 80 \\t 85 \\n Diversity (%) \\t 60 \\t 65 \\t 70 \\t 75 \\n Health (%) \\t 50 \\t 55 \\t 60 \\t 65 \\n Social Media (%) \\t 70 \\t 75 \\t 80 \\t 85 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates the performance in various Social Sciences and Humanities categories by percentage over four quarters in 2023. Education sees a steady increase from 80% in Q1 to 95% in Q4. Art also shows growth, starting at 70% in Q1 and reaching 85% by Q4. Diversity's performance improves from 60% in Q1 to 75% in Q4. Health category percentages climb from 50% in Q1 to 65% in Q4. Lastly, Social Media mirrors the trend in Art, starting at 70% in Q1 and increasing to 85% in Q4. Each category demonstrates a positive trend throughout the year."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\nline_labels = [\"Education (%)\", \"Art (%)\", \"Diversity (%)\", \"Health (%)\", \n               \"Social Media (%)\"]\ndata = np.array([[80, 85, 90, 95], \n                 [70, 75, 80, 85], \n                 [60, 65, 70, 75],\n                 [50, 55, 60, 65],\n                 [70, 75, 80, 85]])\n# append the first numerical element of that row to the end of that row  for close-loop plotting of data lines\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\n# Create figure and set the figsize\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, polar=True)\n\n# Set angles \nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\n# Iterate over each row in the data array\nfor i in range(len(data)):\n    # Set color for each line\n    ax.plot(angles, data[i], \n            linewidth=2, label=line_labels[i])\n    # Set the first element of the row to the last element, \n    # make the chart closed\n    ax.fill(angles, data[i], alpha=0.25)\n\n# Set radial limits\nax.set_rlim(0, 100)\n\n# Set the axis label\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\n\n# Get handles and labels\nhandles, labels = ax.get_legend_handles_labels()\n\n# Add legend\nax.legend(handles, labels, fontsize=14)\n\n# Draw background grids\nax.grid(True)\n\n# Setting the title\nax.set_title(\"Social Sciences and Humanities Performance - 2023\")\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save image\nplt.savefig(\"./radar/png_val/radar_45.png\")\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "By how much did the Education (%) score increase from Q1 to Q4?",
            "output": "15%"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_32",
        "img": "./radar/png/radar_32.png",
        "topic": "Healthcare and Health",
        "title": "Personality Evaluation Performance between Bob, Susan and Symbol",
        "csv": "Name \\t Responsibility \\t Career Development \\t Work-Life Balance \\t Leadership \\t Communication \\n susan \\t 6.93 \\t 8.11 \\t 5.45 \\t 7.45 \\t 7.14 \\n bob \\t 4.21 \\t 4.04 \\t 4.97 \\t 4.93 \\t 4.77 \\n Symbol \\t 7.45 \\t 9.63 \\t 7.11 \\t 8.54 \\t 9.03 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart provides an overview of the personality evaluation performance scores for three individuals named Susan, Bob, and Symbol across five categories: Responsibility, Career Development, Work-Life Balance, Leadership, and Communication. Susan scored 6.93, 8.11, 5.45, 7.45, and 7.14 respectively in each category. Bob received lower scores with 4.21, 4.04, 4.97, 4.93, and 4.77 respectively. Symbol attained higher scores as compared to the others, with 7.45, 9.63, 7.11, 8.54, and 9.03 in the respective categories."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = ['Responsibility', 'Career Development', 'Work-Life Balance', 'Leadership', 'Communication']\ndata_susan = [6.93, 8.11, 5.45, 7.45, 7.14]\ndata_bob = [4.21, 4.04, 4.97, 4.93, 4.77]\ndata_symbol = [7.45, 9.63, 7.11, 8.54, 9.03]\n\n# Create figure before plotting\nfig = plt.figure(figsize=(9, 9))\n\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\n# Iterate over each row in the data array and append the first element of that row to its end\ndata_susan = np.concatenate((data_susan, [data_susan[0]]))\ndata_bob = np.concatenate((data_bob, [data_bob[0]]))\ndata_symbol = np.concatenate((data_symbol, [data_symbol[0]]))\n\n# Plot the axis label\nax = plt.subplot(111, polar=True)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\n\n# Adjust the radial limits to accommodate the maximum of data\nax.set_rlim(-0.5, 10.0)\n\n# Plotting data\nax.plot(angles, data_susan, linewidth=2, linestyle='dashed', label='Susan')\nax.plot(angles, data_bob, linewidth=2, linestyle='dashed', label='Bob')\nax.plot(angles, data_symbol, linewidth=2, linestyle='solid', label='Symbol')\n\n# Plotting legend\nplt.legend(loc='upper right', bbox_to_anchor=(1.2, 1.1))\n\n# Resize the image\nplt.tight_layout()\n\n# Set xticks to prevent interpolation\nplt.xticks(angles[:-1], data_labels)\n\n# Save the image\nplt.savefig('./simulated_data_corner_cases/radar/png/multi_col_80042.png', dpi=200)\n\n# Clear the current image state\nplt.clf()"
        },
        "QA": {
            "input": "Who has the lowest score in Work-Life Balance?",
            "output": "Susan"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_47",
        "img": "./radar/png/radar_47.png",
        "topic": "Real Estate and Housing Market",
        "title": " Real Estate and Housing Market Trends - 2023",
        "csv": "Location \\t City A \\t City B \\t City C \\t City D \\n Population Growth \\t 2 \\t 4 \\t 6 \\t 8 \\n Average Home Price \\t 2 \\t 4 \\t 6 \\t 8 \\n Home Ownership Rate \\t 0.8 \\t 0.9 \\t 0.95 \\t 1 \\n Rental Market Demand \\t 3 \\t 6 \\t 9 \\t 12 \\n Vacancy Rate \\t 0.2 \\t 0.15 \\t 0.1 \\t 0.05 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart outlines various real estate and housing market metrics for four cities in 2023. It compares population growth, average home price, home ownership rate, rental market demand, and vacancy rate among City A, City B, City C, and City D. Population growth and average home price double incrementally from City A to City D, whereas the home ownership rate scales from 0.8 to 1.0. Rental market demand triples from City A to City D. City A has the highest vacancy rate at 0.2, decreasing to 0.05 in City D."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = ['Population Growth', 'Average Home Price', 'Home Ownership Rate', 'Rental Market Demand', 'Vacancy Rate']\nline_labels = ['City A', 'City B', 'City C', 'City D']\ndata = np.array([[2, 4, 6, 8], [2, 4, 6, 8], [0.8, 0.9, 0.95, 1], [3, 6, 9, 12], [0.2, 0.15, 0.1, 0.05]])\n\nangles = np.linspace(0, 2*np.pi, len(data_labels) + 1, endpoint=True)\ndata = np.concatenate((data, [data[0]]))\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(1, 1, 1, polar=True)\n\nfor i in range(len(data[0])):\n    ax.plot(angles, data[:, i], 'o-', linewidth=2, label=line_labels[i])\n    ax.fill(angles, data[:, i], alpha=0.25)\n    ax.set_rmax(max(data[:, i]) * 1.1)\n\nax.grid(True)\nax.spines['polar'].set_visible(True)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc='upper right', bbox_to_anchor=(1.2, 1))\nplt.title(\"Real Estate and Housing Market Trends - 2023\")\n\nplt.tight_layout()\nplt.savefig(\"./radar/png/23.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which city has the highest home ownership rate according to the data?",
            "output": "City D"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_29",
        "img": "./radar/png/radar_29.png",
        "topic": "Manufacturing and Production",
        "title": " Manufacturing and Production Performance Analysis",
        "csv": "Category \\t Factory A \\t Factory B \\t Factory C \\t Factory D \\t Factory E \\n Production Volume (Unit/hour) \\t 100 \\t 200 \\t 300 \\t 400 \\t 500 \\n Quality Control (Score) \\t 90 \\t 95 \\t 90 \\t 95 \\t 100 \\n Maintenance (Score) \\t 75 \\t 80 \\t 85 \\t 90 \\t 95 \\n Employee Efficiency (Score) \\t 85 \\t 90 \\t 95 \\t 100 \\t 105 \\n Cost Management (Score) \\t 70 \\t 65 \\t 60 \\t 55 \\t 60 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart presents a performance analysis of five factories, comparing factors including production volume, quality control, maintenance, employee efficiency, and cost management. Factory A's metrics are: production volume at 100 units/hour, quality control score of 90, maintenance score of 75, employee efficiency score of 85, and cost management score of 70. Factory B shows an increase across the board with production at 200 units/hour, quality control at 95, maintenance at 80, and employee efficiency at 90, yet a lower cost management score of 65. Factories C, D, and E continue this upward trend in all categories except for Factory E's cost management score, which is level with Factory C's score of 60."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels=[\"Production Volume (Unit/hour)\", \"Quality Control (Score)\", \"Maintenance (Score)\", \"Employee Efficiency (Score)\", \"Cost Management (Score)\"]\ndata = np.array([[100,200,300,400,500],\n                 [90,95,90,95,100],\n                 [75,80,85,90,95],\n                 [85,90,95,100,105],\n                 [70,65,60,55,60]])\nline_labels=[\"Factory A\",\"Factory B\",\"Factory C\",\"Factory D\",\"Factory E\"]\n\nangles=np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, polar=True)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\nax.set_ylim(0,600)\nax.set_title(\"Manufacturing and Production Performance Analysis\", fontsize=20, pad=20)\n\nfor i in range(len(data)):\n    ax.plot(angles, data[i], linewidth=3, label=line_labels[i])\n    ax.fill(angles, data[i], alpha=0.3)\n    ax.set_rlabel_position(0)\n    handles, labels = ax.get_legend_handles_labels()\n    ax.legend(handles, labels, loc='upper right', fontsize='x-large', bbox_to_anchor=(1.1, 1.1))\n\nplt.tight_layout()\nplt.savefig(\"./radar/png/30_202312262320.png\")\nplt.clf()"
        },
        "QA": {
            "input": "What is the Production Volume of Factory D?",
            "output": "400 Unit/hour"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_7",
        "img": "./radar/png/radar_7.png",
        "topic": "Social Sciences and Humanities",
        "title": " Social and Human Development - 2023",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Education (%) \\t 85 \\t 90 \\t 95 \\t 100 \\n Social Development (%) \\t 70 \\t 75 \\t 80 \\t 85 \\n Human Rights (%) \\t 80 \\t 85 \\t 90 \\t 95 \\n Arts and Culture (%) \\t 65 \\t 70 \\t 75 \\t 80 \\n Economic Equality (%) \\t 60 \\t 65 \\t 70 \\t 75 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates the progress in various sectors of social and human development throughout four quarters in 2023. Education shows a steady increase from 85% in Q1 to 100% in Q4. Social Development rises from 70% in Q1 to 85% in Q4, and Human Rights improves from 80% in Q1 to 95% in Q4. Arts and Culture, starting at 65% in Q1, grow to 80% in Q4. Economic Equality, the lowest-scoring category, begins at 60% in Q1 and climbs to 75% by Q4. Each sector displays positive growth over the year."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata_labels = [\"Q1\",\"Q2\",\"Q3\",\"Q4\"] \nline_labels = [\"Education (%)\",\"Social Development (%)\",\"Human Rights (%)\",\"Arts and Culture (%)\",\"Economic Equality (%)\"]\ndata = np.array([[85,90,95,100], [70,75,80,85], [80,85,90,95], [65,70,75,80], [60,65,70,75]])\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, polar=True)\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\nfor i in range(data.shape[0]):\n    ax.plot(angles, data[i], label=line_labels[i])\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\nax.set_rlim(0,100)\nax.set_title(\"Social and Human Development - 2023\", fontsize=20)\nlegend = ax.legend(line_labels, loc='lower right', bbox_to_anchor=(1.4, 0.2), fontsize=14)\nax.grid(True)\nplt.tight_layout()\nplt.savefig('./radar/png/27_202312262320.png')\nplt.clf()"
        },
        "QA": {
            "input": "Which category shows the smallest percentage increase from Q1 to Q4?",
            "output": "Economic Equality"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_49",
        "img": "./radar/png/radar_49.png",
        "topic": "Transportation and Logistics",
        "title": " Transportation & Logistics - 2021",
        "csv": "Category \\t Q1 \\t Q2 \\t Q3 \\t Q4 \\n Delivery Time (Days) \\t 2 \\t 3 \\t 4 \\t 5 \\n Cost Efficiency (%) \\t 65 \\t 70 \\t 75 \\t 80 \\n Customer Satisfaction (%) \\t 60 \\t 65 \\t 70 \\t 75 \\n Fleet Management (Score) \\t 75 \\t 80 \\t 85 \\t 90 \\n Logistics Efficiency (Score) \\t 80 \\t 85 \\t 90 \\t 95 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates the performance of transportation and logistics across five categories throughout four quarters of 2021. Delivery Time increased from 2 days in Q1 to 5 days in Q4. Cost Efficiency and Customer Satisfaction showed a steady improvement each quarter, starting from 65% and 60% in Q1 to 80% and 75% in Q4, respectively. Fleet Management and Logistics Efficiency also displayed consistent growth; their scores rose quarter by quarter from 75 to 90 and from 80 to 95, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = ['Q1', 'Q2', 'Q3', 'Q4']\nline_labels = ['Delivery Time (Days)', 'Cost Efficiency (%)', 'Customer Satisfaction (%)', 'Fleet Management (Score)', 'Logistics Efficiency (Score)']\ndata = [[2, 3, 4, 5], [65, 70, 75, 80], [60, 65, 70, 75], [75, 80, 85, 90], [80, 85, 90, 95]]\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111, polar=True)\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\nfor i, line in enumerate(data):\n    line.append(line[0])\n    ax.plot(angles, line, 'o-', linewidth=2, label=line_labels[i])\n    ax.fill(angles, line, alpha=0.25)\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\nax.set_rlim(0, np.max(data)+5)\nhandles, labels = ax.get_legend_handles_labels()\nlegend = ax.legend(handles, labels, loc='upper right', bbox_to_anchor=(1.4, 1.1))\nplt.title('Transportation & Logistics - 2021', va='bottom', fontsize=16)\nplt.tight_layout()\nplt.savefig('./radar/png/10_202312262150.png')\nplt.clf()"
        },
        "QA": {
            "input": "What is the increase in Customer Satisfaction from Q1 to Q4?",
            "output": "15%"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_2",
        "img": "./radar/png/radar_2.png",
        "topic": "Law and Legal Affairs",
        "title": " Law and Legal Affairs Performance Analysis - 2023",
        "csv": "Category \\t Employment Law \\t Family Law \\t Criminal Law \\t Tax Law \\t Civil Law \\n Number of Cases (k) \\t 35 \\t 21 \\t 47 \\t 59 \\t 82 \\n Number of Practitioners (k) \\t 12 \\t 25 \\t 32 \\t 45 \\t 56 \\n Percentage of Successful Cases (%) \\t 50 \\t 60 \\t 70 \\t 80 \\t 90 \\n Average Legal Fees (USD/h) \\t 210 \\t 220 \\t 240 \\t 260 \\t 280 \\n Percentage of Disputes Solved (%) \\t 20 \\t 30 \\t 40 \\t 50 \\t 60 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This radar chart illustrates various metrics related to the performance of different law categories in 2023. The categories include Employment, Family, Criminal, Tax, and Civil Law. Each spoke of the radar represents a different metric: number of cases in thousands, number of practitioners in thousands, percentage of successful cases, average legal fees in USD per hour, and percentage of disputes solved. For instance, Employment Law has 35k cases, 12k practitioners, a 50% success rate, $210 average fees, and resolves 20% of disputes."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Transform the given data into three variables: data_labels, data, line_labels\ndata_labels = ['Employment Law', 'Family Law', 'Criminal Law', 'Tax Law', 'Civil Law']\ndata = np.array([[35,21,47,59,82],\n                 [12,25,32,45,56],\n                 [50,60,70,80,90],\n                 [210,220,240,260,280],\n                 [20,30,40,50,60]])\nline_labels = ['Number of Cases (k)', 'Number of Practitioners (k)', \n               'Percentage of Successful Cases (%)', 'Average Legal Fees (USD/h)',\n               'Percentage of Disputes Solved (%)']\n\n# Plot the data with the type of radar chart, i.e., set 'polar=True'\nfig = plt.figure()\nax = fig.add_subplot(111, polar=True)\n\n# Create figure before plotting, i.e., add_subplot() follows plt.figure()\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\n# Iterate over each row in the data array, append the first numerical element of that row\n# to the end of that row for close-loop plotting of data lines\nfor i in range(len(data)):\n    ax.plot(angles, data[i], label=line_labels[i], linewidth=1.5, color='C' + str(i))\n\n# Evenly space the axes for the number of data points\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\n\n# Adjust the radial limits to accommodate the maximum of data\nax.set_rlim(-0.5, np.max(data) + 0.5)\n\n# Plot the axis label by using set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\nax.get_legend_handles_labels()\nplt.legend(loc='upper right')\n\n# Drawing techniques such as background grids can be used\nax.grid(True)\n\n# The title of the figure should be Law and Legal Affairs Performance Analysis - 2023\nplt.title('Law and Legal Affairs Performance Analysis - 2023')\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# The image must be saved as ./radar/png/17_202312262320.png\nplt.savefig('./radar/png/17_202312262320.png')\n\n# Clear the current image state at the end of the code\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the highest number of cases?",
            "output": "Civil Law"
        }
    },
    {
        "chart_type": "radar",
        "imgname": "radar_30",
        "img": "./radar/png/radar_30.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Nonprofit and Charity Performance Evaluation",
        "csv": "Category \\t Donations (%) \\t Volunteering (%) \\t Fundraising (%) \\t Grants (%) \\t Public Awareness (%) \\n Red Cross \\t 90 \\t 80 \\t 75 \\t 65 \\t 60 \\n UNICEF \\t 95 \\t 90 \\t 85 \\t 80 \\t 75 \\n World Vision \\t 80 \\t 70 \\t 65 \\t 60 \\t 55 \\n Oxfam \\t 85 \\t 75 \\t 70 \\t 65 \\t 60 \\n Greenpeace \\t 90 \\t 85 \\t 80 \\t 75 \\t 70 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The radar chart illustrates the performance evaluation of five nonprofit and charity organizations across five categories: Donations, Volunteering, Fundraising, Grants, and Public Awareness. Red Cross shows percentages in the range of 60-90%, with UNICEF scoring higher in all categories ranging from 75% to 95%. World Vision's performance is depicted with lower percentages, between 55% and 80%. Oxfam's results are moderately higher than World Vision's, presenting percentages from 60% to 85%. Greenpeace has percentages spanning from 70% in Public Awareness up to 90% in Donations."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata_labels = [\"Donations (%)\", \"Volunteering (%)\", \"Fundraising (%)\", \"Grants (%)\", \"Public Awareness (%)\"]\nline_labels = [\"Red Cross\", \"UNICEF\", \"World Vision\", \"Oxfam\", \"Greenpeace\"]\ndata = np.array([[90, 80, 75, 65, 60], [95, 90, 85, 80, 75], [80, 70, 65, 60, 55], [85, 75, 70, 65, 60], [90, 85, 80, 75, 70]])\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\nfig = plt.figure(figsize=(7, 7))\nax = fig.add_subplot(111, polar=True)\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\nax.plot(angles, data[0], 'o-', c='#1f77b4', label=line_labels[0])\nax.plot(angles, data[1], 'o-', c='#ff7f0e', label=line_labels[1])\nax.plot(angles, data[2], 'o-', c='#2ca02c', label=line_labels[2])\nax.plot(angles, data[3], 'o-', c='#d62728', label=line_labels[3])\nax.plot(angles, data[4], 'o-', c='#9467bd', label=line_labels[4])\n\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\nax.set_ylim(0, 100)\n\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles, labels, loc='lower left', bbox_to_anchor=(-0.1, -0.4), ncol=3)\n\nax.yaxis.grid(True)\n\nplt.title(\"Nonprofit and Charity Performance Evaluation\")\nplt.tight_layout()\nplt.savefig(\"./radar/png/33_202312262320.png\")\nplt.clf()"
        },
        "QA": {
            "input": "Which category has the highest percentage for Greenpeace?",
            "output": "Donations (%)"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "225",
        "img": "./treemap/png/225.png",
        "topic": "Tourism and Hospitality",
        "title": " Percentage Distribution of Revenue in the Tourism and Hospitality Industry",
        "csv": "Travel Sector \\t Percentage \\n Accommodation \\t 30 \\n Food Services \\t 25 \\n Travel Agencies \\t 15 \\n Leisure Activities \\t 10 \\n Transportation \\t 10 \\n Tourism Marketing \\t 5 \\n Convention Services \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the percentage distribution of revenue within the tourism and hospitality industry across various sectors. Accommodation makes up 30% of industry revenue, followed by food services at 25%. Travel agencies account for 15%, while both leisure activities and transportation comprise 10% each. Smaller segments include tourism marketing and convention services, each making up 5% of the total revenue."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Parsing the input data\nraw_data = \"\"\"Travel Sector,Revenue Contribution (%)\nAccommodation,30\nFood Services,25\nTravel Agencies,15\nLeisure Activities,10\nTransportation,10\nTourism Marketing,5\nConvention Services,5\"\"\"\n\n# Split the input data into lines\nlines = raw_data.split('\\n')\n\n# Extract data and labels from the input data\ndata_labels = lines[0].split(',')[1:] \nline_labels = [line.split(',')[0] for line in lines[1:]]\ndata = [float(line.split(',')[1]) for line in lines[1:]]\n\n# Draw the treemap\nplt.figure(figsize=(12, 8))\nsquarify.plot(sizes=data, label=line_labels, alpha=0.8, text_kwargs={'fontsize':9, 'wrap':True})\n\n# Add title and remove axes\nplt.title('Percentage Distribution of Revenue in the Tourism and Hospitality Industry')\nplt.axis('off')\n\n# Automatically resize the image and save the figure\nplt.tight_layout()\nplt.savefig('./plotchart/data_300/treemap/png/225.png', format='png')\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "What percentage of the revenue is contributed by Food Services in the tourism and hospitality industry?",
            "output": "25%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "214",
        "img": "./treemap/png/214.png",
        "topic": "Manufacturing and Production",
        "title": " Proportional Distribution of Manufacturing Production Volume by Product Type",
        "csv": "Product Type \\t Percentage \\n Electronics \\t 22 \\n Automobiles \\t 20 \\n Pharmaceuticals \\t 18 \\n Heavy Machinery \\t 15 \\n Food & Beverages \\t 10 \\n Textiles \\t 8 \\n Plastics \\t 4 \\n Paper Products \\t 3 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the proportional distribution of manufacturing production volume by product type. Electronics account for 22% of the production volume. In close comparison, automobiles represent 20%, while pharmaceuticals comprise 18%. Heavy machinery makes up 15%, followed by food & beverages at 10%. Textiles are at 8%, plastics at 4%, and paper products at 3%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport os\n\n# Define the data\ndata_labels = [\"Product Type\", \"Production Volume (%)\"]\nline_labels = [\"Electronics\", \"Automobiles\", \"Pharmaceuticals\", \"Heavy Machinery\",\n               \"Food & Beverages\", \"Textiles\", \"Plastics\", \"Paper Products\"]\ndata = [22, 20, 18, 15, 10, 8, 4, 3]\n\n# Transform data into a dictionary for easier processing with Plotly\ndata_dict = {\"Product Type\": line_labels, \"Production Volume (%)\": data}\n\n# Create a DataFrame from the dictionary\nimport pandas as pd\ndf = pd.DataFrame(data_dict)\n\n# Create the treemap\nfig = px.treemap(df, path=[\"Product Type\"], values=\"Production Volume (%)\",\n                 title='Proportional Distribution of Manufacturing Production Volume by Product Type',\n                 color=\"Production Volume (%)\",\n                 color_continuous_scale='RdBu',\n                 range_color=[0, max(data)])\n\n# Customize figure layout\nfig.update_layout(margin=dict(l=10, r=10, t=30, b=10))\n\n# Define the file path\nfile_path = './plotchart/data_300/treemap/png/214.png'\nos.makedirs(os.path.dirname(file_path), exist_ok=True)\n\n# Save the figure\nfig.write_image(file_path)\n\n# Clear the current image state to prevent interference with other plots (if necessary)\nfig.data = []\n"
        },
        "QA": {
            "input": "What is the combined percentage of the pharmaceuticals and heavy machinery sectors?",
            "output": "33%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "60",
        "img": "./treemap/png/60.png",
        "topic": "Charity and Nonprofit Organizations",
        "title": " Funding Sources Distribution Among Charity Sectors",
        "csv": "Organization Type \\t Percentage \\n Health Services \\t 22 \\n Educational Programs \\t 18 \\n Environmental Causes \\t 15 \\n Disaster Relief \\t 13 \\n Human Rights \\t 12 \\n Arts and Culture \\t 10 \\n Animal Welfare \\t 5 \\n Research and Development \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This treemap illustrates the distribution of funding sources among various charity sectors. Health Services receive the highest percentage at 22%, followed by Educational Programs at 18%. Environmental Causes are next at 15% with Disaster Relief just behind at 13%. Human Rights initiatives are funded at 12%, while Arts and Culture receive 10%. Animal Welfare and Research and Development sectors share the smallest portion, both at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport os\n\n# Data preparation\ndata_labels = [\"Funding Source (%)\"]\nline_labels = [\"Health Services\", \"Educational Programs\", \"Environmental Causes\", \"Disaster Relief\", \"Human Rights\", \"Arts and Culture\", \"Animal Welfare\", \"Research and Development\"]\ndata = [22, 18, 15, 13, 12, 10, 5, 5]\n\n# Creating the parent path if it doesn't exist\nsave_path = \"./plotchart/data_300/treemap/png\"\nos.makedirs(save_path, exist_ok=True)\n\n# Combine the data into one dataframe-like structure for Plotly\nfull_data = {\n    'labels': line_labels,\n    'values': data\n}\n\n# Create the treemap\nfig = px.treemap(\n    full_data,\n    path=['labels'],\n    values='values',\n    title='Funding Sources Distribution Among Charity Sectors',\n    color='values'\n)\n\n# Update layout for aesthetics\nfig.update_layout(\n    margin = dict(t=50, l=25, r=25, b=25)\n)\n\n# Save the figure\nfig.write_image(f\"{save_path}/60.png\")\n"
        },
        "QA": {
            "input": "What percentage of funding is going toward Environmental Causes?",
            "output": "15%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "159",
        "img": "./treemap/png/159.png",
        "topic": "Healthcare and Health",
        "title": " Percentage Distribution of Healthcare Expenditure Across Health Sectors",
        "csv": "Health Sector \\t Percentage \\n Hospital Services \\t 30 \\n Pharmaceuticals \\t 22 \\n Outpatient Care \\t 18 \\n Dental Services \\t 12 \\n Nursing Home Care \\t 8 \\n Preventive Care \\t 5 \\n Administration \\t 3 \\n Medical Equipment \\t 2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the percentage distribution of healthcare expenditure across various health sectors. Hospital services account for the largest share at 30%, followed by pharmaceuticals at 22%. Outpatient care represents 18%, while dental services make up 12%. Nursing home care and preventive care are smaller segments at 8% and 5%, respectively. Administration costs constitute 3% of the expenditure, and the share for medical equipment is the smallest at 2%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport os\n\n# Data transformation\nraw_data = \"\"\"\nHospital Services,30\nPharmaceuticals,22\nOutpatient Care,18\nDental Services,12\nNursing Home Care,8\nPreventive Care,5\nAdministration,3\nMedical Equipment,2\n\"\"\"\n\n# Split the data into lines and then into labels and values\nlines = raw_data.strip().split('\\n')\ndata_labels = ['Health Sector', 'Expenditure (%)']\nline_labels = [line.split(',')[0] for line in lines]\ndata_values = [float(line.split(',')[1]) for line in lines]\n\n# Create a DataFrame for visualization\nimport pandas as pd\ndf = pd.DataFrame(list(zip(line_labels, data_values)), columns=data_labels)\n\n# Create the treemap\nfig = px.treemap(df, path=['Health Sector'], values='Expenditure (%)',\n                 title='Percentage Distribution of Healthcare Expenditure Across Health Sectors',\n                 color='Expenditure (%)', color_continuous_scale='RdBu')\n\n# Update layout for better label visibility\nfig.update_traces(textinfo='label+value', textfont_size=15)\nfig.update_layout(uniformtext=dict(minsize=10, mode='hide'))\n\n# Define the save path\nsave_path = './plotchart/data_300/treemap/png/'\nos.makedirs(save_path, exist_ok=True)  # This creates the directory if it does not exist\n\n# Save the figure\nfig.write_image(f\"{save_path}159.png\")\n\n# Clear the figure (not strictly necessary in a standalone script, used here for completeness)\nfig.data = []\n"
        },
        "QA": {
            "input": "What percentage of healthcare expenditure is spent on Outpatient Care?",
            "output": "18%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "148",
        "img": "./treemap/png/148.png",
        "topic": "Social Media and the Web",
        "title": " Social Media Usage Distribution Across Platforms",
        "csv": "Platform \\t Percentage \\n Facebook \\t 27 \\n YouTube \\t 21 \\n WhatsApp \\t 18 \\n Instagram \\t 12 \\n Twitter \\t 9 \\n TikTok \\t 8 \\n LinkedIn \\t 3 \\n Snapchat \\t 2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the distribution of social media usage across various platforms. Facebook leads with a 27% share, closely followed by YouTube at 21%, and WhatsApp at 18%. Instagram holds a 12% share, whereas Twitter accounts for 9%. TikTok follows with an 8% share, LinkedIn at 3%, and Snapchat has the smallest share at 2%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.graph_objects as go\nimport os\n\n# Raw data for visualization\nraw_data = \"\"\"Platform,Usage Share (%)\nFacebook,27\nYouTube,21\nWhatsApp,18\nInstagram,12\nTwitter,9\nTikTok,8\nLinkedIn,3\nSnapchat,2\"\"\"\n\n# Since we only have a single column of numerical data, we will ignore data_labels and line_labels as there's no need for them.\ndata_labels = \"Usage Share (%)\"\nline_labels = [line.split(',')[0] for line in raw_data.strip().split('\\n')[1:]]\ndata = [int(line.split(',')[1]) for line in raw_data.strip().split('\\n')[1:]]\n\n# Create a treemap with plotly\nfig = go.Figure(go.Treemap(\n    labels=line_labels,\n    values=data,\n    parents=[\"\"] * len(data),\n    textinfo=\"label+value+percent parent\",\n))\n\nfig.update_layout(\n    margin=dict(t=0, l=0, r=0, b=0),\n    title_text=\"Social Media Usage Distribution Across Platforms\",\n)\n\n# Define the image save path\nsave_path = \"./plotchart/data_300/treemap/png/148.png\"\nos.makedirs(os.path.dirname(save_path), exist_ok=True)\n\n# Save the figure\nfig.write_image(save_path)\n\n# Clear current figure (relevant if using matplotlib)\n# plt.clf() or plt.close() if matplotlib was used; with plotly, it's not required\n\n"
        },
        "QA": {
            "input": "How much more percentage usage does YouTube have compared to Instagram?",
            "output": "9%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "8",
        "img": "./treemap/png/8.png",
        "topic": "Science and Engineering",
        "title": " Allocation of Research Funding Across Scientific and Engineering Fields",
        "csv": "Field \\t Percentage \\n Space Exploration \\t 22 \\n Biotechnology \\t 18 \\n Renewable Energy \\t 15 \\n Artificial Intelligence \\t 14 \\n Materials Science \\t 11 \\n Electronics \\t 10 \\n Earth Sciences \\t 8 \\n Mechanical Engineering \\t 2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the allocation of research funding across various scientific and engineering fields. Space Exploration receives the largest share with 22%, followed by Biotechnology at 18%, and Renewable Energy at 15%. Artificial Intelligence accounts for 14%, while Materials Science and Electronics receive 11% and 10%, respectively. Earth Sciences is allocated 8%, and the smallest portion goes to Mechanical Engineering with 2%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "# Import the necessary libraries\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# Transform the provided data\ndata_labels = ['Research Funding (%)']\nline_labels = ['Space Exploration', 'Biotechnology', 'Renewable Energy', 'Artificial Intelligence', \n               'Materials Science', 'Electronics', 'Earth Sciences', 'Mechanical Engineering']\ndata = [22, 18, 15, 14, 11, 10, 8, 2]\n\n# Prepare the dataframe for the plotly treemap\nimport pandas as pd\ndf = pd.DataFrame(zip(line_labels, data), columns=['Field', 'Funding'])\n\n# Create a treemap using plotly\nfig = px.treemap(df, path=['Field'], values='Funding', title='Allocation of Research Funding Across Scientific and Engineering Fields')\n\n# Update treemap looks here if needed (colors, rounded corners, etc.)\nfig.update_traces(textinfo='label+value', textfont_size=14)\n\n# Save the figure as an image\nsave_path = './plotchart/chart_simulation_final/treemap/png/8.png'\nfig.write_image(save_path)\n\n# To clear the current image state, if you were using matplotlib you would use:\n# plt.clf()\n# Since we are using plotly, the figure object is not stateful in the same way, so you do not need to clear it explicitly.\n"
        },
        "QA": {
            "input": "What percentage of the total research funding is allocated to Artificial Intelligence?",
            "output": "14%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "38",
        "img": "./treemap/png/38.png",
        "topic": "Business and Finance",
        "title": " Market Share Distribution Among Financial Sectors in 2023",
        "csv": "Financial Sector \\t Percentage \\n Banking \\t 30 \\n Insurance \\t 20 \\n Investments \\t 25 \\n Real Estate \\t 15 \\n Fintech \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the market share distribution among various financial sectors in 2023. Banking holds a 30% market share, while Insurance represents 20%. Investments have a 25% share. Real Estate and Fintech sectors account for smaller portions, at 15% and 10% respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport os\n\n# Convert the given data into the required format\ndata_labels = ['Banking', 'Insurance', 'Investments', 'Real Estate', 'Fintech']\nline_labels = [\"Market Share (%)\"]\ndata = [30, 20, 25, 15, 10]\n\n# Create a DataFrame for the treemap data\nimport pandas as pd\ndf = pd.DataFrame(list(zip(data_labels, data)), columns=['Financial Sector', 'Market Share (%)'])\n\n# Create the treemap\nfig = px.treemap(df, path=['Financial Sector'], values='Market Share (%)',\n                 title='Market Share Distribution Among Financial Sectors in 2023')\n\n# Customizations\nfig.update_traces(textinfo=\"label+percent entry\")\nfig.update_layout(margin=dict(t=50, l=25, r=25, b=25))\n\n# Ensure the directory exists\nimage_dir = './plotchart/data_300/treemap/png'\nos.makedirs(image_dir, exist_ok=True)\n\n# Save the figure\nfig.write_image(os.path.join(image_dir, \"38.png\"))\n\n# Clear the figure (unused in plotly, added for the completeness of the instructions)\nfig = None\n"
        },
        "QA": {
            "input": "How much larger is the Banking sector's market share compared to Real Estate's in 2023?",
            "output": "15%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "243",
        "img": "./treemap/png/243.png",
        "topic": "Food and Beverage Industry",
        "title": " Market Share Distribution Within the Food and Beverage Industry",
        "csv": "Category \\t Percentage \\n Dairy Products \\t 22 \\n Bakery and Snack Foods \\t 17 \\n Beverages \\t 20 \\n Meat and Poultry \\t 18 \\n Seafood \\t 8 \\n Confectionery \\t 7 \\n Grains and Cereals \\t 5 \\n Frozen Foods \\t 3 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap chart demonstrates the market share distribution for various categories within the Food and Beverage industry. Dairy Products lead with a 22% share. Trailing are Bakery and Snack Foods at 17%, Beverages at 20%, and Meat and Poultry at 18%. Seafood holds an 8% share, while Confectionery accounts for 7%. Grains and Cereals represent 5%, and Frozen Foods make up the smallest share at 3%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport plotly.graph_objects as go\nimport os\n\n# Provided data\ndata_labels = [\"Dairy Products\", \"Bakery and Snack Foods\", \"Beverages\", \n               \"Meat and Poultry\", \"Seafood\", \"Confectionery\", \n               \"Grains and Cereals\", \"Frozen Foods\"]\nline_labels = [\"Market Share (%)\"]\ndata = [[22, 17, 20, 18, 8, 7, 5, 3]]\n\n# Transform data into the right format for a treemap\ndf = {\"Category\": data_labels, \"Market Share (%)\": data[0]}\n\n# Create a treemap\nfig = px.treemap(df, path=['Category'], values='Market Share (%)', \n                 title='Market Share Distribution Within the Food and Beverage Industry')\n\n# Customize figure\nfig.update_traces(textinfo=\"label+percent entry\")\nfig.update_layout(treemapcolorway=[\"#636EFA\", \"#EF553B\", \"#00CC96\", \"#AB63FA\", \n                                   \"#FFA15A\", \"#19D3F3\", \"#FF6692\", \"#B6E880\"],\n                  title_font_size=24)\n\n# The path where the image will be saved\nsave_path = './plotchart/data_300/treemap/png/1019.png'\n\n# Ensure the directory exists\nos.makedirs(os.path.dirname(save_path), exist_ok=True)\n\n# Save the figure\nfig.write_image(save_path)\n\n# Clear figure to avoid residual plots in the current session\nfig.data = []\n"
        },
        "QA": {
            "input": "What percentage of the market share does \"Bakery and Snack Foods\" hold?",
            "output": "17%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "240",
        "img": "./treemap/png/240.png",
        "topic": "Agriculture and Food Production",
        "title": " Percentage Distribution of Global Agriculture Production by Crop Type",
        "csv": "Crop Type \\t Percentage \\n Cereals \\t 30 \\n Vegetables \\t 20 \\n Fruits \\t 20 \\n Meat \\t 15 \\n Dairy \\t 10 \\n Oils & Fats \\t 3 \\n Sugar Crops \\t 2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the percentage distribution of global agricultural production by crop type. Cereals lead with 30% of the production share. Vegetables and fruits each account for 20%. Meat contributes 15%, while dairy products represent 10% of the production. Oils & fats and sugar crops have smaller shares at 3% and 2%, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport os\n\n# Data formatted as given in the prompt\ndata_str = \"\"\"Crop Type,Production Volume (%)\nCereals,30\nVegetables,20\nFruits,20\nMeat,15\nDairy,10\nOils & Fats,3\nSugar Crops,2\"\"\"\n\n# Process the string data\nlines = data_str.split(\"\\n\")\ndata_labels = lines[0].split(\",\")[1:]  # Assumes only one label after 'Crop Type'\nline_labels = [line.split(\",\")[0] for line in lines[1:]]\ndata = [int(line.split(\",\")[1]) for line in lines[1:]]\n\n# Create a DataFrame\nimport pandas as pd\ndf = pd.DataFrame({\n    'Crop Type': line_labels,\n    'Production Volume (%)': data\n})\n\n# Create a treemap using plotly\nfig = px.treemap(df, path=['Crop Type'], values='Production Volume (%)',\n                 title='Percentage Distribution of Global Agriculture Production by Crop Type')\n\n# Enhance treemap appearance\nfig.update_traces(textinfo=\"label+percent entry\")\nfig.update_layout(margin=dict(t=50, l=25, r=25, b=25))\n\n# Define the save path\nsave_path = './plotchart/data_300/treemap/png/240.png'\n# Create directories if they don't exist\nos.makedirs(os.path.dirname(save_path), exist_ok=True)\n\n# Save the figure\nfig.write_image(save_path)\n\n# No current image state to clear when using plotly\n"
        },
        "QA": {
            "input": "Which crop type has the lowest percentage distribution in global agricultural production?",
            "output": "Sugar Crops"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "235",
        "img": "./treemap/png/235.png",
        "topic": "Retail and E-commerce",
        "title": " E-commerce Sales Distribution Across Product Categories",
        "csv": "Product Category \\t Percentage \\n Electronics \\t 27 \\n Clothing \\t 20 \\n Home & Garden \\t 15 \\n Health & Beauty \\t 13 \\n Food & Groceries \\t 10 \\n Books & Media \\t 7 \\n Toys & Games \\t 5 \\n Pet Supplies \\t 3 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This treemap illustrates the distribution of e-commerce sales across various product categories. Electronics dominate with 27%, followed by Clothing at 20%, Home & Garden at 15%, and Health & Beauty with 13%. Lesser shares include Food & Groceries at 10%, Books & Media at 7%, Toys & Games at 5%, and Pet Supplies at a minimal 3%. The visual representation allows for an easy comparison between categories, highlighting their respective percentages in e-commerce sales."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Given data, converted to variables\ndata_labels = [\"Online Sales (%)\"]\nline_labels = [\"Electronics\", \"Clothing\", \"Home & Garden\", \"Health & Beauty\", \"Food & Groceries\", \"Books & Media\", \"Toys & Games\", \"Pet Supplies\"]\ndata = [27, 20, 15, 13, 10, 7, 5, 3]\n\n# Define colors\ncmap = plt.cm.coolwarm\nmini = min(data)\nmaxi = max(data)\nnorm = plt.Normalize(vmin=mini, vmax=maxi)\ncolors = [cmap(norm(value)) for value in data]\n\n# Determine the size of the figure to prevent content from overlapping\nfig = plt.figure(figsize=(12, 8))\n\n# Create a treemap\nsquarify.plot(sizes=data, label=line_labels, color=colors, alpha=0.7, edgecolor=\"white\", text_kwargs={'fontsize':10})\n\nplt.title(\"E-commerce Sales Distribution Across Product Categories\")\nplt.axis('off')  # Disable the axis\n\n# Resize the image to fit all text and labels\nplt.tight_layout()\n\n# Save the image to the absolute path\nsave_path = \"./plotchart/data_300/treemap/png/235.png\"\nplt.savefig(save_path, format='png', dpi=300, bbox_inches='tight')\n\n# Clear the current figure after saving to prevent collisions with other plots\nplt.clf()\n"
        },
        "QA": {
            "input": "What is the combined percentage of Clothing and Home & Garden categories?",
            "output": "35%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "68",
        "img": "./treemap/png/68.png",
        "topic": "Real Estate and Housing Market",
        "title": " Real Estate Market Composition by Housing Segment",
        "csv": "Real Estate Segment \\t Percentage \\n Single-Family Homes \\t 30 \\n Apartments \\t 25 \\n Condominiums \\t 20 \\n Commercial Properties \\t 15 \\n Rental Markets \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap provides a visual representation of the real estate market composition by housing segment. Single-Family Homes comprise 30% of the market, followed by Apartments at 25%. Condominiums make up 20%, with Commercial Properties accounting for 15%. Rental Markets represent the smallest segment at 10%. Each segment's size is proportional to its market share percentage."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport plotly.graph_objects as go\n\n# Define the data\ndata_str = \"\"\"Real Estate Segment,Market Share (%)\nSingle-Family Homes,30\nApartments,25\nCondominiums,20\nCommercial Properties,15\nRental Markets,10\"\"\"\n\n# Parse the data\ndata_lines = data_str.split('\\n')\ndata_labels = data_lines[0].split(',')[1:]\nline_labels = [line.split(',')[0] for line in data_lines[1:]]\ndata = [float(line.split(',')[1]) for line in data_lines[1:]]\n\n# Transform into a suitable structure for the treemap\ndf = pd.DataFrame({\n    'segment': line_labels,\n    'market_share': data\n})\n\n# Create the treemap\nfig = px.treemap(df, path=['segment'], values='market_share',\n                 title='Real Estate Market Composition by Housing Segment')\n\n# Customizing the treemap for aesthetics\nfig.update_traces(textinfo='label+percent entry', marker=dict(line=dict(width=1)))\nfig.update_layout(uniformtext=dict(minsize=10), title_font_size=24)\n\n# Save the figure to the specified file\nfig.write_image(\"./plotchart/data_300/treemap/png/68.png\")\n\n# Clear the current image state (not needed as it is being saved to a file)\n"
        },
        "QA": {
            "input": "How much more is the percentage of Single-Family Homes compared to Rental Markets in the housing segments?",
            "output": "20%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "111",
        "img": "./treemap/png/111.png",
        "topic": "Social Media and the Web",
        "title": " Percentage Usage Share of Social Media and Web Platforms in 2023",
        "csv": "Platform \\t Percentage \\n Facebook \\t  27 \\n YouTube \\t  20 \\n WhatsApp \\t  15 \\n Instagram \\t  14 \\n WeChat \\t  10 \\n TikTok \\t  7 \\n Twitter \\t  4 \\n LinkedIn \\t  2 \\n Snapchat \\t  1 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the percentage usage share of various social media and web platforms in 2023. Facebook leads with a 27% share, followed by YouTube at 20%, WhatsApp with 15%, and Instagram holding 14%. WeChat accounts for 10%, whereas TikTok has a 7% share. Twitter and LinkedIn have smaller usage shares at 4% and 2%, respectively, with Snapchat at 1%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport os\n\n# Data provided\ndata = [\n    [\"Facebook\", 27],\n    [\"YouTube\", 20],\n    [\"WhatsApp\", 15],\n    [\"Instagram\", 14],\n    [\"WeChat\", 10],\n    [\"TikTok\", 7],\n    [\"Twitter\", 4],\n    [\"LinkedIn\", 2],\n    [\"Snapchat\", 1]\n]\n\n# Split the data into labels and values\ndata_labels = [row[0] for row in data]\nusage_share = [row[1] for row in data]\n\n# Constructing a dataframe for the treemap\nimport pandas as pd\ndf = pd.DataFrame({'Platform': data_labels, 'Usage Share (%)': usage_share})\n\n# Create and style the treemap\nfig = px.treemap(df, path=['Platform'], values='Usage Share (%)', title='Percentage Usage Share of Social Media and Web Platforms in 2023')\n\n# Update layout for clearer text display\nfig.update_layout(treemapcolorway = [\"#636EFA\",\"#EF553B\",\"#00CC96\",\"#AB63FA\",\"#FFA15A\",\"#19D3F3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\"],\n                  margin=dict(t=50, l=25, r=25, b=25))\n\n# Define path for saving the figure\nsave_path = './plotchart/data_300/treemap/png/111.png'\nos.makedirs(os.path.dirname(save_path), exist_ok=True)\n\n# Save the figure\nfig.write_image(save_path)\n\n# Print out the path to the saved image for confirmation\nprint(f\"Image saved to: {save_path}\")\n"
        },
        "QA": {
            "input": "What is the combined percentage share of TikTok, Twitter, LinkedIn, and Snapchat?",
            "output": "14%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "109",
        "img": "./treemap/png/109.png",
        "topic": "Transportation and Logistics",
        "title": " Market Share Distribution in Transportation and Logistics Sector",
        "csv": "Transportation Mode \\t Percentage \\n Road \\t 40 \\n Rail \\t 20 \\n Sea \\t 15 \\n Air \\t 15 \\n Pipeline \\t 5 \\n Intermodal \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the market share distribution among different transportation modes in the Transportation and Logistics sector. Road transportation leads with a 40% share, followed by Rail at 20%, and both Sea and Air at 15% each. Pipeline and Intermodal each hold a smaller portion of the market, standing at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport plotly.graph_objects as go\n\n# Given data\ndata_str = \"\"\"Transportation Mode,Logistics Share (%)\nRoad,40\nRail,20\nSea,15\nAir,15\nPipeline,5\nIntermodal,5\"\"\"\n\n# Parsing the data into variables\nlines = data_str.split('\\n')\ndata_labels = lines[0].split(',')[1:]  # ['Logistics Share (%)']\nline_labels = [line.split(',')[0] for line in lines[1:]]  # ['Road', 'Rail', 'Sea', 'Air', 'Pipeline', 'Intermodal']\ndata = [float(line.split(',')[1]) for line in lines[1:]]  # [40, 20, 15, 15, 5, 5]\n\n# Combine the label and data to create a DataFrame suitable for a treemap\nimport pandas as pd\ndf = pd.DataFrame({'Transportation Mode': line_labels, 'Logistics Share (%)': data})\n\n# Create the treemap\nfig = px.treemap(df, path=['Transportation Mode'], values='Logistics Share (%)',\n                 title='Market Share Distribution in Transportation and Logistics Sector')\n\n# Update layout for readability\nfig.update_layout(treemapcolorway=[\"#636EFA\", \"#EF553B\", \"#00CC96\", \"#AB63FA\", \"#FFA15A\", \"#19D3F3\"],\n                  margin=dict(t=20, l=20, r=20, b=20))\n\n# Save the figure\nfilepath = './plotchart/data_300/treemap/png/109.png'\nfig.write_image(filepath)\n\n# Clear the current figure state\nfig.data = []\n\n# Please note that the actual file system and directory structure may differ.\n# The above path is used as per the instructions. Please make sure that the\n# ./plotchart/data_300/treemap/png/ directory exists and is writable.\n"
        },
        "QA": {
            "input": "What is the percentage of market share for Intermodal transportation?",
            "output": "5%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "275",
        "img": "./treemap/png/275.png",
        "topic": "Food and Beverage Industry",
        "title": " Market Revenue Shares within the Food and Beverage Industry",
        "csv": "Category \\t Percentage \\n Fast Food \\t  30 \\n Casual Dining \\t  20 \\n Fine Dining \\t  15 \\n Beverage Manufacturers \\t  10 \\n Confectionery \\t  10 \\n Snack Food \\t  5 \\n Organic Food \\t  5 \\n Food Processing \\t  3 \\n Specialty Food \\t  2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap visualizes market revenue shares within the Food and Beverage Industry, broken down by category. Fast Food leads with 30% of the market share, followed by Casual Dining at 20%, and Fine Dining at 15%. Beverage Manufacturers and Confectionery each hold 10%, while Snack Food and Organic Food each comprise 5%. Food Processing has a 3% share, and Specialty Food makes up the remaining 2%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport os\n\n# Creating the data structure\ndata_labels = ['Fast Food', 'Casual Dining', 'Fine Dining', 'Beverage Manufacturers', \n               'Confectionery', 'Snack Food', 'Organic Food', 'Food Processing', 'Specialty Food']\ndata = [30, 20, 15, 10, 10, 5, 5, 3, 2]\nline_labels = ['Revenue Share (%)']\n\n# Combining the data into a single list of dictionaries for Plotly\ndata_dict = [{\"Category\": label, \"Revenue Share\": value} for label, value in zip(data_labels, data)]\n\n# Create a treemap using Plotly Express\nfig = px.treemap(data_dict, path=['Category'], values='Revenue Share',\n                 title='Market Revenue Shares within the Food and Beverage Industry')\n\n# Tune the treemap's appearance\nfig.update_traces(textinfo=\"label+percent entry\")\nfig.update_layout(margin=dict(t=50, l=25, r=25, b=25), font=dict(size=14))\n\n# Define the save path and create directories if they do not exist\nsave_dir = \"./plotchart/data_300/treemap/png\"\nos.makedirs(save_dir, exist_ok=True)\nsave_path = os.path.join(save_dir, \"1032.png\")\n\n# Save the figure\nfig.write_image(save_path)\n\n# This line assumes that you want to clear the figure after saving it to prevent it from being displayed in an interactive session\nfig = None\n"
        },
        "QA": {
            "input": "What is the combined percentage of Beverage Manufacturers and Confectionery in the Food and Beverage Industry market revenue shares?",
            "output": "20%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "169",
        "img": "./treemap/png/169.png",
        "topic": "Technology and the Internet",
        "title": " Global Internet Usage Distribution Across Technology Segments",
        "csv": "Technology Segment \\t Percentage \\n Social Media \\t  25 \\n Search Engines \\t  20 \\n Online Shopping \\t  15 \\n Streaming Services \\t  15 \\n Cloud Computing \\t  10 \\n Online Gaming \\t  10 \\n Educational Platforms \\t  5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the distribution of global internet usage across various technology segments. Social Media accounts for 25% of internet usage, followed by Search Engines at 20%. Online Shopping and Streaming Services each hold a 15% share. Cloud Computing and Online Gaming both represent 10% of the usage. Lastly, Educational Platforms make up 5% of the global internet usage distribution."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport os\n\n# Given data in the desired format\ndata_labels = [\"Technology Segment\", \"Internet Usage (%)\"]\nline_labels = [\"Social Media\", \"Search Engines\", \"Online Shopping\", \"Streaming Services\", \"Cloud Computing\", \"Online Gaming\", \"Educational Platforms\"]\ndata = [25, 20, 15, 15, 10, 10, 5]\n\n# Preparing the data for treemap\ndf = {\n    data_labels[0]: line_labels,\n    data_labels[1]: data\n}\n\n# Convert the data into a DataFrame\ndf = pd.DataFrame(df)\n\n# Create a Treemap using Plotly\nfig = px.treemap(df, path=[data_labels[0]], values=data_labels[1],\n                 title='Global Internet Usage Distribution Across Technology Segments')\n\nfig.update_traces(textinfo='label+percent entry')\n\n# Adjust layout\nfig.update_layout(margin=dict(t=50, l=25, r=25, b=25))\n\n# Create the directories if not exist\noutput_dir = './plotchart/data_300/treemap/png'\nif not os.path.exists(output_dir):\n    os.makedirs(output_dir)\n\n# Save the figure\nfig.write_image(f\"{output_dir}/169.png\")\n\n# Clear current figure state, if you are running in an interactive environment like Jupyter Notebooks\n# In a script, this is not necessary.\n#fig.clf()\n"
        },
        "QA": {
            "input": "What is the combined percentage for Online Gaming and Educational Platforms according to the Global Internet Usage Distribution?",
            "output": "15%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "272",
        "img": "./treemap/png/272.png",
        "topic": "Arts and Culture",
        "title": " Public Engagement in Arts and Culture Events",
        "csv": "Category \\t Percentage \\n Museums \\t 25 \\n Live Music \\t 20 \\n Theater \\t 15 \\n Film Screenings \\t 12 \\n Art Galleries \\t 10 \\n Dance Performances \\t 8 \\n Literary Events \\t 5 \\n Opera \\t 3 \\n Cultural Festivals \\t 2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap presents the public engagement in various arts and culture events in terms of percentage distribution. Museums lead with 25%, followed by Live Music at 20%, Theater at 15%, Film Screenings at 12%, and Art Galleries at 10%. Dance Performances attract 8% engagement, Literary Events 5%, Opera has a 3% share, and Cultural Festivals account for the smallest portion at 2%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Given data string\ndata_str = \"\"\"Category,Attendance (%)\nMuseums,25\nLive Music,20\nTheater,15\nFilm Screenings,12\nArt Galleries,10\nDance Performances,8\nLiterary Events,5\nOpera,3\nCultural Festivals,2\"\"\"\n\n# Parsing the data string into the desired variables\nlines = data_str.split('\\n')\ndata_labels = lines[0].split(',')[1:]  # 'Attendance (%)'\n\n# Extract line_labels and data\nline_labels = []\ndata = []\nfor line in lines[1:]:\n    parts = line.split(',')\n    line_labels.append(parts[0])\n    data.append(float(parts[1]))  # convert string to float for the data part\n\n# Plotting with squarify\nfig = plt.figure(figsize=(12, 8))\nsquarify.plot(sizes=data, label=line_labels, alpha=0.8)\n\n# Set the title of the figure\nplt.title('Public Engagement in Arts and Culture Events')\n\n# Automatically resize the image by tight_layout() before savefig()\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/demo/treemap/png/1022.png'\nplt.savefig(save_path, format='png')\n\n# Clear the current image state at the end of the code\nplt.clf()\n"
        },
        "QA": {
            "input": "What is the combined percentage of attendance for Film Screenings and Art Galleries?",
            "output": "22%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "66",
        "img": "./treemap/png/66.png",
        "topic": "Environment and Sustainability",
        "title": " Proportion of Sustainability Efforts in Environmental Conservation",
        "csv": "Category \\t Percentage \\n Renewable Energy \\t 30 \\n Recycling Initiatives \\t 20 \\n Conservation Efforts \\t 25 \\n Pollution Control \\t 15 \\n Sustainable Agriculture \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap represents the proportion of different sustainability efforts in environmental conservation. 'Renewable Energy' constitutes 30% of the efforts, followed by 'Conservation Efforts' at 25%. 'Recycling Initiatives' come next with 20%, 'Pollution Control' accounts for 15%, and 'Sustainable Agriculture' makes up the smallest percentage at 10%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport os\n\n# Given data\ndata = {\n    \"Category\": [\"Renewable Energy\", \"Recycling Initiatives\", \"Conservation Efforts\", \"Pollution Control\", \"Sustainable Agriculture\"],\n    \"Percentage (%)\": [30, 20, 25, 15, 10]\n}\n\n# Data labels and line labels (as per your description, line_labels does not apply here though)\ndata_labels = list(data.keys())\ndata_values = list(data.values())\n\n# Prepare data for treemap\ntreemap_data = {data_labels[0]: data_values[0], data_labels[1]: data_values[1]}\n\n# Draw the treemap\nfig = px.treemap(\n    treemap_data, \n    path=[data_labels[0]], \n    values=data_labels[1],\n    title='Proportion of Sustainability Efforts in Environmental Conservation'\n)\n\nfig.update_traces(\n    textinfo=\"label+percent entry\", \n    textfont=dict(size=18),\n    hoverinfo='label+percent entry'\n)\n\nfig.update_layout(\n    margin=dict(t=50, l=25, r=25, b=25)\n)\n\n# Create directories if they don't exist\noutput_dir = \"./plotchart/data_300/treemap/png\"\nos.makedirs(output_dir, exist_ok=True)\n\n# Save figure\noutput_path = os.path.join(output_dir, \"66.png\")\nfig.write_image(output_path)\n\n# There's no current image state in plotly to clear, so we're done here.\n"
        },
        "QA": {
            "input": "What percentage of the efforts is dedicated to Conservation Efforts?",
            "output": "25%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "253",
        "img": "./treemap/png/253.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare Expenditure Distribution by Services in 2023",
        "csv": "Healthcare Category \\t Percentage \\n Hospital Services \\t 35 \\n Physician Services \\t 25 \\n Prescription Drugs \\t 20 \\n Nursing Home Care \\t 10 \\n Dental Services \\t 5 \\n Mental Health Services \\t 3 \\n Medical Equipment \\t 2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the distribution of healthcare expenditure by services in 2023. Hospital services account for 35%, physician services for 25%, and prescription drugs for 20%. Nursing home care represents 10%, while dental services take up 5%. Mental health services and medical equipment constitute smaller shares at 3% and 2%, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Given data\ndata_string = \"\"\"Hospital Services,35\nPhysician Services,25\nPrescription Drugs,20\nNursing Home Care,10\nDental Services,5\nMental Health Services,3\nMedical Equipment,2\"\"\"\n\n# Splitting the data into lines and parsing them\ndata_lines = data_string.split('\\n')\n\n# Extracting labels and associated data\ndata_labels = [line.split(',')[0] for line in data_lines]\ndata = [float(line.split(',')[1]) for line in data_lines]\n\n# Since there isn't a separate line header, line_labels is not populated\nline_labels = []\n\n# Creating the treemap\nfig, ax = plt.subplots(figsize=(12, 8))\nsquarify.plot(sizes=data, label=data_labels, alpha=.8, text_kwargs={'wrap': True})\nplt.axis('off')\nplt.title('Healthcare Expenditure Distribution by Services in 2023')\n\n# Tidy up and save the figure to the absolute path\nplt.tight_layout()\nplt.savefig('./plotchart/demo/treemap/png/1003.png')\nplt.clf()\n"
        },
        "QA": {
            "input": "What is the combined percentage of expenditure on Physician Services, Prescription Drugs, and Mental Health Services?",
            "output": "48%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "17",
        "img": "./treemap/png/17.png",
        "topic": "Retail and E-commerce",
        "title": " E-commerce Sales Distribution by Product Category",
        "csv": "Product Category \\t Percentage \\n Electronics \\t 25 \\n Apparel \\t 22 \\n Home Furnishings \\t 17 \\n Health & Beauty \\t 13 \\n Food & Beverage \\t 10 \\n Books & Media \\t 8 \\n Toys & Games \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustration presents the distribution of e-commerce sales by product category. Electronics lead with a 25% share, followed by Apparel at 22%. Home Furnishings account for 17%, while Health & Beauty makes up 13% of the sales. Food & Beverage categories have a 10% share, Books & Media come in at 8%, and Toys & Games are the smallest category at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Given data\ndata_str = \"\"\"Product Category,Online Sales (%)\nElectronics,25\nApparel,22\nHome Furnishings,17\nHealth & Beauty,13\nFood & Beverage,10\nBooks & Media,8\nToys & Games,5\"\"\"\n\n# Extracting line labels and data\nlines = data_str.split('\\n')\ndata_labels = lines[0].split(',')[1:]  # Extract column labels\nline_labels = [line.split(',')[0] for line in lines[1:]]  # Extract row labels\ndata = [float(line.split(',')[1]) for line in lines[1:]]  # Extract numerical data\n\n# Treemap plot\nplt.figure(figsize=(10, 8))  # Set figure size\nsquarify.plot(sizes=data, label=line_labels, alpha=0.7)  # Draw treemap\n\n# Additional style configurations\nplt.title('E-commerce Sales Distribution by Product Category', fontsize=16)\nplt.axis('off')  # Turn off the axis\n\n# Prevent content from being crowded\nplt.tight_layout()\n\n# Save the figure to the specified path\nplt.savefig('./plotchart/data_300/treemap/png/17.png', format='png')\n\n# Clear the current figure state to avoid overlap in case of further plotting\nplt.clf()\n"
        },
        "QA": {
            "input": "What percentage of E-commerce Sales Distribution is attributed to Food & Beverage?",
            "output": "10%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "250",
        "img": "./treemap/png/250.png",
        "topic": "Transportation and Logistics",
        "title": " Distribution of Logistics Volume by Transportation Type",
        "csv": "Transportation Type \\t Percentage \\n Road Freight \\t 35 \\n Ocean Shipping \\t 25 \\n Rail Transport \\t 20 \\n Air Freight \\t 10 \\n Pipeline \\t 5 \\n Intermodal \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the distribution of logistics volume by transportation type. It indicates that road freight accounts for 35% of the logistics volume, the highest among the types listed. Ocean shipping follows with 25%, while rail transport represents 20%. Air freight comprises 10% of the volume, and both pipeline and intermodal transportation each make up 5% of the total logistics volume."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Data Preparation\nraw_data = \"\"\"\nTransportation Type,Logistics Volume (%)\nRoad Freight,35\nOcean Shipping,25\nRail Transport,20\nAir Freight,10\nPipeline,5\nIntermodal,5\n\"\"\"\n\n# Splitting the data into lists and creating variables\nlines = raw_data.strip().split('\\n')\ndata_labels = lines[0].split(',')[1:]\n\nline_labels = []\ndata = []\nfor line in lines[1:]:\n    label, value = line.split(',')\n    line_labels.append(label)\n    data.append(float(value))\n\n# Creating the squarify plot\nplt.figure(figsize=(12, 8))\ncolors = plt.cm.Spectral_r(range(len(data)))\n\nsquarify.plot(\n    sizes=data, \n    label=[f\"{label}\\n{val}%\" for label, val in zip(line_labels, data)], \n    color=colors, \n    alpha=0.7,\n    pad=True\n)\n\n# Styling\nplt.title('Distribution of Logistics Volume by Transportation Type')\nplt.axis('off')\n\n# Make the image more space-efficient\nplt.tight_layout()\n\n# Saving the image\nplt.savefig('./plotchart/data_300/treemap/png/1047.png')\n\n# Clear the current figure state\nplt.clf()\n"
        },
        "QA": {
            "input": "What transportation type has the smallest share of logistics volume?",
            "output": "Pipeline and Intermodal"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "198",
        "img": "./treemap/png/198.png",
        "topic": "Retail and E-commerce",
        "title": " Retail and E-commerce Sales Distribution in 2023",
        "csv": "Category \\t Percentage \\n Online Retail \\t  40 \\n In-Store Retail \\t  30 \\n Electronics \\t  10 \\n Fashion \\t  8 \\n Home & Furniture \\t  7 \\n Sporting Goods \\t  3 \\n Books & Media \\t  2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This treemap illustrates the distribution of retail and e-commerce sales across various categories in 2023. Online Retail holds the largest portion, accounting for 40% of sales. In-Store Retail follows with 30%. Electronics make up 10%, while Fashion claims 8% of sales. Home & Furniture are represented by 7%, Sporting Goods by 3%, and Books & Media have the smallest share at 2%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport plotly.graph_objects as go\nimport os\n\n# Given data\ndata_labels = ['Online Retail', 'In-Store Retail', 'Electronics', 'Fashion', 'Home & Furniture', 'Sporting Goods', 'Books & Media']\nline_labels = ['Sales Percentage (%)']\ndata = [40, 30, 10, 8, 7, 3, 2]\n\n# Transform the data into a format that Plotly can use\n# We need to add an additional parent element, for instance, \"Total\"\nparents = [''] * len(data_labels)  # The top level has no parent\n\n# Create a DataFrame for converting given data to a suitable format\ntree_data = {\n    'labels': data_labels,\n    'values': data,\n    'parents': parents\n}\n\n# Use plotly to create a treemap\nfig = px.treemap(\n    tree_data,\n    names='labels',\n    values='values',\n    parents='parents',\n    title='Retail and E-commerce Sales Distribution in 2023',\n    color='values',\n    color_continuous_scale=px.colors.sequential.RdBu\n)\n\nfig.update_traces(\n    textinfo=\"label+value\",\n    textfont=dict(size=18)\n)\n\nfig.update_layout(\n    margin=dict(t=50, l=25, r=25, b=25),\n)\n\n# Define the file path and make sure the directory exists\nfile_path = './plotchart/data_300/treemap/png/198.png'\nos.makedirs(os.path.dirname(file_path), exist_ok=True)\n\n# Save figure\nfig.write_image(file_path)\n\n# Clear the state (not strictly necessary in a script, as there is no ongoing state across runs, but included for compliance)\nfig.data = []\n"
        },
        "QA": {
            "input": "What is the percentage difference between Fashion and Books & Media sales? ",
            "output": "6%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "192",
        "img": "./treemap/png/192.png",
        "topic": "Transportation and Logistics",
        "title": " Market Share Distribution in Transportation and Logistics Industry",
        "csv": "Transportation Mode \\t Percentage \\n Road \\t 35 \\n Rail \\t 25 \\n Air \\t 20 \\n Sea \\t 15 \\n Pipeline \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the market share distribution among different modes of transportation in the transportation and logistics industry. Road transport leads with 35%, followed by rail at 25%, air transport at 20%, sea transport at 15%, and pipelines at 5%. Each mode's market share is represented as a distinct area within the treemap, correlating with the percentage size."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Data processing\ndata = [35, 25, 20, 15, 5]\ndata_labels = ['Road', 'Rail', 'Air', 'Sea', 'Pipeline']\nline_labels = ['Logistics Market Share (%)']\n\n# Create figure and axes\nfig = plt.figure(figsize=(12, 8))\n\n# Create a treemap\ncolors = plt.cm.viridis(range(len(data)), alpha=0.7)\nsquarify.plot(sizes=data, label=data_labels, color=colors, alpha=0.7)\n\n# Add title and style\nplt.title('Market Share Distribution in Transportation and Logistics Industry', fontsize=16)\nplt.axis('off')\n\n# Resize the plot automatically\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/data_300/treemap/png/192.png'\nplt.savefig(save_path, format='png', bbox_inches='tight')\n\n# Clear the current figure state after saving\nplt.clf()\n"
        },
        "QA": {
            "input": "What is the market share percentage of Rail transportation?",
            "output": "25%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "187",
        "img": "./treemap/png/187.png",
        "topic": "Agriculture and Food Production",
        "title": " Global Agriculture: Food Production Share by Produce Type",
        "csv": "Produce Type \\t Percentage \\n Cereals \\t 22 \\n Vegetables \\t 18 \\n Fruits \\t 20 \\n Meat \\t 17 \\n Dairy \\t 15 \\n Fisheries \\t 5 \\n Sugarcane \\t 3 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap chart represents the global share of food production by produce type. Cereals have the largest share with 22%, followed by vegetables and fruits at 18% and 20% respectively. Meat accounts for 17%, while dairy products represent 15%. Fisheries and sugarcane have the smallest shares at 5% and 3%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport plotly.graph_objects as go\nimport pandas as pd\nfrom io import StringIO\n\n# Given data in CSV format\ndata_str = \"\"\"Produce Type,Production Share (%)\nCereals,22\nVegetables,18\nFruits,20\nMeat,17\nDairy,15\nFisheries,5\nSugarcane,3\"\"\"\n\n# Convert string data to a pandas DataFrame\ndata_io = StringIO(data_str)\ndf = pd.read_csv(data_io)\n\n# Create the treemap\nfig = px.treemap(df, path=['Produce Type'], values='Production Share (%)',\n                 title='Global Agriculture: Food Production Share by Produce Type',\n                 color='Production Share (%)', color_continuous_scale='RdYlGn')\n\n# Update layout for better appearance\nfig.update_traces(textinfo='label+percent entry')\nfig.update_layout(coloraxis_colorbar=dict(title=\"Share (%)\"))\n\n# Save the figure\nfig.write_image(\"./plotchart/data_300/treemap/png/187.png\")\n\n# Clear the current image state\nfig.data = []\n"
        },
        "QA": {
            "input": "How much bigger is the percentage of Cereals production compared to Fisheries?",
            "output": "17%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "184",
        "img": "./treemap/png/184.png",
        "topic": "Retail and E-commerce",
        "title": " Retail and E-commerce Sales Distribution by Product Category",
        "csv": "Product Category \\t Percentage \\n Electronics \\t 25 \\n Apparel \\t 20 \\n Home & Garden \\t 15 \\n Health & Beauty \\t 13 \\n Food & Beverages \\t 12 \\n Sports & Outdoors \\t 8 \\n Toys & Hobbies \\t 4 \\n Books \\t 2 \\n Stationery \\t 1 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the distribution of retail and e-commerce sales across various product categories. Electronics lead with a 25% share, followed by Apparel at 20%, and Home & Garden at 15%. Health & Beauty products account for 13% of sales, with Food & Beverages close behind at 12%. Sports & Outdoors make up 8%, Toys & Hobbies are at 4%, Books at 2%, and Stationery has the smallest share with 1%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\n\n# Prepare the data\ndata_labels = [\"Sales Share (%)\"]\nline_labels = [\"Electronics\", \"Apparel\", \"Home & Garden\", \"Health & Beauty\",\n               \"Food & Beverages\", \"Sports & Outdoors\", \"Toys & Hobbies\", \"Books\", \"Stationery\"]\ndata = [25, 20, 15, 13, 12, 8, 4, 2, 1]\n\n# Combine the data into a single structure suitable for Plotly\ntreemap_data = {\n    'Product Category': line_labels,\n    'Sales Share (%)': data\n}\n\n# Create the treemap\nfig = px.treemap(\n    treemap_data,\n    path=['Product Category'],\n    values='Sales Share (%)',\n    title='Retail and E-commerce Sales Distribution by Product Category',\n)\n\n# Customize the layout and appearance\nfig.update_layout(\n    margin=dict(t=50, l=25, r=25, b=25)\n)\n\n# Save the figure as a PNG\nsave_path = './plotchart/data_300/treemap/png/184.png'\nfig.write_image(save_path)\n\n# Clear the current image state, not necessary in the context of a script\n"
        },
        "QA": {
            "input": "What is the combined percentage of the bottom three categories: Toys & Hobbies, Books, and Stationery?",
            "output": "7%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "288",
        "img": "./treemap/png/288.png",
        "topic": "Transportation and Logistics",
        "title": " Freight Volume Distribution across Transport Modes",
        "csv": "Mode of Transport \\t Percentage \\n Road \\t 40 \\n Rail \\t 25 \\n Air \\t 15 \\n Maritime \\t 10 \\n Pipeline \\t 5 \\n Intermodal \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the distribution of freight volume across different transport modes. Road transport accounts for the largest percentage at 40%, followed by rail at 25%. Air transport represents 15% of the volume, while maritime shipping constitutes 10%. Both pipeline and intermodal modes hold the smallest shares, each with 5% of the freight volume distribution."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport os\n\n# Transform the data into variables\ndata_labels = ['Freight Volume (%)']\nline_labels = ['Road', 'Rail', 'Air', 'Maritime', 'Pipeline', 'Intermodal']\ndata = [40, 25, 15, 10, 5, 5]\n\nfig = px.treemap(\n    names=line_labels,\n    values=data,\n    title='Freight Volume Distribution across Transport Modes',\n    path=[line_labels],\n)\n\n# Style adjustments to ensure clear text display\nfig.update_traces(textinfo=\"label+percent entry\", textfont_size=18)\nfig.update_layout(margin=dict(t=50, l=25, r=25, b=25))\n\n# Define the path for saving the image\nsave_path = './plotchart/demo/treemap/png/1038.png'\nos.makedirs(os.path.dirname(save_path), exist_ok=True)\n\n# Save the figure\nfig.write_image(save_path)\n\n# Clear the current image state (Plotly figures do not retain state like matplotlib)\n# So this step is not necessary for Plotly\n"
        },
        "QA": {
            "input": "How much higher is the use of Road transport for freight volume than Air transport?",
            "output": "25%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "176",
        "img": "./treemap/png/176.png",
        "topic": "Government and Public Policy",
        "title": " Budget Allocation Across Different Government Policy Areas in 2023",
        "csv": "Policy Area \\t Percentage \\n Defense \\t  30 \\n Healthcare \\t  20 \\n Education \\t  15 \\n Social Security \\t  12 \\n Infrastructure \\t  10 \\n Science and Research \\t  8 \\n Energy and Environment \\t  3 \\n Agriculture \\t  2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the budget allocation across various government policy areas in 2023. Defense receives the highest percentage with 30%. Healthcare follows at 20%, then Education at 15%. Social Security gets 12%, Infrastructure 10%, while Science and Research are allocated 8%. Energy and Environment receive 3%, and Agriculture has the smallest share with 2%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Data\ndata_labels = ['Budget Allocation (%)']\nline_labels = ['Defense', 'Healthcare', 'Education', 'Social Security',\n               'Infrastructure', 'Science and Research', 'Energy and Environment', 'Agriculture']\ndata = [30, 20, 15, 12, 10, 8, 3, 2]\n\n# Create a figure with a larger figsize\nplt.figure(figsize=(12, 8))\n\n# Color palette for the treemap\ncolors = plt.cm.Spectral_r([i/max(data) for i in data])\n\n# Creating the treemap with labels\nsquarify.plot(sizes=data, label=line_labels, color=colors, alpha=0.7, text_kwargs={'fontsize':12, 'wrap':True})\n\n# Title of the figure\nplt.title('Budget Allocation Across Different Government Policy Areas in 2023', fontsize=14)\n\n# Remove axis\nplt.axis('off')\n\n# Adjust subplots and layout to fit the content\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/data_300/treemap/png/176.png'\nplt.savefig(save_path, format='png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "How much more percentage of the budget is allocated to Defense compared to Healthcare?",
            "output": "10%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "77",
        "img": "./treemap/png/77.png",
        "topic": "Agriculture and Food Production",
        "title": " Proportion of Global Agriculture Production by Category",
        "csv": "Agricultural Category \\t Percentage \\n Cereals \\t  25 \\n Vegetables \\t  20 \\n Fruits \\t  20 \\n Meat \\t  15 \\n Dairy \\t  10 \\n Fisheries \\t  5 \\n Oilseeds \\t  3 \\n Sugar Crops \\t  2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the proportion of global agricultural production by category. Cereals hold the largest share with 25%, followed by vegetables and fruits each at 20%. Meat accounts for 15% and dairy for 10%. Fisheries are shown with a 5% share, oilseeds at 3%, and sugar crops at 2%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport os\n\n# Data setup\ndata_labels = ['Cereals', 'Vegetables', 'Fruits', 'Meat', 'Dairy', 'Fisheries', 'Oilseeds', 'Sugar Crops']\ndata = [25, 20, 20, 15, 10, 5, 3, 2]\nline_labels = ['Production Share (%)']\n\n# Create a DataFrame for plotly treemap\nimport pandas as pd\ndf = pd.DataFrame(list(zip(data_labels, data)), columns=['Agricultural Category', 'Production Share (%)'])\n\n# Create treemap using plotly express\nfig = px.treemap(df, path=['Agricultural Category'], values='Production Share (%)',\n                 title='Proportion of Global Agriculture Production by Category')\n\n# Customizing the treemap to make it fancy\nfig.update_traces(textinfo='label+percent entry')\nfig.update_layout(margin=dict(t=0, l=0, r=0, b=0))\n\n# Absolute path for the output image\nsave_path = './plotchart/data_300/treemap/png/77.png'\n# Ensure the directory exists\nos.makedirs(os.path.dirname(save_path), exist_ok=True)\n\n# Save figure\nfig.write_image(save_path)\n\n# Clear the current image state if this is part of a stream of plotting commands\nfig.data = []\n"
        },
        "QA": {
            "input": "Which category holds the smallest percentage in global agricultural production?",
            "output": "Sugar Crops"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "105",
        "img": "./treemap/png/105.png",
        "topic": "Agriculture and Food Production",
        "title": " Proportional Distribution of Global Agriculture and Food Production",
        "csv": "Product Group \\t Percentage \\n Cereals \\t 25 \\n Vegetables \\t 20 \\n Fruits \\t 20 \\n Meat \\t 15 \\n Dairy \\t 10 \\n Fish \\t 5 \\n Oilseeds \\t 3 \\n Spices \\t 2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This treemap illustrates the proportional distribution of global agriculture and food production across various product groups. Cereals account for the largest share with 25%, followed by vegetables and fruits each at 20%. Meat constitutes 15% of the distribution, dairy products represent 10%, and fish has a 5% share. Smaller segments include oilseeds at 3% and spices at 2%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport plotly.graph_objects as go\nimport os\n\n# Define your data\ndata_labels = ['Production Volume (%)']\nline_labels = ['Cereals', 'Vegetables', 'Fruits', 'Meat', 'Dairy', 'Fish', 'Oilseeds', 'Spices']\ndata = [25, 20, 20, 15, 10, 5, 3, 2]\n\n# Construct a dataframe for ease of use with Plotly\nimport pandas as pd\ndf = pd.DataFrame(list(zip(line_labels, data)), columns=['Product Group', 'Production Volume (%)'])\n\n# Create a treemap chart\nfig = px.treemap(df, path=['Product Group'], values='Production Volume (%)',\n                 title='Proportional Distribution of Global Agriculture and Food Production')\n\n# Customize the chart to make it fancy\n# Colors can be a predefined scale or a custom set defined by colorscale parameter\nfig.update_traces(textinfo=\"label+percent entry\")\nfig.update_layout(font_size=10, title_font_size=18)\n\n# Define the absolute path for the image to be saved\nimage_save_path = './plotchart/data_300/treemap/png/105.png'\n\n# Ensure directory exists\nos.makedirs(os.path.dirname(image_save_path), exist_ok=True)\n\n# Save figure\nfig.write_image(image_save_path)\n\n# Clear current image state, Plotly doesn't require clearing like matplotlib\nprint(f\"Treemap saved successfully at {image_save_path}\")\n"
        },
        "QA": {
            "input": "How much is the percentage for \"Oilseeds\"?",
            "output": "3%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "203",
        "img": "./treemap/png/203.png",
        "topic": "Healthcare and Health",
        "title": " Healthcare Expenditure Distribution across Different Services",
        "csv": "Healthcare Area \\t Percentage \\n Public Health Services \\t 25 \\n Hospital Care \\t 30 \\n Prescription Drugs \\t 15 \\n Private Clinics \\t 10 \\n Mental Health Services \\t 10 \\n Dental Services \\t 5 \\n Long-Term Care \\t 4 \\n Medical Research \\t 1 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the distribution of healthcare expenditure across various services. Public Health Services accounts for 25%, Hospital Care for 30%, and Prescription Drugs for 15%. Smaller percentages are noted for Private Clinics and Mental Health Services, both at 10%. Dental Services constitute 5%, Long-Term Care covers 4%, and Medical Research makes up the smallest portion at 1%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Given data in raw format\nraw_data = \"Healthcare Area,Expenditure (%)\\n Public Health Services,25\\n Hospital Care,30\\n Prescription Drugs,15\\n Private Clinics,10\\n Mental Health Services,10\\n Dental Services,5\\n Long-Term Care,4\\n Medical Research,1\"\n\n# Processing the data to separate into labels and values\nlines = raw_data.split(\"\\n\")\ndata_labels = lines[0].split(\",\")[1:]\nline_labels = [line.split(\",\")[0].strip() for line in lines[1:]]\ndata = [float(line.split(\",\")[1].strip()) for line in lines[1:]]\n\n# Define colors for each segment (this can be customized to any color scheme you want)\ncolors = plt.cm.Spectral(range(len(data)))\n\n# Create figure\nplt.figure(figsize=(12, 8))\nsquarify.plot(sizes=data, label=line_labels, color=colors, alpha=0.8, text_kwargs={'fontsize':12, 'wrap':True})\n\n# Title setup with a larger fontsize\nplt.title('Healthcare Expenditure Distribution across Different Services', fontsize=18)\n\n# Removing the axes\nplt.axis('off')\n\n# Use tight_layout to automatically adjust subplot params to give the figure the exact layout to minimize unnecessary paddings\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./plotchart/data_300/treemap/png/203.png', bbox_inches='tight', format='png', dpi=300)\n\n# Clear the current figure state to prepare for any further plotting\nplt.clf()\n"
        },
        "QA": {
            "input": "What percentage of the total Healthcare Expenditure is allocated to Mental Health Services?",
            "output": "10%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "42",
        "img": "./treemap/png/42.png",
        "topic": "Sports and Entertainment",
        "title": " Revenue Distribution in Sports and Entertainment Industry",
        "csv": "Category \\t Percentage \\n Professional Sports \\t  40 \\n Movies \\t  20 \\n Music Industry \\t  15 \\n Gaming \\t  10 \\n Television \\t  5 \\n Live Events \\t  5 \\n Publishing \\t  3 \\n Amusement Parks \\t  2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the revenue distribution within the sports and entertainment industry, segmented by categories. Professional Sports accounts for 40% of the revenue, while Movies make up 20%. The Music Industry follows with 15%, and Gaming captures 10%. Television shows and Live Events each hold a 5% share. Publishing is at 3%, and Amusement Parks represent the smallest category with a 2% revenue share."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Transform the provided data into three variables\ndata_labels = ['Professional Sports', 'Movies', 'Music Industry', 'Gaming', 'Television', 'Live Events', 'Publishing', 'Amusement Parks']\nline_labels = ['Revenue Share (%)']\ndata = [40, 20, 15, 10, 5, 5, 3, 2]\n\n# Define the color palette (with 8 colors)\ncolors = plt.cm.tab20c.colors[:len(data_labels)]\n\n# Create a figure with larger figsize to prevent content from being displayed\nplt.figure(figsize=(12, 8))\n\n# Create a treemap\nsquarify.plot(sizes=data, label=data_labels, color=colors, alpha=0.6)\n\n# Add a title to the figure\nplt.title('Revenue Distribution in Sports and Entertainment Industry')\n\n# Remove the axes\nplt.axis('off')\n\n# Pad the figure to prevent content from getting cut off\nplt.tight_layout()\n\n# Define the save path\nsave_path = './plotchart/data_300/treemap/png/42.png'\n\n# Ensure the directory exists\nimport os\nos.makedirs(os.path.dirname(save_path), exist_ok=True)\n\n# Save the figure\nplt.savefig(save_path, dpi=300)\n\n# Clear the current image state so that the IPython notebook interface remains clear\nplt.clf()\n"
        },
        "QA": {
            "input": "Which category has the smallest percentage of revenue distribution in the sports and entertainment industry?",
            "output": "Amusement Parks"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "129",
        "img": "./treemap/png/129.png",
        "topic": "Sports and Entertainment",
        "title": " Revenue Distribution Across Sports and Entertainment Sectors",
        "csv": "Category \\t Percentage \\n Professional Sports \\t 35 \\n Movies \\t 25 \\n Music Industry \\t 15 \\n Video Games \\t 10 \\n Television Programs \\t 7 \\n Live Performances \\t 5 \\n Amusement Parks \\t 2 \\n Sports Merchandising \\t 1 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the revenue distribution across various sports and entertainment sectors. Professional Sports make up 35% of the revenue, followed by Movies at 25%, and the Music Industry at 15%. Video Games account for 10%, Television Programs for 7%, and Live Performances for 5%. Amusement Parks and Sports Merchandising are the smallest sectors, comprising 2% and 1% of the revenue, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport os\n\n# Given data\ndata_str = \"\"\"Category, Revenue Share (%)\nProfessional Sports,35\nMovies,25\nMusic Industry,15\nVideo Games,10\nTelevision Programs,7\nLive Performances,5\nAmusement Parks,2\nSports Merchandising,1\"\"\"\n\n# Processing the data\nrows = data_str.split('\\n')\ndata_labels = rows[0].split(', ')[1:]\nline_labels = [row.split(',')[0] for row in rows[1:]]\ndata = [float(row.split(',')[1]) for row in rows[1:]]\n\n# Create a DataFrame for Plotly\nimport pandas as pd\ndf = pd.DataFrame(list(zip(line_labels, data)), columns=['Category', 'Revenue Share'])\n\n# Draw treemap\nfig = px.treemap(df, path=['Category'], values='Revenue Share', \n                 title='Revenue Distribution Across Sports and Entertainment Sectors')\n\n# Update layout for fancy visuals\nfig.update_layout(\n    margin=dict(t=50, l=25, r=25, b=25),\n    font=dict(size=16),\n)\n\n# Define the save path\nsave_path = './plotchart/data_300/treemap/png/129.png'\n\n# Create directory if not exists\nos.makedirs(os.path.dirname(save_path), exist_ok=True)\n\n# Clear the current image state (not applicable to plotly directly)\n# fig.clf() - clf is matplotlib specific, not used in plotly\n# fig.clear() - clear is matplotlib specific, not used in plotly\n\n# Save the figure\nfig.write_image(save_path)\n\n# Show the figure, *optional*: this line can be removed if you don't want to display the image inline\nfig.show()\n"
        },
        "QA": {
            "input": "How much is the combined percentage of Television Programs and Amusement Parks in the revenue distribution?",
            "output": "9%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "107",
        "img": "./treemap/png/107.png",
        "topic": "Human Resources and Employee Management",
        "title": " Workforce Distribution Across Different Departments in a Corporation",
        "csv": "Department \\t Percentage \\n Sales \\t 20 \\n Operations \\t 18 \\n Marketing \\t 15 \\n Human Resources \\t 12 \\n Product Development \\t 10 \\n Finance \\t 9 \\n Customer Support \\t 8 \\n IT Services \\t 5 \\n Research and Development \\t 3 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the workforce distribution across different departments within a corporation. Sales make up 20% of the workforce, Operations follow at 18%, and Marketing accounts for 15%. Human Resources holds 12%, while Product Development has 10%. Finance represents 9% of the workforce, Customer Support 8%, IT Services 5%, and Research and Development the smallest at 3%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Transforming data into variables\ndata_labels = ['Workforce Distribution (%)']\nline_labels = ['Sales', 'Operations', 'Marketing', 'Human Resources',\n               'Product Development', 'Finance', 'Customer Support',\n               'IT Services', 'Research and Development']\ndata = [20, 18, 15, 12, 10, 9, 8, 5, 3]\n\n# Customize matplotlib figure and treemap\nfig, ax = plt.subplots(figsize=(12, 8))\ncmap = plt.cm.viridis\nmini = min(data)\nmaxi = max(data)\nnorm = plt.Normalize(vmin=mini, vmax=maxi)\ncolors = [cmap(norm(value)) for value in data]\n\n# Create the treemap\nsquarify.plot(sizes=data, label=line_labels, color=colors, alpha=0.8)\n\n# Title and enhancements\nplt.title(\"Workforce Distribution Across Different Departments in a Corporation\")\nplt.axis('off')\n\n# Resize the figure in a way that content is fitted properly\nplt.tight_layout()\n\n# Save figure to the specified path\nplt.savefig('./plotchart/data_300/treemap/png/107.png', dpi=300)\n\n# Clear the current figure's state for further plotting if necessary\nplt.clf()\n"
        },
        "QA": {
            "input": "What percentage of the workforce is allocated to IT Services?",
            "output": "5%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "273",
        "img": "./treemap/png/273.png",
        "topic": "Social Sciences and Humanities",
        "title": " Allocation of Research Funding in Social Sciences and Humanities",
        "csv": "Field \\t Percentage \\n Anthropology \\t  18 \\n Sociology \\t  16 \\n Psychology \\t  15 \\n History \\t  14 \\n Linguistics \\t  12 \\n Philosophy \\t  10 \\n Economics \\t  9 \\n Political Science \\t  6 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the allocation of research funding across various disciplines within the social sciences and humanities. Anthropology receives 18% of the funding, making it the largest segment represented. Sociology follows with 16%, and Psychology with 15%. History accounts for 14%, while Linguistics is allocated 12% of the funding. Philosophy and Economics receive smaller portions, with 10% and 9% respectively. Political Science has the least funding at 6%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Given data\ndata_list = [\n    [\"Anthropology\", 18],\n    [\"Sociology\", 16],\n    [\"Psychology\", 15],\n    [\"History\", 14],\n    [\"Linguistics\", 12],\n    [\"Philosophy\", 10],\n    [\"Economics\", 9],\n    [\"Political Science\", 6],\n]\n\n# Transform data into required variables\ndata_labels = [row[0] for row in data_list]\ndata = [row[1] for row in data_list]\nline_labels = [\"Research Funding (%)\"]\n\n# Plot treemap using squarify\nfig, ax = plt.subplots(figsize=(12, 8))\nsquarify.plot(sizes=data, label=data_labels, alpha=0.8, text_kwargs={'wrap': True})\nplt.title('Allocation of Research Funding in Social Sciences and Humanities', fontsize=18)\n\n# Resize the image properly before saving\nplt.tight_layout()\n\n# Save the figure to the given path; ensure the directory exists before running this code.\nsave_path = './plotchart/demo/treemap/png/1023.png'\nplt.savefig(save_path)\nplt.close()\n"
        },
        "QA": {
            "input": "How much higher is the funding percentage for Anthropology compared to Political Science?",
            "output": "12%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "101",
        "img": "./treemap/png/101.png",
        "topic": "Education and Academics",
        "title": " Allocation of Research Funding Across Academic Departments",
        "csv": "Academic Department \\t Percentage \\n Life Sciences \\t 25 \\n Engineering \\t 20 \\n Social Sciences \\t 15 \\n Medicine \\t 13 \\n Humanities \\t 10 \\n Physics \\t 7 \\n Environmental Science \\t 5 \\n Computer Science \\t 3 \\n Mathematics \\t 2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap visualizes the allocation of research funding across various academic departments. Life Sciences receives the highest percentage with 25%, followed by Engineering at 20%, and Social Sciences at 15%. Medicine and Humanities are allocated 13% and 10% respectively, while Physics has 7%. Environmental Science sees a 5% allocation, with Computer Science at 3% and Mathematics at the least with 2%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Given data structured into three variables\ndata_labels = ['Life Sciences', 'Engineering', 'Social Sciences', 'Medicine', 'Humanities', 'Physics', 'Environmental Science', 'Computer Science', 'Mathematics']\ndata = [25, 20, 15, 13, 10, 7, 5, 3, 2]\nline_labels = ['Research Funding (%)']\n\n# Define color palette (optional)\ncolors = plt.cm.tab20c.colors  # Using tab20c colormap for variety of colors\n\n# Create figure and axes for matplotlib\nplt.figure(figsize=(12, 8))  # Set the figure size to prevent content from being cut off\n\n# Create treemap with squarify\nsquarify.plot(sizes=data, label=data_labels, color=colors, alpha=0.6, text_kwargs={'wrap': True})\n\n# Set title and parameters for aesthetics\nplt.title('Allocation of Research Funding Across Academic Departments')\nplt.axis('off')  # Turn off the axes\n\n# Tight layout and save figures\nplt.tight_layout()\nplt.savefig('./plotchart/data_300/treemap/png/101.png')  # Save the figure with an absolute path\nplt.clf()  # Clear current figure state to avoid overlaps\n"
        },
        "QA": {
            "input": "Which department received the smallest percentage of research funding?",
            "output": "Mathematics"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "40",
        "img": "./treemap/png/40.png",
        "topic": "Retail and E-commerce",
        "title": " E-commerce Sales Distribution Across Retail Categories in 2023",
        "csv": "Product Category \\t Percentage \\n Electronics \\t 25 \\n Fashion & Apparel \\t 20 \\n Home & Garden \\t 15 \\n Health & Beauty \\t 10 \\n Food & Beverage \\t 10 \\n Books & Media \\t 8 \\n Sports & Outdoors \\t 7 \\n Toys & Games \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the distribution of e-commerce sales across different retail categories in 2023. Electronics lead with 25%, followed by Fashion & Apparel at 20%. Home & Garden account for 15%, while Health & Beauty, and Food & Beverage each make up 10%. Books & Media capture 8% of the sales, Sports & Outdoors 7%, and Toys & Games the least at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport os\nimport pandas as pd\n\n# Given data in tabular form\ndata_str = \"\"\"Product Category,Online Sales (%)\nElectronics,25\nFashion & Apparel,20\nHome & Garden,15\nHealth & Beauty,10\nFood & Beverage,10\nBooks & Media,8\nSports & Outdoors,7\nToys & Games,5\"\"\"\n\n# Convert the string data to a pandas DataFrame\ndata = pd.DataFrame([x.split(',') for x in data_str.split('\\n')])\ndata.columns = data.iloc[0]\ndata = data[1:]\ndata['Online Sales (%)'] = pd.to_numeric(data['Online Sales (%)'])\n\n# Extract line_labels, data_labels, and data\nline_labels = data['Product Category'].tolist()\ndata_labels = [\"Online Sales (%)\"]\ndata_values = data['Online Sales (%)'].tolist()\n\n# Create treemap figure\nfig = px.treemap(\n    data,\n    path=[px.Constant(\"E-commerce Sales\"), 'Product Category'],\n    values='Online Sales (%)',\n    title='E-commerce Sales Distribution Across Retail Categories in 2023'\n)\n\n# Update the layout for better visuals\nfig.update_layout(\n    margin=dict(t=50, l=25, r=25, b=25),\n)\n\n# Save image to the specified path\nsave_dir = './plotchart/data_300/treemap/png/'\nos.makedirs(save_dir, exist_ok=True)  # make sure the directory exists\nfig.write_image(save_dir + \"40.png\")\n\n# No need to clear the state, as each Plotly figure is independent of the others\n"
        },
        "QA": {
            "input": "What is the percentage of e-commerce sales for Health & Beauty?",
            "output": "10%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "73",
        "img": "./treemap/png/73.png",
        "topic": "Business and Finance",
        "title": " Market Share Distribution in the Financial Industry",
        "csv": "Category \\t Percentage \\n Investment Banking \\t 25 \\n Asset Management \\t 20 \\n Retail Banking \\t 15 \\n Insurance \\t 15 \\n Private Equity \\t 10 \\n Fintech \\t 8 \\n Wealth Management \\t 4 \\n Cryptocurrency \\t 3 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the market share distribution within the financial industry across various categories. Investment Banking holds the largest share at 25%, followed closely by Asset Management with 20%. Retail Banking and Insurance each account for 15% of the market share, while Private Equity represents 10%. Fintech has an 8% share, Wealth Management comes in at 4%, and Cryptocurrency makes up 3% of the industry market share."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Data\ndata_str = \"\"\"Investment Banking,25\nAsset Management,20\nRetail Banking,15\nInsurance,15\nPrivate Equity,10\nFintech,8\nWealth Management,4\nCryptocurrency,3\"\"\"\n\n# Transforming the data into required formats\ndata_lines = data_str.split('\\n')\nline_labels = [line.split(',')[0] for line in data_lines]\ndata = [float(line.split(',')[1]) for line in data_lines]\n\n# Drawing the treemap\nplt.figure(figsize=(12, 8))\ncolors = plt.cm.Spectral(range(len(data)))\nsquarify.plot(sizes=data, label=line_labels, color=colors, alpha=0.6)\n\nplt.title('Market Share Distribution in the Financial Industry')\nplt.axis('off')\n\n# Resizing the image\nplt.tight_layout()\n\n# Saving the image\nsave_path = './plotchart/data_300/treemap/png/1043.png'\nplt.savefig(save_path, format='png')\n\n# Clearing the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "How much higher is the market share percentage of Investment Banking compared to Private Equity?",
            "output": "15%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "265",
        "img": "./treemap/png/265.png",
        "topic": "Transportation and Logistics",
        "title": " Distribution of Logistics Volume by Transportation Type",
        "csv": "Transportation Type \\t Percentage \\n Road Freight \\t 35 \\n Ocean Shipping \\t 25 \\n Rail Transport \\t 20 \\n Air Freight \\t 10 \\n Pipeline \\t 5 \\n Intermodal \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the distribution of logistics volume by transportation type. It indicates that road freight accounts for 35% of the logistics volume, the highest among the types listed. Ocean shipping follows with 25%, while rail transport represents 20%. Air freight comprises 10% of the volume, and both pipeline and intermodal transportation each make up 5% of the total logistics volume."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport plotly.graph_objects as go\nimport os\n\n# Data Preparation\ndata_labels = ['Logistics Volume (%)']\nline_labels = ['Road Freight', 'Ocean Shipping', 'Rail Transport', 'Air Freight', 'Pipeline', 'Intermodal']\ndata = [35, 25, 20, 10, 5, 5]\n\n# Create a treemap\nfig = px.treemap(\n    names=line_labels,\n    parents=[\"\"] * len(data),\n    values=data,\n    title='Distribution of Logistics Volume by Transportation Type',\n)\n\n# Stylize the treemap\nfig.update_traces(\n    textinfo='label+value',\n    textfont=dict(size=18),\n    marker=dict(line=dict(width=1)),\n)\n\n# Save the figure as PNG\nsave_dir = './plotchart/data_300/treemap/png/'\nos.makedirs(save_dir, exist_ok=True)\nfig.write_image(os.path.join(save_dir, \"1045.png\"))\n\n# Clear the current figure state\nfig.data = []\n"
        },
        "QA": {
            "input": "What transportation type has the smallest share of logistics volume?",
            "output": "Pipeline and Intermodal"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "37",
        "img": "./treemap/png/37.png",
        "topic": "Technology and the Internet",
        "title": " Internet Usage Breakdown Across Technology Sectors",
        "csv": "Tech Sector \\t Percentage \\n Social Media \\t 25 \\n Online Shopping \\t 20 \\n Streaming Services \\t 18 \\n Cloud Computing \\t 12 \\n Online Education \\t 10 \\n Web Browsing \\t 8 \\n Gaming \\t 4 \\n Email \\t 3 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap chart provides a visualization of the internet usage breakdown across various technology sectors. The data indicates that Social Media accounts for 25%, Online Shopping represents 20%, and Streaming Services comprises 18% of internet usage. Cloud Computing holds a 12% share, while Online Education captures 10%. Smaller portions of the internet usage include Web Browsing at 8%, Gaming at 4%, and Email at 3%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Given data in a formatted string\ndata_str = \"\"\"Tech Sector,Internet Usage (%)\nSocial Media,25\nOnline Shopping,20\nStreaming Services,18\nCloud Computing,12\nOnline Education,10\nWeb Browsing,8\nGaming,4\nEmail,3\"\"\"\n\n# Preprocess the data\ndata_lines = data_str.strip().split('\\n')\ndata_labels = data_lines[0].split(',')[1:]\nline_labels = [line.split(',')[0] for line in data_lines[1:]]\ndata = [int(line.split(',')[1]) for line in data_lines[1:]]\n\n# Start plotting\nplt.figure(figsize=(12, 8))\nsquarify.plot(sizes=data, label=line_labels, alpha=0.8)\nplt.title('Internet Usage Breakdown Across Technology Sectors')\nplt.axis('off')  # Remove axis\n\n# To prevent content from being displayed improperly, use tight_layout\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/data_300/treemap/png/37.png'\nplt.savefig(save_path, format='png', dpi=300, bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "How much more is the internet usage percentage of Social Media compared to Online Education?",
            "output": "15%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "70",
        "img": "./treemap/png/70.png",
        "topic": "Agriculture and Food Production",
        "title": " Shares of Global Agriculture Production by Category",
        "csv": "Product Category \\t Percentage \\n Cereals \\t 25 \\n Vegetables \\t 20 \\n Fruits \\t 20 \\n Dairy \\t 15 \\n Meats \\t 10 \\n Oilseeds \\t 5 \\n Sugar Crops \\t 3 \\n Fibre Crops \\t 2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "This treemap illustrates the shares of global agricultural production by category. Cereals hold the highest percentage at 25%, followed by vegetables and fruits, each at 20%. Dairy products account for 15% of production, while meats have a share of 10%. Oilseeds represent 5%, sugar crops make up 3%, and fibre crops have the smallest share at 2%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Parsing the provided data\ndata_str = \"\"\"\nProduct Category,Production Share (%)\nCereals,25\nVegetables,20\nFruits,20\nDairy,15\nMeats,10\nOilseeds,5\nSugar Crops,3\nFibre Crops,2\n\"\"\"\n\n# Preparing the data\ndata_lines = data_str.strip().split('\\n')\ndata_labels = data_lines[0].split(',')[1:]\nline_labels = [line.split(',')[0] for line in data_lines[1:]]\ndata = [float(line.split(',')[1]) for line in data_lines[1:]]\n\n# Plotting the treemap\nfig = plt.figure(figsize=(12, 8))\nsquarify.plot(sizes=data, label=line_labels, alpha=.8, text_kwargs={'wrap': True})\nplt.title(\"Shares of Global Agriculture Production by Category\", fontsize=14)\nplt.axis('off')\n\n# Automatically resize the image and save it\nplt.tight_layout()\nsave_path = './plotchart/data_300/treemap/png/70.png'\nplt.savefig(save_path, format='png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "What percentage of Global Agriculture Production is represented by Dairy?",
            "output": "15%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "54",
        "img": "./treemap/png/54.png",
        "topic": "Agriculture and Food Production",
        "title": " Proportion of Global Agricultural Production by Crop Type",
        "csv": "Crop Type \\t Percentage \\n Cereals \\t 30 \\n Vegetables \\t 25 \\n Fruits \\t 20 \\n Dairy \\t 10 \\n Meat \\t 9 \\n Poultry \\t 4 \\n Fisheries \\t 2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the proportion of global agricultural production by crop type. Cereals represent 30% of production, followed by vegetables at 25%, and fruits at 20%. Dairy products account for 10%, meat for 9%, poultry for 4%, and fisheries make up the smallest share at 2%. The size of each section on the treemap corresponds to the percentage of global production attributed to each crop type."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Given data\ndata_str = \"\"\"Crop Type,Production Volume (%)\nCereals,30\nVegetables,25\nFruits,20\nDairy,10\nMeat,9\nPoultry,4\nFisheries,2\"\"\"\n\n# Processing data to extract labels and values\nlines = data_str.split('\\n')\ndata_labels = lines[0].split(',')[1:]\nline_labels = [line.split(',')[0] for line in lines[1:]]\ndata = [float(line.split(',')[1]) for line in lines[1:]]\n\n# Plotting the treemap\nfig, ax = plt.subplots(figsize=(12, 8))\ncmap = plt.cm.viridis\nnorm = plt.Normalize(vmin=min(data), vmax=max(data))\ncolors = [cmap(norm(value)) for value in data]\n\nsquarify.plot(sizes=data, label=line_labels, color=colors, alpha=0.7, text_kwargs={'fontsize': 9})\n\nplt.title('Proportion of Global Agricultural Production by Crop Type', fontsize=14)\nplt.axis('off')\n\n# Automatically resize the image and save\nplt.tight_layout()\nplt.savefig('./plotchart/data_300/treemap/png/54.png', format='png', dpi=300)\n\n# Clear the current image state\nplt.clf()\nplt.close()\n"
        },
        "QA": {
            "input": "What is the combined percentage of Vegetables and Fruits in the global agricultural production?",
            "output": "45%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "18",
        "img": "./treemap/png/18.png",
        "topic": "Environment and Sustainability",
        "title": " Renewable Energy Usage in Sustainable Development 2023",
        "csv": "Energy Source \\t Percentage \\n Solar \\t 30 \\n Wind \\t 25 \\n Hydropower \\t 18 \\n Geothermal \\t 12 \\n Biomass \\t 10 \\n Nuclear \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the distribution of renewable energy usage in sustainable development for 2023. Solar energy leads with 30%, followed by wind energy at 25%, and hydropower at 18%. Geothermal sources contribute 12%, biomass accounts for 10%, and nuclear energy, the least, at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Given data\nraw_data = \"\"\"\nEnergy Source,Usage (%)\nSolar,30\nWind,25\nHydropower,18\nGeothermal,12\nBiomass,10\nNuclear,5\n\"\"\"\n\n# Transform the data into variables\nlines = raw_data.strip().split('\\n')\ndata_labels = lines[0].split(',')[1:]\nline_labels = [line.split(',')[0] for line in lines[1:]]\ndata = [int(line.split(',')[1]) for line in lines[1:]]\n\n# Plotting the treemap\nplt.figure(figsize=(12, 8))\ncolors = plt.cm.Spectral(range(len(data)))\nsquarify.plot(sizes=data, label=line_labels, color=colors, alpha=0.7)\nplt.title('Renewable Energy Usage in Sustainable Development 2023')\n\n# Wrap the text if the labels are too long\nfor label in plt.gca().texts:\n    text = label.get_text()\n    if len(text) > 10:\n        label.set_text('\\n'.join(text.strip().split()))\n    label.set_fontsize(10)\n\n# Adjust the layout to fit everything, and then save the image\nplt.tight_layout()\nsave_path = './plotchart/data_300/treemap/png/18.png'\nplt.savefig(save_path, format='png', dpi=300)\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "Which renewable energy source has the smallest usage percentage according to the data?",
            "output": "Nuclear"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "289",
        "img": "./treemap/png/289.png",
        "topic": "Social Sciences and Humanities",
        "title": " Allocation of Research Funding in Social Sciences and Humanities",
        "csv": "Discipline \\t Percentage \\n Psychology \\t 18 \\n Sociology \\t 15 \\n Anthropology \\t 12 \\n Linguistics \\t 11 \\n Philosophy \\t 10 \\n History \\t 10 \\n Political Science \\t 9 \\n Geography \\t 8 \\n Cultural Studies \\t 7 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the allocation of research funding across various disciplines within the social sciences and humanities. Psychology receives the highest percentage of funding at 18%, followed by Sociology at 15%, and Anthropology at 12%. Linguistics and Philosophy both receive a slightly lower share of funding at 11% and 10% respectively, on par with History at 10%. Political Science is allocated 9%, Geography 8%, and Cultural Studies the least at 7%. This distribution highlights the varying levels of financial support allocated to each social science and humanities discipline."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport os\n\n# Given data in CSV-like format\ndata_str = \"\"\"Discipline,Research Funding (%)\nPsychology,18\nSociology,15\nAnthropology,12\nLinguistics,11\nPhilosophy,10\nHistory,10\nPolitical Science,9\nGeography,8\nCultural Studies,7\"\"\"\n\n# Split the data into lines and then into labels and values\nlines = data_str.split('\\n')\ndata_labels = lines[0].split(',')[1:]\nline_labels = [line.split(',')[0] for line in lines[1:]]\ndata = [float(line.split(',')[1]) for line in lines[1:]]\n\n# Transformed data\ndisciplines = {'labels':line_labels, 'values': data}\n\n# Create treemap figure\nfig = px.treemap(\n    disciplines, \n    path=[px.Constant('Research Funding (%)'), 'labels'], \n    values='values',\n    title='Allocation of Research Funding in Social Sciences and Humanities'\n)\n\n# Customize treemap configuration\nfig.update_traces(textinfo=\"label+value\", textfont=dict(size=12))\nfig.update_layout(margin=dict(t=50, l=25, r=25, b=25))\n\n# The path where the image will be saved\noutput_directory = \"./plotchart/demo/treemap/png/\"\noutput_filename = \"1039.png\"\noutput_path = os.path.join(output_directory, output_filename)\n\n# Ensure output directory exists\nos.makedirs(output_directory, exist_ok=True)\n\n# Save the figure\nfig.write_image(output_path)\n\n# It's not necessary to clear the image state as it is saved and the code ends here.\n# However, in a persistent environment like Jupyter you might use fig.show() to display the figure.\n"
        },
        "QA": {
            "input": "What percentage of research funding is allocated to Sociology?",
            "output": "15%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "97",
        "img": "./treemap/png/97.png",
        "topic": "Manufacturing and Production",
        "title": " Proportion of Production Volume by Manufacturing Sector",
        "csv": "Manufacturing Sector \\t Percentage \\n Consumer Goods \\t 25 \\n Automotive \\t 20 \\n Electronics \\t 15 \\n Pharmaceuticals \\t 13 \\n Machinery \\t 10 \\n Chemicals \\t 7 \\n Food Production \\t 5 \\n Textiles \\t 3 \\n Aerospace \\t 2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the proportion of production volume distributed among various sectors in the manufacturing industry. Consumer Goods lead with a 25% share, followed by Automotive at 20%, and Electronics at 15%. Pharmaceuticals account for 13%, while Machinery represents 10% of the production volume. Chemicals hold a 7% share, with Food Production at 5%, Textiles at 3%, and Aerospace at 2%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Given data\nraw_data = \"\"\"\\\nManufacturing Sector,Production Volume (%)\nConsumer Goods,25\nAutomotive,20\nElectronics,15\nPharmaceuticals,13\nMachinery,10\nChemicals,7\nFood Production,5\nTextiles,3\nAerospace,2\n\"\"\"\n\n# Parsing the raw data into the required format\nlines = raw_data.strip().split('\\n')\ndata_labels = lines[0].split(',')[1:]\nline_labels = [line.split(',')[0] for line in lines[1:]]\ndata = [float(line.split(',')[1]) for line in lines[1:]]\n\n# Create a figure\nfig = plt.figure(figsize=(12, 8))\n\n# Treemap plotting\nsquarify.plot(sizes=data, label=line_labels, alpha=0.8, pad=True)\n\n# Set the title of the figure\nplt.title('Proportion of Production Volume by Manufacturing Sector')\n\n# Improve layout to accommodate large text\nplt.axis('off')\nplt.tight_layout()\n\n# Save the figure\nsave_path = './plotchart/data_300/treemap/png/97.png'\nplt.savefig(save_path, bbox_inches='tight', dpi=300)\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "What is the combined percentage of the Consumer Goods and Automotive sectors?",
            "output": "45%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "32",
        "img": "./treemap/png/32.png",
        "topic": "Social Sciences and Humanities",
        "title": " Allocation of Research Funds in Social Sciences and Humanities",
        "csv": "Discipline \\t Percentage \\n Sociology \\t 19 \\n Psychology \\t 17 \\n Anthropology \\t 13 \\n History \\t 12 \\n Linguistics \\t 10 \\n Philosophy \\t 9 \\n Literature \\t 7 \\n Archaeology \\t 7 \\n Gender Studies \\t 6 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the allocation of research funds among various disciplines within social sciences and humanities. Sociology receives the largest share, with 19%, followed by psychology at 17%, anthropology with 13%, and history at 12%. Linguistics accounts for 10%, while philosophy has a 9% share. Literature and archaeology each receive 7%, and gender studies is allocated 6% of the funds."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Given data in a string format\ndata_str = \"\"\"Discipline,Research Funding (%)\nSociology,19\nPsychology,17\nAnthropology,13\nHistory,12\nLinguistics,10\nPhilosophy,9\nLiterature,7\nArchaeology,7\nGender Studies,6\"\"\"\n\n# Splitting the data and transforming into the required format\nlines = data_str.split('\\n')\ndata_labels = lines[0].split(',')[1:]  # The first row, excluding the first column\nline_labels = [row.split(',')[0] for row in lines[1:]]  # The labels of each row excluding the first row\ndata = [float(row.split(',')[1]) for row in lines[1:]]  # The numerical data of each row\n\n# Creating the treemap\nfig = plt.figure(figsize=(16, 9))  # Larger figsize for better display and readability\nplt.title('Allocation of Research Funds in Social Sciences and Humanities')\n\n# Create a color palette, mapped to these values\ncmap = plt.cm.Blues\nmini=min(data)\nmaxi=max(data)\nnorm = plt.Normalize(vmin=mini, vmax=maxi)\ncolors = [cmap(norm(value)) for value in data]\n\nsquarify.plot(sizes=data, label=line_labels, color=colors, alpha=0.8)\n\n# Adding padding to avoid overlapping of labels, as text length is taken care of by design\nplt.axis('off')\nplt.tight_layout()\n\n# Save the figure to the specified path\nsave_path = './plotchart/data_300/treemap/png/1009.png'\nplt.savefig(save_path, format='png', dpi=300, bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "What is the combined percentage of funding for Anthropology and Gender Studies?",
            "output": "19%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "204",
        "img": "./treemap/png/204.png",
        "topic": "Food and Beverage Industry",
        "title": " Market Share Distribution in the Food and Beverage Industry",
        "csv": "Product Category \\t Percentage \\n Snack Foods \\t  25 \\n Beverages \\t  30 \\n Packaged Meals \\t  20 \\n Dairy Products \\t  10 \\n Confectionery \\t  7 \\n Health Foods \\t  5 \\n Frozen Foods \\t  3 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the market share distribution among different product categories in the Food and Beverage Industry. Snack foods lead with a 25% share, closely followed by beverages at 30%. Packaged meals hold a 20% share, dairy products comprise 10%, and confectionery is at 7%. Health foods and frozen foods have a smaller presence with 5% and 3% shares, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Data\ndata_labels = ['Market Share (%)']\nline_labels = ['Snack Foods', 'Beverages', 'Packaged Meals', 'Dairy Products', 'Confectionery', 'Health Foods', 'Frozen Foods']\ndata = [25, 30, 20, 10, 7, 5, 3]\n\n# Colors for the squares\n# colors = plt.cm.viridis_r\n\n# Create a figure with figsize large enough to prevent content from overlapping\nplt.figure(figsize=(12, 8))\n# Create the treemap\nsquarify.plot(sizes=data, label=line_labels, alpha=0.8)\nplt.title('Market Share Distribution in the Food and Beverage Industry', fontsize=18)\n\n# Improving the layout\nplt.axis('off')\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('./plotchart/chart_simulation_final/treemap/png/204.png', format='png', dpi=300)\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "Which product category has the smallest market share according to the data?",
            "output": "Frozen Foods"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "201",
        "img": "./treemap/png/201.png",
        "topic": "Manufacturing and Production",
        "title": " Percentage of Manufacturing Output by Sector in 2023",
        "csv": "Production Area \\t Percentage \\n Automobile \\t 22 \\n Electronics \\t 18 \\n Pharmaceuticals \\t 15 \\n Machinery \\t 14 \\n Food and Beverage \\t 10 \\n Textiles \\t 8 \\n Chemicals \\t 7 \\n Aerospace \\t 6 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap provides a visual representation of the percentage of manufacturing output by sector in 2023. The largest sector is Automobiles, making up 22% of the output. Electronics follow at 18%, with Pharmaceuticals at 15%, and Machinery at 14%. The Food and Beverage sector accounts for 10%, Textiles for 8%, Chemicals for 7%, and Aerospace for 6% of the manufacturing output."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Data given in the question\nraw_data = \"\"\"Production Area,Percentage of Total Output (%)\nAutomobile,22\nElectronics,18\nPharmaceuticals,15\nMachinery,14\nFood and Beverage,10\nTextiles,8\nChemicals,7\nAerospace,6\"\"\"\n\n# Split the data into lines and then into pairs\nlines = raw_data.strip().split('\\n')\ndata_tuples = [line.split(',') for line in lines[1:]]  # skip the header\n\n# Extract labels for sectors and their corresponding data values\nline_labels = [item[0] for item in data_tuples]\ndata = [float(item[1]) for item in data_tuples]\ndata_labels = [f'{l} ({v}%)' for l, v in zip(line_labels, data)]\n\n# Set up a large figure to prevent content from being cropped\nplt.figure(figsize=(12, 8))\n\n# Create a color palette\ncolor_palette = plt.cm.tab20.colors  # using tab20 colormap for coloring\n\n# Create the treemap\nsquarify.plot(sizes=data, label=data_labels, color=color_palette, alpha=0.7)\n\n# Set the title of the figure\nplt.title('Percentage of Manufacturing Output by Sector in 2023')\n\n# Ensure content fits within the figure window\nplt.tight_layout()\n\n# Make sure text labels are easy to read and don't overlap\nplt.rc('font', size=9)\n\n# Set a larger figure size\nplt.gcf().set_size_inches(16, 9)\n\n# Save the plot to the specified file path\nplt.savefig('./plotchart/data_300/treemap/png/1012.png', format='png', dpi=300)\n\n# Clear the current figure state after saving to free memory\nplt.clf()\n"
        },
        "QA": {
            "input": "What is the percentage of the Electronics sector in manufacturing output?",
            "output": "18%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "146",
        "img": "./treemap/png/146.png",
        "topic": "Retail and E-commerce",
        "title": " E-commerce Sales Distribution Across Product Categories in 2023",
        "csv": "Product Category \\t Percentage \\n Electronics \\t 25 \\n Clothing and Apparel \\t 20 \\n Home and Garden \\t 15 \\n Health and Beauty \\t 15 \\n Books and Media \\t 10 \\n Toys and Games \\t 5 \\n Food and Beverage \\t 5 \\n Sports and Outdoor \\t 3 \\n Automotive \\t 2 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap depicts the e-commerce sales distribution across various product categories in 2023. Electronics lead with 25%, followed by Clothing and Apparel at 20%. Home and Garden, along with Health and Beauty, each represent 15%. Books and Media account for 10%, while Toys and Games, as well as Food and Beverage, both hold 5%. Sports and Outdoor and Automotive categories have smaller shares of 3% and 2%, respectively."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport pandas as pd\n\n# Data given\ndata_str = \"\"\"Product Category,Online Sales (%)\nElectronics,25\nClothing and Apparel,20\nHome and Garden,15\nHealth and Beauty,15\nBooks and Media,10\nToys and Games,5\nFood and Beverage,5\nSports and Outdoor,3\nAutomotive,2\"\"\"\n\n# Parse data_str into a DataFrame\ndata_lines = data_str.split('\\n')\ndata_labels = data_lines[0].split(',')\nrows = [line.split(',') for line in data_lines[1:]]\nline_labels = [row[0] for row in rows]\ndata = [row[1] for row in rows]\n\n# Convert data to DataFrame for Plotly\ndf = pd.DataFrame({\n    data_labels[0]: line_labels,\n    data_labels[1]: list(map(int, data))\n})\n\n# Plotting the treemap using Plotly\nfig = px.treemap(df, path=[px.Constant('E-commerce Sales Distribution'), data_labels[0]],\n                 values=data_labels[1],\n                 title='E-commerce Sales Distribution Across Product Categories in 2023')\n\nfig.update_traces(textinfo='label+percent entry')\nfig.update_layout(margin=dict(t=50, l=25, r=25, b=25))\n\n# Save figure to the specific path\nfig.write_image(\"./plotchart/data_300/treemap/png/146.png\")\n\n# If necessary, clear the figure after saving (not always required with Plotly)\nfig.data = []\n"
        },
        "QA": {
            "input": "What is the combined percentage for Health and Beauty, and Books and Media categories?",
            "output": "25%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "247",
        "img": "./treemap/png/247.png",
        "topic": "Science and Engineering",
        "title": " Allocation of Research Funding by Field in Science and Engineering",
        "csv": "Field \\t Percentage \\n Biology \\t 18 \\n Computer Science \\t 17 \\n Engineering \\t 16 \\n Physics \\t 15 \\n Chemistry \\t 12 \\n Earth Sciences \\t 10 \\n Mathematics \\t 7 \\n Environmental Science \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the allocation of research funding by field in science and engineering based on percentage distribution. Biology receives the largest allocation at 18%, closely followed by Computer Science at 17%. Engineering secures 16%, Physics is at 15%, and Chemistry receives 12% of the funding. Earth Sciences and Mathematics are allocated 10% and 7% respectively, while Environmental Science has the smallest share at 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import plotly.express as px\nimport os\n\n# Given data\ndata_labels = [\"Research Funding (%)\"]\nline_labels = [\"Biology\", \"Computer Science\", \"Engineering\", \"Physics\", \"Chemistry\", \"Earth Sciences\", \"Mathematics\", \"Environmental Science\"]\ndata = [18, 17, 16, 15, 12, 10, 7, 5]\n\n# Transform data into a dictionary for creating a DataFrame for use in Plotly\ndata_dict = {\n    'Field': line_labels,\n    'Research Funding (%)': data\n}\n\n# Create a DataFrame\ndf = pd.DataFrame(data_dict)\n\n# Creating the treemap\nfig = px.treemap(df, path=['Field'], values='Research Funding (%)',\n                 title='Allocation of Research Funding by Field in Science and Engineering')\n\n# Update layout for clarity\nfig.update_layout(margin=dict(t=50, l=25, r=25, b=25))\n\n# Ensure long labels are clear and not stacked\nfig.update_traces(textinfo=\"label+percent entry\", textfont_size=18, textposition='middle center')\n\n# Absolute path to the folder where the image will be saved\nsave_path = './plotchart/data_300/treemap/png/'\nos.makedirs(save_path, exist_ok=True)  # Create directory if it does not exist\n\n# Save the figure\nfig.write_image(os.path.join(save_path, \"247.png\"))\n\n# Clear the current image state if using a system that requires it (e.g., matplotlib)\n# Plotly does not require clearing the state\n"
        },
        "QA": {
            "input": "What is the percentage difference in research funding between Biology and Physics?",
            "output": "3%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "135",
        "img": "./treemap/png/135.png",
        "topic": "Education and Academics",
        "title": " Enrollment Rates Across Various Educational Levels",
        "csv": "Education Level \\t Percentage \\n Preschool \\t 5 \\n Elementary \\t 25 \\n Middle School \\t 20 \\n High School \\t 30 \\n Undergraduate \\t 15 \\n Postgraduate \\t 5 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the enrollment rates across various educational levels. Preschool enrollment stands at 5%, elementary at 25%, middle school at 20%, high school at 30%, undergraduate at 15%, and postgraduate education has an enrollment rate of 5%."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "import matplotlib.pyplot as plt\nimport squarify\n\n# Raw data\nraw_data = \"\"\"Education Level,Enrollment Rate (%)\nPreschool,5\nElementary,25\nMiddle School,20\nHigh School,30\nUndergraduate,15\nPostgraduate,5\"\"\"\n\n# Parse the raw data\nlines = raw_data.split(\"\\n\")\ndata_labels = lines[0].split(\",\")[1:]\nline_labels = [line.split(\",\")[0] for line in lines[1:]]\ndata = [int(line.split(\",\")[1]) for line in lines[1:]]\n\n# Plot the treemap\nplt.figure(figsize=(12, 8))\nsquarify.plot(sizes=data, label=line_labels, alpha=0.8, text_kwargs={'wrap': True})\nplt.title('Enrollment Rates Across Various Educational Levels')\nplt.axis('off')\n\n# Automatically resize the image\nplt.tight_layout()\n\n# Save the image\nsave_path = './plotchart/data_300/treemap/png/135.png'\nplt.savefig(save_path, bbox_inches='tight', dpi=300)\n\n# Clear the current image state\nplt.clf()\n"
        },
        "QA": {
            "input": "What percentage of students are enrolled in High School education?",
            "output": "30%"
        }
    },
    {
        "chart_type": "treemap",
        "imgname": "63",
        "img": "./treemap/png/63.png",
        "topic": "Environment and Sustainability",
        "title": " Allocation of Resources Towards Environmental and Sustainability Initiatives",
        "csv": "Environmental Aspect \\t Percentage \\n Renewable Energy \\t 30 \\n Conservation Efforts \\t 25 \\n Pollution Control \\t 20 \\n Sustainable Agriculture \\t 15 \\n Eco-friendly Transport \\t 10 \\n ",
        "description": {
            "input": "Generate a descriptive text according to the chart image.",
            "output": "The treemap illustrates the allocation of resources towards various environmental and sustainability initiatives. 30% is dedicated to Renewable Energy, which appears to be the major focus area. Conservation Efforts follow with 25%, and Pollution Control with 20%. Sustainable Agriculture initiatives are allocated 15%, and the smallest percentage, 10%, is attributed to Eco-friendly Transport."
        },
        "redrawing": {
            "input": "Redraw the chart image using Python code.",
            "output": "# Import necessary libraries\nimport plotly.express as px\nimport pandas as pd\n\n# Parse the provided data\nraw_data = \"\"\"Environmental Aspect,Resource Allocation (%)\nRenewable Energy,30\nConservation Efforts,25\nPollution Control,20\nSustainable Agriculture,15\nEco-friendly Transport,10\"\"\"\n\n# Split the data into lines and process it into a DataFrame\nlines = raw_data.split('\\n')\ndata_labels = lines[0].split(',')\nline_labels = []\nvalues = []\n\nfor line in lines[1:]:\n    parts = line.split(',')\n    line_labels.append(parts[0])\n    values.append(int(parts[1]))\n\n# Create a DataFrame\ndf = pd.DataFrame({\n    data_labels[0]: line_labels,\n    data_labels[1]: values\n})\n\n# Use Plotly to create a treemap\nfig = px.treemap(df, path=[data_labels[0]], values=data_labels[1],\n                 title='Allocation of Resources Towards Environmental and Sustainability Initiatives')\n\n# Update layout for better readability\nfig.update_layout(\n    treemapcolorway=[\"#636EFA\", \"#EF553B\", \"#00CC96\", \"#AB63FA\", \"#FFA15A\"],\n    margin=dict(t=50, l=25, r=25, b=25)\n)\n\n# Save the figure\nfig.write_image(\"./plotchart/data_300/treemap/png/63.png\")\n\n# Clear the current image state by closing the figure if you are using matplotlib (not needed for plotly)\n# plt.close(fig) - This line would be required if we were using matplotlib to handle multiple plots\n"
        },
        "QA": {
            "input": "Which environmental aspect has the smallest allocation of resources according to the data?",
            "output": "Eco-friendly Transport"
        }
    }
]